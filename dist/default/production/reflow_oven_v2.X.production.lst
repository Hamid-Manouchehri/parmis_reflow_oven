

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Fri Jul 21 14:02:00 2023

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og9 
     1                           	processor	16F1829
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK3,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK4,global,class=CODE,delta=2,noexec
     6                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     7                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     8                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
     9                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
    10                           	psect	stringtext5,global,class=STRCODE,delta=2,noexec
    11                           	psect	stringtext6,global,class=STRCODE,delta=2,noexec
    12                           	psect	stringtext7,global,class=STRCODE,delta=2,noexec
    13                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1,noexec
    14                           	psect	nvBANK4,global,class=BANK4,space=1,delta=1,noexec
    15                           	psect	stringtext8,global,class=STRCODE,delta=2,noexec
    16                           	psect	stringtext9,global,class=STRCODE,delta=2,noexec
    17                           	psect	stringtext10,global,class=STRCODE,delta=2,noexec
    18                           	psect	stringtext11,global,class=STRCODE,delta=2,noexec
    19                           	psect	stringtext12,global,class=STRCODE,delta=2,noexec
    20                           	psect	stringtext13,global,class=STRCODE,delta=2,noexec
    21                           	psect	stringtext14,global,class=STRCODE,delta=2,noexec
    22                           	psect	cinit,global,class=CODE,merge=1,delta=2
    23                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    24                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,noexec
    25                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,noexec
    26                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1,noexec
    27                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1,noexec
    28                           	psect	inittext,global,class=CODE,delta=2
    29                           	psect	clrtext,global,class=CODE,delta=2
    30                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    31                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    32                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    33                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    34                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    35                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    36                           	psect	text1,local,class=CODE,merge=1,delta=2,group=3
    37                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text4,local,class=CODE,merge=1,delta=2,group=3
    40                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	text6,local,class=CODE,merge=1,delta=2,group=3
    42                           	psect	text7,local,class=CODE,merge=1,delta=2,group=3
    43                           	psect	text8,local,class=CODE,merge=1,delta=2,group=3
    44                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text10,local,class=CODE,merge=1,delta=2,group=3
    46                           	psect	text11,local,class=CODE,merge=1,delta=2,group=3
    47                           	psect	text12,local,class=CODE,merge=1,delta=2,group=3
    48                           	psect	text13,local,class=CODE,merge=1,delta=2,group=3
    49                           	psect	text14,local,class=CODE,merge=1,delta=2,group=3
    50                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    51                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    52                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    53                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text20,local,class=CODE,merge=1,delta=2,group=3
    56                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text22,local,class=CODE,merge=1,delta=2
    58                           	psect	text23,local,class=CODE,merge=1,delta=2
    59                           	psect	text24,local,class=CODE,merge=1,delta=2
    60                           	psect	text25,local,class=CODE,merge=1,delta=2
    61                           	psect	text26,local,class=CODE,merge=1,delta=2
    62                           	psect	text27,local,class=CODE,merge=1,delta=2
    63                           	psect	text28,local,class=CODE,merge=1,delta=2
    64                           	psect	text29,local,class=CODE,merge=1,delta=2
    65                           	psect	text30,local,class=CODE,merge=1,delta=2
    66                           	psect	text31,local,class=CODE,merge=1,delta=2
    67                           	psect	text32,local,class=CODE,merge=1,delta=2
    68                           	psect	text33,local,class=CODE,merge=1,delta=2
    69                           	psect	text34,local,class=CODE,merge=1,delta=2
    70                           	psect	text35,local,class=CODE,merge=1,delta=2
    71                           	psect	text36,local,class=CODE,merge=1,delta=2
    72                           	psect	text37,local,class=CODE,merge=1,delta=2
    73                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text39,local,class=CODE,merge=1,delta=2
    75                           	psect	text40,local,class=CODE,merge=1,delta=2,group=2
    76                           	psect	text41,local,class=CODE,merge=1,delta=2
    77                           	psect	text42,local,class=CODE,merge=1,delta=2,group=3
    78                           	psect	text43,local,class=CODE,merge=1,delta=2
    79                           	psect	text44,local,class=CODE,merge=1,delta=2
    80                           	psect	text45,local,class=CODE,merge=1,delta=2
    81                           	psect	text46,local,class=CODE,merge=1,delta=2
    82                           	psect	text47,local,class=CODE,merge=1,delta=2
    83                           	psect	text48,local,class=CODE,merge=1,delta=2
    84                           	psect	text49,local,class=CODE,merge=1,delta=2
    85                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    86                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    87                           	psect	text52,local,class=CODE,merge=1,delta=2
    88                           	psect	text53,local,class=CODE,merge=1,delta=2
    89                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    90                           	psect	text55,local,class=CODE,merge=1,delta=2,group=3
    91                           	psect	text56,local,class=CODE,merge=1,delta=2,group=3
    92                           	psect	text57,local,class=CODE,merge=1,delta=2,group=2
    93                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    95                           	psect	text60,local,class=CODE,merge=1,delta=2,group=2
    96                           	psect	text61,local,class=CODE,merge=1,delta=2
    97                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    98                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    99                           	psect	text64,local,class=CODE,merge=1,inline,delta=2
   100                           	psect	text65,local,class=CODE,merge=1,inline,delta=2
   101                           	psect	text66,local,class=CODE,merge=1,inline,delta=2
   102                           	psect	text67,local,class=CODE,merge=1,delta=2,group=2
   103                           	psect	text68,local,class=CODE,merge=1,delta=2,group=2
   104                           	psect	text69,local,class=CODE,merge=1,delta=2,group=2
   105                           	psect	text70,local,class=CODE,merge=1,delta=2,group=2
   106                           	psect	text71,local,class=CODE,merge=1,delta=2,group=2
   107                           	psect	text72,local,class=CODE,merge=1,delta=2,group=2
   108                           	psect	text73,local,class=CODE,merge=1,delta=2
   109                           	psect	intentry,global,class=CODE,delta=2
   110                           	psect	text75,local,class=CODE,merge=1,delta=2
   111                           	psect	text76,local,class=CODE,merge=1,delta=2
   112                           	psect	text77,local,class=CODE,merge=1,delta=2
   113                           	psect	text78,local,class=CODE,merge=1,delta=2
   114                           	psect	text79,local,class=CODE,merge=1,delta=2
   115                           	psect	text80,local,class=CODE,merge=1,delta=2
   116                           	psect	text81,local,class=CODE,merge=1,delta=2
   117                           	psect	text82,local,class=CODE,merge=1,delta=2
   118                           	psect	text83,local,class=CODE,merge=1,delta=2
   119                           	psect	text84,local,class=CODE,merge=1,delta=2
   120                           	psect	text85,local,class=CODE,merge=1,delta=2
   121                           	psect	text86,local,class=CODE,merge=1,delta=2
   122                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
   123                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
   124                           	dabs	1,0x7E,2
   125  0000                     
   126                           ; Version 2.40
   127                           ; Generated 17/11/2021 GMT
   128                           ; 
   129                           ; Copyright © 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
   130                           ; All rights reserved.
   131                           ; 
   132                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   133                           ; 
   134                           ; Redistribution and use in source and binary forms, with or without modification, are
   135                           ; permitted provided that the following conditions are met:
   136                           ; 
   137                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   138                           ;        conditions and the following disclaimer.
   139                           ; 
   140                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   141                           ;        of conditions and the following disclaimer in the documentation and/or other
   142                           ;        materials provided with the distribution. Publication is not required when
   143                           ;        this file is used in an embedded application.
   144                           ; 
   145                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   146                           ;        software without specific prior written permission.
   147                           ; 
   148                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   149                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   150                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   151                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   152                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   153                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   154                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   155                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   156                           ; 
   157                           ; 
   158                           ; Code-generator required, PIC16F1829 Definitions
   159                           ; 
   160                           ; SFR Addresses
   161  0000                     	;# 
   162  0001                     	;# 
   163  0002                     	;# 
   164  0003                     	;# 
   165  0004                     	;# 
   166  0005                     	;# 
   167  0006                     	;# 
   168  0007                     	;# 
   169  0008                     	;# 
   170  0009                     	;# 
   171  000A                     	;# 
   172  000B                     	;# 
   173  000C                     	;# 
   174  000D                     	;# 
   175  000E                     	;# 
   176  0011                     	;# 
   177  0012                     	;# 
   178  0013                     	;# 
   179  0014                     	;# 
   180  0015                     	;# 
   181  0016                     	;# 
   182  0016                     	;# 
   183  0017                     	;# 
   184  0018                     	;# 
   185  0019                     	;# 
   186  001A                     	;# 
   187  001B                     	;# 
   188  001C                     	;# 
   189  001E                     	;# 
   190  001F                     	;# 
   191  008C                     	;# 
   192  008D                     	;# 
   193  008E                     	;# 
   194  0091                     	;# 
   195  0092                     	;# 
   196  0093                     	;# 
   197  0094                     	;# 
   198  0095                     	;# 
   199  0096                     	;# 
   200  0097                     	;# 
   201  0098                     	;# 
   202  0099                     	;# 
   203  009A                     	;# 
   204  009B                     	;# 
   205  009B                     	;# 
   206  009C                     	;# 
   207  009D                     	;# 
   208  009E                     	;# 
   209  010C                     	;# 
   210  010D                     	;# 
   211  010E                     	;# 
   212  0111                     	;# 
   213  0112                     	;# 
   214  0113                     	;# 
   215  0114                     	;# 
   216  0115                     	;# 
   217  0116                     	;# 
   218  0117                     	;# 
   219  0118                     	;# 
   220  0119                     	;# 
   221  011A                     	;# 
   222  011B                     	;# 
   223  011D                     	;# 
   224  011E                     	;# 
   225  018C                     	;# 
   226  018D                     	;# 
   227  018E                     	;# 
   228  0191                     	;# 
   229  0191                     	;# 
   230  0192                     	;# 
   231  0193                     	;# 
   232  0193                     	;# 
   233  0193                     	;# 
   234  0194                     	;# 
   235  0195                     	;# 
   236  0196                     	;# 
   237  0199                     	;# 
   238  019A                     	;# 
   239  019B                     	;# 
   240  019B                     	;# 
   241  019C                     	;# 
   242  019D                     	;# 
   243  019E                     	;# 
   244  019F                     	;# 
   245  020C                     	;# 
   246  020D                     	;# 
   247  020E                     	;# 
   248  0211                     	;# 
   249  0211                     	;# 
   250  0212                     	;# 
   251  0212                     	;# 
   252  0213                     	;# 
   253  0213                     	;# 
   254  0214                     	;# 
   255  0214                     	;# 
   256  0215                     	;# 
   257  0215                     	;# 
   258  0215                     	;# 
   259  0216                     	;# 
   260  0216                     	;# 
   261  0217                     	;# 
   262  0217                     	;# 
   263  0219                     	;# 
   264  021A                     	;# 
   265  021B                     	;# 
   266  021C                     	;# 
   267  021D                     	;# 
   268  021E                     	;# 
   269  021F                     	;# 
   270  0291                     	;# 
   271  0291                     	;# 
   272  0292                     	;# 
   273  0293                     	;# 
   274  0294                     	;# 
   275  0295                     	;# 
   276  0295                     	;# 
   277  0296                     	;# 
   278  0298                     	;# 
   279  0298                     	;# 
   280  0299                     	;# 
   281  029A                     	;# 
   282  029B                     	;# 
   283  029C                     	;# 
   284  029D                     	;# 
   285  029E                     	;# 
   286  0311                     	;# 
   287  0311                     	;# 
   288  0312                     	;# 
   289  0313                     	;# 
   290  0318                     	;# 
   291  0318                     	;# 
   292  0319                     	;# 
   293  031A                     	;# 
   294  038C                     	;# 
   295  038D                     	;# 
   296  038E                     	;# 
   297  0391                     	;# 
   298  0392                     	;# 
   299  0393                     	;# 
   300  0394                     	;# 
   301  0395                     	;# 
   302  0396                     	;# 
   303  039A                     	;# 
   304  039C                     	;# 
   305  039D                     	;# 
   306  039E                     	;# 
   307  039F                     	;# 
   308  0415                     	;# 
   309  0416                     	;# 
   310  0417                     	;# 
   311  041C                     	;# 
   312  041D                     	;# 
   313  041E                     	;# 
   314  0FE4                     	;# 
   315  0FE5                     	;# 
   316  0FE6                     	;# 
   317  0FE7                     	;# 
   318  0FE8                     	;# 
   319  0FE9                     	;# 
   320  0FEA                     	;# 
   321  0FEB                     	;# 
   322  0FED                     	;# 
   323  0FEE                     	;# 
   324  0FEF                     	;# 
   325  0000                     	;# 
   326  0001                     	;# 
   327  0002                     	;# 
   328  0003                     	;# 
   329  0004                     	;# 
   330  0005                     	;# 
   331  0006                     	;# 
   332  0007                     	;# 
   333  0008                     	;# 
   334  0009                     	;# 
   335  000A                     	;# 
   336  000B                     	;# 
   337  000C                     	;# 
   338  000D                     	;# 
   339  000E                     	;# 
   340  0011                     	;# 
   341  0012                     	;# 
   342  0013                     	;# 
   343  0014                     	;# 
   344  0015                     	;# 
   345  0016                     	;# 
   346  0016                     	;# 
   347  0017                     	;# 
   348  0018                     	;# 
   349  0019                     	;# 
   350  001A                     	;# 
   351  001B                     	;# 
   352  001C                     	;# 
   353  001E                     	;# 
   354  001F                     	;# 
   355  008C                     	;# 
   356  008D                     	;# 
   357  008E                     	;# 
   358  0091                     	;# 
   359  0092                     	;# 
   360  0093                     	;# 
   361  0094                     	;# 
   362  0095                     	;# 
   363  0096                     	;# 
   364  0097                     	;# 
   365  0098                     	;# 
   366  0099                     	;# 
   367  009A                     	;# 
   368  009B                     	;# 
   369  009B                     	;# 
   370  009C                     	;# 
   371  009D                     	;# 
   372  009E                     	;# 
   373  010C                     	;# 
   374  010D                     	;# 
   375  010E                     	;# 
   376  0111                     	;# 
   377  0112                     	;# 
   378  0113                     	;# 
   379  0114                     	;# 
   380  0115                     	;# 
   381  0116                     	;# 
   382  0117                     	;# 
   383  0118                     	;# 
   384  0119                     	;# 
   385  011A                     	;# 
   386  011B                     	;# 
   387  011D                     	;# 
   388  011E                     	;# 
   389  018C                     	;# 
   390  018D                     	;# 
   391  018E                     	;# 
   392  0191                     	;# 
   393  0191                     	;# 
   394  0192                     	;# 
   395  0193                     	;# 
   396  0193                     	;# 
   397  0193                     	;# 
   398  0194                     	;# 
   399  0195                     	;# 
   400  0196                     	;# 
   401  0199                     	;# 
   402  019A                     	;# 
   403  019B                     	;# 
   404  019B                     	;# 
   405  019C                     	;# 
   406  019D                     	;# 
   407  019E                     	;# 
   408  019F                     	;# 
   409  020C                     	;# 
   410  020D                     	;# 
   411  020E                     	;# 
   412  0211                     	;# 
   413  0211                     	;# 
   414  0212                     	;# 
   415  0212                     	;# 
   416  0213                     	;# 
   417  0213                     	;# 
   418  0214                     	;# 
   419  0214                     	;# 
   420  0215                     	;# 
   421  0215                     	;# 
   422  0215                     	;# 
   423  0216                     	;# 
   424  0216                     	;# 
   425  0217                     	;# 
   426  0217                     	;# 
   427  0219                     	;# 
   428  021A                     	;# 
   429  021B                     	;# 
   430  021C                     	;# 
   431  021D                     	;# 
   432  021E                     	;# 
   433  021F                     	;# 
   434  0291                     	;# 
   435  0291                     	;# 
   436  0292                     	;# 
   437  0293                     	;# 
   438  0294                     	;# 
   439  0295                     	;# 
   440  0295                     	;# 
   441  0296                     	;# 
   442  0298                     	;# 
   443  0298                     	;# 
   444  0299                     	;# 
   445  029A                     	;# 
   446  029B                     	;# 
   447  029C                     	;# 
   448  029D                     	;# 
   449  029E                     	;# 
   450  0311                     	;# 
   451  0311                     	;# 
   452  0312                     	;# 
   453  0313                     	;# 
   454  0318                     	;# 
   455  0318                     	;# 
   456  0319                     	;# 
   457  031A                     	;# 
   458  038C                     	;# 
   459  038D                     	;# 
   460  038E                     	;# 
   461  0391                     	;# 
   462  0392                     	;# 
   463  0393                     	;# 
   464  0394                     	;# 
   465  0395                     	;# 
   466  0396                     	;# 
   467  039A                     	;# 
   468  039C                     	;# 
   469  039D                     	;# 
   470  039E                     	;# 
   471  039F                     	;# 
   472  0415                     	;# 
   473  0416                     	;# 
   474  0417                     	;# 
   475  041C                     	;# 
   476  041D                     	;# 
   477  041E                     	;# 
   478  0FE4                     	;# 
   479  0FE5                     	;# 
   480  0FE6                     	;# 
   481  0FE7                     	;# 
   482  0FE8                     	;# 
   483  0FE9                     	;# 
   484  0FEA                     	;# 
   485  0FEB                     	;# 
   486  0FED                     	;# 
   487  0FEE                     	;# 
   488  0FEF                     	;# 
   489  0000                     	;# 
   490  0001                     	;# 
   491  0002                     	;# 
   492  0003                     	;# 
   493  0004                     	;# 
   494  0005                     	;# 
   495  0006                     	;# 
   496  0007                     	;# 
   497  0008                     	;# 
   498  0009                     	;# 
   499  000A                     	;# 
   500  000B                     	;# 
   501  000C                     	;# 
   502  000D                     	;# 
   503  000E                     	;# 
   504  0011                     	;# 
   505  0012                     	;# 
   506  0013                     	;# 
   507  0014                     	;# 
   508  0015                     	;# 
   509  0016                     	;# 
   510  0016                     	;# 
   511  0017                     	;# 
   512  0018                     	;# 
   513  0019                     	;# 
   514  001A                     	;# 
   515  001B                     	;# 
   516  001C                     	;# 
   517  001E                     	;# 
   518  001F                     	;# 
   519  008C                     	;# 
   520  008D                     	;# 
   521  008E                     	;# 
   522  0091                     	;# 
   523  0092                     	;# 
   524  0093                     	;# 
   525  0094                     	;# 
   526  0095                     	;# 
   527  0096                     	;# 
   528  0097                     	;# 
   529  0098                     	;# 
   530  0099                     	;# 
   531  009A                     	;# 
   532  009B                     	;# 
   533  009B                     	;# 
   534  009C                     	;# 
   535  009D                     	;# 
   536  009E                     	;# 
   537  010C                     	;# 
   538  010D                     	;# 
   539  010E                     	;# 
   540  0111                     	;# 
   541  0112                     	;# 
   542  0113                     	;# 
   543  0114                     	;# 
   544  0115                     	;# 
   545  0116                     	;# 
   546  0117                     	;# 
   547  0118                     	;# 
   548  0119                     	;# 
   549  011A                     	;# 
   550  011B                     	;# 
   551  011D                     	;# 
   552  011E                     	;# 
   553  018C                     	;# 
   554  018D                     	;# 
   555  018E                     	;# 
   556  0191                     	;# 
   557  0191                     	;# 
   558  0192                     	;# 
   559  0193                     	;# 
   560  0193                     	;# 
   561  0193                     	;# 
   562  0194                     	;# 
   563  0195                     	;# 
   564  0196                     	;# 
   565  0199                     	;# 
   566  019A                     	;# 
   567  019B                     	;# 
   568  019B                     	;# 
   569  019C                     	;# 
   570  019D                     	;# 
   571  019E                     	;# 
   572  019F                     	;# 
   573  020C                     	;# 
   574  020D                     	;# 
   575  020E                     	;# 
   576  0211                     	;# 
   577  0211                     	;# 
   578  0212                     	;# 
   579  0212                     	;# 
   580  0213                     	;# 
   581  0213                     	;# 
   582  0214                     	;# 
   583  0214                     	;# 
   584  0215                     	;# 
   585  0215                     	;# 
   586  0215                     	;# 
   587  0216                     	;# 
   588  0216                     	;# 
   589  0217                     	;# 
   590  0217                     	;# 
   591  0219                     	;# 
   592  021A                     	;# 
   593  021B                     	;# 
   594  021C                     	;# 
   595  021D                     	;# 
   596  021E                     	;# 
   597  021F                     	;# 
   598  0291                     	;# 
   599  0291                     	;# 
   600  0292                     	;# 
   601  0293                     	;# 
   602  0294                     	;# 
   603  0295                     	;# 
   604  0295                     	;# 
   605  0296                     	;# 
   606  0298                     	;# 
   607  0298                     	;# 
   608  0299                     	;# 
   609  029A                     	;# 
   610  029B                     	;# 
   611  029C                     	;# 
   612  029D                     	;# 
   613  029E                     	;# 
   614  0311                     	;# 
   615  0311                     	;# 
   616  0312                     	;# 
   617  0313                     	;# 
   618  0318                     	;# 
   619  0318                     	;# 
   620  0319                     	;# 
   621  031A                     	;# 
   622  038C                     	;# 
   623  038D                     	;# 
   624  038E                     	;# 
   625  0391                     	;# 
   626  0392                     	;# 
   627  0393                     	;# 
   628  0394                     	;# 
   629  0395                     	;# 
   630  0396                     	;# 
   631  039A                     	;# 
   632  039C                     	;# 
   633  039D                     	;# 
   634  039E                     	;# 
   635  039F                     	;# 
   636  0415                     	;# 
   637  0416                     	;# 
   638  0417                     	;# 
   639  041C                     	;# 
   640  041D                     	;# 
   641  041E                     	;# 
   642  0FE4                     	;# 
   643  0FE5                     	;# 
   644  0FE6                     	;# 
   645  0FE7                     	;# 
   646  0FE8                     	;# 
   647  0FE9                     	;# 
   648  0FEA                     	;# 
   649  0FEB                     	;# 
   650  0FED                     	;# 
   651  0FEE                     	;# 
   652  0FEF                     	;# 
   653  0000                     	;# 
   654  0001                     	;# 
   655  0002                     	;# 
   656  0003                     	;# 
   657  0004                     	;# 
   658  0005                     	;# 
   659  0006                     	;# 
   660  0007                     	;# 
   661  0008                     	;# 
   662  0009                     	;# 
   663  000A                     	;# 
   664  000B                     	;# 
   665  000C                     	;# 
   666  000D                     	;# 
   667  000E                     	;# 
   668  0011                     	;# 
   669  0012                     	;# 
   670  0013                     	;# 
   671  0014                     	;# 
   672  0015                     	;# 
   673  0016                     	;# 
   674  0016                     	;# 
   675  0017                     	;# 
   676  0018                     	;# 
   677  0019                     	;# 
   678  001A                     	;# 
   679  001B                     	;# 
   680  001C                     	;# 
   681  001E                     	;# 
   682  001F                     	;# 
   683  008C                     	;# 
   684  008D                     	;# 
   685  008E                     	;# 
   686  0091                     	;# 
   687  0092                     	;# 
   688  0093                     	;# 
   689  0094                     	;# 
   690  0095                     	;# 
   691  0096                     	;# 
   692  0097                     	;# 
   693  0098                     	;# 
   694  0099                     	;# 
   695  009A                     	;# 
   696  009B                     	;# 
   697  009B                     	;# 
   698  009C                     	;# 
   699  009D                     	;# 
   700  009E                     	;# 
   701  010C                     	;# 
   702  010D                     	;# 
   703  010E                     	;# 
   704  0111                     	;# 
   705  0112                     	;# 
   706  0113                     	;# 
   707  0114                     	;# 
   708  0115                     	;# 
   709  0116                     	;# 
   710  0117                     	;# 
   711  0118                     	;# 
   712  0119                     	;# 
   713  011A                     	;# 
   714  011B                     	;# 
   715  011D                     	;# 
   716  011E                     	;# 
   717  018C                     	;# 
   718  018D                     	;# 
   719  018E                     	;# 
   720  0191                     	;# 
   721  0191                     	;# 
   722  0192                     	;# 
   723  0193                     	;# 
   724  0193                     	;# 
   725  0193                     	;# 
   726  0194                     	;# 
   727  0195                     	;# 
   728  0196                     	;# 
   729  0199                     	;# 
   730  019A                     	;# 
   731  019B                     	;# 
   732  019B                     	;# 
   733  019C                     	;# 
   734  019D                     	;# 
   735  019E                     	;# 
   736  019F                     	;# 
   737  020C                     	;# 
   738  020D                     	;# 
   739  020E                     	;# 
   740  0211                     	;# 
   741  0211                     	;# 
   742  0212                     	;# 
   743  0212                     	;# 
   744  0213                     	;# 
   745  0213                     	;# 
   746  0214                     	;# 
   747  0214                     	;# 
   748  0215                     	;# 
   749  0215                     	;# 
   750  0215                     	;# 
   751  0216                     	;# 
   752  0216                     	;# 
   753  0217                     	;# 
   754  0217                     	;# 
   755  0219                     	;# 
   756  021A                     	;# 
   757  021B                     	;# 
   758  021C                     	;# 
   759  021D                     	;# 
   760  021E                     	;# 
   761  021F                     	;# 
   762  0291                     	;# 
   763  0291                     	;# 
   764  0292                     	;# 
   765  0293                     	;# 
   766  0294                     	;# 
   767  0295                     	;# 
   768  0295                     	;# 
   769  0296                     	;# 
   770  0298                     	;# 
   771  0298                     	;# 
   772  0299                     	;# 
   773  029A                     	;# 
   774  029B                     	;# 
   775  029C                     	;# 
   776  029D                     	;# 
   777  029E                     	;# 
   778  0311                     	;# 
   779  0311                     	;# 
   780  0312                     	;# 
   781  0313                     	;# 
   782  0318                     	;# 
   783  0318                     	;# 
   784  0319                     	;# 
   785  031A                     	;# 
   786  038C                     	;# 
   787  038D                     	;# 
   788  038E                     	;# 
   789  0391                     	;# 
   790  0392                     	;# 
   791  0393                     	;# 
   792  0394                     	;# 
   793  0395                     	;# 
   794  0396                     	;# 
   795  039A                     	;# 
   796  039C                     	;# 
   797  039D                     	;# 
   798  039E                     	;# 
   799  039F                     	;# 
   800  0415                     	;# 
   801  0416                     	;# 
   802  0417                     	;# 
   803  041C                     	;# 
   804  041D                     	;# 
   805  041E                     	;# 
   806  0FE4                     	;# 
   807  0FE5                     	;# 
   808  0FE6                     	;# 
   809  0FE7                     	;# 
   810  0FE8                     	;# 
   811  0FE9                     	;# 
   812  0FEA                     	;# 
   813  0FEB                     	;# 
   814  0FED                     	;# 
   815  0FEE                     	;# 
   816  0FEF                     	;# 
   817  0000                     	;# 
   818  0001                     	;# 
   819  0002                     	;# 
   820  0003                     	;# 
   821  0004                     	;# 
   822  0005                     	;# 
   823  0006                     	;# 
   824  0007                     	;# 
   825  0008                     	;# 
   826  0009                     	;# 
   827  000A                     	;# 
   828  000B                     	;# 
   829  000C                     	;# 
   830  000D                     	;# 
   831  000E                     	;# 
   832  0011                     	;# 
   833  0012                     	;# 
   834  0013                     	;# 
   835  0014                     	;# 
   836  0015                     	;# 
   837  0016                     	;# 
   838  0016                     	;# 
   839  0017                     	;# 
   840  0018                     	;# 
   841  0019                     	;# 
   842  001A                     	;# 
   843  001B                     	;# 
   844  001C                     	;# 
   845  001E                     	;# 
   846  001F                     	;# 
   847  008C                     	;# 
   848  008D                     	;# 
   849  008E                     	;# 
   850  0091                     	;# 
   851  0092                     	;# 
   852  0093                     	;# 
   853  0094                     	;# 
   854  0095                     	;# 
   855  0096                     	;# 
   856  0097                     	;# 
   857  0098                     	;# 
   858  0099                     	;# 
   859  009A                     	;# 
   860  009B                     	;# 
   861  009B                     	;# 
   862  009C                     	;# 
   863  009D                     	;# 
   864  009E                     	;# 
   865  010C                     	;# 
   866  010D                     	;# 
   867  010E                     	;# 
   868  0111                     	;# 
   869  0112                     	;# 
   870  0113                     	;# 
   871  0114                     	;# 
   872  0115                     	;# 
   873  0116                     	;# 
   874  0117                     	;# 
   875  0118                     	;# 
   876  0119                     	;# 
   877  011A                     	;# 
   878  011B                     	;# 
   879  011D                     	;# 
   880  011E                     	;# 
   881  018C                     	;# 
   882  018D                     	;# 
   883  018E                     	;# 
   884  0191                     	;# 
   885  0191                     	;# 
   886  0192                     	;# 
   887  0193                     	;# 
   888  0193                     	;# 
   889  0193                     	;# 
   890  0194                     	;# 
   891  0195                     	;# 
   892  0196                     	;# 
   893  0199                     	;# 
   894  019A                     	;# 
   895  019B                     	;# 
   896  019B                     	;# 
   897  019C                     	;# 
   898  019D                     	;# 
   899  019E                     	;# 
   900  019F                     	;# 
   901  020C                     	;# 
   902  020D                     	;# 
   903  020E                     	;# 
   904  0211                     	;# 
   905  0211                     	;# 
   906  0212                     	;# 
   907  0212                     	;# 
   908  0213                     	;# 
   909  0213                     	;# 
   910  0214                     	;# 
   911  0214                     	;# 
   912  0215                     	;# 
   913  0215                     	;# 
   914  0215                     	;# 
   915  0216                     	;# 
   916  0216                     	;# 
   917  0217                     	;# 
   918  0217                     	;# 
   919  0219                     	;# 
   920  021A                     	;# 
   921  021B                     	;# 
   922  021C                     	;# 
   923  021D                     	;# 
   924  021E                     	;# 
   925  021F                     	;# 
   926  0291                     	;# 
   927  0291                     	;# 
   928  0292                     	;# 
   929  0293                     	;# 
   930  0294                     	;# 
   931  0295                     	;# 
   932  0295                     	;# 
   933  0296                     	;# 
   934  0298                     	;# 
   935  0298                     	;# 
   936  0299                     	;# 
   937  029A                     	;# 
   938  029B                     	;# 
   939  029C                     	;# 
   940  029D                     	;# 
   941  029E                     	;# 
   942  0311                     	;# 
   943  0311                     	;# 
   944  0312                     	;# 
   945  0313                     	;# 
   946  0318                     	;# 
   947  0318                     	;# 
   948  0319                     	;# 
   949  031A                     	;# 
   950  038C                     	;# 
   951  038D                     	;# 
   952  038E                     	;# 
   953  0391                     	;# 
   954  0392                     	;# 
   955  0393                     	;# 
   956  0394                     	;# 
   957  0395                     	;# 
   958  0396                     	;# 
   959  039A                     	;# 
   960  039C                     	;# 
   961  039D                     	;# 
   962  039E                     	;# 
   963  039F                     	;# 
   964  0415                     	;# 
   965  0416                     	;# 
   966  0417                     	;# 
   967  041C                     	;# 
   968  041D                     	;# 
   969  041E                     	;# 
   970  0FE4                     	;# 
   971  0FE5                     	;# 
   972  0FE6                     	;# 
   973  0FE7                     	;# 
   974  0FE8                     	;# 
   975  0FE9                     	;# 
   976  0FEA                     	;# 
   977  0FEB                     	;# 
   978  0FED                     	;# 
   979  0FEE                     	;# 
   980  0FEF                     	;# 
   981  0000                     	;# 
   982  0001                     	;# 
   983  0002                     	;# 
   984  0003                     	;# 
   985  0004                     	;# 
   986  0005                     	;# 
   987  0006                     	;# 
   988  0007                     	;# 
   989  0008                     	;# 
   990  0009                     	;# 
   991  000A                     	;# 
   992  000B                     	;# 
   993  000C                     	;# 
   994  000D                     	;# 
   995  000E                     	;# 
   996  0011                     	;# 
   997  0012                     	;# 
   998  0013                     	;# 
   999  0014                     	;# 
  1000  0015                     	;# 
  1001  0016                     	;# 
  1002  0016                     	;# 
  1003  0017                     	;# 
  1004  0018                     	;# 
  1005  0019                     	;# 
  1006  001A                     	;# 
  1007  001B                     	;# 
  1008  001C                     	;# 
  1009  001E                     	;# 
  1010  001F                     	;# 
  1011  008C                     	;# 
  1012  008D                     	;# 
  1013  008E                     	;# 
  1014  0091                     	;# 
  1015  0092                     	;# 
  1016  0093                     	;# 
  1017  0094                     	;# 
  1018  0095                     	;# 
  1019  0096                     	;# 
  1020  0097                     	;# 
  1021  0098                     	;# 
  1022  0099                     	;# 
  1023  009A                     	;# 
  1024  009B                     	;# 
  1025  009B                     	;# 
  1026  009C                     	;# 
  1027  009D                     	;# 
  1028  009E                     	;# 
  1029  010C                     	;# 
  1030  010D                     	;# 
  1031  010E                     	;# 
  1032  0111                     	;# 
  1033  0112                     	;# 
  1034  0113                     	;# 
  1035  0114                     	;# 
  1036  0115                     	;# 
  1037  0116                     	;# 
  1038  0117                     	;# 
  1039  0118                     	;# 
  1040  0119                     	;# 
  1041  011A                     	;# 
  1042  011B                     	;# 
  1043  011D                     	;# 
  1044  011E                     	;# 
  1045  018C                     	;# 
  1046  018D                     	;# 
  1047  018E                     	;# 
  1048  0191                     	;# 
  1049  0191                     	;# 
  1050  0192                     	;# 
  1051  0193                     	;# 
  1052  0193                     	;# 
  1053  0193                     	;# 
  1054  0194                     	;# 
  1055  0195                     	;# 
  1056  0196                     	;# 
  1057  0199                     	;# 
  1058  019A                     	;# 
  1059  019B                     	;# 
  1060  019B                     	;# 
  1061  019C                     	;# 
  1062  019D                     	;# 
  1063  019E                     	;# 
  1064  019F                     	;# 
  1065  020C                     	;# 
  1066  020D                     	;# 
  1067  020E                     	;# 
  1068  0211                     	;# 
  1069  0211                     	;# 
  1070  0212                     	;# 
  1071  0212                     	;# 
  1072  0213                     	;# 
  1073  0213                     	;# 
  1074  0214                     	;# 
  1075  0214                     	;# 
  1076  0215                     	;# 
  1077  0215                     	;# 
  1078  0215                     	;# 
  1079  0216                     	;# 
  1080  0216                     	;# 
  1081  0217                     	;# 
  1082  0217                     	;# 
  1083  0219                     	;# 
  1084  021A                     	;# 
  1085  021B                     	;# 
  1086  021C                     	;# 
  1087  021D                     	;# 
  1088  021E                     	;# 
  1089  021F                     	;# 
  1090  0291                     	;# 
  1091  0291                     	;# 
  1092  0292                     	;# 
  1093  0293                     	;# 
  1094  0294                     	;# 
  1095  0295                     	;# 
  1096  0295                     	;# 
  1097  0296                     	;# 
  1098  0298                     	;# 
  1099  0298                     	;# 
  1100  0299                     	;# 
  1101  029A                     	;# 
  1102  029B                     	;# 
  1103  029C                     	;# 
  1104  029D                     	;# 
  1105  029E                     	;# 
  1106  0311                     	;# 
  1107  0311                     	;# 
  1108  0312                     	;# 
  1109  0313                     	;# 
  1110  0318                     	;# 
  1111  0318                     	;# 
  1112  0319                     	;# 
  1113  031A                     	;# 
  1114  038C                     	;# 
  1115  038D                     	;# 
  1116  038E                     	;# 
  1117  0391                     	;# 
  1118  0392                     	;# 
  1119  0393                     	;# 
  1120  0394                     	;# 
  1121  0395                     	;# 
  1122  0396                     	;# 
  1123  039A                     	;# 
  1124  039C                     	;# 
  1125  039D                     	;# 
  1126  039E                     	;# 
  1127  039F                     	;# 
  1128  0415                     	;# 
  1129  0416                     	;# 
  1130  0417                     	;# 
  1131  041C                     	;# 
  1132  041D                     	;# 
  1133  041E                     	;# 
  1134  0FE4                     	;# 
  1135  0FE5                     	;# 
  1136  0FE6                     	;# 
  1137  0FE7                     	;# 
  1138  0FE8                     	;# 
  1139  0FE9                     	;# 
  1140  0FEA                     	;# 
  1141  0FEB                     	;# 
  1142  0FED                     	;# 
  1143  0FEE                     	;# 
  1144  0FEF                     	;# 
  1145  0000                     	;# 
  1146  0001                     	;# 
  1147  0002                     	;# 
  1148  0003                     	;# 
  1149  0004                     	;# 
  1150  0005                     	;# 
  1151  0006                     	;# 
  1152  0007                     	;# 
  1153  0008                     	;# 
  1154  0009                     	;# 
  1155  000A                     	;# 
  1156  000B                     	;# 
  1157  000C                     	;# 
  1158  000D                     	;# 
  1159  000E                     	;# 
  1160  0011                     	;# 
  1161  0012                     	;# 
  1162  0013                     	;# 
  1163  0014                     	;# 
  1164  0015                     	;# 
  1165  0016                     	;# 
  1166  0016                     	;# 
  1167  0017                     	;# 
  1168  0018                     	;# 
  1169  0019                     	;# 
  1170  001A                     	;# 
  1171  001B                     	;# 
  1172  001C                     	;# 
  1173  001E                     	;# 
  1174  001F                     	;# 
  1175  008C                     	;# 
  1176  008D                     	;# 
  1177  008E                     	;# 
  1178  0091                     	;# 
  1179  0092                     	;# 
  1180  0093                     	;# 
  1181  0094                     	;# 
  1182  0095                     	;# 
  1183  0096                     	;# 
  1184  0097                     	;# 
  1185  0098                     	;# 
  1186  0099                     	;# 
  1187  009A                     	;# 
  1188  009B                     	;# 
  1189  009B                     	;# 
  1190  009C                     	;# 
  1191  009D                     	;# 
  1192  009E                     	;# 
  1193  010C                     	;# 
  1194  010D                     	;# 
  1195  010E                     	;# 
  1196  0111                     	;# 
  1197  0112                     	;# 
  1198  0113                     	;# 
  1199  0114                     	;# 
  1200  0115                     	;# 
  1201  0116                     	;# 
  1202  0117                     	;# 
  1203  0118                     	;# 
  1204  0119                     	;# 
  1205  011A                     	;# 
  1206  011B                     	;# 
  1207  011D                     	;# 
  1208  011E                     	;# 
  1209  018C                     	;# 
  1210  018D                     	;# 
  1211  018E                     	;# 
  1212  0191                     	;# 
  1213  0191                     	;# 
  1214  0192                     	;# 
  1215  0193                     	;# 
  1216  0193                     	;# 
  1217  0193                     	;# 
  1218  0194                     	;# 
  1219  0195                     	;# 
  1220  0196                     	;# 
  1221  0199                     	;# 
  1222  019A                     	;# 
  1223  019B                     	;# 
  1224  019B                     	;# 
  1225  019C                     	;# 
  1226  019D                     	;# 
  1227  019E                     	;# 
  1228  019F                     	;# 
  1229  020C                     	;# 
  1230  020D                     	;# 
  1231  020E                     	;# 
  1232  0211                     	;# 
  1233  0211                     	;# 
  1234  0212                     	;# 
  1235  0212                     	;# 
  1236  0213                     	;# 
  1237  0213                     	;# 
  1238  0214                     	;# 
  1239  0214                     	;# 
  1240  0215                     	;# 
  1241  0215                     	;# 
  1242  0215                     	;# 
  1243  0216                     	;# 
  1244  0216                     	;# 
  1245  0217                     	;# 
  1246  0217                     	;# 
  1247  0219                     	;# 
  1248  021A                     	;# 
  1249  021B                     	;# 
  1250  021C                     	;# 
  1251  021D                     	;# 
  1252  021E                     	;# 
  1253  021F                     	;# 
  1254  0291                     	;# 
  1255  0291                     	;# 
  1256  0292                     	;# 
  1257  0293                     	;# 
  1258  0294                     	;# 
  1259  0295                     	;# 
  1260  0295                     	;# 
  1261  0296                     	;# 
  1262  0298                     	;# 
  1263  0298                     	;# 
  1264  0299                     	;# 
  1265  029A                     	;# 
  1266  029B                     	;# 
  1267  029C                     	;# 
  1268  029D                     	;# 
  1269  029E                     	;# 
  1270  0311                     	;# 
  1271  0311                     	;# 
  1272  0312                     	;# 
  1273  0313                     	;# 
  1274  0318                     	;# 
  1275  0318                     	;# 
  1276  0319                     	;# 
  1277  031A                     	;# 
  1278  038C                     	;# 
  1279  038D                     	;# 
  1280  038E                     	;# 
  1281  0391                     	;# 
  1282  0392                     	;# 
  1283  0393                     	;# 
  1284  0394                     	;# 
  1285  0395                     	;# 
  1286  0396                     	;# 
  1287  039A                     	;# 
  1288  039C                     	;# 
  1289  039D                     	;# 
  1290  039E                     	;# 
  1291  039F                     	;# 
  1292  0415                     	;# 
  1293  0416                     	;# 
  1294  0417                     	;# 
  1295  041C                     	;# 
  1296  041D                     	;# 
  1297  041E                     	;# 
  1298  0FE4                     	;# 
  1299  0FE5                     	;# 
  1300  0FE6                     	;# 
  1301  0FE7                     	;# 
  1302  0FE8                     	;# 
  1303  0FE9                     	;# 
  1304  0FEA                     	;# 
  1305  0FEB                     	;# 
  1306  0FED                     	;# 
  1307  0FEE                     	;# 
  1308  0FEF                     	;# 
  1309  0000                     	;# 
  1310  0001                     	;# 
  1311  0002                     	;# 
  1312  0003                     	;# 
  1313  0004                     	;# 
  1314  0005                     	;# 
  1315  0006                     	;# 
  1316  0007                     	;# 
  1317  0008                     	;# 
  1318  0009                     	;# 
  1319  000A                     	;# 
  1320  000B                     	;# 
  1321  000C                     	;# 
  1322  000D                     	;# 
  1323  000E                     	;# 
  1324  0011                     	;# 
  1325  0012                     	;# 
  1326  0013                     	;# 
  1327  0014                     	;# 
  1328  0015                     	;# 
  1329  0016                     	;# 
  1330  0016                     	;# 
  1331  0017                     	;# 
  1332  0018                     	;# 
  1333  0019                     	;# 
  1334  001A                     	;# 
  1335  001B                     	;# 
  1336  001C                     	;# 
  1337  001E                     	;# 
  1338  001F                     	;# 
  1339  008C                     	;# 
  1340  008D                     	;# 
  1341  008E                     	;# 
  1342  0091                     	;# 
  1343  0092                     	;# 
  1344  0093                     	;# 
  1345  0094                     	;# 
  1346  0095                     	;# 
  1347  0096                     	;# 
  1348  0097                     	;# 
  1349  0098                     	;# 
  1350  0099                     	;# 
  1351  009A                     	;# 
  1352  009B                     	;# 
  1353  009B                     	;# 
  1354  009C                     	;# 
  1355  009D                     	;# 
  1356  009E                     	;# 
  1357  010C                     	;# 
  1358  010D                     	;# 
  1359  010E                     	;# 
  1360  0111                     	;# 
  1361  0112                     	;# 
  1362  0113                     	;# 
  1363  0114                     	;# 
  1364  0115                     	;# 
  1365  0116                     	;# 
  1366  0117                     	;# 
  1367  0118                     	;# 
  1368  0119                     	;# 
  1369  011A                     	;# 
  1370  011B                     	;# 
  1371  011D                     	;# 
  1372  011E                     	;# 
  1373  018C                     	;# 
  1374  018D                     	;# 
  1375  018E                     	;# 
  1376  0191                     	;# 
  1377  0191                     	;# 
  1378  0192                     	;# 
  1379  0193                     	;# 
  1380  0193                     	;# 
  1381  0193                     	;# 
  1382  0194                     	;# 
  1383  0195                     	;# 
  1384  0196                     	;# 
  1385  0199                     	;# 
  1386  019A                     	;# 
  1387  019B                     	;# 
  1388  019B                     	;# 
  1389  019C                     	;# 
  1390  019D                     	;# 
  1391  019E                     	;# 
  1392  019F                     	;# 
  1393  020C                     	;# 
  1394  020D                     	;# 
  1395  020E                     	;# 
  1396  0211                     	;# 
  1397  0211                     	;# 
  1398  0212                     	;# 
  1399  0212                     	;# 
  1400  0213                     	;# 
  1401  0213                     	;# 
  1402  0214                     	;# 
  1403  0214                     	;# 
  1404  0215                     	;# 
  1405  0215                     	;# 
  1406  0215                     	;# 
  1407  0216                     	;# 
  1408  0216                     	;# 
  1409  0217                     	;# 
  1410  0217                     	;# 
  1411  0219                     	;# 
  1412  021A                     	;# 
  1413  021B                     	;# 
  1414  021C                     	;# 
  1415  021D                     	;# 
  1416  021E                     	;# 
  1417  021F                     	;# 
  1418  0291                     	;# 
  1419  0291                     	;# 
  1420  0292                     	;# 
  1421  0293                     	;# 
  1422  0294                     	;# 
  1423  0295                     	;# 
  1424  0295                     	;# 
  1425  0296                     	;# 
  1426  0298                     	;# 
  1427  0298                     	;# 
  1428  0299                     	;# 
  1429  029A                     	;# 
  1430  029B                     	;# 
  1431  029C                     	;# 
  1432  029D                     	;# 
  1433  029E                     	;# 
  1434  0311                     	;# 
  1435  0311                     	;# 
  1436  0312                     	;# 
  1437  0313                     	;# 
  1438  0318                     	;# 
  1439  0318                     	;# 
  1440  0319                     	;# 
  1441  031A                     	;# 
  1442  038C                     	;# 
  1443  038D                     	;# 
  1444  038E                     	;# 
  1445  0391                     	;# 
  1446  0392                     	;# 
  1447  0393                     	;# 
  1448  0394                     	;# 
  1449  0395                     	;# 
  1450  0396                     	;# 
  1451  039A                     	;# 
  1452  039C                     	;# 
  1453  039D                     	;# 
  1454  039E                     	;# 
  1455  039F                     	;# 
  1456  0415                     	;# 
  1457  0416                     	;# 
  1458  0417                     	;# 
  1459  041C                     	;# 
  1460  041D                     	;# 
  1461  041E                     	;# 
  1462  0FE4                     	;# 
  1463  0FE5                     	;# 
  1464  0FE6                     	;# 
  1465  0FE7                     	;# 
  1466  0FE8                     	;# 
  1467  0FE9                     	;# 
  1468  0FEA                     	;# 
  1469  0FEB                     	;# 
  1470  0FED                     	;# 
  1471  0FEE                     	;# 
  1472  0FEF                     	;# 
  1473  0000                     	;# 
  1474  0001                     	;# 
  1475  0002                     	;# 
  1476  0003                     	;# 
  1477  0004                     	;# 
  1478  0005                     	;# 
  1479  0006                     	;# 
  1480  0007                     	;# 
  1481  0008                     	;# 
  1482  0009                     	;# 
  1483  000A                     	;# 
  1484  000B                     	;# 
  1485  000C                     	;# 
  1486  000D                     	;# 
  1487  000E                     	;# 
  1488  0011                     	;# 
  1489  0012                     	;# 
  1490  0013                     	;# 
  1491  0014                     	;# 
  1492  0015                     	;# 
  1493  0016                     	;# 
  1494  0016                     	;# 
  1495  0017                     	;# 
  1496  0018                     	;# 
  1497  0019                     	;# 
  1498  001A                     	;# 
  1499  001B                     	;# 
  1500  001C                     	;# 
  1501  001E                     	;# 
  1502  001F                     	;# 
  1503  008C                     	;# 
  1504  008D                     	;# 
  1505  008E                     	;# 
  1506  0091                     	;# 
  1507  0092                     	;# 
  1508  0093                     	;# 
  1509  0094                     	;# 
  1510  0095                     	;# 
  1511  0096                     	;# 
  1512  0097                     	;# 
  1513  0098                     	;# 
  1514  0099                     	;# 
  1515  009A                     	;# 
  1516  009B                     	;# 
  1517  009B                     	;# 
  1518  009C                     	;# 
  1519  009D                     	;# 
  1520  009E                     	;# 
  1521  010C                     	;# 
  1522  010D                     	;# 
  1523  010E                     	;# 
  1524  0111                     	;# 
  1525  0112                     	;# 
  1526  0113                     	;# 
  1527  0114                     	;# 
  1528  0115                     	;# 
  1529  0116                     	;# 
  1530  0117                     	;# 
  1531  0118                     	;# 
  1532  0119                     	;# 
  1533  011A                     	;# 
  1534  011B                     	;# 
  1535  011D                     	;# 
  1536  011E                     	;# 
  1537  018C                     	;# 
  1538  018D                     	;# 
  1539  018E                     	;# 
  1540  0191                     	;# 
  1541  0191                     	;# 
  1542  0192                     	;# 
  1543  0193                     	;# 
  1544  0193                     	;# 
  1545  0193                     	;# 
  1546  0194                     	;# 
  1547  0195                     	;# 
  1548  0196                     	;# 
  1549  0199                     	;# 
  1550  019A                     	;# 
  1551  019B                     	;# 
  1552  019B                     	;# 
  1553  019C                     	;# 
  1554  019D                     	;# 
  1555  019E                     	;# 
  1556  019F                     	;# 
  1557  020C                     	;# 
  1558  020D                     	;# 
  1559  020E                     	;# 
  1560  0211                     	;# 
  1561  0211                     	;# 
  1562  0212                     	;# 
  1563  0212                     	;# 
  1564  0213                     	;# 
  1565  0213                     	;# 
  1566  0214                     	;# 
  1567  0214                     	;# 
  1568  0215                     	;# 
  1569  0215                     	;# 
  1570  0215                     	;# 
  1571  0216                     	;# 
  1572  0216                     	;# 
  1573  0217                     	;# 
  1574  0217                     	;# 
  1575  0219                     	;# 
  1576  021A                     	;# 
  1577  021B                     	;# 
  1578  021C                     	;# 
  1579  021D                     	;# 
  1580  021E                     	;# 
  1581  021F                     	;# 
  1582  0291                     	;# 
  1583  0291                     	;# 
  1584  0292                     	;# 
  1585  0293                     	;# 
  1586  0294                     	;# 
  1587  0295                     	;# 
  1588  0295                     	;# 
  1589  0296                     	;# 
  1590  0298                     	;# 
  1591  0298                     	;# 
  1592  0299                     	;# 
  1593  029A                     	;# 
  1594  029B                     	;# 
  1595  029C                     	;# 
  1596  029D                     	;# 
  1597  029E                     	;# 
  1598  0311                     	;# 
  1599  0311                     	;# 
  1600  0312                     	;# 
  1601  0313                     	;# 
  1602  0318                     	;# 
  1603  0318                     	;# 
  1604  0319                     	;# 
  1605  031A                     	;# 
  1606  038C                     	;# 
  1607  038D                     	;# 
  1608  038E                     	;# 
  1609  0391                     	;# 
  1610  0392                     	;# 
  1611  0393                     	;# 
  1612  0394                     	;# 
  1613  0395                     	;# 
  1614  0396                     	;# 
  1615  039A                     	;# 
  1616  039C                     	;# 
  1617  039D                     	;# 
  1618  039E                     	;# 
  1619  039F                     	;# 
  1620  0415                     	;# 
  1621  0416                     	;# 
  1622  0417                     	;# 
  1623  041C                     	;# 
  1624  041D                     	;# 
  1625  041E                     	;# 
  1626  0FE4                     	;# 
  1627  0FE5                     	;# 
  1628  0FE6                     	;# 
  1629  0FE7                     	;# 
  1630  0FE8                     	;# 
  1631  0FE9                     	;# 
  1632  0FEA                     	;# 
  1633  0FEB                     	;# 
  1634  0FED                     	;# 
  1635  0FEE                     	;# 
  1636  0FEF                     	;# 
  1637  0000                     	;# 
  1638  0001                     	;# 
  1639  0002                     	;# 
  1640  0003                     	;# 
  1641  0004                     	;# 
  1642  0005                     	;# 
  1643  0006                     	;# 
  1644  0007                     	;# 
  1645  0008                     	;# 
  1646  0009                     	;# 
  1647  000A                     	;# 
  1648  000B                     	;# 
  1649  000C                     	;# 
  1650  000D                     	;# 
  1651  000E                     	;# 
  1652  0011                     	;# 
  1653  0012                     	;# 
  1654  0013                     	;# 
  1655  0014                     	;# 
  1656  0015                     	;# 
  1657  0016                     	;# 
  1658  0016                     	;# 
  1659  0017                     	;# 
  1660  0018                     	;# 
  1661  0019                     	;# 
  1662  001A                     	;# 
  1663  001B                     	;# 
  1664  001C                     	;# 
  1665  001E                     	;# 
  1666  001F                     	;# 
  1667  008C                     	;# 
  1668  008D                     	;# 
  1669  008E                     	;# 
  1670  0091                     	;# 
  1671  0092                     	;# 
  1672  0093                     	;# 
  1673  0094                     	;# 
  1674  0095                     	;# 
  1675  0096                     	;# 
  1676  0097                     	;# 
  1677  0098                     	;# 
  1678  0099                     	;# 
  1679  009A                     	;# 
  1680  009B                     	;# 
  1681  009B                     	;# 
  1682  009C                     	;# 
  1683  009D                     	;# 
  1684  009E                     	;# 
  1685  010C                     	;# 
  1686  010D                     	;# 
  1687  010E                     	;# 
  1688  0111                     	;# 
  1689  0112                     	;# 
  1690  0113                     	;# 
  1691  0114                     	;# 
  1692  0115                     	;# 
  1693  0116                     	;# 
  1694  0117                     	;# 
  1695  0118                     	;# 
  1696  0119                     	;# 
  1697  011A                     	;# 
  1698  011B                     	;# 
  1699  011D                     	;# 
  1700  011E                     	;# 
  1701  018C                     	;# 
  1702  018D                     	;# 
  1703  018E                     	;# 
  1704  0191                     	;# 
  1705  0191                     	;# 
  1706  0192                     	;# 
  1707  0193                     	;# 
  1708  0193                     	;# 
  1709  0193                     	;# 
  1710  0194                     	;# 
  1711  0195                     	;# 
  1712  0196                     	;# 
  1713  0199                     	;# 
  1714  019A                     	;# 
  1715  019B                     	;# 
  1716  019B                     	;# 
  1717  019C                     	;# 
  1718  019D                     	;# 
  1719  019E                     	;# 
  1720  019F                     	;# 
  1721  020C                     	;# 
  1722  020D                     	;# 
  1723  020E                     	;# 
  1724  0211                     	;# 
  1725  0211                     	;# 
  1726  0212                     	;# 
  1727  0212                     	;# 
  1728  0213                     	;# 
  1729  0213                     	;# 
  1730  0214                     	;# 
  1731  0214                     	;# 
  1732  0215                     	;# 
  1733  0215                     	;# 
  1734  0215                     	;# 
  1735  0216                     	;# 
  1736  0216                     	;# 
  1737  0217                     	;# 
  1738  0217                     	;# 
  1739  0219                     	;# 
  1740  021A                     	;# 
  1741  021B                     	;# 
  1742  021C                     	;# 
  1743  021D                     	;# 
  1744  021E                     	;# 
  1745  021F                     	;# 
  1746  0291                     	;# 
  1747  0291                     	;# 
  1748  0292                     	;# 
  1749  0293                     	;# 
  1750  0294                     	;# 
  1751  0295                     	;# 
  1752  0295                     	;# 
  1753  0296                     	;# 
  1754  0298                     	;# 
  1755  0298                     	;# 
  1756  0299                     	;# 
  1757  029A                     	;# 
  1758  029B                     	;# 
  1759  029C                     	;# 
  1760  029D                     	;# 
  1761  029E                     	;# 
  1762  0311                     	;# 
  1763  0311                     	;# 
  1764  0312                     	;# 
  1765  0313                     	;# 
  1766  0318                     	;# 
  1767  0318                     	;# 
  1768  0319                     	;# 
  1769  031A                     	;# 
  1770  038C                     	;# 
  1771  038D                     	;# 
  1772  038E                     	;# 
  1773  0391                     	;# 
  1774  0392                     	;# 
  1775  0393                     	;# 
  1776  0394                     	;# 
  1777  0395                     	;# 
  1778  0396                     	;# 
  1779  039A                     	;# 
  1780  039C                     	;# 
  1781  039D                     	;# 
  1782  039E                     	;# 
  1783  039F                     	;# 
  1784  0415                     	;# 
  1785  0416                     	;# 
  1786  0417                     	;# 
  1787  041C                     	;# 
  1788  041D                     	;# 
  1789  041E                     	;# 
  1790  0FE4                     	;# 
  1791  0FE5                     	;# 
  1792  0FE6                     	;# 
  1793  0FE7                     	;# 
  1794  0FE8                     	;# 
  1795  0FE9                     	;# 
  1796  0FEA                     	;# 
  1797  0FEB                     	;# 
  1798  0FED                     	;# 
  1799  0FEE                     	;# 
  1800  0FEF                     	;# 
  1801  0000                     	;# 
  1802  0001                     	;# 
  1803  0002                     	;# 
  1804  0003                     	;# 
  1805  0004                     	;# 
  1806  0005                     	;# 
  1807  0006                     	;# 
  1808  0007                     	;# 
  1809  0008                     	;# 
  1810  0009                     	;# 
  1811  000A                     	;# 
  1812  000B                     	;# 
  1813  000C                     	;# 
  1814  000D                     	;# 
  1815  000E                     	;# 
  1816  0011                     	;# 
  1817  0012                     	;# 
  1818  0013                     	;# 
  1819  0014                     	;# 
  1820  0015                     	;# 
  1821  0016                     	;# 
  1822  0016                     	;# 
  1823  0017                     	;# 
  1824  0018                     	;# 
  1825  0019                     	;# 
  1826  001A                     	;# 
  1827  001B                     	;# 
  1828  001C                     	;# 
  1829  001E                     	;# 
  1830  001F                     	;# 
  1831  008C                     	;# 
  1832  008D                     	;# 
  1833  008E                     	;# 
  1834  0091                     	;# 
  1835  0092                     	;# 
  1836  0093                     	;# 
  1837  0094                     	;# 
  1838  0095                     	;# 
  1839  0096                     	;# 
  1840  0097                     	;# 
  1841  0098                     	;# 
  1842  0099                     	;# 
  1843  009A                     	;# 
  1844  009B                     	;# 
  1845  009B                     	;# 
  1846  009C                     	;# 
  1847  009D                     	;# 
  1848  009E                     	;# 
  1849  010C                     	;# 
  1850  010D                     	;# 
  1851  010E                     	;# 
  1852  0111                     	;# 
  1853  0112                     	;# 
  1854  0113                     	;# 
  1855  0114                     	;# 
  1856  0115                     	;# 
  1857  0116                     	;# 
  1858  0117                     	;# 
  1859  0118                     	;# 
  1860  0119                     	;# 
  1861  011A                     	;# 
  1862  011B                     	;# 
  1863  011D                     	;# 
  1864  011E                     	;# 
  1865  018C                     	;# 
  1866  018D                     	;# 
  1867  018E                     	;# 
  1868  0191                     	;# 
  1869  0191                     	;# 
  1870  0192                     	;# 
  1871  0193                     	;# 
  1872  0193                     	;# 
  1873  0193                     	;# 
  1874  0194                     	;# 
  1875  0195                     	;# 
  1876  0196                     	;# 
  1877  0199                     	;# 
  1878  019A                     	;# 
  1879  019B                     	;# 
  1880  019B                     	;# 
  1881  019C                     	;# 
  1882  019D                     	;# 
  1883  019E                     	;# 
  1884  019F                     	;# 
  1885  020C                     	;# 
  1886  020D                     	;# 
  1887  020E                     	;# 
  1888  0211                     	;# 
  1889  0211                     	;# 
  1890  0212                     	;# 
  1891  0212                     	;# 
  1892  0213                     	;# 
  1893  0213                     	;# 
  1894  0214                     	;# 
  1895  0214                     	;# 
  1896  0215                     	;# 
  1897  0215                     	;# 
  1898  0215                     	;# 
  1899  0216                     	;# 
  1900  0216                     	;# 
  1901  0217                     	;# 
  1902  0217                     	;# 
  1903  0219                     	;# 
  1904  021A                     	;# 
  1905  021B                     	;# 
  1906  021C                     	;# 
  1907  021D                     	;# 
  1908  021E                     	;# 
  1909  021F                     	;# 
  1910  0291                     	;# 
  1911  0291                     	;# 
  1912  0292                     	;# 
  1913  0293                     	;# 
  1914  0294                     	;# 
  1915  0295                     	;# 
  1916  0295                     	;# 
  1917  0296                     	;# 
  1918  0298                     	;# 
  1919  0298                     	;# 
  1920  0299                     	;# 
  1921  029A                     	;# 
  1922  029B                     	;# 
  1923  029C                     	;# 
  1924  029D                     	;# 
  1925  029E                     	;# 
  1926  0311                     	;# 
  1927  0311                     	;# 
  1928  0312                     	;# 
  1929  0313                     	;# 
  1930  0318                     	;# 
  1931  0318                     	;# 
  1932  0319                     	;# 
  1933  031A                     	;# 
  1934  038C                     	;# 
  1935  038D                     	;# 
  1936  038E                     	;# 
  1937  0391                     	;# 
  1938  0392                     	;# 
  1939  0393                     	;# 
  1940  0394                     	;# 
  1941  0395                     	;# 
  1942  0396                     	;# 
  1943  039A                     	;# 
  1944  039C                     	;# 
  1945  039D                     	;# 
  1946  039E                     	;# 
  1947  039F                     	;# 
  1948  0415                     	;# 
  1949  0416                     	;# 
  1950  0417                     	;# 
  1951  041C                     	;# 
  1952  041D                     	;# 
  1953  041E                     	;# 
  1954  0FE4                     	;# 
  1955  0FE5                     	;# 
  1956  0FE6                     	;# 
  1957  0FE7                     	;# 
  1958  0FE8                     	;# 
  1959  0FE9                     	;# 
  1960  0FEA                     	;# 
  1961  0FEB                     	;# 
  1962  0FED                     	;# 
  1963  0FEE                     	;# 
  1964  0FEF                     	;# 
  1965  0000                     	;# 
  1966  0001                     	;# 
  1967  0002                     	;# 
  1968  0003                     	;# 
  1969  0004                     	;# 
  1970  0005                     	;# 
  1971  0006                     	;# 
  1972  0007                     	;# 
  1973  0008                     	;# 
  1974  0009                     	;# 
  1975  000A                     	;# 
  1976  000B                     	;# 
  1977  000C                     	;# 
  1978  000D                     	;# 
  1979  000E                     	;# 
  1980  0011                     	;# 
  1981  0012                     	;# 
  1982  0013                     	;# 
  1983  0014                     	;# 
  1984  0015                     	;# 
  1985  0016                     	;# 
  1986  0016                     	;# 
  1987  0017                     	;# 
  1988  0018                     	;# 
  1989  0019                     	;# 
  1990  001A                     	;# 
  1991  001B                     	;# 
  1992  001C                     	;# 
  1993  001E                     	;# 
  1994  001F                     	;# 
  1995  008C                     	;# 
  1996  008D                     	;# 
  1997  008E                     	;# 
  1998  0091                     	;# 
  1999  0092                     	;# 
  2000  0093                     	;# 
  2001  0094                     	;# 
  2002  0095                     	;# 
  2003  0096                     	;# 
  2004  0097                     	;# 
  2005  0098                     	;# 
  2006  0099                     	;# 
  2007  009A                     	;# 
  2008  009B                     	;# 
  2009  009B                     	;# 
  2010  009C                     	;# 
  2011  009D                     	;# 
  2012  009E                     	;# 
  2013  010C                     	;# 
  2014  010D                     	;# 
  2015  010E                     	;# 
  2016  0111                     	;# 
  2017  0112                     	;# 
  2018  0113                     	;# 
  2019  0114                     	;# 
  2020  0115                     	;# 
  2021  0116                     	;# 
  2022  0117                     	;# 
  2023  0118                     	;# 
  2024  0119                     	;# 
  2025  011A                     	;# 
  2026  011B                     	;# 
  2027  011D                     	;# 
  2028  011E                     	;# 
  2029  018C                     	;# 
  2030  018D                     	;# 
  2031  018E                     	;# 
  2032  0191                     	;# 
  2033  0191                     	;# 
  2034  0192                     	;# 
  2035  0193                     	;# 
  2036  0193                     	;# 
  2037  0193                     	;# 
  2038  0194                     	;# 
  2039  0195                     	;# 
  2040  0196                     	;# 
  2041  0199                     	;# 
  2042  019A                     	;# 
  2043  019B                     	;# 
  2044  019B                     	;# 
  2045  019C                     	;# 
  2046  019D                     	;# 
  2047  019E                     	;# 
  2048  019F                     	;# 
  2049  020C                     	;# 
  2050  020D                     	;# 
  2051  020E                     	;# 
  2052  0211                     	;# 
  2053  0211                     	;# 
  2054  0212                     	;# 
  2055  0212                     	;# 
  2056  0213                     	;# 
  2057  0213                     	;# 
  2058  0214                     	;# 
  2059  0214                     	;# 
  2060  0215                     	;# 
  2061  0215                     	;# 
  2062  0215                     	;# 
  2063  0216                     	;# 
  2064  0216                     	;# 
  2065  0217                     	;# 
  2066  0217                     	;# 
  2067  0219                     	;# 
  2068  021A                     	;# 
  2069  021B                     	;# 
  2070  021C                     	;# 
  2071  021D                     	;# 
  2072  021E                     	;# 
  2073  021F                     	;# 
  2074  0291                     	;# 
  2075  0291                     	;# 
  2076  0292                     	;# 
  2077  0293                     	;# 
  2078  0294                     	;# 
  2079  0295                     	;# 
  2080  0295                     	;# 
  2081  0296                     	;# 
  2082  0298                     	;# 
  2083  0298                     	;# 
  2084  0299                     	;# 
  2085  029A                     	;# 
  2086  029B                     	;# 
  2087  029C                     	;# 
  2088  029D                     	;# 
  2089  029E                     	;# 
  2090  0311                     	;# 
  2091  0311                     	;# 
  2092  0312                     	;# 
  2093  0313                     	;# 
  2094  0318                     	;# 
  2095  0318                     	;# 
  2096  0319                     	;# 
  2097  031A                     	;# 
  2098  038C                     	;# 
  2099  038D                     	;# 
  2100  038E                     	;# 
  2101  0391                     	;# 
  2102  0392                     	;# 
  2103  0393                     	;# 
  2104  0394                     	;# 
  2105  0395                     	;# 
  2106  0396                     	;# 
  2107  039A                     	;# 
  2108  039C                     	;# 
  2109  039D                     	;# 
  2110  039E                     	;# 
  2111  039F                     	;# 
  2112  0415                     	;# 
  2113  0416                     	;# 
  2114  0417                     	;# 
  2115  041C                     	;# 
  2116  041D                     	;# 
  2117  041E                     	;# 
  2118  0FE4                     	;# 
  2119  0FE5                     	;# 
  2120  0FE6                     	;# 
  2121  0FE7                     	;# 
  2122  0FE8                     	;# 
  2123  0FE9                     	;# 
  2124  0FEA                     	;# 
  2125  0FEB                     	;# 
  2126  0FED                     	;# 
  2127  0FEE                     	;# 
  2128  0FEF                     	;# 
  2129  0000                     	;# 
  2130  0001                     	;# 
  2131  0002                     	;# 
  2132  0003                     	;# 
  2133  0004                     	;# 
  2134  0005                     	;# 
  2135  0006                     	;# 
  2136  0007                     	;# 
  2137  0008                     	;# 
  2138  0009                     	;# 
  2139  000A                     	;# 
  2140  000B                     	;# 
  2141  000C                     	;# 
  2142  000D                     	;# 
  2143  000E                     	;# 
  2144  0011                     	;# 
  2145  0012                     	;# 
  2146  0013                     	;# 
  2147  0014                     	;# 
  2148  0015                     	;# 
  2149  0016                     	;# 
  2150  0016                     	;# 
  2151  0017                     	;# 
  2152  0018                     	;# 
  2153  0019                     	;# 
  2154  001A                     	;# 
  2155  001B                     	;# 
  2156  001C                     	;# 
  2157  001E                     	;# 
  2158  001F                     	;# 
  2159  008C                     	;# 
  2160  008D                     	;# 
  2161  008E                     	;# 
  2162  0091                     	;# 
  2163  0092                     	;# 
  2164  0093                     	;# 
  2165  0094                     	;# 
  2166  0095                     	;# 
  2167  0096                     	;# 
  2168  0097                     	;# 
  2169  0098                     	;# 
  2170  0099                     	;# 
  2171  009A                     	;# 
  2172  009B                     	;# 
  2173  009B                     	;# 
  2174  009C                     	;# 
  2175  009D                     	;# 
  2176  009E                     	;# 
  2177  010C                     	;# 
  2178  010D                     	;# 
  2179  010E                     	;# 
  2180  0111                     	;# 
  2181  0112                     	;# 
  2182  0113                     	;# 
  2183  0114                     	;# 
  2184  0115                     	;# 
  2185  0116                     	;# 
  2186  0117                     	;# 
  2187  0118                     	;# 
  2188  0119                     	;# 
  2189  011A                     	;# 
  2190  011B                     	;# 
  2191  011D                     	;# 
  2192  011E                     	;# 
  2193  018C                     	;# 
  2194  018D                     	;# 
  2195  018E                     	;# 
  2196  0191                     	;# 
  2197  0191                     	;# 
  2198  0192                     	;# 
  2199  0193                     	;# 
  2200  0193                     	;# 
  2201  0193                     	;# 
  2202  0194                     	;# 
  2203  0195                     	;# 
  2204  0196                     	;# 
  2205  0199                     	;# 
  2206  019A                     	;# 
  2207  019B                     	;# 
  2208  019B                     	;# 
  2209  019C                     	;# 
  2210  019D                     	;# 
  2211  019E                     	;# 
  2212  019F                     	;# 
  2213  020C                     	;# 
  2214  020D                     	;# 
  2215  020E                     	;# 
  2216  0211                     	;# 
  2217  0211                     	;# 
  2218  0212                     	;# 
  2219  0212                     	;# 
  2220  0213                     	;# 
  2221  0213                     	;# 
  2222  0214                     	;# 
  2223  0214                     	;# 
  2224  0215                     	;# 
  2225  0215                     	;# 
  2226  0215                     	;# 
  2227  0216                     	;# 
  2228  0216                     	;# 
  2229  0217                     	;# 
  2230  0217                     	;# 
  2231  0219                     	;# 
  2232  021A                     	;# 
  2233  021B                     	;# 
  2234  021C                     	;# 
  2235  021D                     	;# 
  2236  021E                     	;# 
  2237  021F                     	;# 
  2238  0291                     	;# 
  2239  0291                     	;# 
  2240  0292                     	;# 
  2241  0293                     	;# 
  2242  0294                     	;# 
  2243  0295                     	;# 
  2244  0295                     	;# 
  2245  0296                     	;# 
  2246  0298                     	;# 
  2247  0298                     	;# 
  2248  0299                     	;# 
  2249  029A                     	;# 
  2250  029B                     	;# 
  2251  029C                     	;# 
  2252  029D                     	;# 
  2253  029E                     	;# 
  2254  0311                     	;# 
  2255  0311                     	;# 
  2256  0312                     	;# 
  2257  0313                     	;# 
  2258  0318                     	;# 
  2259  0318                     	;# 
  2260  0319                     	;# 
  2261  031A                     	;# 
  2262  038C                     	;# 
  2263  038D                     	;# 
  2264  038E                     	;# 
  2265  0391                     	;# 
  2266  0392                     	;# 
  2267  0393                     	;# 
  2268  0394                     	;# 
  2269  0395                     	;# 
  2270  0396                     	;# 
  2271  039A                     	;# 
  2272  039C                     	;# 
  2273  039D                     	;# 
  2274  039E                     	;# 
  2275  039F                     	;# 
  2276  0415                     	;# 
  2277  0416                     	;# 
  2278  0417                     	;# 
  2279  041C                     	;# 
  2280  041D                     	;# 
  2281  041E                     	;# 
  2282  0FE4                     	;# 
  2283  0FE5                     	;# 
  2284  0FE6                     	;# 
  2285  0FE7                     	;# 
  2286  0FE8                     	;# 
  2287  0FE9                     	;# 
  2288  0FEA                     	;# 
  2289  0FEB                     	;# 
  2290  0FED                     	;# 
  2291  0FEE                     	;# 
  2292  0FEF                     	;# 
  2293  0000                     	;# 
  2294  0001                     	;# 
  2295  0002                     	;# 
  2296  0003                     	;# 
  2297  0004                     	;# 
  2298  0005                     	;# 
  2299  0006                     	;# 
  2300  0007                     	;# 
  2301  0008                     	;# 
  2302  0009                     	;# 
  2303  000A                     	;# 
  2304  000B                     	;# 
  2305  000C                     	;# 
  2306  000D                     	;# 
  2307  000E                     	;# 
  2308  0011                     	;# 
  2309  0012                     	;# 
  2310  0013                     	;# 
  2311  0014                     	;# 
  2312  0015                     	;# 
  2313  0016                     	;# 
  2314  0016                     	;# 
  2315  0017                     	;# 
  2316  0018                     	;# 
  2317  0019                     	;# 
  2318  001A                     	;# 
  2319  001B                     	;# 
  2320  001C                     	;# 
  2321  001E                     	;# 
  2322  001F                     	;# 
  2323  008C                     	;# 
  2324  008D                     	;# 
  2325  008E                     	;# 
  2326  0091                     	;# 
  2327  0092                     	;# 
  2328  0093                     	;# 
  2329  0094                     	;# 
  2330  0095                     	;# 
  2331  0096                     	;# 
  2332  0097                     	;# 
  2333  0098                     	;# 
  2334  0099                     	;# 
  2335  009A                     	;# 
  2336  009B                     	;# 
  2337  009B                     	;# 
  2338  009C                     	;# 
  2339  009D                     	;# 
  2340  009E                     	;# 
  2341  010C                     	;# 
  2342  010D                     	;# 
  2343  010E                     	;# 
  2344  0111                     	;# 
  2345  0112                     	;# 
  2346  0113                     	;# 
  2347  0114                     	;# 
  2348  0115                     	;# 
  2349  0116                     	;# 
  2350  0117                     	;# 
  2351  0118                     	;# 
  2352  0119                     	;# 
  2353  011A                     	;# 
  2354  011B                     	;# 
  2355  011D                     	;# 
  2356  011E                     	;# 
  2357  018C                     	;# 
  2358  018D                     	;# 
  2359  018E                     	;# 
  2360  0191                     	;# 
  2361  0191                     	;# 
  2362  0192                     	;# 
  2363  0193                     	;# 
  2364  0193                     	;# 
  2365  0193                     	;# 
  2366  0194                     	;# 
  2367  0195                     	;# 
  2368  0196                     	;# 
  2369  0199                     	;# 
  2370  019A                     	;# 
  2371  019B                     	;# 
  2372  019B                     	;# 
  2373  019C                     	;# 
  2374  019D                     	;# 
  2375  019E                     	;# 
  2376  019F                     	;# 
  2377  020C                     	;# 
  2378  020D                     	;# 
  2379  020E                     	;# 
  2380  0211                     	;# 
  2381  0211                     	;# 
  2382  0212                     	;# 
  2383  0212                     	;# 
  2384  0213                     	;# 
  2385  0213                     	;# 
  2386  0214                     	;# 
  2387  0214                     	;# 
  2388  0215                     	;# 
  2389  0215                     	;# 
  2390  0215                     	;# 
  2391  0216                     	;# 
  2392  0216                     	;# 
  2393  0217                     	;# 
  2394  0217                     	;# 
  2395  0219                     	;# 
  2396  021A                     	;# 
  2397  021B                     	;# 
  2398  021C                     	;# 
  2399  021D                     	;# 
  2400  021E                     	;# 
  2401  021F                     	;# 
  2402  0291                     	;# 
  2403  0291                     	;# 
  2404  0292                     	;# 
  2405  0293                     	;# 
  2406  0294                     	;# 
  2407  0295                     	;# 
  2408  0295                     	;# 
  2409  0296                     	;# 
  2410  0298                     	;# 
  2411  0298                     	;# 
  2412  0299                     	;# 
  2413  029A                     	;# 
  2414  029B                     	;# 
  2415  029C                     	;# 
  2416  029D                     	;# 
  2417  029E                     	;# 
  2418  0311                     	;# 
  2419  0311                     	;# 
  2420  0312                     	;# 
  2421  0313                     	;# 
  2422  0318                     	;# 
  2423  0318                     	;# 
  2424  0319                     	;# 
  2425  031A                     	;# 
  2426  038C                     	;# 
  2427  038D                     	;# 
  2428  038E                     	;# 
  2429  0391                     	;# 
  2430  0392                     	;# 
  2431  0393                     	;# 
  2432  0394                     	;# 
  2433  0395                     	;# 
  2434  0396                     	;# 
  2435  039A                     	;# 
  2436  039C                     	;# 
  2437  039D                     	;# 
  2438  039E                     	;# 
  2439  039F                     	;# 
  2440  0415                     	;# 
  2441  0416                     	;# 
  2442  0417                     	;# 
  2443  041C                     	;# 
  2444  041D                     	;# 
  2445  041E                     	;# 
  2446  0FE4                     	;# 
  2447  0FE5                     	;# 
  2448  0FE6                     	;# 
  2449  0FE7                     	;# 
  2450  0FE8                     	;# 
  2451  0FE9                     	;# 
  2452  0FEA                     	;# 
  2453  0FEB                     	;# 
  2454  0FED                     	;# 
  2455  0FEE                     	;# 
  2456  0FEF                     	;# 
  2457                           
  2458 ;; Function _Sensor_DefaultCallback is unused but had its address taken
  2459  0000                     
  2460 ;; Function _MTOUCH_CVD_ScanA_0 is unused but had its address taken
  2461  0000                     
  2462 ;; Function _MTOUCH_CVD_ScanB_0 is unused but had its address taken
  2463  0000                     
  2464 ;; Function _MTOUCH_CVD_ScanA_1 is unused but had its address taken
  2465  0000                     
  2466 ;; Function _MTOUCH_CVD_ScanB_1 is unused but had its address taken
  2467  0000                     
  2468 ;; Function _Button_State_Initializing is unused but had its address taken
  2469  0000                     
  2470 ;; Function _Button_State_NotPressed is unused but had its address taken
  2471  0000                     
  2472 ;; Function _Button_State_Pressed is unused but had its address taken
  2473  0000                     
  2474 ;; Function _Button_DefaultCallback is unused but had its address taken
  2475  0000                     
  2476 ;; Function _EUSART_DefaultFramingErrorHandler is unused but had its address taken
  2477  0000                     
  2478 ;; Function _EUSART_DefaultOverrunErrorHandler is unused but had its address taken
  2479  0000                     
  2480 ;; Function _EUSART_DefaultErrorHandler is unused but had its address taken
  2481  0000                     
  2482                           	psect	idataBANK3
  2483  1B19                     __pidataBANK3:
  2484                           
  2485                           ;initializer for _Button_StateMachine
  2486  1B19  3400               	retlw	0
  2487  1B1A  3400               	retlw	0
  2488  1B1B  3400               	retlw	0
  2489  1B1C  3400               	retlw	0
  2490  1B1D  3400               	retlw	0
  2491  1B1E  3400               	retlw	0
  2492                           
  2493                           ;initializer for _callback_notPressed
  2494  1B1F  3400               	retlw	0
  2495  1B20  3400               	retlw	0
  2496                           
  2497                           ;initializer for _callback_pressed
  2498  1B21  3400               	retlw	0
  2499  1B22  3400               	retlw	0
  2500                           
  2501                           ;initializer for _Sensor_scanB
  2502  1B23  3400               	retlw	0
  2503  1B24  3400               	retlw	0
  2504                           
  2505                           ;initializer for _Sensor_scanA
  2506  1B25  3400               	retlw	0
  2507  1B26  3400               	retlw	0
  2508                           
  2509                           ;initializer for _callback_sampled
  2510  1B27  3400               	retlw	0
  2511  1B28  3400               	retlw	0
  2512                           
  2513                           	psect	idataBANK4
  2514  1B91                     __pidataBANK4:
  2515                           
  2516                           ;initializer for _mtouch_sensor
  2517  1B91  3400               	retlw	0
  2518  1B92  3400               	retlw	0
  2519  1B93  3400               	retlw	0
  2520  1B94  3400               	retlw	0
  2521  1B95  3400               	retlw	0
  2522  1B96  3420               	retlw	32
  2523  1B97  3400               	retlw	0
  2524  1B98  3400               	retlw	0
  2525  1B99  3400               	retlw	0
  2526  1B9A  3401               	retlw	1
  2527  1B9B  3400               	retlw	0
  2528  1B9C  3400               	retlw	0
  2529  1B9D  3400               	retlw	0
  2530  1B9E  3400               	retlw	0
  2531  1B9F  3420               	retlw	32
  2532  1BA0  3400               	retlw	0
  2533  1BA1  3400               	retlw	0
  2534  1BA2  3400               	retlw	0
  2535                           
  2536                           	psect	stringtext1
  2537  182C                     __pstringtext1:
  2538  182C                     _tiny:
  2539  182C  3460               	retlw	96
  2540  182D  3442               	retlw	66
  2541  182E  34A2               	retlw	162
  2542  182F  340D               	retlw	13
  2543  1830                     __end_of_tiny:
  2544                           
  2545                           	psect	stringtext2
  2546  1830                     __pstringtext2:
  2547  1830                     _TMR2_Period_const:
  2548  1830  3400               	retlw	0
  2549  1831  3400               	retlw	0
  2550  1832  34C8               	retlw	200
  2551  1833  3442               	retlw	66
  2552  1834                     __end_of_TMR2_Period_const:
  2553                           
  2554                           	psect	stringtext3
  2555  1834                     __pstringtext3:
  2556  1834                     _V_cc_const:
  2557  1834  3400               	retlw	0
  2558  1835  3400               	retlw	0
  2559  1836  34A0               	retlw	160
  2560  1837  3440               	retlw	64
  2561  1838                     __end_of_V_cc_const:
  2562                           
  2563                           	psect	stringtext4
  2564  1800                     __pstringtext4:
  2565  1800                     _mtouch_button_init:
  2566  1800  3400               	retlw	0
  2567  1801  3400               	retlw	0
  2568  1802  3400               	retlw	0
  2569  1803  3400               	retlw	0
  2570  1804  3400               	retlw	0
  2571  1805  3400               	retlw	0
  2572  1806  3400               	retlw	0
  2573  1807  3400               	retlw	0
  2574  1808  3400               	retlw	0
  2575  1809  3400               	retlw	0
  2576  180A  3400               	retlw	0
  2577  180B  3400               	retlw	0
  2578  180C  3400               	retlw	0
  2579  180D  3400               	retlw	0
  2580  180E  3464               	retlw	100
  2581  180F  3401               	retlw	1
  2582  1810  3401               	retlw	1
  2583  1811  3401               	retlw	1
  2584  1812  3400               	retlw	0
  2585  1813  3400               	retlw	0
  2586  1814  3400               	retlw	0
  2587  1815  3400               	retlw	0
  2588  1816  3400               	retlw	0
  2589  1817  3400               	retlw	0
  2590  1818  3400               	retlw	0
  2591  1819  3400               	retlw	0
  2592  181A  3400               	retlw	0
  2593  181B  3400               	retlw	0
  2594  181C  3400               	retlw	0
  2595  181D  3400               	retlw	0
  2596  181E  3464               	retlw	100
  2597  181F  3401               	retlw	1
  2598  1820                     __end_of_mtouch_button_init:
  2599                           
  2600                           	psect	stringtext5
  2601  1838                     __pstringtext5:
  2602  1838                     _HalfCycleACDuration_const:
  2603  1838  3400               	retlw	0
  2604  1839  3400               	retlw	0
  2605  183A  3420               	retlw	32
  2606  183B  3441               	retlw	65
  2607  183C                     __end_of_HalfCycleACDuration_const:
  2608                           
  2609                           	psect	stringtext6
  2610  183C                     __pstringtext6:
  2611  183C                     _Tolerance_Temp_const:
  2612  183C  34CD               	retlw	205
  2613  183D  34CC               	retlw	204
  2614  183E  3414               	retlw	20
  2615  183F  3442               	retlw	66
  2616  1840                     __end_of_Tolerance_Temp_const:
  2617                           
  2618                           	psect	stringtext7
  2619  1840                     __pstringtext7:
  2620  1840                     _R_const:
  2621  1840  3400               	retlw	0
  2622  1841  3400               	retlw	0
  2623  1842  34C8               	retlw	200
  2624  1843  3442               	retlw	66
  2625  1844                     __end_of_R_const:
  2626                           
  2627                           	psect	nvBANK3
  2628  01EA                     __pnvBANK3:
  2629  01EA                     _TMR4_InterruptHandler:
  2630  01EA                     	ds	2
  2631  01EC                     _TMR2_InterruptHandler:
  2632  01EC                     	ds	2
  2633  01EE                     _IOCAF2_InterruptHandler:
  2634  01EE                     	ds	2
  2635                           
  2636                           	psect	nvBANK4
  2637  0266                     __pnvBANK4:
  2638  0266                     _EUSART_ErrorHandler:
  2639  0266                     	ds	2
  2640  0268                     _EUSART_OverrunErrorHandler:
  2641  0268                     	ds	2
  2642  026A                     _EUSART_FramingErrorHandler:
  2643  026A                     	ds	2
  2644  000E                     _PORTCbits	set	14
  2645  001C                     _T2CONbits	set	28
  2646  001C                     _T2CON	set	28
  2647  001A                     _TMR2	set	26
  2648  001B                     _PR2	set	27
  2649  0013                     _PIR3bits	set	19
  2650  0011                     _PIR1bits	set	17
  2651  000B                     _INTCONbits	set	11
  2652  005F                     _GIE	set	95
  2653  0091                     _PIE1bits	set	145
  2654  0093                     _PIE3bits	set	147
  2655  009C                     _ADRESH	set	156
  2656  009B                     _ADRESL	set	155
  2657  0095                     _OPTION_REGbits	set	149
  2658  008E                     _TRISC	set	142
  2659  008D                     _TRISB	set	141
  2660  008C                     _TRISA	set	140
  2661  0097                     _WDTCON	set	151
  2662  0098                     _OSCTUNE	set	152
  2663  0099                     _OSCCON	set	153
  2664  009D                     _ADCON0bits	set	157
  2665  009E                     _ADCON1	set	158
  2666  009D                     _ADCON0	set	157
  2667  010E                     _LATCbits	set	270
  2668  011E                     _APFCON1	set	286
  2669  011D                     _APFCON0	set	285
  2670  010E                     _LATC	set	270
  2671  010D                     _LATB	set	269
  2672  010C                     _LATA	set	268
  2673  0116                     _BORCON	set	278
  2674  019A                     _TXREG	set	410
  2675  019E                     _TXSTAbits	set	414
  2676  019C                     _SPBRGH	set	412
  2677  019B                     _SPBRGL	set	411
  2678  019E                     _TXSTA	set	414
  2679  019D                     _RCSTA	set	413
  2680  019F                     _BAUDCON	set	415
  2681  018C                     _ANSELA	set	396
  2682  018D                     _ANSELB	set	397
  2683  018E                     _ANSELC	set	398
  2684  020E                     _WPUC	set	526
  2685  020C                     _WPUA	set	524
  2686  020D                     _WPUB	set	525
  2687  0391                     _IOCAPbits	set	913
  2688  0392                     _IOCANbits	set	914
  2689  0393                     _IOCAFbits	set	915
  2690  0417                     _T4CON	set	1047
  2691  0415                     _TMR4	set	1045
  2692  0416                     _PR4	set	1046
  2693                           
  2694                           	psect	stringtext8
  2695  1820                     __pstringtext8:
  2696  1820                     STR_1:
  2697  1820  3425               	retlw	37	;'%'
  2698  1821  3466               	retlw	102	;'f'
  2699  1822  3420               	retlw	32	;' '
  2700  1823  3443               	retlw	67	;'C'
  2701  1824  3465               	retlw	101	;'e'
  2702  1825  346C               	retlw	108	;'l'
  2703  1826  3473               	retlw	115	;'s'
  2704  1827  3469               	retlw	105	;'i'
  2705  1828  3475               	retlw	117	;'u'
  2706  1829  3473               	retlw	115	;'s'
  2707  182A  340A               	retlw	10
  2708  182B  3400               	retlw	0
  2709                           
  2710                           	psect	stringtext9
  2711  1844                     __pstringtext9:
  2712  1844                     STR_2:
  2713  1844  3449               	retlw	73	;'I'
  2714  1845  344E               	retlw	78	;'N'
  2715  1846  3446               	retlw	70	;'F'
  2716  1847  3400               	retlw	0
  2717                           
  2718                           	psect	stringtext10
  2719  1848                     __pstringtext10:
  2720  1848                     STR_6:
  2721  1848  344E               	retlw	78	;'N'
  2722  1849  3441               	retlw	65	;'A'
  2723  184A  344E               	retlw	78	;'N'
  2724  184B  3400               	retlw	0
  2725                           
  2726                           	psect	stringtext11
  2727  184C                     __pstringtext11:
  2728  184C                     STR_3:
  2729  184C  3469               	retlw	105	;'i'
  2730  184D  346E               	retlw	110	;'n'
  2731  184E  3466               	retlw	102	;'f'
  2732  184F  3400               	retlw	0
  2733                           
  2734                           	psect	stringtext12
  2735  1850                     __pstringtext12:
  2736  1850                     STR_7:
  2737  1850  346E               	retlw	110	;'n'
  2738  1851  3461               	retlw	97	;'a'
  2739  1852  346E               	retlw	110	;'n'
  2740  1853  3400               	retlw	0
  2741                           
  2742                           	psect	stringtext13
  2743  1854                     __pstringtext13:
  2744  1854                     STR_10:
  2745  1854  346C               	retlw	108	;'l'
  2746  1855  3466               	retlw	102	;'f'
  2747  1856  3400               	retlw	0
  2748                           
  2749                           	psect	stringtext14
  2750  0000                     __pstringtext14:
  2751  182B                     
  2752                           	psect	cinit
  2753  0025                     start_initialization:	
  2754                           ; #config settings
  2755                           
  2756  0025                     __initialization:
  2757                           
  2758                           ; Initialize objects allocated to BANK3
  2759  0025  3019               	movlw	low __pidataBANK3
  2760  0026  0084               	movwf	4
  2761  0027  309B               	movlw	(high __pidataBANK3)| (0+128)
  2762  0028  0085               	movwf	5
  2763  0029  30DA               	movlw	low __pdataBANK3
  2764  002A  0086               	movwf	6
  2765  002B  3001               	movlw	high __pdataBANK3
  2766  002C  0087               	movwf	7
  2767  002D  3010               	movlw	16
  2768  002E  319A  2277  3180   	fcall	init_ram
  2769                           
  2770                           ; Initialize objects allocated to BANK4
  2771  0031  3091               	movlw	low __pidataBANK4
  2772  0032  0084               	movwf	4
  2773  0033  309B               	movlw	(high __pidataBANK4)| (0+128)
  2774  0034  0085               	movwf	5
  2775  0035  3054               	movlw	low __pdataBANK4
  2776  0036  0086               	movwf	6
  2777  0037  3002               	movlw	high __pdataBANK4
  2778  0038  0087               	movwf	7
  2779  0039  3012               	movlw	18
  2780  003A  319A  2277  3180   	fcall	init_ram
  2781                           
  2782                           ; Clear objects allocated to BANK3
  2783  003D  30A0               	movlw	low __pbssBANK3
  2784  003E  0084               	movwf	4
  2785  003F  3001               	movlw	high __pbssBANK3
  2786  0040  0085               	movwf	5
  2787  0041  3025               	movlw	37
  2788  0042  319A  2271  3180   	fcall	clear_ram0
  2789                           
  2790                           ; Clear objects allocated to BANK4
  2791  0045  3020               	movlw	low __pbssBANK4
  2792  0046  0084               	movwf	4
  2793  0047  3002               	movlw	high __pbssBANK4
  2794  0048  0085               	movwf	5
  2795  0049  3034               	movlw	52
  2796  004A  319A  2271  3180   	fcall	clear_ram0
  2797                           
  2798                           ; Clear objects allocated to BANK5
  2799  004D  30A0               	movlw	low __pbssBANK5
  2800  004E  0084               	movwf	4
  2801  004F  3002               	movlw	high __pbssBANK5
  2802  0050  0085               	movwf	5
  2803  0051  3050               	movlw	80
  2804  0052  319A  2271         	fcall	clear_ram0
  2805  0054                     end_of_initialization:	
  2806                           ;End of C runtime variable initialization code
  2807                           
  2808  0054                     __end_of__initialization:
  2809  0054  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2810  0055  0020               	movlb	0
  2811  0056  3190  2820         	ljmp	_main	;jump to C main() function
  2812                           
  2813                           	psect	bssBANK3
  2814  01A0                     __pbssBANK3:
  2815  01A0                     floorf@F527:
  2816  01A0                     	ds	4
  2817  01A4                     ___fpclassifyf@F465:
  2818  01A4                     	ds	4
  2819  01A8                     _errno:
  2820  01A8                     	ds	2
  2821  01AA                     _nout:
  2822  01AA                     	ds	2
  2823  01AC                     _width:
  2824  01AC                     	ds	2
  2825  01AE                     _prec:
  2826  01AE                     	ds	2
  2827  01B0                     _flags:
  2828  01B0                     	ds	2
  2829  01B2                     TMR4_Wroking_Blink_AlarmLED_isr@counter_tmr4:
  2830  01B2                     	ds	2
  2831  01B4                     TMR2_Int_isr@counter_tmr2:
  2832  01B4                     	ds	2
  2833  01B6                     _required_delay_for_dim_ms_g:
  2834  01B6                     	ds	2
  2835  01B8                     _ADC_InterruptHandler:
  2836  01B8                     	ds	2
  2837  01BA                     _packet_sample:
  2838  01BA                     	ds	2
  2839  01BC                     _eusartRxLastError:
  2840  01BC                     	ds	1
  2841  01BD                     _mtouch_request_init:
  2842  01BD                     	ds	1
  2843  01BE                     _mtouch_time_toScan:
  2844  01BE                     	ds	1
  2845  01BF                     _lowpowerActivated:
  2846  01BF                     	ds	1
  2847  01C0                     _sample_delay:
  2848  01C0                     	ds	1
  2849  01C1                     _packet_counter:
  2850  01C1                     	ds	1
  2851  01C2                     _currentScannSensor:
  2852  01C2                     	ds	1
  2853  01C3                     _sensor_globalFlags:
  2854  01C3                     	ds	1
  2855  01C4                     MTOUCH_Random@seed:
  2856  01C4                     	ds	1
  2857                           
  2858                           	psect	dataBANK3
  2859  01DA                     __pdataBANK3:
  2860  01DA                     _Button_StateMachine:
  2861  01DA                     	ds	6
  2862  01E0                     _callback_notPressed:
  2863  01E0                     	ds	2
  2864  01E2                     _callback_pressed:
  2865  01E2                     	ds	2
  2866  01E4                     _Sensor_scanB:
  2867  01E4                     	ds	2
  2868  01E6                     _Sensor_scanA:
  2869  01E6                     	ds	2
  2870  01E8                     _callback_sampled:
  2871  01E8                     	ds	2
  2872                           
  2873                           	psect	bssBANK4
  2874  0220                     __pbssBANK4:
  2875  0220                     _mtouch_button:
  2876  0220                     	ds	32
  2877  0240                     _Buff_g:
  2878  0240                     	ds	20
  2879                           
  2880                           	psect	dataBANK4
  2881  0254                     __pdataBANK4:
  2882  0254                     _mtouch_sensor:
  2883  0254                     	ds	18
  2884                           
  2885                           	psect	bssBANK5
  2886  02A0                     __pbssBANK5:
  2887  02A0                     _dbuf:
  2888  02A0                     	ds	80
  2889                           
  2890                           	psect	inittext
  2891  1A77                     init_ram:
  2892  1A77  00FE               	movwf	126
  2893  1A78                     initloop:
  2894  1A78  0012               	moviw fsr0++
  2895  1A79  001E               	movwi fsr1++
  2896  1A7A  0BFE               	decfsz	126,f
  2897  1A7B  2A78               	goto	initloop
  2898  1A7C  3400               	retlw	0
  2899                           
  2900                           	psect	clrtext
  2901  1A71                     clear_ram0:	
  2902                           ;	Called with FSR0 containing the base address, and
  2903                           ;	WREG with the size to clear
  2904                           
  2905  1A71  0064               	clrwdt	;clear the watchdog before getting into this loop
  2906  1A72                     clrloop0:
  2907  1A72  0180               	clrf	0	;clear RAM location pointed to by FSR
  2908  1A73  3101               	addfsr 0,1
  2909  1A74  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2910  1A75  2A72               	goto	clrloop0	;have we reached the end yet?
  2911  1A76  3400               	retlw	0	;all done for this memory range, return
  2912                           
  2913                           	psect	cstackBANK3
  2914  01C5                     __pcstackBANK3:
  2915  01C5                     ?_sprintf:
  2916  01C5                     sprintf@fmt:	
  2917                           ; 2 bytes @ 0x0
  2918                           
  2919                           
  2920                           ; 2 bytes @ 0x0
  2921  01C5                     	ds	8
  2922  01CD                     sprintf@s:
  2923                           
  2924                           ; 1 bytes @ 0x8
  2925  01CD                     	ds	1
  2926  01CE                     sprintf@ap:
  2927                           
  2928                           ; 1 bytes @ 0x9
  2929  01CE                     	ds	1
  2930  01CF                     sprintf@f:
  2931                           
  2932                           ; 5 bytes @ 0xA
  2933  01CF                     	ds	5
  2934  01D4                     ??_main:
  2935                           
  2936                           ; 1 bytes @ 0xF
  2937  01D4                     	ds	2
  2938  01D6                     main@Temp_PT100:
  2939                           
  2940                           ; 4 bytes @ 0x11
  2941  01D6                     	ds	4
  2942                           
  2943                           	psect	cstackBANK2
  2944  0120                     __pcstackBANK2:
  2945  0120                     _efgtoa$2357:
  2946  0120                     Read_PT100_Temp@ADC_volt:	
  2947                           ; 2 bytes @ 0x0
  2948                           
  2949                           
  2950                           ; 4 bytes @ 0x0
  2951  0120                     	ds	2
  2952  0122                     _efgtoa$2358:
  2953                           
  2954                           ; 2 bytes @ 0x2
  2955  0122                     	ds	2
  2956  0124                     _efgtoa$2363:
  2957  0124                     Read_PT100_Temp@R_PT100:	
  2958                           ; 2 bytes @ 0x4
  2959                           
  2960                           
  2961                           ; 4 bytes @ 0x4
  2962  0124                     	ds	2
  2963  0126                     _efgtoa$2367:
  2964                           
  2965                           ; 2 bytes @ 0x6
  2966  0126                     	ds	2
  2967  0128                     _efgtoa$2368:
  2968  0128                     Read_PT100_Temp@Temp_PT100:	
  2969                           ; 2 bytes @ 0x8
  2970                           
  2971                           
  2972                           ; 4 bytes @ 0x8
  2973  0128                     	ds	2
  2974  012A                     _efgtoa$2369:
  2975                           
  2976                           ; 2 bytes @ 0xA
  2977  012A                     	ds	2
  2978  012C                     Read_PT100_Temp@ADC_num:
  2979  012C                     efgtoa@t:	
  2980                           ; 2 bytes @ 0xC
  2981                           
  2982                           
  2983                           ; 2 bytes @ 0xC
  2984  012C                     	ds	2
  2985  012E                     efgtoa@pp:
  2986                           
  2987                           ; 2 bytes @ 0xE
  2988  012E                     	ds	2
  2989  0130                     efgtoa@ne:
  2990                           
  2991                           ; 2 bytes @ 0x10
  2992  0130                     	ds	2
  2993  0132                     efgtoa@m:
  2994                           
  2995                           ; 2 bytes @ 0x12
  2996  0132                     	ds	2
  2997  0134                     efgtoa@ou:
  2998                           
  2999                           ; 4 bytes @ 0x14
  3000  0134                     	ds	4
  3001  0138                     efgtoa@d:
  3002                           
  3003                           ; 2 bytes @ 0x18
  3004  0138                     	ds	2
  3005  013A                     efgtoa@sign:
  3006                           
  3007                           ; 2 bytes @ 0x1A
  3008  013A                     	ds	2
  3009  013C                     efgtoa@fp:
  3010                           
  3011                           ; 1 bytes @ 0x1C
  3012  013C                     	ds	1
  3013  013D                     efgtoa@p:
  3014                           
  3015                           ; 2 bytes @ 0x1D
  3016  013D                     	ds	2
  3017  013F                     efgtoa@w:
  3018                           
  3019                           ; 2 bytes @ 0x1F
  3020  013F                     	ds	2
  3021  0141                     efgtoa@nmode:
  3022                           
  3023                           ; 1 bytes @ 0x21
  3024  0141                     	ds	1
  3025  0142                     efgtoa@mode:
  3026                           
  3027                           ; 1 bytes @ 0x22
  3028  0142                     	ds	1
  3029  0143                     efgtoa@h:
  3030                           
  3031                           ; 4 bytes @ 0x23
  3032  0143                     	ds	4
  3033  0147                     efgtoa@l:
  3034                           
  3035                           ; 4 bytes @ 0x27
  3036  0147                     	ds	4
  3037  014B                     efgtoa@i:
  3038                           
  3039                           ; 2 bytes @ 0x2B
  3040  014B                     	ds	2
  3041  014D                     efgtoa@g:
  3042                           
  3043                           ; 4 bytes @ 0x2D
  3044  014D                     	ds	4
  3045  0151                     efgtoa@e:
  3046                           
  3047                           ; 2 bytes @ 0x31
  3048  0151                     	ds	2
  3049  0153                     efgtoa@n:
  3050                           
  3051                           ; 2 bytes @ 0x33
  3052  0153                     	ds	2
  3053  0155                     efgtoa@u:
  3054                           
  3055                           ; 4 bytes @ 0x35
  3056  0155                     	ds	4
  3057  0159                     ??_vfpfcnvrt:
  3058                           
  3059                           ; 1 bytes @ 0x39
  3060  0159                     	ds	6
  3061  015F                     _vfpfcnvrt$2386:
  3062                           
  3063                           ; 2 bytes @ 0x3F
  3064  015F                     	ds	2
  3065  0161                     vfpfcnvrt@f:
  3066                           
  3067                           ; 4 bytes @ 0x41
  3068  0161                     	ds	4
  3069  0165                     vfpfcnvrt@ct:
  3070                           
  3071                           ; 3 bytes @ 0x45
  3072  0165                     	ds	3
  3073  0168                     vfpfcnvrt@c:
  3074                           
  3075                           ; 1 bytes @ 0x48
  3076  0168                     	ds	1
  3077  0169                     vfpfcnvrt@fp:
  3078                           
  3079                           ; 1 bytes @ 0x49
  3080  0169                     	ds	1
  3081  016A                     ??_vfprintf:
  3082                           
  3083                           ; 1 bytes @ 0x4A
  3084  016A                     	ds	2
  3085  016C                     vfprintf@fp:
  3086                           
  3087                           ; 1 bytes @ 0x4C
  3088  016C                     	ds	1
  3089  016D                     vfprintf@cfmt:
  3090                           
  3091                           ; 2 bytes @ 0x4D
  3092  016D                     	ds	2
  3093  016F                     ??_sprintf:
  3094                           
  3095                           ; 1 bytes @ 0x4F
  3096  016F                     	ds	1
  3097                           
  3098                           	psect	cstackBANK1
  3099  00A0                     __pcstackBANK1:
  3100  00A0                     	ds	4
  3101  00A4                     sqrtf@s:
  3102                           
  3103                           ; 4 bytes @ 0x4
  3104  00A4                     	ds	4
  3105  00A8                     sqrtf@i:
  3106                           
  3107                           ; 4 bytes @ 0x8
  3108  00A8                     	ds	4
  3109  00AC                     sqrtf@__xc8_float_word:
  3110                           
  3111                           ; 4 bytes @ 0xC
  3112  00AC                     	ds	4
  3113  00B0                     sqrtf@q:
  3114                           
  3115                           ; 4 bytes @ 0x10
  3116  00B0                     	ds	4
  3117  00B4                     sqrtf@t:
  3118                           
  3119                           ; 4 bytes @ 0x14
  3120  00B4                     	ds	4
  3121  00B8                     sqrtf@z:
  3122                           
  3123                           ; 4 bytes @ 0x18
  3124  00B8                     	ds	4
  3125  00BC                     sqrtf@m:
  3126                           
  3127                           ; 4 bytes @ 0x1C
  3128  00BC                     	ds	4
  3129  00C0                     sqrtf@r:
  3130                           
  3131                           ; 4 bytes @ 0x20
  3132  00C0                     	ds	4
  3133  00C4                     sqrtf@ix:
  3134                           
  3135                           ; 4 bytes @ 0x24
  3136  00C4                     	ds	4
  3137  00C8                     ?___fldiv:
  3138  00C8                     ___fldiv@a:	
  3139                           ; 4 bytes @ 0x28
  3140                           
  3141                           
  3142                           ; 4 bytes @ 0x28
  3143  00C8                     	ds	4
  3144  00CC                     ___fldiv@b:
  3145                           
  3146                           ; 4 bytes @ 0x2C
  3147  00CC                     	ds	4
  3148  00D0                     ?_floorf:
  3149  00D0                     ?_ChangeADCtoVoltage:	
  3150                           ; 4 bytes @ 0x30
  3151                           
  3152  00D0                     ?_Measure_R_PT100_2Wire:	
  3153                           ; 4 bytes @ 0x30
  3154                           
  3155  00D0                     ?_Measure_Temp_PT100_2Wire:	
  3156                           ; 4 bytes @ 0x30
  3157                           
  3158  00D0                     ?___fltol:	
  3159                           ; 4 bytes @ 0x30
  3160                           
  3161  00D0                     ChangeADCtoVoltage@ADC_number:	
  3162                           ; 4 bytes @ 0x30
  3163                           
  3164  00D0                     Measure_R_PT100_2Wire@ADC_volt:	
  3165                           ; 2 bytes @ 0x30
  3166                           
  3167  00D0                     Measure_Temp_PT100_2Wire@R_PT100:	
  3168                           ; 4 bytes @ 0x30
  3169                           
  3170  00D0                     ___fltol@f1:	
  3171                           ; 4 bytes @ 0x30
  3172                           
  3173  00D0                     floorf@x:	
  3174                           ; 4 bytes @ 0x30
  3175                           
  3176                           
  3177                           ; 4 bytes @ 0x30
  3178  00D0                     	ds	4
  3179  00D4                     ??_floorf:
  3180  00D4                     ??___fltol:	
  3181                           ; 1 bytes @ 0x34
  3182                           
  3183  00D4                     Measure_Temp_PT100_2Wire@Temp_PT100:	
  3184                           ; 1 bytes @ 0x34
  3185                           
  3186                           
  3187                           ; 4 bytes @ 0x34
  3188  00D4                     	ds	4
  3189  00D8                     _Measure_Temp_PT100_2Wire$2891:
  3190                           
  3191                           ; 4 bytes @ 0x38
  3192  00D8                     	ds	1
  3193  00D9                     ?_CalcRequiredDelayForTrigTRIAC:
  3194  00D9                     CalcRequiredDelayForTrigTRIAC@dim_percentage:	
  3195                           ; 2 bytes @ 0x39
  3196                           
  3197                           
  3198                           ; 4 bytes @ 0x39
  3199  00D9                     	ds	1
  3200  00DA                     floorf@m:
  3201                           
  3202                           ; 4 bytes @ 0x3A
  3203  00DA                     	ds	2
  3204  00DC                     _Measure_Temp_PT100_2Wire$2892:
  3205                           
  3206                           ; 4 bytes @ 0x3C
  3207  00DC                     	ds	1
  3208  00DD                     CalcRequiredDelayForTrigTRIAC@delay:
  3209                           
  3210                           ; 4 bytes @ 0x3D
  3211  00DD                     	ds	1
  3212  00DE                     floorf@e:
  3213                           
  3214                           ; 2 bytes @ 0x3E
  3215  00DE                     	ds	2
  3216  00E0                     floorf@u:
  3217  00E0                     _Measure_Temp_PT100_2Wire$2893:	
  3218                           ; 4 bytes @ 0x40
  3219                           
  3220                           
  3221                           ; 4 bytes @ 0x40
  3222  00E0                     	ds	1
  3223  00E1                     CalcRequiredDelayForTrigTRIAC@ret:
  3224                           
  3225                           ; 2 bytes @ 0x41
  3226  00E1                     	ds	3
  3227  00E4                     ?_efgtoa:
  3228  00E4                     ?_Read_PT100_Temp:	
  3229                           ; 2 bytes @ 0x44
  3230                           
  3231  00E4                     efgtoa@f:	
  3232                           ; 4 bytes @ 0x44
  3233                           
  3234                           
  3235                           ; 4 bytes @ 0x44
  3236  00E4                     	ds	4
  3237  00E8                     efgtoa@c:
  3238                           
  3239                           ; 1 bytes @ 0x48
  3240  00E8                     	ds	1
  3241  00E9                     ??_efgtoa:
  3242                           
  3243                           ; 1 bytes @ 0x49
  3244  00E9                     	ds	4
  3245  00ED                     ?_vfprintf:
  3246  00ED                     vfprintf@fmt:	
  3247                           ; 2 bytes @ 0x4D
  3248                           
  3249                           
  3250                           ; 2 bytes @ 0x4D
  3251  00ED                     	ds	2
  3252  00EF                     vfprintf@ap:
  3253                           
  3254                           ; 1 bytes @ 0x4F
  3255  00EF                     	ds	1
  3256                           
  3257                           	psect	cstackCOMMON
  3258  0070                     __pcstackCOMMON:
  3259  0070                     ?___fleq:
  3260  0070                     ?_MTOUCH_Sensor_Enable:	
  3261                           ; 1 bit 
  3262                           
  3263  0070                     ?_Sensor_Sampled_Reset:	
  3264                           ; 1 bytes @ 0x0
  3265                           
  3266  0070                     ??_Sensor_Sampled_Reset:	
  3267                           ; 1 bytes @ 0x0
  3268                           
  3269  0070                     ?_memcpy:	
  3270                           ; 1 bytes @ 0x0
  3271                           
  3272  0070                     ?_PIN_MANAGER_Initialize:	
  3273                           ; 1 bytes @ 0x0
  3274                           
  3275  0070                     ?_OSCILLATOR_Initialize:	
  3276                           ; 1 bytes @ 0x0
  3277                           
  3278  0070                     ??_OSCILLATOR_Initialize:	
  3279                           ; 1 bytes @ 0x0
  3280                           
  3281  0070                     ?_WDT_Initialize:	
  3282                           ; 1 bytes @ 0x0
  3283                           
  3284  0070                     ??_WDT_Initialize:	
  3285                           ; 1 bytes @ 0x0
  3286                           
  3287  0070                     ?_ADC_Initialize:	
  3288                           ; 1 bytes @ 0x0
  3289                           
  3290  0070                     ??_ADC_Initialize:	
  3291                           ; 1 bytes @ 0x0
  3292                           
  3293  0070                     ?_TMR4_Initialize:	
  3294                           ; 1 bytes @ 0x0
  3295                           
  3296  0070                     ?_TMR2_Initialize:	
  3297                           ; 1 bytes @ 0x0
  3298                           
  3299  0070                     ?_EUSART_Initialize:	
  3300                           ; 1 bytes @ 0x0
  3301                           
  3302  0070                     ?_IOCAF2_SetInterruptHandler:	
  3303                           ; 1 bytes @ 0x0
  3304                           
  3305  0070                     ?_IOCAF2_DefaultInterruptHandler:	
  3306                           ; 1 bytes @ 0x0
  3307                           
  3308  0070                     ??_IOCAF2_DefaultInterruptHandler:	
  3309                           ; 1 bytes @ 0x0
  3310                           
  3311  0070                     ?_IOCAF2_ISR:	
  3312                           ; 1 bytes @ 0x0
  3313                           
  3314  0070                     ??_IOCAF2_ISR:	
  3315                           ; 1 bytes @ 0x0
  3316                           
  3317  0070                     ?_EUSART_SetFramingErrorHandler:	
  3318                           ; 1 bytes @ 0x0
  3319                           
  3320  0070                     ?_EUSART_SetOverrunErrorHandler:	
  3321                           ; 1 bytes @ 0x0
  3322                           
  3323  0070                     ?_EUSART_SetErrorHandler:	
  3324                           ; 1 bytes @ 0x0
  3325                           
  3326  0070                     ?_TMR4_ISR:	
  3327                           ; 1 bytes @ 0x0
  3328                           
  3329  0070                     ??_TMR4_ISR:	
  3330                           ; 1 bytes @ 0x0
  3331                           
  3332  0070                     ?_TMR2_ISR:	
  3333                           ; 1 bytes @ 0x0
  3334                           
  3335  0070                     ??_TMR2_ISR:	
  3336                           ; 1 bytes @ 0x0
  3337                           
  3338  0070                     ?_TMR2_SetInterruptHandler:	
  3339                           ; 1 bytes @ 0x0
  3340                           
  3341  0070                     ?_TMR2_DefaultInterruptHandler:	
  3342                           ; 1 bytes @ 0x0
  3343                           
  3344  0070                     ??_TMR2_DefaultInterruptHandler:	
  3345                           ; 1 bytes @ 0x0
  3346                           
  3347  0070                     ?_Init_Function:	
  3348                           ; 1 bytes @ 0x0
  3349                           
  3350  0070                     ?_Zero_Detection_isr:	
  3351                           ; 1 bytes @ 0x0
  3352                           
  3353  0070                     ??_Zero_Detection_isr:	
  3354                           ; 1 bytes @ 0x0
  3355                           
  3356  0070                     ?_TMR2_Int_isr:	
  3357                           ; 1 bytes @ 0x0
  3358                           
  3359  0070                     ??_TMR2_Int_isr:	
  3360                           ; 1 bytes @ 0x0
  3361                           
  3362  0070                     ?_TMR4_SetInterruptHandler:	
  3363                           ; 1 bytes @ 0x0
  3364                           
  3365  0070                     ?_TMR4_Wroking_Blink_AlarmLED_isr:	
  3366                           ; 1 bytes @ 0x0
  3367                           
  3368  0070                     ??_TMR4_Wroking_Blink_AlarmLED_isr:	
  3369                           ; 1 bytes @ 0x0
  3370                           
  3371  0070                     ?_TX_Whole_String:	
  3372                           ; 1 bytes @ 0x0
  3373                           
  3374  0070                     ?_StartStop_AlarmLED:	
  3375                           ; 1 bytes @ 0x0
  3376                           
  3377  0070                     ??_StartStop_AlarmLED:	
  3378                           ; 1 bytes @ 0x0
  3379                           
  3380  0070                     ?_StartStop_Fan:	
  3381                           ; 1 bytes @ 0x0
  3382                           
  3383  0070                     ??_StartStop_Fan:	
  3384                           ; 1 bytes @ 0x0
  3385                           
  3386  0070                     ?_StartStop_Buzzer:	
  3387                           ; 1 bytes @ 0x0
  3388                           
  3389  0070                     ??_StartStop_Buzzer:	
  3390                           ; 1 bytes @ 0x0
  3391                           
  3392  0070                     ?_TMR4_DefaultInterruptHandler:	
  3393                           ; 1 bytes @ 0x0
  3394                           
  3395  0070                     ??_TMR4_DefaultInterruptHandler:	
  3396                           ; 1 bytes @ 0x0
  3397                           
  3398  0070                     ?_strcpy:	
  3399                           ; 1 bytes @ 0x0
  3400                           
  3401  0070                     ?_putch:	
  3402                           ; 1 bytes @ 0x0
  3403                           
  3404  0070                     ??_putch:	
  3405                           ; 1 bytes @ 0x0
  3406                           
  3407  0070                     ?_MTOUCH_Sensor_Initialize:	
  3408                           ; 1 bytes @ 0x0
  3409                           
  3410  0070                     ?_MTOUCH_Sensor_InitializeAll:	
  3411                           ; 1 bytes @ 0x0
  3412                           
  3413  0070                     ?_MTOUCH_Sensor_Scan_Initialize:	
  3414                           ; 1 bytes @ 0x0
  3415                           
  3416  0070                     ??_MTOUCH_Sensor_Scan_Initialize:	
  3417                           ; 1 bytes @ 0x0
  3418                           
  3419  0070                     ?_MTOUCH_Sensor_Calibrate:	
  3420                           ; 1 bytes @ 0x0
  3421                           
  3422  0070                     ??_MTOUCH_Sensor_Calibrate:	
  3423                           ; 1 bytes @ 0x0
  3424                           
  3425  0070                     ?_MTOUCH_Sensor_Sampled_ResetAll:	
  3426                           ; 1 bytes @ 0x0
  3427                           
  3428  0070                     ?_MTOUCH_Button_Initialize:	
  3429                           ; 1 bytes @ 0x0
  3430                           
  3431  0070                     ??_MTOUCH_Button_Initialize:	
  3432                           ; 1 bytes @ 0x0
  3433                           
  3434  0070                     ?_MTOUCH_Button_InitializeAll:	
  3435                           ; 1 bytes @ 0x0
  3436                           
  3437  0070                     ?_MTOUCH_Initialize:	
  3438                           ; 1 bytes @ 0x0
  3439                           
  3440  0070                     ?_SYSTEM_Initialize:	
  3441                           ; 1 bytes @ 0x0
  3442                           
  3443  0070                     ?_PIN_MANAGER_IOC:	
  3444                           ; 1 bytes @ 0x0
  3445                           
  3446  0070                     ??_PIN_MANAGER_IOC:	
  3447                           ; 1 bytes @ 0x0
  3448                           
  3449  0070                     ?_EUSART_is_tx_ready:	
  3450                           ; 1 bytes @ 0x0
  3451                           
  3452  0070                     ??_EUSART_is_tx_ready:	
  3453                           ; 1 bytes @ 0x0
  3454                           
  3455  0070                     ?_EUSART_Write:	
  3456                           ; 1 bytes @ 0x0
  3457                           
  3458  0070                     ??_EUSART_Write:	
  3459                           ; 1 bytes @ 0x0
  3460                           
  3461  0070                     ?_ADC_SelectChannel:	
  3462                           ; 1 bytes @ 0x0
  3463                           
  3464  0070                     ??_ADC_SelectChannel:	
  3465                           ; 1 bytes @ 0x0
  3466                           
  3467  0070                     ?_ADC_StartConversion:	
  3468                           ; 1 bytes @ 0x0
  3469                           
  3470  0070                     ??_ADC_StartConversion:	
  3471                           ; 1 bytes @ 0x0
  3472                           
  3473  0070                     ?_ADC_IsConversionDone:	
  3474                           ; 1 bytes @ 0x0
  3475                           
  3476  0070                     ??_ADC_IsConversionDone:	
  3477                           ; 1 bytes @ 0x0
  3478                           
  3479  0070                     ?_INTERRUPT_InterruptManager:	
  3480                           ; 1 bytes @ 0x0
  3481                           
  3482  0070                     ??_INTERRUPT_InterruptManager:	
  3483                           ; 1 bytes @ 0x0
  3484                           
  3485  0070                     ?_TMR2_StartTimer:	
  3486                           ; 1 bytes @ 0x0
  3487                           
  3488  0070                     ??_TMR2_StartTimer:	
  3489                           ; 1 bytes @ 0x0
  3490                           
  3491  0070                     ?_TMR2_StopTimer:	
  3492                           ; 1 bytes @ 0x0
  3493                           
  3494  0070                     ??_TMR2_StopTimer:	
  3495                           ; 1 bytes @ 0x0
  3496                           
  3497  0070                     ?_main:	
  3498                           ; 1 bytes @ 0x0
  3499                           
  3500  0070                     ?_TX_Command:	
  3501                           ; 1 bytes @ 0x0
  3502                           
  3503  0070                     ?___bmul:	
  3504                           ; 1 bytes @ 0x0
  3505                           
  3506  0070                     ?_strlen:	
  3507                           ; 1 bytes @ 0x0
  3508                           
  3509  0070                     ?__Umul8_16:	
  3510                           ; 2 bytes @ 0x0
  3511                           
  3512  0070                     ?_fputc:	
  3513                           ; 2 bytes @ 0x0
  3514                           
  3515  0070                     ?___fpclassifyf:	
  3516                           ; 2 bytes @ 0x0
  3517                           
  3518  0070                     ?_isupper:	
  3519                           ; 2 bytes @ 0x0
  3520                           
  3521  0070                     ?_strncmp:	
  3522                           ; 2 bytes @ 0x0
  3523                           
  3524  0070                     ?_ADC_GetConversionResult:	
  3525                           ; 2 bytes @ 0x0
  3526                           
  3527  0070                     ?___awdiv:	
  3528                           ; 2 bytes @ 0x0
  3529                           
  3530  0070                     ?___awmod:	
  3531                           ; 2 bytes @ 0x0
  3532                           
  3533  0070                     ?_nanf:	
  3534                           ; 2 bytes @ 0x0
  3535                           
  3536  0070                     ?___flneg:	
  3537                           ; 4 bytes @ 0x0
  3538                           
  3539  0070                     ?___xxtofl:	
  3540                           ; 4 bytes @ 0x0
  3541                           
  3542  0070                     MTOUCH_Sensor_Calibrate@sensor:	
  3543                           ; 4 bytes @ 0x0
  3544                           
  3545  0070                     Sensor_Sampled_Reset@sensor:	
  3546                           ; 1 bytes @ 0x0
  3547                           
  3548  0070                     _EUSART_is_tx_ready$1170:	
  3549                           ; 1 bytes @ 0x0
  3550                           
  3551  0070                     EUSART_Write@txData:	
  3552                           ; 1 bytes @ 0x0
  3553                           
  3554  0070                     StartStop_AlarmLED@OnOff:	
  3555                           ; 1 bytes @ 0x0
  3556                           
  3557  0070                     StartStop_Fan@OnOff:	
  3558                           ; 1 bytes @ 0x0
  3559                           
  3560  0070                     StartStop_Buzzer@OnOff:	
  3561                           ; 1 bytes @ 0x0
  3562                           
  3563  0070                     ___bmul@multiplicand:	
  3564                           ; 1 bytes @ 0x0
  3565                           
  3566  0070                     __Umul8_16@multiplicand:	
  3567                           ; 1 bytes @ 0x0
  3568                           
  3569  0070                     putch@c:	
  3570                           ; 1 bytes @ 0x0
  3571                           
  3572  0070                     IOCAF2_SetInterruptHandler@InterruptHandler:	
  3573                           ; 1 bytes @ 0x0
  3574                           
  3575  0070                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3576                           ; 2 bytes @ 0x0
  3577                           
  3578  0070                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3579                           ; 2 bytes @ 0x0
  3580                           
  3581  0070                     EUSART_SetErrorHandler@interruptHandler:	
  3582                           ; 2 bytes @ 0x0
  3583                           
  3584  0070                     TMR2_SetInterruptHandler@InterruptHandler:	
  3585                           ; 2 bytes @ 0x0
  3586                           
  3587  0070                     TMR4_SetInterruptHandler@InterruptHandler:	
  3588                           ; 2 bytes @ 0x0
  3589                           
  3590  0070                     ___awdiv@divisor:	
  3591                           ; 2 bytes @ 0x0
  3592                           
  3593  0070                     ___awmod@divisor:	
  3594                           ; 2 bytes @ 0x0
  3595                           
  3596  0070                     memcpy@s1:	
  3597                           ; 2 bytes @ 0x0
  3598                           
  3599  0070                     isupper@c:	
  3600                           ; 2 bytes @ 0x0
  3601                           
  3602  0070                     fputc@c:	
  3603                           ; 2 bytes @ 0x0
  3604                           
  3605  0070                     nanf@s:	
  3606                           ; 2 bytes @ 0x0
  3607                           
  3608  0070                     strcpy@src:	
  3609                           ; 2 bytes @ 0x0
  3610                           
  3611  0070                     strncmp@_r:	
  3612                           ; 2 bytes @ 0x0
  3613                           
  3614  0070                     ___fleq@ff1:	
  3615                           ; 2 bytes @ 0x0
  3616                           
  3617  0070                     ___flneg@f1:	
  3618                           ; 4 bytes @ 0x0
  3619                           
  3620  0070                     ___xxtofl@val:	
  3621                           ; 4 bytes @ 0x0
  3622                           
  3623  0070                     ___fpclassifyf@x:	
  3624                           ; 4 bytes @ 0x0
  3625                           
  3626                           
  3627                           ; 4 bytes @ 0x0
  3628  0070                     	ds	1
  3629  0071                     ??_MTOUCH_Sensor_Sampled_ResetAll:
  3630  0071                     ??_TX_Command:	
  3631                           ; 1 bytes @ 0x1
  3632                           
  3633  0071                     ??___bmul:	
  3634                           ; 1 bytes @ 0x1
  3635                           
  3636  0071                     ADC_SelectChannel@channel:	
  3637                           ; 1 bytes @ 0x1
  3638                           
  3639  0071                     TX_Command@txData:	
  3640                           ; 1 bytes @ 0x1
  3641                           
  3642                           
  3643                           ; 1 bytes @ 0x1
  3644  0071                     	ds	1
  3645  0072                     ??_PIN_MANAGER_Initialize:
  3646  0072                     ??_TMR4_Initialize:	
  3647                           ; 1 bytes @ 0x2
  3648                           
  3649  0072                     ??_TMR2_Initialize:	
  3650                           ; 1 bytes @ 0x2
  3651                           
  3652  0072                     ??_EUSART_Initialize:	
  3653                           ; 1 bytes @ 0x2
  3654                           
  3655  0072                     ??_IOCAF2_SetInterruptHandler:	
  3656                           ; 1 bytes @ 0x2
  3657                           
  3658  0072                     ??_EUSART_SetFramingErrorHandler:	
  3659                           ; 1 bytes @ 0x2
  3660                           
  3661  0072                     ??_EUSART_SetOverrunErrorHandler:	
  3662                           ; 1 bytes @ 0x2
  3663                           
  3664  0072                     ??_EUSART_SetErrorHandler:	
  3665                           ; 1 bytes @ 0x2
  3666                           
  3667  0072                     ??_TMR2_SetInterruptHandler:	
  3668                           ; 1 bytes @ 0x2
  3669                           
  3670  0072                     ??_TMR4_SetInterruptHandler:	
  3671                           ; 1 bytes @ 0x2
  3672                           
  3673  0072                     ??_strlen:	
  3674                           ; 1 bytes @ 0x2
  3675                           
  3676  0072                     ??__Umul8_16:	
  3677                           ; 1 bytes @ 0x2
  3678                           
  3679  0072                     ??_isupper:	
  3680                           ; 1 bytes @ 0x2
  3681                           
  3682  0072                     ??_strcpy:	
  3683                           ; 1 bytes @ 0x2
  3684                           
  3685  0072                     ??_ADC_GetConversionResult:	
  3686                           ; 1 bytes @ 0x2
  3687                           
  3688  0072                     ?_Read_ADC_Num:	
  3689                           ; 1 bytes @ 0x2
  3690                           
  3691  0072                     MTOUCH_Sensor_Sampled_ResetAll@sensor:	
  3692                           ; 2 bytes @ 0x2
  3693                           
  3694  0072                     MTOUCH_Button_Initialize@name:	
  3695                           ; 1 bytes @ 0x2
  3696                           
  3697  0072                     ___bmul@product:	
  3698                           ; 1 bytes @ 0x2
  3699                           
  3700  0072                     fputc@fp:	
  3701                           ; 1 bytes @ 0x2
  3702                           
  3703  0072                     ___awdiv@dividend:	
  3704                           ; 1 bytes @ 0x2
  3705                           
  3706  0072                     ___awmod@dividend:	
  3707                           ; 2 bytes @ 0x2
  3708                           
  3709  0072                     memcpy@n:	
  3710                           ; 2 bytes @ 0x2
  3711                           
  3712  0072                     strncmp@n:	
  3713                           ; 2 bytes @ 0x2
  3714                           
  3715                           
  3716                           ; 2 bytes @ 0x2
  3717  0072                     	ds	1
  3718  0073                     ??_fputc:
  3719  0073                     MTOUCH_Button_Initialize@button:	
  3720                           ; 1 bytes @ 0x3
  3721                           
  3722  0073                     ___bmul@multiplier:	
  3723                           ; 1 bytes @ 0x3
  3724                           
  3725  0073                     strlen@a:	
  3726                           ; 1 bytes @ 0x3
  3727                           
  3728                           
  3729                           ; 1 bytes @ 0x3
  3730  0073                     	ds	1
  3731  0074                     ??_MTOUCH_Sensor_Enable:
  3732  0074                     ??_memcpy:	
  3733                           ; 1 bytes @ 0x4
  3734                           
  3735  0074                     ??___fpclassifyf:	
  3736                           ; 1 bytes @ 0x4
  3737                           
  3738  0074                     ??_strncmp:	
  3739                           ; 1 bytes @ 0x4
  3740                           
  3741  0074                     ??_nanf:	
  3742                           ; 1 bytes @ 0x4
  3743                           
  3744  0074                     ??_Read_ADC_Num:	
  3745                           ; 1 bytes @ 0x4
  3746                           
  3747  0074                     ??___awdiv:	
  3748                           ; 1 bytes @ 0x4
  3749                           
  3750  0074                     ??___awmod:	
  3751                           ; 1 bytes @ 0x4
  3752                           
  3753  0074                     ??___flneg:	
  3754                           ; 1 bytes @ 0x4
  3755                           
  3756  0074                     ??___xxtofl:	
  3757                           ; 1 bytes @ 0x4
  3758                           
  3759  0074                     strlen@s:	
  3760                           ; 1 bytes @ 0x4
  3761                           
  3762  0074                     Read_ADC_Num@convertedValue:	
  3763                           ; 1 bytes @ 0x4
  3764                           
  3765  0074                     __Umul8_16@product:	
  3766                           ; 2 bytes @ 0x4
  3767                           
  3768  0074                     strcpy@s:	
  3769                           ; 2 bytes @ 0x4
  3770                           
  3771  0074                     ___fleq@ff2:	
  3772                           ; 2 bytes @ 0x4
  3773                           
  3774  0074                     nanf@u:	
  3775                           ; 4 bytes @ 0x4
  3776                           
  3777                           
  3778                           ; 4 bytes @ 0x4
  3779  0074                     	ds	1
  3780  0075                     ??_TX_Whole_String:
  3781  0075                     MTOUCH_Sensor_Enable@sensor:	
  3782                           ; 1 bytes @ 0x5
  3783                           
  3784  0075                     ___awdiv@counter:	
  3785                           ; 1 bytes @ 0x5
  3786                           
  3787  0075                     ___awmod@counter:	
  3788                           ; 1 bytes @ 0x5
  3789                           
  3790  0075                     strncmp@_l:	
  3791                           ; 1 bytes @ 0x5
  3792                           
  3793  0075                     memcpy@s:	
  3794                           ; 1 bytes @ 0x5
  3795                           
  3796                           
  3797                           ; 2 bytes @ 0x5
  3798  0075                     	ds	1
  3799  0076                     ??_MTOUCH_Sensor_Initialize:
  3800  0076                     ?_tolower:	
  3801                           ; 1 bytes @ 0x6
  3802                           
  3803  0076                     ___awdiv@sign:	
  3804                           ; 2 bytes @ 0x6
  3805                           
  3806  0076                     ___awmod@sign:	
  3807                           ; 1 bytes @ 0x6
  3808                           
  3809  0076                     strcpy@d:	
  3810                           ; 1 bytes @ 0x6
  3811                           
  3812  0076                     __Umul8_16@word_mpld:	
  3813                           ; 1 bytes @ 0x6
  3814                           
  3815  0076                     strncmp@r:	
  3816                           ; 2 bytes @ 0x6
  3817                           
  3818  0076                     tolower@c:	
  3819                           ; 2 bytes @ 0x6
  3820                           
  3821                           
  3822                           ; 2 bytes @ 0x6
  3823  0076                     	ds	1
  3824  0077                     MTOUCH_Sensor_Initialize@sensor:
  3825  0077                     memcpy@tmp:	
  3826                           ; 1 bytes @ 0x7
  3827                           
  3828  0077                     strcpy@dest:	
  3829                           ; 1 bytes @ 0x7
  3830                           
  3831  0077                     TX_Whole_String@size_of_string:	
  3832                           ; 1 bytes @ 0x7
  3833                           
  3834  0077                     ___awdiv@quotient:	
  3835                           ; 2 bytes @ 0x7
  3836                           
  3837                           
  3838                           ; 2 bytes @ 0x7
  3839  0077                     	ds	1
  3840  0078                     ??_tolower:
  3841  0078                     ??_MTOUCH_Sensor_InitializeAll:	
  3842                           ; 1 bytes @ 0x8
  3843                           
  3844  0078                     ??___fleq:	
  3845                           ; 1 bytes @ 0x8
  3846                           
  3847  0078                     ?_fputs:	
  3848                           ; 1 bytes @ 0x8
  3849                           
  3850  0078                     __Umul8_16@multiplier:	
  3851                           ; 2 bytes @ 0x8
  3852                           
  3853  0078                     ___xxtofl@sign:	
  3854                           ; 1 bytes @ 0x8
  3855                           
  3856  0078                     memcpy@d1:	
  3857                           ; 1 bytes @ 0x8
  3858                           
  3859  0078                     fputs@fp:	
  3860                           ; 1 bytes @ 0x8
  3861                           
  3862  0078                     strncmp@l:	
  3863                           ; 1 bytes @ 0x8
  3864                           
  3865                           
  3866                           ; 1 bytes @ 0x8
  3867  0078                     	ds	1
  3868  0079                     ??_fputs:
  3869  0079                     MTOUCH_Sensor_InitializeAll@sensor:	
  3870                           ; 1 bytes @ 0x9
  3871                           
  3872  0079                     TX_Whole_String@input_string:	
  3873                           ; 1 bytes @ 0x9
  3874                           
  3875  0079                     ___xxtofl@exp:	
  3876                           ; 1 bytes @ 0x9
  3877                           
  3878  0079                     memcpy@d:	
  3879                           ; 1 bytes @ 0x9
  3880                           
  3881                           
  3882                           ; 1 bytes @ 0x9
  3883  0079                     	ds	1
  3884  007A                     ??_MTOUCH_Button_InitializeAll:
  3885  007A                     TX_Whole_String@i:	
  3886                           ; 1 bytes @ 0xA
  3887                           
  3888  007A                     ___xxtofl@arg:	
  3889                           ; 1 bytes @ 0xA
  3890                           
  3891                           
  3892                           ; 4 bytes @ 0xA
  3893  007A                     	ds	1
  3894  007B                     MTOUCH_Button_InitializeAll@button:
  3895                           
  3896                           ; 1 bytes @ 0xB
  3897  007B                     	ds	1
  3898  007C                     ??_MTOUCH_Initialize:
  3899  007C                     ??_SYSTEM_Initialize:	
  3900                           ; 1 bytes @ 0xC
  3901                           
  3902  007C                     ??_pad:	
  3903                           ; 1 bytes @ 0xC
  3904                           
  3905  007C                     _tolower$2518:	
  3906                           ; 1 bytes @ 0xC
  3907                           
  3908                           
  3909                           ; 2 bytes @ 0xC
  3910  007C                     	ds	2
  3911  007E                     ??_Init_Function:
  3912  007E                     ??_Read_PT100_Temp:	
  3913                           ; 1 bytes @ 0xE
  3914                           
  3915  007E                     ??_CalcRequiredDelayForTrigTRIAC:	
  3916                           ; 1 bytes @ 0xE
  3917                           
  3918  007E                     ??_ChangeADCtoVoltage:	
  3919                           ; 1 bytes @ 0xE
  3920                           
  3921  007E                     ??_Measure_R_PT100_2Wire:	
  3922                           ; 1 bytes @ 0xE
  3923                           
  3924  007E                     ??_Measure_Temp_PT100_2Wire:	
  3925                           ; 1 bytes @ 0xE
  3926                           
  3927  007E                     ??___flsub:	
  3928                           ; 1 bytes @ 0xE
  3929                           
  3930                           
  3931                           	psect	cstackBANK0
  3932  0020                     __pcstackBANK0:	
  3933                           ; 1 bytes @ 0xE
  3934                           
  3935  0020                     ?___flmul:
  3936  0020                     fputs@c:	
  3937                           ; 4 bytes @ 0x0
  3938                           
  3939  0020                     ___fpclassifyf@e:	
  3940                           ; 1 bytes @ 0x0
  3941                           
  3942  0020                     ___flmul@b:	
  3943                           ; 2 bytes @ 0x0
  3944                           
  3945                           
  3946                           ; 4 bytes @ 0x0
  3947  0020                     	ds	1
  3948  0021                     fputs@i:
  3949                           
  3950                           ; 2 bytes @ 0x1
  3951  0021                     	ds	1
  3952  0022                     ___fpclassifyf@u:
  3953                           
  3954                           ; 4 bytes @ 0x2
  3955  0022                     	ds	1
  3956  0023                     fputs@s:
  3957                           
  3958                           ; 1 bytes @ 0x3
  3959  0023                     	ds	1
  3960  0024                     ?_pad:
  3961  0024                     pad@buf:	
  3962                           ; 2 bytes @ 0x4
  3963                           
  3964  0024                     ___flmul@a:	
  3965                           ; 1 bytes @ 0x4
  3966                           
  3967                           
  3968                           ; 4 bytes @ 0x4
  3969  0024                     	ds	1
  3970  0025                     pad@p:
  3971                           
  3972                           ; 2 bytes @ 0x5
  3973  0025                     	ds	2
  3974  0027                     pad@i:
  3975                           
  3976                           ; 2 bytes @ 0x7
  3977  0027                     	ds	1
  3978  0028                     ??___flmul:
  3979                           
  3980                           ; 1 bytes @ 0x8
  3981  0028                     	ds	1
  3982  0029                     pad@w:
  3983                           
  3984                           ; 2 bytes @ 0x9
  3985  0029                     	ds	2
  3986  002B                     pad@fp:
  3987                           
  3988                           ; 1 bytes @ 0xB
  3989  002B                     	ds	2
  3990  002D                     ___flmul@sign:
  3991                           
  3992                           ; 1 bytes @ 0xD
  3993  002D                     	ds	1
  3994  002E                     ___flmul@aexp:
  3995                           
  3996                           ; 1 bytes @ 0xE
  3997  002E                     	ds	1
  3998  002F                     ___flmul@grs:
  3999                           
  4000                           ; 4 bytes @ 0xF
  4001  002F                     	ds	4
  4002  0033                     ___flmul@bexp:
  4003                           
  4004                           ; 1 bytes @ 0x13
  4005  0033                     	ds	1
  4006  0034                     ___flmul@prod:
  4007                           
  4008                           ; 4 bytes @ 0x14
  4009  0034                     	ds	4
  4010  0038                     ___flmul@temp:
  4011                           
  4012                           ; 2 bytes @ 0x18
  4013  0038                     	ds	2
  4014  003A                     ?___flge:
  4015  003A                     ?___fladd:	
  4016                           ; 1 bit 
  4017                           
  4018  003A                     ___flge@ff1:	
  4019                           ; 4 bytes @ 0x1A
  4020                           
  4021  003A                     ___fladd@b:	
  4022                           ; 4 bytes @ 0x1A
  4023                           
  4024                           
  4025                           ; 4 bytes @ 0x1A
  4026  003A                     	ds	4
  4027  003E                     ___flge@ff2:
  4028  003E                     ___fladd@a:	
  4029                           ; 4 bytes @ 0x1E
  4030                           
  4031                           
  4032                           ; 4 bytes @ 0x1E
  4033  003E                     	ds	4
  4034  0042                     ??___flge:
  4035  0042                     ??___fladd:	
  4036                           ; 1 bytes @ 0x22
  4037                           
  4038                           
  4039                           ; 1 bytes @ 0x22
  4040  0042                     	ds	8
  4041  004A                     ___fladd@signs:
  4042                           
  4043                           ; 1 bytes @ 0x2A
  4044  004A                     	ds	1
  4045  004B                     ___fladd@aexp:
  4046                           
  4047                           ; 1 bytes @ 0x2B
  4048  004B                     	ds	1
  4049  004C                     ___fladd@bexp:
  4050                           
  4051                           ; 1 bytes @ 0x2C
  4052  004C                     	ds	1
  4053  004D                     ___fladd@grs:
  4054                           
  4055                           ; 1 bytes @ 0x2D
  4056  004D                     	ds	1
  4057  004E                     ?_sqrtf:
  4058  004E                     ?___flsub:	
  4059                           ; 4 bytes @ 0x2E
  4060                           
  4061  004E                     ___flsub@a:	
  4062                           ; 4 bytes @ 0x2E
  4063                           
  4064  004E                     sqrtf@x:	
  4065                           ; 4 bytes @ 0x2E
  4066                           
  4067                           
  4068                           ; 4 bytes @ 0x2E
  4069  004E                     	ds	4
  4070  0052                     ??_sqrtf:
  4071  0052                     ___flsub@b:	
  4072                           ; 1 bytes @ 0x32
  4073                           
  4074                           
  4075                           ; 4 bytes @ 0x32
  4076  0052                     	ds	8
  4077  005A                     ??___fldiv:
  4078                           
  4079                           ; 1 bytes @ 0x3A
  4080  005A                     	ds	5
  4081  005F                     ___fldiv@rem:
  4082                           
  4083                           ; 4 bytes @ 0x3F
  4084  005F                     	ds	4
  4085  0063                     ___fldiv@sign:
  4086                           
  4087                           ; 1 bytes @ 0x43
  4088  0063                     	ds	1
  4089  0064                     ___fldiv@new_exp:
  4090                           
  4091                           ; 2 bytes @ 0x44
  4092  0064                     	ds	2
  4093  0066                     ___fldiv@grs:
  4094                           
  4095                           ; 4 bytes @ 0x46
  4096  0066                     	ds	4
  4097  006A                     ___fldiv@bexp:
  4098                           
  4099                           ; 1 bytes @ 0x4A
  4100  006A                     	ds	1
  4101  006B                     ___fldiv@aexp:
  4102                           
  4103                           ; 1 bytes @ 0x4B
  4104  006B                     	ds	1
  4105  006C                     ___fltol@sign1:
  4106  006C                     Measure_R_PT100_2Wire@R_PT100:	
  4107                           ; 1 bytes @ 0x4C
  4108                           
  4109                           
  4110                           ; 4 bytes @ 0x4C
  4111  006C                     	ds	1
  4112  006D                     ___fltol@exp1:
  4113                           
  4114                           ; 1 bytes @ 0x4D
  4115  006D                     	ds	1
  4116  006E                     ?_vfpfcnvrt:
  4117  006E                     vfpfcnvrt@fmt:	
  4118                           ; 2 bytes @ 0x4E
  4119                           
  4120                           
  4121                           ; 1 bytes @ 0x4E
  4122  006E                     	ds	1
  4123  006F                     vfpfcnvrt@ap:
  4124                           
  4125                           ; 1 bytes @ 0x4F
  4126  006F                     	ds	1
  4127                           
  4128                           	psect	maintext
  4129  1020                     __pmaintext:	
  4130 ;;
  4131 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  4132 ;;
  4133 ;; *************** function _main *****************
  4134 ;; Defined at:
  4135 ;;		line 64 in file "main.c"
  4136 ;; Parameters:    Size  Location     Type
  4137 ;;		None
  4138 ;; Auto vars:     Size  Location     Type
  4139 ;;  Temp_PT100      4   17[BANK3 ] float 
  4140 ;; Return value:  Size  Location     Type
  4141 ;;                  1    wreg      void 
  4142 ;; Registers used:
  4143 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4144 ;; Tracked objects:
  4145 ;;		On entry : B1F/0
  4146 ;;		On exit  : 0/0
  4147 ;;		Unchanged: 0/0
  4148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4150 ;;      Locals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  4151 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  4152 ;;      Totals:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0
  4153 ;;Total ram usage:        6 bytes
  4154 ;; Hardware stack levels required when called:   13
  4155 ;; This function calls:
  4156 ;;		_IOCAF2_SetInterruptHandler
  4157 ;;		_Init_Function
  4158 ;;		_Read_PT100_Temp
  4159 ;;		_SYSTEM_Initialize
  4160 ;;		_TMR2_SetInterruptHandler
  4161 ;;		_TMR4_SetInterruptHandler
  4162 ;;		_TX_Whole_String
  4163 ;;		_sprintf
  4164 ;; This function is called by:
  4165 ;;		Startup code after reset
  4166 ;; This function uses a non-reentrant model
  4167 ;;
  4168                           
  4169                           
  4170                           ;psect for function _main
  4171  1020                     _main:
  4172                           
  4173                           ;main.c: 66:     SYSTEM_Initialize();
  4174                           
  4175                           ;incstack = 0
  4176                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4177  1020  319B  23CD  3190   	fcall	_SYSTEM_Initialize
  4178                           
  4179                           ;main.c: 67:     Init_Function();
  4180  1023  319C  24CA  3190   	fcall	_Init_Function
  4181                           
  4182                           ;main.c: 70:     (INTCONbits.GIE = 1);
  4183  1026  178B               	bsf	11,7	;volatile
  4184                           
  4185                           ;main.c: 71:     (INTCONbits.PEIE = 1);
  4186  1027  170B               	bsf	11,6	;volatile
  4187                           
  4188                           ;main.c: 73:     IOCAF2_SetInterruptHandler(Zero_Detection_isr);
  4189  1028  302C               	movlw	low _Zero_Detection_isr
  4190  1029  00F0               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler
  4191  102A  301A               	movlw	high _Zero_Detection_isr
  4192  102B  00F1               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler+1
  4193  102C  319A  225F  3190   	fcall	_IOCAF2_SetInterruptHandler
  4194                           
  4195                           ;main.c: 74:     TMR2_SetInterruptHandler(TMR2_Int_isr);
  4196  102F  3030               	movlw	low _TMR2_Int_isr
  4197  1030  00F0               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  4198  1031  301C               	movlw	high _TMR2_Int_isr
  4199  1032  00F1               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  4200  1033  319A  2265  3190   	fcall	_TMR2_SetInterruptHandler
  4201                           
  4202                           ;main.c: 75:     TMR4_SetInterruptHandler(TMR4_Wroking_Blink_AlarmLED_isr);
  4203  1036  30FD               	movlw	low _TMR4_Wroking_Blink_AlarmLED_isr
  4204  1037  00F0               	movwf	TMR4_SetInterruptHandler@InterruptHandler
  4205  1038  301B               	movlw	high _TMR4_Wroking_Blink_AlarmLED_isr
  4206  1039  00F1               	movwf	TMR4_SetInterruptHandler@InterruptHandler+1
  4207  103A  319A  226B  3190   	fcall	_TMR4_SetInterruptHandler
  4208  103D                     l5511:
  4209                           
  4210                           ;main.c: 81:         Temp_PT100 = Read_PT100_Temp();
  4211  103D  3191  2156  3190   	fcall	_Read_PT100_Temp
  4212  1040  0867               	movf	(?_Read_PT100_Temp+3)^(0+128),w
  4213  1041  0023               	movlb	3	; select bank3
  4214  1042  00D9               	movwf	(main@Temp_PT100+3)^(0+384)
  4215  1043  0021               	movlb	1	; select bank1
  4216  1044  0866               	movf	(?_Read_PT100_Temp+2)^(0+128),w
  4217  1045  0023               	movlb	3	; select bank3
  4218  1046  00D8               	movwf	(main@Temp_PT100+2)^(0+384)
  4219  1047  0021               	movlb	1	; select bank1
  4220  1048  0865               	movf	(?_Read_PT100_Temp+1)^(0+128),w
  4221  1049  0023               	movlb	3	; select bank3
  4222  104A  00D7               	movwf	(main@Temp_PT100+1)^(0+384)
  4223  104B  0021               	movlb	1	; select bank1
  4224  104C  0864               	movf	?_Read_PT100_Temp^(0+128),w
  4225  104D  0023               	movlb	3	; select bank3
  4226  104E  00D6               	movwf	main@Temp_PT100^(0+384)
  4227                           
  4228                           ;main.c: 82:         sprintf(Buff_g, "%f Celsius\n", Temp_PT100);
  4229  104F  3020               	movlw	low (STR_1| (0+32768))
  4230  1050  00C5               	movwf	sprintf@fmt^(0+384)
  4231  1051  3098               	movlw	high (STR_1| (0+32768))
  4232  1052  00C6               	movwf	(sprintf@fmt^(0+384)+1)
  4233  1053  0859               	movf	(main@Temp_PT100+3)^(0+384),w
  4234  1054  00CA               	movwf	((?_sprintf+3)^(0+384)+2)
  4235  1055  0858               	movf	(main@Temp_PT100+2)^(0+384),w
  4236  1056  00C9               	movwf	((?_sprintf+2)^(0+384)+2)
  4237  1057  0857               	movf	(main@Temp_PT100+1)^(0+384),w
  4238  1058  00C8               	movwf	((?_sprintf+1)^(0+384)+2)
  4239  1059  0856               	movf	main@Temp_PT100^(0+384),w
  4240  105A  00C7               	movwf	(?_sprintf^(0+384)+2)
  4241  105B  3040               	movlw	(low (_Buff_g| (0+512)))& (0+255)
  4242  105C  319D  2591  3190   	fcall	_sprintf
  4243                           
  4244                           ;main.c: 83:         TX_Whole_String(Buff_g);
  4245  105F  3040               	movlw	(low (_Buff_g| (0+512)))& (0+255)
  4246  1060  319D  2565  3190   	fcall	_TX_Whole_String
  4247                           
  4248                           ;main.c: 84:         _delay((unsigned long)((500)*(8000000/4000.0)));
  4249  1063  3006               	movlw	6
  4250  1064  0023               	movlb	3	; select bank3
  4251  1065  00D5               	movwf	(??_main^(0+384)+1)
  4252  1066  3013               	movlw	19
  4253  1067  00D4               	movwf	??_main^(0+384)
  4254  1068  30AD               	movlw	173
  4255  1069                     u6407:
  4256  1069  0B89               	decfsz	9,f
  4257  106A  2869               	goto	u6407
  4258  106B  0BD4               	decfsz	??_main^(0+384),f
  4259  106C  2869               	goto	u6407
  4260  106D  0BD5               	decfsz	(??_main^(0+384)+1),f
  4261  106E  2869               	goto	u6407
  4262  106F  3200               	nop2
  4263  1070  283D               	goto	l5511
  4264  1071                     __end_of_main:
  4265                           
  4266                           	psect	text1
  4267  1D91                     __ptext1:	
  4268 ;; *************** function _sprintf *****************
  4269 ;; Defined at:
  4270 ;;		line 9 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/nf_sprintf.c"
  4271 ;; Parameters:    Size  Location     Type
  4272 ;;  s               1    wreg     PTR unsigned char 
  4273 ;;		 -> Buff_g(20), 
  4274 ;;  fmt             2    0[BANK3 ] PTR const unsigned char 
  4275 ;;		 -> STR_1(12), 
  4276 ;; Auto vars:     Size  Location     Type
  4277 ;;  s               1    8[BANK3 ] PTR unsigned char 
  4278 ;;		 -> Buff_g(20), 
  4279 ;;  f               5   10[BANK3 ] struct _IO_FILE
  4280 ;;  ret             2    0        int 
  4281 ;;  ap              1    9[BANK3 ] PTR void [1]
  4282 ;;		 -> ?_sprintf(2), 
  4283 ;; Return value:  Size  Location     Type
  4284 ;;                  2    0[BANK3 ] int 
  4285 ;; Registers used:
  4286 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4287 ;; Tracked objects:
  4288 ;;		On entry : 1F/3
  4289 ;;		On exit  : 1F/2
  4290 ;;		Unchanged: 0/0
  4291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4292 ;;      Params:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0
  4293 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0
  4294 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0
  4295 ;;      Totals:         0       0       0       1      15       0       0       0       0       0       0       0       
      +0       0
  4296 ;;Total ram usage:       16 bytes
  4297 ;; Hardware stack levels used:    1
  4298 ;; Hardware stack levels required when called:   12
  4299 ;; This function calls:
  4300 ;;		_vfprintf
  4301 ;; This function is called by:
  4302 ;;		_main
  4303 ;; This function uses a non-reentrant model
  4304 ;;
  4305                           
  4306                           
  4307                           ;psect for function _sprintf
  4308  1D91                     _sprintf:
  4309                           
  4310                           ;incstack = 0
  4311                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4312                           ;sprintf@s stored from wreg
  4313  1D91  00CD               	movwf	sprintf@s^(0+384)
  4314  1D92  30C7               	movlw	(low ((?_sprintf| (0+256)+2)))& (0+255)
  4315  1D93  0022               	movlb	2	; select bank2
  4316  1D94  00EF               	movwf	??_sprintf^(0+256)
  4317  1D95  086F               	movf	??_sprintf^(0+256),w
  4318  1D96  0023               	movlb	3	; select bank3
  4319  1D97  00CE               	movwf	sprintf@ap^(0+384)
  4320  1D98  084D               	movf	sprintf@s^(0+384),w
  4321  1D99  0022               	movlb	2	; select bank2
  4322  1D9A  00EF               	movwf	??_sprintf^(0+256)
  4323  1D9B  086F               	movf	??_sprintf^(0+256),w
  4324  1D9C  0023               	movlb	3	; select bank3
  4325  1D9D  00CF               	movwf	sprintf@f^(0+384)
  4326  1D9E  01D0               	clrf	(sprintf@f^(0+384)+1)
  4327  1D9F  01D1               	clrf	((sprintf@f+1)^(0+384)+1)
  4328  1DA0  01D2               	clrf	(sprintf@f^(0+384)+3)
  4329  1DA1  01D3               	clrf	((sprintf@f+1)^(0+384)+3)
  4330  1DA2  0846               	movf	(sprintf@fmt+1)^(0+384),w
  4331  1DA3  0021               	movlb	1	; select bank1
  4332  1DA4  00EE               	movwf	(vfprintf@fmt+1)^(0+128)
  4333  1DA5  0023               	movlb	3	; select bank3
  4334  1DA6  0845               	movf	sprintf@fmt^(0+384),w
  4335  1DA7  0021               	movlb	1	; select bank1
  4336  1DA8  00ED               	movwf	vfprintf@fmt^(0+128)
  4337  1DA9  30CE               	movlw	(low (sprintf@ap| (0+256)))& (0+255)
  4338  1DAA  0022               	movlb	2	; select bank2
  4339  1DAB  00EF               	movwf	??_sprintf^(0+256)
  4340  1DAC  086F               	movf	??_sprintf^(0+256),w
  4341  1DAD  0021               	movlb	1	; select bank1
  4342  1DAE  00EF               	movwf	vfprintf@ap^(0+128)
  4343  1DAF  30CF               	movlw	(low (sprintf@f| (0+256)))& (0+255)
  4344  1DB0  3188  200A         	fcall	_vfprintf
  4345  1DB2  0023               	movlb	3	; select bank3
  4346  1DB3  0850               	movf	(sprintf@f^(0+384)+1),w
  4347  1DB4  074D               	addwf	sprintf@s^(0+384),w
  4348  1DB5  0022               	movlb	2	; select bank2
  4349  1DB6  00EF               	movwf	??_sprintf^(0+256)
  4350  1DB7  086F               	movf	??_sprintf^(0+256),w
  4351  1DB8  0086               	movwf	6
  4352  1DB9  3002               	movlw	2	; select bank4/5
  4353  1DBA  0087               	movwf	7
  4354  1DBB  0181               	clrf	1
  4355  1DBC  0008               	return
  4356  1DBD                     __end_of_sprintf:
  4357                           
  4358                           	psect	text2
  4359  080A                     __ptext2:	
  4360 ;; *************** function _vfprintf *****************
  4361 ;; Defined at:
  4362 ;;		line 1390 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c"
  4363 ;; Parameters:    Size  Location     Type
  4364 ;;  fp              1    wreg     PTR struct _IO_FILE
  4365 ;;		 -> sprintf@f(5), 
  4366 ;;  fmt             2   77[BANK1 ] PTR const unsigned char 
  4367 ;;		 -> STR_1(12), 
  4368 ;;  ap              1   79[BANK1 ] PTR PTR void 
  4369 ;;		 -> sprintf@ap(1), 
  4370 ;; Auto vars:     Size  Location     Type
  4371 ;;  fp              1   76[BANK2 ] PTR struct _IO_FILE
  4372 ;;		 -> sprintf@f(5), 
  4373 ;;  cfmt            2   77[BANK2 ] PTR unsigned char 
  4374 ;;		 -> STR_1(12), 
  4375 ;; Return value:  Size  Location     Type
  4376 ;;                  2   77[BANK1 ] int 
  4377 ;; Registers used:
  4378 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4379 ;; Tracked objects:
  4380 ;;		On entry : 1F/1
  4381 ;;		On exit  : 1F/1
  4382 ;;		Unchanged: 0/0
  4383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4384 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  4385 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0
  4386 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0
  4387 ;;      Totals:         0       0       3       5       0       0       0       0       0       0       0       0       
      +0       0
  4388 ;;Total ram usage:        8 bytes
  4389 ;; Hardware stack levels used:    1
  4390 ;; Hardware stack levels required when called:   11
  4391 ;; This function calls:
  4392 ;;		_vfpfcnvrt
  4393 ;; This function is called by:
  4394 ;;		_sprintf
  4395 ;; This function uses a non-reentrant model
  4396 ;;
  4397                           
  4398                           
  4399                           ;psect for function _vfprintf
  4400  080A                     _vfprintf:
  4401                           
  4402                           ;incstack = 0
  4403                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4404                           ;vfprintf@fp stored from wreg
  4405  080A  0022               	movlb	2	; select bank2
  4406  080B  00EC               	movwf	vfprintf@fp^(0+256)
  4407                           
  4408                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 1390: int vfprintf(FILE *fp, 
      +                          const char *fmt, va_list ap);/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 1
      +                          391: {;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 1393:     char *cfmt;;/
      +                          opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 1395:     cfmt = (char *)fmt;
  4409  080C  0021               	movlb	1	; select bank1
  4410  080D  086E               	movf	(vfprintf@fmt+1)^(0+128),w
  4411  080E  0022               	movlb	2	; select bank2
  4412  080F  00EE               	movwf	(vfprintf@cfmt+1)^(0+256)
  4413  0810  0021               	movlb	1	; select bank1
  4414  0811  086D               	movf	vfprintf@fmt^(0+128),w
  4415  0812  0022               	movlb	2	; select bank2
  4416  0813  00ED               	movwf	vfprintf@cfmt^(0+256)
  4417                           
  4418                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 1396:     nout = 0;
  4419  0814  0023               	movlb	3	; select bank3
  4420  0815  01AA               	clrf	_nout^(0+384)
  4421  0816  01AB               	clrf	(_nout+1)^(0+384)
  4422  0817                     l5405:	
  4423                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 1397:     while (*cfmt) {
  4424                           
  4425                           
  4426                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 1397:     while (*cfmt) {
  4427  0817  0022               	movlb	2	; select bank2
  4428  0818  086D               	movf	vfprintf@cfmt^(0+256),w
  4429  0819  0084               	movwf	4
  4430  081A  086E               	movf	(vfprintf@cfmt+1)^(0+256),w
  4431  081B  0085               	movwf	5
  4432  081C  0012               	moviw fsr0++
  4433  081D  1903               	btfsc	3,2
  4434  081E  2838               	goto	l5407
  4435                           
  4436                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 1398:         nout += vfpfcnv
      +                          rt(fp, &cfmt, ap);
  4437  081F  306D               	movlw	(low (vfprintf@cfmt| (0+256)))& (0+255)
  4438  0820  00EA               	movwf	??_vfprintf^(0+256)
  4439  0821  086A               	movf	??_vfprintf^(0+256),w
  4440  0822  0020               	movlb	0	; select bank0
  4441  0823  00EE               	movwf	vfpfcnvrt@fmt
  4442  0824  0021               	movlb	1	; select bank1
  4443  0825  086F               	movf	vfprintf@ap^(0+128),w
  4444  0826  0022               	movlb	2	; select bank2
  4445  0827  00EB               	movwf	(??_vfprintf+1)^(0+256)
  4446  0828  086B               	movf	(??_vfprintf+1)^(0+256),w
  4447  0829  0020               	movlb	0	; select bank0
  4448  082A  00EF               	movwf	vfpfcnvrt@ap
  4449  082B  0022               	movlb	2	; select bank2
  4450  082C  086C               	movf	vfprintf@fp^(0+256),w
  4451  082D  3196  2620  3188   	fcall	_vfpfcnvrt
  4452  0830  086E               	movf	?_vfpfcnvrt,w
  4453  0831  0023               	movlb	3	; select bank3
  4454  0832  07AA               	addwf	_nout^(0+384),f
  4455  0833  0020               	movlb	0	; select bank0
  4456  0834  086F               	movf	?_vfpfcnvrt+1,w
  4457  0835  0023               	movlb	3	; select bank3
  4458  0836  3DAB               	addwfc	(_nout+1)^(0+384),f
  4459  0837  2817               	goto	l5405
  4460  0838                     l5407:
  4461                           
  4462                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 1400:     return nout;
  4463  0838  0023               	movlb	3	; select bank3
  4464  0839  082B               	movf	(_nout+1)^(0+384),w
  4465  083A  0021               	movlb	1	; select bank1
  4466  083B  00EE               	movwf	(?_vfprintf+1)^(0+128)
  4467  083C  0023               	movlb	3	; select bank3
  4468  083D  082A               	movf	_nout^(0+384),w
  4469  083E  0021               	movlb	1	; select bank1
  4470  083F  00ED               	movwf	?_vfprintf^(0+128)
  4471  0840  0008               	return
  4472  0841                     __end_of_vfprintf:
  4473                           
  4474                           	psect	text3
  4475  1620                     __ptext3:	
  4476 ;; *************** function _vfpfcnvrt *****************
  4477 ;; Defined at:
  4478 ;;		line 692 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c"
  4479 ;; Parameters:    Size  Location     Type
  4480 ;;  fp              1    wreg     PTR struct _IO_FILE
  4481 ;;		 -> sprintf@f(5), 
  4482 ;;  fmt             1   78[BANK0 ] PTR PTR unsigned char 
  4483 ;;		 -> vfprintf@cfmt(2), 
  4484 ;;  ap              1   79[BANK0 ] PTR PTR void 
  4485 ;;		 -> sprintf@ap(1), 
  4486 ;; Auto vars:     Size  Location     Type
  4487 ;;  fp              1   73[BANK2 ] PTR struct _IO_FILE
  4488 ;;		 -> sprintf@f(5), 
  4489 ;;  llu             8    0        unsigned long long 
  4490 ;;  ll              8    0        long long 
  4491 ;;  f               4   65[BANK2 ] long long 
  4492 ;;  ct              3   69[BANK2 ] unsigned char [3]
  4493 ;;  vp              2    0        PTR void 
  4494 ;;  i               2    0        int 
  4495 ;;  done            2    0        int 
  4496 ;;  cp              2    0        PTR unsigned char 
  4497 ;;  c               1   72[BANK2 ] unsigned char 
  4498 ;; Return value:  Size  Location     Type
  4499 ;;                  2   78[BANK0 ] int 
  4500 ;; Registers used:
  4501 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4502 ;; Tracked objects:
  4503 ;;		On entry : 1F/2
  4504 ;;		On exit  : 1F/0
  4505 ;;		Unchanged: 0/0
  4506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4507 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4508 ;;      Locals:         0       0       0      11       0       0       0       0       0       0       0       0       
      +0       0
  4509 ;;      Temps:          0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0
  4510 ;;      Totals:         0       2       0      17       0       0       0       0       0       0       0       0       
      +0       0
  4511 ;;Total ram usage:       19 bytes
  4512 ;; Hardware stack levels used:    1
  4513 ;; Hardware stack levels required when called:   10
  4514 ;; This function calls:
  4515 ;;		_efgtoa
  4516 ;;		_fputc
  4517 ;;		_isupper
  4518 ;;		_strncmp
  4519 ;;		_tolower
  4520 ;; This function is called by:
  4521 ;;		_vfprintf
  4522 ;; This function uses a non-reentrant model
  4523 ;;
  4524                           
  4525                           
  4526                           ;psect for function _vfpfcnvrt
  4527  1620                     _vfpfcnvrt:
  4528                           
  4529                           ;incstack = 0
  4530                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4531                           ;vfpfcnvrt@fp stored from wreg
  4532  1620  00E9               	movwf	vfpfcnvrt@fp^(0+256)
  4533                           
  4534                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 692: static int vfpfcnvrt(FIL
      +                          E *fp, char *fmt[], va_list ap);/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c
      +                          : 693: {;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 694:     char c, *cp,
      +                           ct[3];;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 695:     int done, i;;
      +                          /opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 696:     long long ll;;/opt/mi
      +                          crochip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 697:     unsigned long long llu;
  4535  1621  0020               	movlb	0	; select bank0
  4536  1622  086E               	movf	vfpfcnvrt@fmt,w
  4537  1623  0086               	movwf	6
  4538  1624  3001               	movlw	1	; select bank2/3
  4539  1625  0087               	movwf	7
  4540  1626  3F40               	moviw [0]fsr1
  4541  1627  0022               	movlb	2	; select bank2
  4542  1628  00D9               	movwf	??_vfpfcnvrt^(0+256)
  4543  1629  3F41               	moviw [1]fsr1
  4544  162A  00DA               	movwf	(??_vfpfcnvrt^(0+256)+1)
  4545  162B  0859               	movf	??_vfpfcnvrt^(0+256),w
  4546  162C  0084               	movwf	4
  4547  162D  085A               	movf	(??_vfpfcnvrt+1)^(0+256),w
  4548  162E  0085               	movwf	5
  4549  162F  0012               	moviw fsr0++
  4550  1630  3A25               	xorlw	37
  4551  1631  1D03               	btfss	3,2
  4552  1632  2FD9               	goto	l5225
  4553                           
  4554                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 703:         ++*fmt;
  4555  1633  0020               	movlb	0	; select bank0
  4556  1634  086E               	movf	vfpfcnvrt@fmt,w
  4557  1635  0086               	movwf	6
  4558  1636  3001               	movlw	1	; select bank2/3
  4559  1637  0087               	movwf	7
  4560  1638  3001               	movlw	1
  4561  1639  0781               	addwf	1,f
  4562  163A  3141               	addfsr 1,1
  4563  163B  1803               	skipnc
  4564  163C  0A81               	incf	1,f
  4565                           
  4566                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 705:         flags = width = 
      +                          0;
  4567  163D  0023               	movlb	3	; select bank3
  4568  163E  01AC               	clrf	_width^(0+384)
  4569  163F  01AD               	clrf	(_width+1)^(0+384)
  4570  1640  01B0               	clrf	_flags^(0+384)
  4571  1641  01B1               	clrf	(_flags+1)^(0+384)
  4572                           
  4573                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 706:         prec = -1;
  4574  1642  30FF               	movlw	255
  4575  1643  00AE               	movwf	_prec^(0+384)
  4576  1644  30FF               	movlw	255
  4577  1645  00AF               	movwf	(_prec^(0+384)+1)
  4578                           
  4579                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 779:         ct[0] = (char)to
      +                          lower((int)(*fmt)[0]);
  4580  1646  0020               	movlb	0	; select bank0
  4581  1647  086E               	movf	vfpfcnvrt@fmt,w
  4582  1648  0086               	movwf	6
  4583  1649  3001               	movlw	1	; select bank2/3
  4584  164A  0087               	movwf	7
  4585  164B  3F40               	moviw [0]fsr1
  4586  164C  0022               	movlb	2	; select bank2
  4587  164D  00D9               	movwf	??_vfpfcnvrt^(0+256)
  4588  164E  3F41               	moviw [1]fsr1
  4589  164F  00DA               	movwf	(??_vfpfcnvrt^(0+256)+1)
  4590  1650  0859               	movf	??_vfpfcnvrt^(0+256),w
  4591  1651  0084               	movwf	4
  4592  1652  085A               	movf	(??_vfpfcnvrt+1)^(0+256),w
  4593  1653  0085               	movwf	5
  4594  1654  0800               	movf	0,w	;code access
  4595  1655  00DB               	movwf	(??_vfpfcnvrt+2)^(0+256)
  4596  1656  01DC               	clrf	((??_vfpfcnvrt+2)^(0+256)+1)
  4597  1657  085B               	movf	(??_vfpfcnvrt+2)^(0+256),w
  4598  1658  00F6               	movwf	tolower@c
  4599  1659  085C               	movf	(??_vfpfcnvrt+3)^(0+256),w
  4600  165A  00F7               	movwf	tolower@c+1
  4601  165B  319C  24A9  3196   	fcall	_tolower
  4602  165E  0876               	movf	?_tolower,w
  4603  165F  0022               	movlb	2	; select bank2
  4604  1660  00DD               	movwf	(??_vfpfcnvrt+4)^(0+256)
  4605  1661  085D               	movf	(??_vfpfcnvrt+4)^(0+256),w
  4606  1662  00E5               	movwf	vfpfcnvrt@ct^(0+256)
  4607                           
  4608                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 780:         if (ct[0]) {
  4609  1663  0865               	movf	vfpfcnvrt@ct^(0+256),w
  4610  1664  1903               	btfsc	3,2
  4611  1665  2EA9               	goto	l5179
  4612                           
  4613                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 781:             ct[1] = (cha
      +                          r)tolower((int)(*fmt)[1]);
  4614  1666  0020               	movlb	0	; select bank0
  4615  1667  086E               	movf	vfpfcnvrt@fmt,w
  4616  1668  0086               	movwf	6
  4617  1669  3001               	movlw	1	; select bank2/3
  4618  166A  0087               	movwf	7
  4619  166B  3F40               	moviw [0]fsr1
  4620  166C  0022               	movlb	2	; select bank2
  4621  166D  00D9               	movwf	??_vfpfcnvrt^(0+256)
  4622  166E  3F41               	moviw [1]fsr1
  4623  166F  00DA               	movwf	(??_vfpfcnvrt^(0+256)+1)
  4624  1670  3001               	movlw	1
  4625  1671  0759               	addwf	??_vfpfcnvrt^(0+256),w
  4626  1672  0084               	movwf	4
  4627  1673  085A               	movf	(??_vfpfcnvrt^(0+256)+1),w
  4628  1674  1803               	skipnc
  4629  1675  0A5A               	incf	(??_vfpfcnvrt^(0+256)+1),w
  4630  1676  0085               	movwf	5
  4631  1677  0800               	movf	0,w	;code access
  4632  1678  00DB               	movwf	(??_vfpfcnvrt+2)^(0+256)
  4633  1679  01DC               	clrf	((??_vfpfcnvrt+2)^(0+256)+1)
  4634  167A  085B               	movf	(??_vfpfcnvrt+2)^(0+256),w
  4635  167B  00F6               	movwf	tolower@c
  4636  167C  085C               	movf	(??_vfpfcnvrt+3)^(0+256),w
  4637  167D  00F7               	movwf	tolower@c+1
  4638  167E  319C  24A9  3196   	fcall	_tolower
  4639  1681  0876               	movf	?_tolower,w
  4640  1682  0022               	movlb	2	; select bank2
  4641  1683  00DD               	movwf	(??_vfpfcnvrt+4)^(0+256)
  4642  1684  085D               	movf	(??_vfpfcnvrt+4)^(0+256),w
  4643  1685  00E6               	movwf	(vfpfcnvrt@ct^(0+256)+1)
  4644                           
  4645                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 782:             if (ct[1]) {
  4646  1686  0866               	movf	(vfpfcnvrt@ct^(0+256)+1),w
  4647  1687  1903               	btfsc	3,2
  4648  1688  2EA9               	goto	l5179
  4649                           
  4650                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 783:                 ct[2] = 
      +                          (char)tolower((int)(*fmt)[2]);
  4651  1689  0020               	movlb	0	; select bank0
  4652  168A  086E               	movf	vfpfcnvrt@fmt,w
  4653  168B  0086               	movwf	6
  4654  168C  3001               	movlw	1	; select bank2/3
  4655  168D  0087               	movwf	7
  4656  168E  3F40               	moviw [0]fsr1
  4657  168F  0022               	movlb	2	; select bank2
  4658  1690  00D9               	movwf	??_vfpfcnvrt^(0+256)
  4659  1691  3F41               	moviw [1]fsr1
  4660  1692  00DA               	movwf	(??_vfpfcnvrt^(0+256)+1)
  4661  1693  3002               	movlw	2
  4662  1694  0759               	addwf	??_vfpfcnvrt^(0+256),w
  4663  1695  0084               	movwf	4
  4664  1696  085A               	movf	(??_vfpfcnvrt^(0+256)+1),w
  4665  1697  1803               	skipnc
  4666  1698  0A5A               	incf	(??_vfpfcnvrt^(0+256)+1),w
  4667  1699  0085               	movwf	5
  4668  169A  0800               	movf	0,w	;code access
  4669  169B  00DB               	movwf	(??_vfpfcnvrt+2)^(0+256)
  4670  169C  01DC               	clrf	((??_vfpfcnvrt+2)^(0+256)+1)
  4671  169D  085B               	movf	(??_vfpfcnvrt+2)^(0+256),w
  4672  169E  00F6               	movwf	tolower@c
  4673  169F  085C               	movf	(??_vfpfcnvrt+3)^(0+256),w
  4674  16A0  00F7               	movwf	tolower@c+1
  4675  16A1  319C  24A9  3196   	fcall	_tolower
  4676  16A4  0876               	movf	?_tolower,w
  4677  16A5  0022               	movlb	2	; select bank2
  4678  16A6  00DD               	movwf	(??_vfpfcnvrt+4)^(0+256)
  4679  16A7  085D               	movf	(??_vfpfcnvrt+4)^(0+256),w
  4680  16A8  00E7               	movwf	(vfpfcnvrt@ct^(0+256)+2)
  4681  16A9                     l5179:
  4682                           
  4683                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 942:         if (ct[0] == 'f'
      +                          ) {
  4684  16A9  3066               	movlw	102
  4685  16AA  0665               	xorwf	vfpfcnvrt@ct^(0+256),w
  4686  16AB  1D03               	btfss	3,2
  4687  16AC  2EFD               	goto	l5191
  4688                           
  4689                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 944:             c = (*fmt)[0
      +                          ];
  4690  16AD  0020               	movlb	0	; select bank0
  4691  16AE  086E               	movf	vfpfcnvrt@fmt,w
  4692  16AF  0086               	movwf	6
  4693  16B0  3001               	movlw	1	; select bank2/3
  4694  16B1  0087               	movwf	7
  4695  16B2  3F40               	moviw [0]fsr1
  4696  16B3  0022               	movlb	2	; select bank2
  4697  16B4  00D9               	movwf	??_vfpfcnvrt^(0+256)
  4698  16B5  3F41               	moviw [1]fsr1
  4699  16B6  00DA               	movwf	(??_vfpfcnvrt^(0+256)+1)
  4700  16B7  0859               	movf	??_vfpfcnvrt^(0+256),w
  4701  16B8  0084               	movwf	4
  4702  16B9  085A               	movf	(??_vfpfcnvrt+1)^(0+256),w
  4703  16BA  0085               	movwf	5
  4704  16BB  0800               	movf	0,w	;code access
  4705  16BC  00DB               	movwf	(??_vfpfcnvrt+2)^(0+256)
  4706  16BD  085B               	movf	(??_vfpfcnvrt+2)^(0+256),w
  4707  16BE  00E8               	movwf	vfpfcnvrt@c^(0+256)
  4708                           
  4709                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 945:             ++*fmt;
  4710  16BF  0020               	movlb	0	; select bank0
  4711  16C0  086E               	movf	vfpfcnvrt@fmt,w
  4712  16C1  0086               	movwf	6
  4713  16C2  3001               	movlw	1	; select bank2/3
  4714  16C3  0087               	movwf	7
  4715  16C4  3001               	movlw	1
  4716  16C5  0781               	addwf	1,f
  4717  16C6  3141               	addfsr 1,1
  4718  16C7  1803               	skipnc
  4719  16C8  0A81               	incf	1,f
  4720                           
  4721                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 946:             f = (long do
      +                          uble)(*(double *)__va_arg(*(double **)ap, (double)0));
  4722  16C9  086F               	movf	vfpfcnvrt@ap,w
  4723  16CA  0086               	movwf	6
  4724  16CB  3001               	movlw	1	; select bank2/3
  4725  16CC  0087               	movwf	7
  4726  16CD  0801               	movf	1,w
  4727  16CE  0084               	movwf	4
  4728  16CF  3001               	movlw	1	; select bank2/3
  4729  16D0  0085               	movwf	5
  4730  16D1  3004               	movlw	4
  4731  16D2  0781               	addwf	1,f
  4732  16D3  3F00               	moviw [0]fsr0
  4733  16D4  0022               	movlb	2	; select bank2
  4734  16D5  00E1               	movwf	vfpfcnvrt@f^(0+256)
  4735  16D6  3F01               	moviw [1]fsr0
  4736  16D7  00E2               	movwf	(vfpfcnvrt@f+1)^(0+256)
  4737  16D8  3F02               	moviw [2]fsr0
  4738  16D9  00E3               	movwf	(vfpfcnvrt@f+2)^(0+256)
  4739  16DA  3F03               	moviw [3]fsr0
  4740  16DB  00E4               	movwf	(vfpfcnvrt@f+3)^(0+256)
  4741                           
  4742                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 948:             return efgto
      +                          a(fp, f, c);
  4743  16DC  0864               	movf	(vfpfcnvrt@f+3)^(0+256),w
  4744  16DD  0021               	movlb	1	; select bank1
  4745  16DE  00E7               	movwf	(efgtoa@f+3)^(0+128)
  4746  16DF  0022               	movlb	2	; select bank2
  4747  16E0  0863               	movf	(vfpfcnvrt@f+2)^(0+256),w
  4748  16E1  0021               	movlb	1	; select bank1
  4749  16E2  00E6               	movwf	(efgtoa@f+2)^(0+128)
  4750  16E3  0022               	movlb	2	; select bank2
  4751  16E4  0862               	movf	(vfpfcnvrt@f+1)^(0+256),w
  4752  16E5  0021               	movlb	1	; select bank1
  4753  16E6  00E5               	movwf	(efgtoa@f+1)^(0+128)
  4754  16E7  0022               	movlb	2	; select bank2
  4755  16E8  0861               	movf	vfpfcnvrt@f^(0+256),w
  4756  16E9  0021               	movlb	1	; select bank1
  4757  16EA  00E4               	movwf	efgtoa@f^(0+128)
  4758  16EB  0022               	movlb	2	; select bank2
  4759  16EC  0868               	movf	vfpfcnvrt@c^(0+256),w
  4760  16ED  00D9               	movwf	??_vfpfcnvrt^(0+256)
  4761  16EE  0859               	movf	??_vfpfcnvrt^(0+256),w
  4762  16EF  0021               	movlb	1	; select bank1
  4763  16F0  00E8               	movwf	efgtoa@c^(0+128)
  4764  16F1  0022               	movlb	2	; select bank2
  4765  16F2  0869               	movf	vfpfcnvrt@fp^(0+256),w
  4766  16F3  3180  2058         	fcall	_efgtoa
  4767  16F5  0865               	movf	(?_efgtoa+1)^(0+128),w
  4768  16F6  0020               	movlb	0	; select bank0
  4769  16F7  00EF               	movwf	?_vfpfcnvrt+1
  4770  16F8  0021               	movlb	1	; select bank1
  4771  16F9  0864               	movf	?_efgtoa^(0+128),w
  4772  16FA  0020               	movlb	0	; select bank0
  4773  16FB  00EE               	movwf	?_vfpfcnvrt
  4774  16FC  0008               	return
  4775  16FD                     l5191:
  4776                           
  4777                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 950:         if (!strncmp(ct,
      +                           "lf", ((sizeof("lf")/sizeof("lf"[0]))-1))) {
  4778  16FD  3054               	movlw	low (STR_10| (0+32768))
  4779  16FE  00F0               	movwf	strncmp@_r
  4780  16FF  3098               	movlw	high (STR_10| (0+32768))
  4781  1700  00F1               	movwf	strncmp@_r+1
  4782  1701  3002               	movlw	2
  4783  1702  00F2               	movwf	strncmp@n
  4784  1703  3000               	movlw	0
  4785  1704  00F3               	movwf	strncmp@n+1
  4786  1705  3065               	movlw	(low (vfpfcnvrt@ct| (0+256)))& (0+255)
  4787  1706  319F  27AF  3196   	fcall	_strncmp
  4788  1709  0870               	movf	?_strncmp,w
  4789  170A  0471               	iorwf	?_strncmp+1,w
  4790  170B  1D03               	btfss	3,2
  4791  170C  2F9F               	goto	l5209
  4792                           
  4793                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 953:             if ((0 ? isu
      +                          pper((int)(*fmt)[0]) : ((unsigned)((int)(*fmt)[0])-'A') < 26)) {
  4794  170D  0020               	movlb	0	; select bank0
  4795  170E  086E               	movf	vfpfcnvrt@fmt,w
  4796  170F  0086               	movwf	6
  4797  1710  3001               	movlw	1	; select bank2/3
  4798  1711  0087               	movwf	7
  4799  1712  3F40               	moviw [0]fsr1
  4800  1713  0022               	movlb	2	; select bank2
  4801  1714  00D9               	movwf	??_vfpfcnvrt^(0+256)
  4802  1715  3F41               	moviw [1]fsr1
  4803  1716  00DA               	movwf	(??_vfpfcnvrt^(0+256)+1)
  4804  1717  3001               	movlw	1
  4805  1718  0759               	addwf	??_vfpfcnvrt^(0+256),w
  4806  1719  0084               	movwf	4
  4807  171A  085A               	movf	(??_vfpfcnvrt^(0+256)+1),w
  4808  171B  1803               	skipnc
  4809  171C  0A5A               	incf	(??_vfpfcnvrt^(0+256)+1),w
  4810  171D  0085               	movwf	5
  4811  171E  0800               	movf	0,w	;code access
  4812  171F  00DB               	movwf	(??_vfpfcnvrt+2)^(0+256)
  4813  1720  085B               	movf	(??_vfpfcnvrt+2)^(0+256),w
  4814  1721  00E8               	movwf	vfpfcnvrt@c^(0+256)
  4815  1722  0020               	movlb	0	; select bank0
  4816  1723  086E               	movf	vfpfcnvrt@fmt,w
  4817  1724  0086               	movwf	6
  4818  1725  3001               	movlw	1	; select bank2/3
  4819  1726  0087               	movwf	7
  4820  1727  3F40               	moviw [0]fsr1
  4821  1728  0022               	movlb	2	; select bank2
  4822  1729  00D9               	movwf	??_vfpfcnvrt^(0+256)
  4823  172A  3F41               	moviw [1]fsr1
  4824  172B  00DA               	movwf	(??_vfpfcnvrt^(0+256)+1)
  4825  172C  0859               	movf	??_vfpfcnvrt^(0+256),w
  4826  172D  0084               	movwf	4
  4827  172E  085A               	movf	(??_vfpfcnvrt+1)^(0+256),w
  4828  172F  0085               	movwf	5
  4829  1730  0800               	movf	0,w	;code access
  4830  1731  3EBF               	addlw	191
  4831  1732  00DB               	movwf	(??_vfpfcnvrt+2)^(0+256)
  4832  1733  30FF               	movlw	255
  4833  1734  1803               	skipnc
  4834  1735  3000               	movlw	0
  4835  1736  00DC               	movwf	((??_vfpfcnvrt+2)^(0+256)+1)
  4836  1737  3000               	movlw	0
  4837  1738  025C               	subwf	(??_vfpfcnvrt+3)^(0+256),w
  4838  1739  301A               	movlw	26
  4839  173A  1903               	skipnz
  4840  173B  025B               	subwf	(??_vfpfcnvrt+2)^(0+256),w
  4841  173C  1803               	btfsc	3,0
  4842  173D  2F40               	goto	u6130
  4843  173E  3001               	movlw	1
  4844  173F  2F41               	goto	u6140
  4845  1740                     u6130:
  4846  1740  3000               	movlw	0
  4847  1741                     u6140:
  4848  1741  00DD               	movwf	(??_vfpfcnvrt+4)^(0+256)
  4849  1742  01DE               	clrf	((??_vfpfcnvrt+4)^(0+256)+1)
  4850  1743  085D               	movf	(??_vfpfcnvrt+4)^(0+256),w
  4851  1744  00DF               	movwf	_vfpfcnvrt$2386^(0+256)
  4852  1745  085E               	movf	(??_vfpfcnvrt+5)^(0+256),w
  4853  1746  00E0               	movwf	(_vfpfcnvrt$2386+1)^(0+256)
  4854  1747  085F               	movf	_vfpfcnvrt$2386^(0+256),w
  4855  1748  0460               	iorwf	(_vfpfcnvrt$2386+1)^(0+256),w
  4856  1749  1903               	btfsc	3,2
  4857  174A  2F5F               	goto	l5201
  4858                           
  4859                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 954:                 f = (*(l
      +                          ong double *)__va_arg(*(long double **)ap, (long double)0));
  4860  174B  0020               	movlb	0	; select bank0
  4861  174C  086F               	movf	vfpfcnvrt@ap,w
  4862  174D  0086               	movwf	6
  4863  174E  3001               	movlw	1	; select bank2/3
  4864  174F  0087               	movwf	7
  4865  1750  0801               	movf	1,w
  4866  1751  0084               	movwf	4
  4867  1752  3001               	movlw	1	; select bank2/3
  4868  1753  0085               	movwf	5
  4869  1754  3004               	movlw	4
  4870  1755  0781               	addwf	1,f
  4871  1756  3F00               	moviw [0]fsr0
  4872  1757  0022               	movlb	2	; select bank2
  4873  1758  00E1               	movwf	vfpfcnvrt@f^(0+256)
  4874  1759  3F01               	moviw [1]fsr0
  4875  175A  00E2               	movwf	(vfpfcnvrt@f+1)^(0+256)
  4876  175B  3F02               	moviw [2]fsr0
  4877  175C  00E3               	movwf	(vfpfcnvrt@f+2)^(0+256)
  4878  175D  3F03               	moviw [3]fsr0
  4879  175E  2F72               	goto	L1
  4880  175F                     l5201:	
  4881                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 955:             } else {
  4882                           
  4883                           
  4884                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 956:                 f = (lon
      +                          g double)(*(double *)__va_arg(*(double **)ap, (double)0));
  4885  175F  0020               	movlb	0	; select bank0
  4886  1760  086F               	movf	vfpfcnvrt@ap,w
  4887  1761  0086               	movwf	6
  4888  1762  3001               	movlw	1	; select bank2/3
  4889  1763  0087               	movwf	7
  4890  1764  0801               	movf	1,w
  4891  1765  0084               	movwf	4
  4892  1766  3001               	movlw	1	; select bank2/3
  4893  1767  0085               	movwf	5
  4894  1768  3004               	movlw	4
  4895  1769  0781               	addwf	1,f
  4896  176A  3F00               	moviw [0]fsr0
  4897  176B  0022               	movlb	2	; select bank2
  4898  176C  00E1               	movwf	vfpfcnvrt@f^(0+256)
  4899  176D  3F01               	moviw [1]fsr0
  4900  176E  00E2               	movwf	(vfpfcnvrt@f+1)^(0+256)
  4901  176F  3F02               	moviw [2]fsr0
  4902  1770  00E3               	movwf	(vfpfcnvrt@f+2)^(0+256)
  4903  1771  3F03               	moviw [3]fsr0
  4904  1772                     L1:
  4905  1772  00E4               	movwf	(vfpfcnvrt@f+3)^(0+256)
  4906                           
  4907                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 958:             *fmt += ((si
      +                          zeof("lf")/sizeof("lf"[0]))-1);
  4908  1773  0020               	movlb	0	; select bank0
  4909  1774  086E               	movf	vfpfcnvrt@fmt,w
  4910  1775  0086               	movwf	6
  4911  1776  3001               	movlw	1	; select bank2/3
  4912  1777  0087               	movwf	7
  4913  1778  3002               	movlw	2
  4914  1779  0781               	addwf	1,f
  4915  177A  3141               	addfsr 1,1
  4916  177B  1803               	skipnc
  4917  177C  0A81               	incf	1,f
  4918                           
  4919                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 960:             return efgto
      +                          a(fp, f, c);
  4920  177D  0022               	movlb	2	; select bank2
  4921  177E  0864               	movf	(vfpfcnvrt@f+3)^(0+256),w
  4922  177F  0021               	movlb	1	; select bank1
  4923  1780  00E7               	movwf	(efgtoa@f+3)^(0+128)
  4924  1781  0022               	movlb	2	; select bank2
  4925  1782  0863               	movf	(vfpfcnvrt@f+2)^(0+256),w
  4926  1783  0021               	movlb	1	; select bank1
  4927  1784  00E6               	movwf	(efgtoa@f+2)^(0+128)
  4928  1785  0022               	movlb	2	; select bank2
  4929  1786  0862               	movf	(vfpfcnvrt@f+1)^(0+256),w
  4930  1787  0021               	movlb	1	; select bank1
  4931  1788  00E5               	movwf	(efgtoa@f+1)^(0+128)
  4932  1789  0022               	movlb	2	; select bank2
  4933  178A  0861               	movf	vfpfcnvrt@f^(0+256),w
  4934  178B  0021               	movlb	1	; select bank1
  4935  178C  00E4               	movwf	efgtoa@f^(0+128)
  4936  178D  0022               	movlb	2	; select bank2
  4937  178E  0868               	movf	vfpfcnvrt@c^(0+256),w
  4938  178F  00D9               	movwf	??_vfpfcnvrt^(0+256)
  4939  1790  0859               	movf	??_vfpfcnvrt^(0+256),w
  4940  1791  0021               	movlb	1	; select bank1
  4941  1792  00E8               	movwf	efgtoa@c^(0+128)
  4942  1793  0022               	movlb	2	; select bank2
  4943  1794  0869               	movf	vfpfcnvrt@fp^(0+256),w
  4944  1795  3180  2058         	fcall	_efgtoa
  4945  1797  0865               	movf	(?_efgtoa+1)^(0+128),w
  4946  1798  0020               	movlb	0	; select bank0
  4947  1799  00EF               	movwf	?_vfpfcnvrt+1
  4948  179A  0021               	movlb	1	; select bank1
  4949  179B  0864               	movf	?_efgtoa^(0+128),w
  4950  179C  0020               	movlb	0	; select bank0
  4951  179D  00EE               	movwf	?_vfpfcnvrt
  4952  179E  0008               	return
  4953  179F                     l5209:
  4954                           
  4955                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 1372:         if ((*fmt)[0] =
      +                          = '%') {
  4956  179F  0020               	movlb	0	; select bank0
  4957  17A0  086E               	movf	vfpfcnvrt@fmt,w
  4958  17A1  0086               	movwf	6
  4959  17A2  3001               	movlw	1	; select bank2/3
  4960  17A3  0087               	movwf	7
  4961  17A4  3F40               	moviw [0]fsr1
  4962  17A5  0022               	movlb	2	; select bank2
  4963  17A6  00D9               	movwf	??_vfpfcnvrt^(0+256)
  4964  17A7  3F41               	moviw [1]fsr1
  4965  17A8  00DA               	movwf	(??_vfpfcnvrt^(0+256)+1)
  4966  17A9  0859               	movf	??_vfpfcnvrt^(0+256),w
  4967  17AA  0084               	movwf	4
  4968  17AB  085A               	movf	(??_vfpfcnvrt+1)^(0+256),w
  4969  17AC  0085               	movwf	5
  4970  17AD  0012               	moviw fsr0++
  4971  17AE  3A25               	xorlw	37
  4972  17AF  1D03               	btfss	3,2
  4973  17B0  2FCC               	goto	l5219
  4974                           
  4975                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 1373:             ++*fmt;
  4976  17B1  0020               	movlb	0	; select bank0
  4977  17B2  086E               	movf	vfpfcnvrt@fmt,w
  4978  17B3  0086               	movwf	6
  4979  17B4  3001               	movlw	1	; select bank2/3
  4980  17B5  0087               	movwf	7
  4981  17B6  3001               	movlw	1
  4982  17B7  0781               	addwf	1,f
  4983  17B8  3141               	addfsr 1,1
  4984  17B9  1803               	skipnc
  4985  17BA  0A81               	incf	1,f
  4986                           
  4987                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 1374:             fputc((int)
      +                          '%', fp);
  4988  17BB  3025               	movlw	37
  4989  17BC  00F0               	movwf	fputc@c
  4990  17BD  3000               	movlw	0
  4991  17BE  00F1               	movwf	fputc@c+1
  4992  17BF  0022               	movlb	2	; select bank2
  4993  17C0  0869               	movf	vfpfcnvrt@fp^(0+256),w
  4994  17C1  00D9               	movwf	??_vfpfcnvrt^(0+256)
  4995  17C2  0859               	movf	??_vfpfcnvrt^(0+256),w
  4996  17C3  00F2               	movwf	fputc@fp
  4997  17C4  319E  26C2         	fcall	_fputc
  4998  17C6                     l5215:
  4999                           
  5000                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 1375:             return 1;
  5001  17C6  3001               	movlw	1
  5002  17C7  0020               	movlb	0	; select bank0
  5003  17C8  00EE               	movwf	?_vfpfcnvrt
  5004  17C9  3000               	movlw	0
  5005  17CA  00EF               	movwf	?_vfpfcnvrt+1
  5006  17CB  0008               	return
  5007  17CC                     l5219:
  5008                           
  5009                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 1379:         ++*fmt;
  5010  17CC  0020               	movlb	0	; select bank0
  5011  17CD  086E               	movf	vfpfcnvrt@fmt,w
  5012  17CE  0086               	movwf	6
  5013  17CF  3001               	movlw	1	; select bank2/3
  5014  17D0  0087               	movwf	7
  5015  17D1  3001               	movlw	1
  5016  17D2  0781               	addwf	1,f
  5017  17D3  3141               	addfsr 1,1
  5018  17D4  1803               	skipnc
  5019  17D5  0A81               	incf	1,f
  5020                           
  5021                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 1380:         return 0;
  5022  17D6  01EE               	clrf	?_vfpfcnvrt
  5023  17D7  01EF               	clrf	?_vfpfcnvrt+1
  5024  17D8  0008               	return
  5025  17D9                     l5225:
  5026                           
  5027                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 1384:     fputc((int)(*fmt)[0
      +                          ], fp);
  5028  17D9  0020               	movlb	0	; select bank0
  5029  17DA  086E               	movf	vfpfcnvrt@fmt,w
  5030  17DB  0086               	movwf	6
  5031  17DC  3001               	movlw	1	; select bank2/3
  5032  17DD  0087               	movwf	7
  5033  17DE  3F40               	moviw [0]fsr1
  5034  17DF  0022               	movlb	2	; select bank2
  5035  17E0  00D9               	movwf	??_vfpfcnvrt^(0+256)
  5036  17E1  3F41               	moviw [1]fsr1
  5037  17E2  00DA               	movwf	(??_vfpfcnvrt^(0+256)+1)
  5038  17E3  0859               	movf	??_vfpfcnvrt^(0+256),w
  5039  17E4  0084               	movwf	4
  5040  17E5  085A               	movf	(??_vfpfcnvrt+1)^(0+256),w
  5041  17E6  0085               	movwf	5
  5042  17E7  0800               	movf	0,w	;code access
  5043  17E8  00DB               	movwf	(??_vfpfcnvrt+2)^(0+256)
  5044  17E9  01DC               	clrf	((??_vfpfcnvrt+2)^(0+256)+1)
  5045  17EA  085B               	movf	(??_vfpfcnvrt+2)^(0+256),w
  5046  17EB  00F0               	movwf	fputc@c
  5047  17EC  085C               	movf	(??_vfpfcnvrt+3)^(0+256),w
  5048  17ED  00F1               	movwf	fputc@c+1
  5049  17EE  0869               	movf	vfpfcnvrt@fp^(0+256),w
  5050  17EF  00DD               	movwf	(??_vfpfcnvrt+4)^(0+256)
  5051  17F0  085D               	movf	(??_vfpfcnvrt+4)^(0+256),w
  5052  17F1  00F2               	movwf	fputc@fp
  5053  17F2  319E  26C2  3196   	fcall	_fputc
  5054                           
  5055                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 1385:     ++*fmt;
  5056  17F5  0020               	movlb	0	; select bank0
  5057  17F6  086E               	movf	vfpfcnvrt@fmt,w
  5058  17F7  0086               	movwf	6
  5059  17F8  3001               	movlw	1	; select bank2/3
  5060  17F9  0087               	movwf	7
  5061  17FA  3001               	movlw	1
  5062  17FB  0781               	addwf	1,f
  5063  17FC  3141               	addfsr 1,1
  5064  17FD  1803               	skipnc
  5065  17FE  0A81               	incf	1,f
  5066  17FF  2FC6               	goto	l5215
  5067  1800                     __end_of_vfpfcnvrt:
  5068                           
  5069                           	psect	text4
  5070  1FAF                     __ptext4:	
  5071 ;; *************** function _strncmp *****************
  5072 ;; Defined at:
  5073 ;;		line 3 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/strncmp.c"
  5074 ;; Parameters:    Size  Location     Type
  5075 ;;  _l              1    wreg     PTR const unsigned char 
  5076 ;;		 -> vfpfcnvrt@ct(3), 
  5077 ;;  _r              2    0[COMMON] PTR const unsigned char 
  5078 ;;		 -> STR_12(3), 
  5079 ;;  n               2    2[COMMON] unsigned int 
  5080 ;; Auto vars:     Size  Location     Type
  5081 ;;  _l              1    5[COMMON] PTR const unsigned char 
  5082 ;;		 -> vfpfcnvrt@ct(3), 
  5083 ;;  r               2    6[COMMON] PTR const unsigned char 
  5084 ;;		 -> STR_12(3), 
  5085 ;;  l               1    8[COMMON] PTR const unsigned char 
  5086 ;;		 -> vfpfcnvrt@ct(3), 
  5087 ;; Return value:  Size  Location     Type
  5088 ;;                  2    0[COMMON] int 
  5089 ;; Registers used:
  5090 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  5091 ;; Tracked objects:
  5092 ;;		On entry : 1F/2
  5093 ;;		On exit  : 1F/2
  5094 ;;		Unchanged: 1F/0
  5095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5096 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5097 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5098 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5099 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5100 ;;Total ram usage:        9 bytes
  5101 ;; Hardware stack levels used:    1
  5102 ;; Hardware stack levels required when called:    5
  5103 ;; This function calls:
  5104 ;;		Nothing
  5105 ;; This function is called by:
  5106 ;;		_vfpfcnvrt
  5107 ;; This function uses a non-reentrant model
  5108 ;;
  5109                           
  5110                           
  5111                           ;psect for function _strncmp
  5112  1FAF                     _strncmp:
  5113                           
  5114                           ;incstack = 0
  5115                           ; Regs used in _strncmp: [wreg-fsr1h+status,2+status,0+pclath]
  5116                           ;strncmp@_l stored from wreg
  5117  1FAF  00F5               	movwf	strncmp@_l
  5118  1FB0  0875               	movf	strncmp@_l,w
  5119  1FB1  00F4               	movwf	??_strncmp
  5120  1FB2  0874               	movf	??_strncmp,w
  5121  1FB3  00F8               	movwf	strncmp@l
  5122  1FB4  0871               	movf	strncmp@_r+1,w
  5123  1FB5  00F7               	movwf	strncmp@r+1
  5124  1FB6  0870               	movf	strncmp@_r,w
  5125  1FB7  00F6               	movwf	strncmp@r
  5126  1FB8  3001               	movlw	1
  5127  1FB9  02F2               	subwf	strncmp@n,f
  5128  1FBA  3000               	movlw	0
  5129  1FBB  3BF3               	subwfb	strncmp@n+1,f
  5130  1FBC  0A72               	incf	strncmp@n,w
  5131  1FBD  1D03               	skipz
  5132  1FBE  2FEA               	goto	l4955
  5133  1FBF  0A73               	incf	strncmp@n+1,w
  5134  1FC0  1D03               	btfss	3,2
  5135  1FC1  2FEA               	goto	l4955
  5136  1FC2  01F0               	clrf	?_strncmp
  5137  1FC3  01F1               	clrf	?_strncmp+1
  5138  1FC4  0008               	return
  5139  1FC5                     l4957:
  5140  1FC5  0876               	movf	strncmp@r,w
  5141  1FC6  0084               	movwf	4
  5142  1FC7  0877               	movf	strncmp@r+1,w
  5143  1FC8  0085               	movwf	5
  5144  1FC9  0012               	moviw fsr0++
  5145  1FCA  1903               	btfsc	3,2
  5146  1FCB  2FF1               	goto	l4963
  5147  1FCC  0872               	movf	strncmp@n,w
  5148  1FCD  0473               	iorwf	strncmp@n+1,w
  5149  1FCE  1903               	btfsc	3,2
  5150  1FCF  2FF1               	goto	l4963
  5151  1FD0  0876               	movf	strncmp@r,w
  5152  1FD1  0084               	movwf	4
  5153  1FD2  0877               	movf	strncmp@r+1,w
  5154  1FD3  0085               	movwf	5
  5155  1FD4  0800               	movf	0,w	;code access
  5156  1FD5  00F4               	movwf	??_strncmp
  5157  1FD6  0878               	movf	strncmp@l,w
  5158  1FD7  0086               	movwf	6
  5159  1FD8  3001               	movlw	1	; select bank2/3
  5160  1FD9  0087               	movwf	7
  5161  1FDA  0801               	movf	1,w
  5162  1FDB  0674               	xorwf	??_strncmp,w
  5163  1FDC  1D03               	btfss	3,2
  5164  1FDD  2FF1               	goto	l4963
  5165  1FDE  3001               	movlw	1
  5166  1FDF  00F4               	movwf	??_strncmp
  5167  1FE0  0874               	movf	??_strncmp,w
  5168  1FE1  07F8               	addwf	strncmp@l,f
  5169  1FE2  3001               	movlw	1
  5170  1FE3  07F6               	addwf	strncmp@r,f
  5171  1FE4  3000               	movlw	0
  5172  1FE5  3DF7               	addwfc	strncmp@r+1,f
  5173  1FE6  3001               	movlw	1
  5174  1FE7  02F2               	subwf	strncmp@n,f
  5175  1FE8  3000               	movlw	0
  5176  1FE9  3BF3               	subwfb	strncmp@n+1,f
  5177  1FEA                     l4955:
  5178  1FEA  0878               	movf	strncmp@l,w
  5179  1FEB  0086               	movwf	6
  5180  1FEC  3001               	movlw	1	; select bank2/3
  5181  1FED  0087               	movwf	7
  5182  1FEE  0801               	movf	1,w
  5183  1FEF  1D03               	btfss	3,2
  5184  1FF0  2FC5               	goto	l4957
  5185  1FF1                     l4963:
  5186  1FF1  0878               	movf	strncmp@l,w
  5187  1FF2  0086               	movwf	6
  5188  1FF3  3001               	movlw	1	; select bank2/3
  5189  1FF4  0087               	movwf	7
  5190  1FF5  0876               	movf	strncmp@r,w
  5191  1FF6  0084               	movwf	4
  5192  1FF7  0877               	movf	strncmp@r+1,w
  5193  1FF8  0085               	movwf	5
  5194  1FF9  0800               	movf	0,w	;code access
  5195  1FFA  0201               	subwf	1,w
  5196  1FFB  00F0               	movwf	?_strncmp
  5197  1FFC  01F1               	clrf	?_strncmp+1
  5198  1FFD  1C03               	skipc
  5199  1FFE  03F1               	decf	?_strncmp+1,f
  5200  1FFF  0008               	return
  5201  2000                     __end_of_strncmp:
  5202                           
  5203                           	psect	text5
  5204  0058                     __ptext5:	
  5205 ;; *************** function _efgtoa *****************
  5206 ;; Defined at:
  5207 ;;		line 332 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c"
  5208 ;; Parameters:    Size  Location     Type
  5209 ;;  fp              1    wreg     PTR struct _IO_FILE
  5210 ;;		 -> sprintf@f(5), 
  5211 ;;  f               4   68[BANK1 ] PTR struct _IO_FILE
  5212 ;;  c               1   72[BANK1 ] unsigned char 
  5213 ;; Auto vars:     Size  Location     Type
  5214 ;;  fp              1   28[BANK2 ] PTR struct _IO_FILE
  5215 ;;		 -> sprintf@f(5), 
  5216 ;;  u               4   53[BANK2 ] PTR struct _IO_FILE
  5217 ;;  g               4   45[BANK2 ] PTR struct _IO_FILE
  5218 ;;  l               4   39[BANK2 ] PTR struct _IO_FILE
  5219 ;;  h               4   35[BANK2 ] PTR struct _IO_FILE
  5220 ;;  ou              4   20[BANK2 ] PTR struct _IO_FILE
  5221 ;;  n               2   51[BANK2 ] int 
  5222 ;;  e               2   49[BANK2 ] int 
  5223 ;;  i               2   43[BANK2 ] int 
  5224 ;;  w               2   31[BANK2 ] int 
  5225 ;;  p               2   29[BANK2 ] int 
  5226 ;;  sign            2   26[BANK2 ] int 
  5227 ;;  d               2   24[BANK2 ] int 
  5228 ;;  m               2   18[BANK2 ] int 
  5229 ;;  ne              2   16[BANK2 ] int 
  5230 ;;  pp              2   14[BANK2 ] int 
  5231 ;;  t               2   12[BANK2 ] int 
  5232 ;;  mode            1   34[BANK2 ] unsigned char 
  5233 ;;  nmode           1   33[BANK2 ] unsigned char 
  5234 ;; Return value:  Size  Location     Type
  5235 ;;                  2   68[BANK1 ] int 
  5236 ;; Registers used:
  5237 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5238 ;; Tracked objects:
  5239 ;;		On entry : 1F/2
  5240 ;;		On exit  : 1F/1
  5241 ;;		Unchanged: 0/0
  5242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5243 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  5244 ;;      Locals:         0       0       0      57       0       0       0       0       0       0       0       0       
      +0       0
  5245 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5246 ;;      Totals:         0       0       9      57       0       0       0       0       0       0       0       0       
      +0       0
  5247 ;;Total ram usage:       66 bytes
  5248 ;; Hardware stack levels used:    1
  5249 ;; Hardware stack levels required when called:    9
  5250 ;; This function calls:
  5251 ;;		___awdiv
  5252 ;;		___awmod
  5253 ;;		___fladd
  5254 ;;		___fldiv
  5255 ;;		___fleq
  5256 ;;		___flge
  5257 ;;		___flmul
  5258 ;;		___flneg
  5259 ;;		___flsub
  5260 ;;		___fltol
  5261 ;;		___fpclassifyf
  5262 ;;		_floorf
  5263 ;;		_isupper
  5264 ;;		_pad
  5265 ;;		_strcpy
  5266 ;;		_tolower
  5267 ;; This function is called by:
  5268 ;;		_vfpfcnvrt
  5269 ;; This function uses a non-reentrant model
  5270 ;;
  5271                           
  5272                           
  5273                           ;psect for function _efgtoa
  5274  0058                     _efgtoa:
  5275                           
  5276                           ;incstack = 0
  5277                           ; Regs used in _efgtoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5278                           ;efgtoa@fp stored from wreg
  5279  0058  00BC               	movwf	efgtoa@fp^(0+256)
  5280                           
  5281                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 332: static int efgtoa(FILE *
      +                          fp, long double f, char c);/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 333
      +                          : {;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 334:     char mode, nmode;
      +                          ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 335:     int d, e, i, m, n, n
      +                          e, p, pp, sign, t, w;;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 336:    
      +                           long double g, h, l, ou, u;;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 3
      +                          39:     sign = 0;
  5282  0059  01BA               	clrf	efgtoa@sign^(0+256)
  5283  005A  01BB               	clrf	(efgtoa@sign+1)^(0+256)
  5284                           
  5285                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 340:     g = f;
  5286  005B  0021               	movlb	1	; select bank1
  5287  005C  0867               	movf	(efgtoa@f+3)^(0+128),w
  5288  005D  0022               	movlb	2	; select bank2
  5289  005E  00D0               	movwf	(efgtoa@g+3)^(0+256)
  5290  005F  0021               	movlb	1	; select bank1
  5291  0060  0866               	movf	(efgtoa@f+2)^(0+128),w
  5292  0061  0022               	movlb	2	; select bank2
  5293  0062  00CF               	movwf	(efgtoa@g+2)^(0+256)
  5294  0063  0021               	movlb	1	; select bank1
  5295  0064  0865               	movf	(efgtoa@f+1)^(0+128),w
  5296  0065  0022               	movlb	2	; select bank2
  5297  0066  00CE               	movwf	(efgtoa@g+1)^(0+256)
  5298  0067  0021               	movlb	1	; select bank1
  5299  0068  0864               	movf	efgtoa@f^(0+128),w
  5300  0069  0022               	movlb	2	; select bank2
  5301  006A  00CD               	movwf	efgtoa@g^(0+256)
  5302                           
  5303                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 341:     if (g < 0.0) {
  5304  006B  0850               	movf	(efgtoa@g+3)^(0+256),w
  5305  006C  0020               	movlb	0	; select bank0
  5306  006D  00BD               	movwf	___flge@ff1+3
  5307  006E  0022               	movlb	2	; select bank2
  5308  006F  084F               	movf	(efgtoa@g+2)^(0+256),w
  5309  0070  0020               	movlb	0	; select bank0
  5310  0071  00BC               	movwf	___flge@ff1+2
  5311  0072  0022               	movlb	2	; select bank2
  5312  0073  084E               	movf	(efgtoa@g+1)^(0+256),w
  5313  0074  0020               	movlb	0	; select bank0
  5314  0075  00BB               	movwf	___flge@ff1+1
  5315  0076  0022               	movlb	2	; select bank2
  5316  0077  084D               	movf	efgtoa@g^(0+256),w
  5317  0078  0020               	movlb	0	; select bank0
  5318  0079  00BA               	movwf	___flge@ff1
  5319  007A  3000               	movlw	0
  5320  007B  00C1               	movwf	___flge@ff2+3
  5321  007C  3000               	movlw	0
  5322  007D  00C0               	movwf	___flge@ff2+2
  5323  007E  3000               	movlw	0
  5324  007F  00BF               	movwf	___flge@ff2+1
  5325  0080  3000               	movlw	0
  5326  0081  00BE               	movwf	___flge@ff2
  5327  0082  3187  2778  3180   	fcall	___flge
  5328  0085  1803               	btfsc	3,0
  5329  0086  289F               	goto	l4651
  5330                           
  5331                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 342:         sign = 1;
  5332  0087  3001               	movlw	1
  5333  0088  0022               	movlb	2	; select bank2
  5334  0089  00BA               	movwf	efgtoa@sign^(0+256)
  5335  008A  3000               	movlw	0
  5336  008B  00BB               	movwf	(efgtoa@sign^(0+256)+1)
  5337                           
  5338                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 343:         g = -g;
  5339  008C  0850               	movf	(efgtoa@g+3)^(0+256),w
  5340  008D  00F3               	movwf	___flneg@f1+3
  5341  008E  084F               	movf	(efgtoa@g+2)^(0+256),w
  5342  008F  00F2               	movwf	___flneg@f1+2
  5343  0090  084E               	movf	(efgtoa@g+1)^(0+256),w
  5344  0091  00F1               	movwf	___flneg@f1+1
  5345  0092  084D               	movf	efgtoa@g^(0+256),w
  5346  0093  00F0               	movwf	___flneg@f1
  5347  0094  319A  22AB  3180   	fcall	___flneg
  5348  0097  0873               	movf	?___flneg+3,w
  5349  0098  00D0               	movwf	(efgtoa@g+3)^(0+256)
  5350  0099  0872               	movf	?___flneg+2,w
  5351  009A  00CF               	movwf	(efgtoa@g+2)^(0+256)
  5352  009B  0871               	movf	?___flneg+1,w
  5353  009C  00CE               	movwf	(efgtoa@g+1)^(0+256)
  5354  009D  0870               	movf	?___flneg,w
  5355  009E  00CD               	movwf	efgtoa@g^(0+256)
  5356  009F                     l4651:
  5357                           
  5358                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 347:     n = 0;
  5359  009F  0022               	movlb	2	; select bank2
  5360  00A0  01D3               	clrf	efgtoa@n^(0+256)
  5361  00A1  01D4               	clrf	(efgtoa@n+1)^(0+256)
  5362                           
  5363                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 348:     w = width;
  5364  00A2  0023               	movlb	3	; select bank3
  5365  00A3  082D               	movf	(_width+1)^(0+384),w
  5366  00A4  0022               	movlb	2	; select bank2
  5367  00A5  00C0               	movwf	(efgtoa@w+1)^(0+256)
  5368  00A6  0023               	movlb	3	; select bank3
  5369  00A7  082C               	movf	_width^(0+384),w
  5370  00A8  0022               	movlb	2	; select bank2
  5371  00A9  00BF               	movwf	efgtoa@w^(0+256)
  5372                           
  5373                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 349:     if (sign || (flags &
      +                           (1 << 2))) {
  5374  00AA  083A               	movf	efgtoa@sign^(0+256),w
  5375  00AB  043B               	iorwf	(efgtoa@sign+1)^(0+256),w
  5376  00AC  1D03               	btfss	3,2
  5377  00AD  28B1               	goto	l4659
  5378  00AE  0023               	movlb	3	; select bank3
  5379  00AF  1D30               	btfss	_flags^(0+384),2
  5380  00B0  28CB               	goto	l4671
  5381  00B1                     l4659:
  5382                           
  5383                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 350:         dbuf[n] = sign ?
      +                           '-' : '+';
  5384  00B1  0022               	movlb	2	; select bank2
  5385  00B2  083A               	movf	efgtoa@sign^(0+256),w
  5386  00B3  043B               	iorwf	(efgtoa@sign+1)^(0+256),w
  5387  00B4  1D03               	btfss	3,2
  5388  00B5  28B8               	goto	l4663
  5389  00B6  302B               	movlw	43
  5390  00B7  28B9               	goto	L2
  5391  00B8                     l4663:
  5392  00B8  302D               	movlw	45
  5393  00B9                     L2:
  5394  00B9  00A0               	movwf	_efgtoa$2357^(0+256)
  5395  00BA  3000               	movlw	0
  5396  00BB  00A1               	movwf	(_efgtoa$2357^(0+256)+1)
  5397  00BC  0820               	movf	_efgtoa$2357^(0+256),w
  5398  00BD  0021               	movlb	1	; select bank1
  5399  00BE  00E9               	movwf	??_efgtoa^(0+128)
  5400  00BF  0869               	movf	??_efgtoa^(0+128),w
  5401  00C0  0025               	movlb	5	; select bank5
  5402  00C1  00A0               	movwf	_dbuf^(0+640)
  5403                           
  5404                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 351:         ++n;
  5405  00C2  3001               	movlw	1
  5406  00C3  0022               	movlb	2	; select bank2
  5407  00C4  07D3               	addwf	efgtoa@n^(0+256),f
  5408  00C5  3000               	movlw	0
  5409  00C6  3DD4               	addwfc	(efgtoa@n+1)^(0+256),f
  5410                           
  5411                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 352:         --w;
  5412  00C7  30FF               	movlw	255
  5413  00C8  07BF               	addwf	efgtoa@w^(0+256),f
  5414  00C9  30FF               	movlw	255
  5415  00CA  3DC0               	addwfc	(efgtoa@w+1)^(0+256),f
  5416  00CB                     l4671:
  5417                           
  5418                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 357:         if ((0 ? isupper
      +                          ((int)c) : ((unsigned)((int)c)-'A') < 26)) {
  5419  00CB  0022               	movlb	2	; select bank2
  5420  00CC  0850               	movf	(efgtoa@g+3)^(0+256),w
  5421  00CD  00F3               	movwf	___fpclassifyf@x+3
  5422  00CE  084F               	movf	(efgtoa@g+2)^(0+256),w
  5423  00CF  00F2               	movwf	___fpclassifyf@x+2
  5424  00D0  084E               	movf	(efgtoa@g+1)^(0+256),w
  5425  00D1  00F1               	movwf	___fpclassifyf@x+1
  5426  00D2  084D               	movf	efgtoa@g^(0+256),w
  5427  00D3  00F0               	movwf	___fpclassifyf@x
  5428  00D4  3191  21CB  3180   	fcall	___fpclassifyf
  5429  00D7  0370               	decf	?___fpclassifyf,w
  5430  00D8  0471               	iorwf	?___fpclassifyf+1,w
  5431  00D9  1D03               	btfss	3,2
  5432  00DA  2925               	goto	l4689
  5433  00DB  0021               	movlb	1	; select bank1
  5434  00DC  0868               	movf	efgtoa@c^(0+128),w
  5435  00DD  3EBF               	addlw	191
  5436  00DE  00E9               	movwf	??_efgtoa^(0+128)
  5437  00DF  30FF               	movlw	255
  5438  00E0  1803               	skipnc
  5439  00E1  3000               	movlw	0
  5440  00E2  00EA               	movwf	(??_efgtoa^(0+128)+1)
  5441  00E3  3000               	movlw	0
  5442  00E4  026A               	subwf	(??_efgtoa+1)^(0+128),w
  5443  00E5  301A               	movlw	26
  5444  00E6  1903               	skipnz
  5445  00E7  0269               	subwf	??_efgtoa^(0+128),w
  5446  00E8  1803               	btfsc	3,0
  5447  00E9  28EC               	goto	u5150
  5448  00EA  3001               	movlw	1
  5449  00EB  28ED               	goto	u5160
  5450  00EC                     u5150:
  5451  00EC  3000               	movlw	0
  5452  00ED                     u5160:
  5453  00ED  00EB               	movwf	(??_efgtoa+2)^(0+128)
  5454  00EE  01EC               	clrf	((??_efgtoa+2)^(0+128)+1)
  5455  00EF  086B               	movf	(??_efgtoa+2)^(0+128),w
  5456  00F0  0022               	movlb	2	; select bank2
  5457  00F1  00A2               	movwf	_efgtoa$2358^(0+256)
  5458  00F2  0021               	movlb	1	; select bank1
  5459  00F3  086C               	movf	(??_efgtoa+3)^(0+128),w
  5460  00F4  0022               	movlb	2	; select bank2
  5461  00F5  00A3               	movwf	(_efgtoa$2358+1)^(0+256)
  5462  00F6  0822               	movf	_efgtoa$2358^(0+256),w
  5463  00F7  0423               	iorwf	(_efgtoa$2358+1)^(0+256),w
  5464  00F8  1903               	btfsc	3,2
  5465  00F9  28FE               	goto	l4681
  5466                           
  5467                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 358:             strcpy(&dbuf
      +                          [n], "INF");
  5468  00FA  3044               	movlw	low (STR_2| (0+32768))
  5469  00FB  00F0               	movwf	strcpy@src
  5470  00FC  3098               	movlw	high (STR_2| (0+32768))
  5471  00FD  2901               	goto	L3
  5472  00FE                     l4681:	
  5473                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 359:         } else {
  5474                           
  5475                           
  5476                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 360:             strcpy(&dbuf
      +                          [n], "inf");
  5477  00FE  304C               	movlw	low (STR_3| (0+32768))
  5478  00FF  00F0               	movwf	strcpy@src
  5479  0100  3098               	movlw	high (STR_3| (0+32768))
  5480  0101                     L3:
  5481  0101  00F1               	movwf	strcpy@src+1
  5482  0102  0853               	movf	efgtoa@n^(0+256),w
  5483  0103  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
  5484  0104  3190  2001  3180   	fcall	_strcpy
  5485                           
  5486                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 362:         w -= ((sizeof("i
      +                          nf")/sizeof("inf"[0]))-1);
  5487  0107  30FD               	movlw	253
  5488  0108  07BF               	addwf	efgtoa@w^(0+256),f
  5489  0109  30FF               	movlw	255
  5490  010A  3DC0               	addwfc	(efgtoa@w+1)^(0+256),f
  5491                           
  5492                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 363:         return pad(fp, &
      +                          dbuf[0], w);
  5493  010B  30A0               	movlw	(low (_dbuf| (0+512)))& (0+255)
  5494  010C  0021               	movlb	1	; select bank1
  5495  010D  00E9               	movwf	??_efgtoa^(0+128)
  5496  010E  0869               	movf	??_efgtoa^(0+128),w
  5497  010F  0020               	movlb	0	; select bank0
  5498  0110  00A4               	movwf	pad@buf
  5499  0111  0022               	movlb	2	; select bank2
  5500  0112  0840               	movf	(efgtoa@w+1)^(0+256),w
  5501  0113  0020               	movlb	0	; select bank0
  5502  0114  00A6               	movwf	pad@p+1
  5503  0115  0022               	movlb	2	; select bank2
  5504  0116  083F               	movf	efgtoa@w^(0+256),w
  5505  0117  0020               	movlb	0	; select bank0
  5506  0118  00A5               	movwf	pad@p
  5507  0119  0022               	movlb	2	; select bank2
  5508  011A  083C               	movf	efgtoa@fp^(0+256),w
  5509  011B  319F  270E         	fcall	_pad
  5510  011D  0825               	movf	?_pad+1,w
  5511  011E  0021               	movlb	1	; select bank1
  5512  011F  00E5               	movwf	(?_efgtoa+1)^(0+128)
  5513  0120  0020               	movlb	0	; select bank0
  5514  0121  0824               	movf	?_pad,w
  5515  0122  0021               	movlb	1	; select bank1
  5516  0123  00E4               	movwf	?_efgtoa^(0+128)
  5517  0124  0008               	return
  5518  0125                     l4689:
  5519                           
  5520                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 366:         if ((0 ? isupper
      +                          ((int)c) : ((unsigned)((int)c)-'A') < 26)) {
  5521  0125  0022               	movlb	2	; select bank2
  5522  0126  0850               	movf	(efgtoa@g+3)^(0+256),w
  5523  0127  00F3               	movwf	___fpclassifyf@x+3
  5524  0128  084F               	movf	(efgtoa@g+2)^(0+256),w
  5525  0129  00F2               	movwf	___fpclassifyf@x+2
  5526  012A  084E               	movf	(efgtoa@g+1)^(0+256),w
  5527  012B  00F1               	movwf	___fpclassifyf@x+1
  5528  012C  084D               	movf	efgtoa@g^(0+256),w
  5529  012D  00F0               	movwf	___fpclassifyf@x
  5530  012E  3191  21CB  3180   	fcall	___fpclassifyf
  5531  0131  0870               	movf	?___fpclassifyf,w
  5532  0132  0471               	iorwf	?___fpclassifyf+1,w
  5533  0133  1D03               	btfss	3,2
  5534  0134  297F               	goto	l4707
  5535  0135  0021               	movlb	1	; select bank1
  5536  0136  0868               	movf	efgtoa@c^(0+128),w
  5537  0137  3EBF               	addlw	191
  5538  0138  00E9               	movwf	??_efgtoa^(0+128)
  5539  0139  30FF               	movlw	255
  5540  013A  1803               	skipnc
  5541  013B  3000               	movlw	0
  5542  013C  00EA               	movwf	(??_efgtoa^(0+128)+1)
  5543  013D  3000               	movlw	0
  5544  013E  026A               	subwf	(??_efgtoa+1)^(0+128),w
  5545  013F  301A               	movlw	26
  5546  0140  1903               	skipnz
  5547  0141  0269               	subwf	??_efgtoa^(0+128),w
  5548  0142  1803               	btfsc	3,0
  5549  0143  2946               	goto	u5190
  5550  0144  3001               	movlw	1
  5551  0145  2947               	goto	u5200
  5552  0146                     u5190:
  5553  0146  3000               	movlw	0
  5554  0147                     u5200:
  5555  0147  00EB               	movwf	(??_efgtoa+2)^(0+128)
  5556  0148  01EC               	clrf	((??_efgtoa+2)^(0+128)+1)
  5557  0149  086B               	movf	(??_efgtoa+2)^(0+128),w
  5558  014A  0022               	movlb	2	; select bank2
  5559  014B  00A4               	movwf	_efgtoa$2363^(0+256)
  5560  014C  0021               	movlb	1	; select bank1
  5561  014D  086C               	movf	(??_efgtoa+3)^(0+128),w
  5562  014E  0022               	movlb	2	; select bank2
  5563  014F  00A5               	movwf	(_efgtoa$2363+1)^(0+256)
  5564  0150  0824               	movf	_efgtoa$2363^(0+256),w
  5565  0151  0425               	iorwf	(_efgtoa$2363+1)^(0+256),w
  5566  0152  1903               	btfsc	3,2
  5567  0153  2958               	goto	l4699
  5568                           
  5569                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 367:             strcpy(&dbuf
      +                          [n], "NAN");
  5570  0154  3048               	movlw	low (STR_6| (0+32768))
  5571  0155  00F0               	movwf	strcpy@src
  5572  0156  3098               	movlw	high (STR_6| (0+32768))
  5573  0157  295B               	goto	L4
  5574  0158                     l4699:	
  5575                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 368:         } else {
  5576                           
  5577                           
  5578                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 369:             strcpy(&dbuf
      +                          [n], "nan");
  5579  0158  3050               	movlw	low (STR_7| (0+32768))
  5580  0159  00F0               	movwf	strcpy@src
  5581  015A  3098               	movlw	high (STR_7| (0+32768))
  5582  015B                     L4:
  5583  015B  00F1               	movwf	strcpy@src+1
  5584  015C  0853               	movf	efgtoa@n^(0+256),w
  5585  015D  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
  5586  015E  3190  2001  3180   	fcall	_strcpy
  5587                           
  5588                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 371:         w -= ((sizeof("i
      +                          nf")/sizeof("inf"[0]))-1);
  5589  0161  30FD               	movlw	253
  5590  0162  07BF               	addwf	efgtoa@w^(0+256),f
  5591  0163  30FF               	movlw	255
  5592  0164  3DC0               	addwfc	(efgtoa@w+1)^(0+256),f
  5593                           
  5594                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 372:         return pad(fp, &
      +                          dbuf[0], w);
  5595  0165  30A0               	movlw	(low (_dbuf| (0+512)))& (0+255)
  5596  0166  0021               	movlb	1	; select bank1
  5597  0167  00E9               	movwf	??_efgtoa^(0+128)
  5598  0168  0869               	movf	??_efgtoa^(0+128),w
  5599  0169  0020               	movlb	0	; select bank0
  5600  016A  00A4               	movwf	pad@buf
  5601  016B  0022               	movlb	2	; select bank2
  5602  016C  0840               	movf	(efgtoa@w+1)^(0+256),w
  5603  016D  0020               	movlb	0	; select bank0
  5604  016E  00A6               	movwf	pad@p+1
  5605  016F  0022               	movlb	2	; select bank2
  5606  0170  083F               	movf	efgtoa@w^(0+256),w
  5607  0171  0020               	movlb	0	; select bank0
  5608  0172  00A5               	movwf	pad@p
  5609  0173  0022               	movlb	2	; select bank2
  5610  0174  083C               	movf	efgtoa@fp^(0+256),w
  5611  0175  319F  270E         	fcall	_pad
  5612  0177  0825               	movf	?_pad+1,w
  5613  0178  0021               	movlb	1	; select bank1
  5614  0179  00E5               	movwf	(?_efgtoa+1)^(0+128)
  5615  017A  0020               	movlb	0	; select bank0
  5616  017B  0824               	movf	?_pad,w
  5617  017C  0021               	movlb	1	; select bank1
  5618  017D  00E4               	movwf	?_efgtoa^(0+128)
  5619  017E  0008               	return
  5620  017F                     l4707:
  5621                           
  5622                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 376:     u = 1.0;
  5623  017F  303F               	movlw	63
  5624  0180  0022               	movlb	2	; select bank2
  5625  0181  00D8               	movwf	(efgtoa@u+3)^(0+256)
  5626  0182  3080               	movlw	128
  5627  0183  00D7               	movwf	(efgtoa@u+2)^(0+256)
  5628  0184  3000               	movlw	0
  5629  0185  00D6               	movwf	(efgtoa@u+1)^(0+256)
  5630  0186  3000               	movlw	0
  5631  0187  00D5               	movwf	efgtoa@u^(0+256)
  5632                           
  5633                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 377:     e = 0;
  5634  0188  01D1               	clrf	efgtoa@e^(0+256)
  5635  0189  01D2               	clrf	(efgtoa@e+1)^(0+256)
  5636                           
  5637                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 378:     if (!(g == 0.0)) {
  5638  018A  0850               	movf	(efgtoa@g+3)^(0+256),w
  5639  018B  00F3               	movwf	___fleq@ff1+3
  5640  018C  084F               	movf	(efgtoa@g+2)^(0+256),w
  5641  018D  00F2               	movwf	___fleq@ff1+2
  5642  018E  084E               	movf	(efgtoa@g+1)^(0+256),w
  5643  018F  00F1               	movwf	___fleq@ff1+1
  5644  0190  084D               	movf	efgtoa@g^(0+256),w
  5645  0191  00F0               	movwf	___fleq@ff1
  5646  0192  3000               	movlw	0
  5647  0193  00F7               	movwf	___fleq@ff2+3
  5648  0194  3000               	movlw	0
  5649  0195  00F6               	movwf	___fleq@ff2+2
  5650  0196  3000               	movlw	0
  5651  0197  00F5               	movwf	___fleq@ff2+1
  5652  0198  3000               	movlw	0
  5653  0199  00F4               	movwf	___fleq@ff2
  5654  019A  319E  267A  3180   	fcall	___fleq
  5655  019D  1C03               	btfss	3,0
  5656  019E  29CE               	goto	l4719
  5657  019F  2A5A               	goto	l4727
  5658  01A0                     l4715:
  5659                           
  5660                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 380:             u = u*10.0;
  5661  01A0  3041               	movlw	65
  5662  01A1  00A3               	movwf	___flmul@b+3
  5663  01A2  3020               	movlw	32
  5664  01A3  00A2               	movwf	___flmul@b+2
  5665  01A4  3000               	movlw	0
  5666  01A5  00A1               	movwf	___flmul@b+1
  5667  01A6  3000               	movlw	0
  5668  01A7  00A0               	movwf	___flmul@b
  5669  01A8  0022               	movlb	2	; select bank2
  5670  01A9  0858               	movf	(efgtoa@u+3)^(0+256),w
  5671  01AA  0020               	movlb	0	; select bank0
  5672  01AB  00A7               	movwf	___flmul@a+3
  5673  01AC  0022               	movlb	2	; select bank2
  5674  01AD  0857               	movf	(efgtoa@u+2)^(0+256),w
  5675  01AE  0020               	movlb	0	; select bank0
  5676  01AF  00A6               	movwf	___flmul@a+2
  5677  01B0  0022               	movlb	2	; select bank2
  5678  01B1  0856               	movf	(efgtoa@u+1)^(0+256),w
  5679  01B2  0020               	movlb	0	; select bank0
  5680  01B3  00A5               	movwf	___flmul@a+1
  5681  01B4  0022               	movlb	2	; select bank2
  5682  01B5  0855               	movf	efgtoa@u^(0+256),w
  5683  01B6  0020               	movlb	0	; select bank0
  5684  01B7  00A4               	movwf	___flmul@a
  5685  01B8  318A  22F4  3180   	fcall	___flmul
  5686  01BB  0823               	movf	?___flmul+3,w
  5687  01BC  0022               	movlb	2	; select bank2
  5688  01BD  00D8               	movwf	(efgtoa@u+3)^(0+256)
  5689  01BE  0020               	movlb	0	; select bank0
  5690  01BF  0822               	movf	?___flmul+2,w
  5691  01C0  0022               	movlb	2	; select bank2
  5692  01C1  00D7               	movwf	(efgtoa@u+2)^(0+256)
  5693  01C2  0020               	movlb	0	; select bank0
  5694  01C3  0821               	movf	?___flmul+1,w
  5695  01C4  0022               	movlb	2	; select bank2
  5696  01C5  00D6               	movwf	(efgtoa@u+1)^(0+256)
  5697  01C6  0020               	movlb	0	; select bank0
  5698  01C7  0820               	movf	?___flmul,w
  5699  01C8  0022               	movlb	2	; select bank2
  5700  01C9  00D5               	movwf	efgtoa@u^(0+256)
  5701                           
  5702                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 381:             ++e;
  5703  01CA  3001               	movlw	1
  5704  01CB  07D1               	addwf	efgtoa@e^(0+256),f
  5705  01CC  3000               	movlw	0
  5706  01CD  3DD2               	addwfc	(efgtoa@e+1)^(0+256),f
  5707  01CE                     l4719:
  5708                           
  5709                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 379:         while (!(g < (u*
      +                          10.0))) {
  5710  01CE  0850               	movf	(efgtoa@g+3)^(0+256),w
  5711  01CF  0020               	movlb	0	; select bank0
  5712  01D0  00BD               	movwf	___flge@ff1+3
  5713  01D1  0022               	movlb	2	; select bank2
  5714  01D2  084F               	movf	(efgtoa@g+2)^(0+256),w
  5715  01D3  0020               	movlb	0	; select bank0
  5716  01D4  00BC               	movwf	___flge@ff1+2
  5717  01D5  0022               	movlb	2	; select bank2
  5718  01D6  084E               	movf	(efgtoa@g+1)^(0+256),w
  5719  01D7  0020               	movlb	0	; select bank0
  5720  01D8  00BB               	movwf	___flge@ff1+1
  5721  01D9  0022               	movlb	2	; select bank2
  5722  01DA  084D               	movf	efgtoa@g^(0+256),w
  5723  01DB  0020               	movlb	0	; select bank0
  5724  01DC  00BA               	movwf	___flge@ff1
  5725  01DD  3041               	movlw	65
  5726  01DE  00A3               	movwf	___flmul@b+3
  5727  01DF  3020               	movlw	32
  5728  01E0  00A2               	movwf	___flmul@b+2
  5729  01E1  3000               	movlw	0
  5730  01E2  00A1               	movwf	___flmul@b+1
  5731  01E3  3000               	movlw	0
  5732  01E4  00A0               	movwf	___flmul@b
  5733  01E5  0022               	movlb	2	; select bank2
  5734  01E6  0858               	movf	(efgtoa@u+3)^(0+256),w
  5735  01E7  0020               	movlb	0	; select bank0
  5736  01E8  00A7               	movwf	___flmul@a+3
  5737  01E9  0022               	movlb	2	; select bank2
  5738  01EA  0857               	movf	(efgtoa@u+2)^(0+256),w
  5739  01EB  0020               	movlb	0	; select bank0
  5740  01EC  00A6               	movwf	___flmul@a+2
  5741  01ED  0022               	movlb	2	; select bank2
  5742  01EE  0856               	movf	(efgtoa@u+1)^(0+256),w
  5743  01EF  0020               	movlb	0	; select bank0
  5744  01F0  00A5               	movwf	___flmul@a+1
  5745  01F1  0022               	movlb	2	; select bank2
  5746  01F2  0855               	movf	efgtoa@u^(0+256),w
  5747  01F3  0020               	movlb	0	; select bank0
  5748  01F4  00A4               	movwf	___flmul@a
  5749  01F5  318A  22F4  3180   	fcall	___flmul
  5750  01F8  0823               	movf	?___flmul+3,w
  5751  01F9  00C1               	movwf	___flge@ff2+3
  5752  01FA  0822               	movf	?___flmul+2,w
  5753  01FB  00C0               	movwf	___flge@ff2+2
  5754  01FC  0821               	movf	?___flmul+1,w
  5755  01FD  00BF               	movwf	___flge@ff2+1
  5756  01FE  0820               	movf	?___flmul,w
  5757  01FF  00BE               	movwf	___flge@ff2
  5758  0200  3187  2778  3180   	fcall	___flge
  5759  0203  1C03               	btfss	3,0
  5760  0204  2A35               	goto	l4725
  5761  0205  29A0               	goto	l4715
  5762  0206                     l4721:
  5763                           
  5764                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 384:             u = u/10.0;
  5765  0206  3041               	movlw	65
  5766  0207  0021               	movlb	1	; select bank1
  5767  0208  00CB               	movwf	(___fldiv@a+3)^(0+128)
  5768  0209  3020               	movlw	32
  5769  020A  00CA               	movwf	(___fldiv@a+2)^(0+128)
  5770  020B  3000               	movlw	0
  5771  020C  00C9               	movwf	(___fldiv@a+1)^(0+128)
  5772  020D  3000               	movlw	0
  5773  020E  00C8               	movwf	___fldiv@a^(0+128)
  5774  020F  0022               	movlb	2	; select bank2
  5775  0210  0858               	movf	(efgtoa@u+3)^(0+256),w
  5776  0211  0021               	movlb	1	; select bank1
  5777  0212  00CF               	movwf	(___fldiv@b+3)^(0+128)
  5778  0213  0022               	movlb	2	; select bank2
  5779  0214  0857               	movf	(efgtoa@u+2)^(0+256),w
  5780  0215  0021               	movlb	1	; select bank1
  5781  0216  00CE               	movwf	(___fldiv@b+2)^(0+128)
  5782  0217  0022               	movlb	2	; select bank2
  5783  0218  0856               	movf	(efgtoa@u+1)^(0+256),w
  5784  0219  0021               	movlb	1	; select bank1
  5785  021A  00CD               	movwf	(___fldiv@b+1)^(0+128)
  5786  021B  0022               	movlb	2	; select bank2
  5787  021C  0855               	movf	efgtoa@u^(0+256),w
  5788  021D  0021               	movlb	1	; select bank1
  5789  021E  00CC               	movwf	___fldiv@b^(0+128)
  5790  021F  3194  244F  3180   	fcall	___fldiv
  5791  0222  084B               	movf	(?___fldiv+3)^(0+128),w
  5792  0223  0022               	movlb	2	; select bank2
  5793  0224  00D8               	movwf	(efgtoa@u+3)^(0+256)
  5794  0225  0021               	movlb	1	; select bank1
  5795  0226  084A               	movf	(?___fldiv+2)^(0+128),w
  5796  0227  0022               	movlb	2	; select bank2
  5797  0228  00D7               	movwf	(efgtoa@u+2)^(0+256)
  5798  0229  0021               	movlb	1	; select bank1
  5799  022A  0849               	movf	(?___fldiv+1)^(0+128),w
  5800  022B  0022               	movlb	2	; select bank2
  5801  022C  00D6               	movwf	(efgtoa@u+1)^(0+256)
  5802  022D  0021               	movlb	1	; select bank1
  5803  022E  0848               	movf	?___fldiv^(0+128),w
  5804  022F  0022               	movlb	2	; select bank2
  5805  0230  00D5               	movwf	efgtoa@u^(0+256)
  5806                           
  5807                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 385:             --e;
  5808  0231  30FF               	movlw	255
  5809  0232  07D1               	addwf	efgtoa@e^(0+256),f
  5810  0233  30FF               	movlw	255
  5811  0234  3DD2               	addwfc	(efgtoa@e+1)^(0+256),f
  5812  0235                     l4725:
  5813                           
  5814                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 383:         while (g < u) {
  5815  0235  0022               	movlb	2	; select bank2
  5816  0236  0850               	movf	(efgtoa@g+3)^(0+256),w
  5817  0237  0020               	movlb	0	; select bank0
  5818  0238  00BD               	movwf	___flge@ff1+3
  5819  0239  0022               	movlb	2	; select bank2
  5820  023A  084F               	movf	(efgtoa@g+2)^(0+256),w
  5821  023B  0020               	movlb	0	; select bank0
  5822  023C  00BC               	movwf	___flge@ff1+2
  5823  023D  0022               	movlb	2	; select bank2
  5824  023E  084E               	movf	(efgtoa@g+1)^(0+256),w
  5825  023F  0020               	movlb	0	; select bank0
  5826  0240  00BB               	movwf	___flge@ff1+1
  5827  0241  0022               	movlb	2	; select bank2
  5828  0242  084D               	movf	efgtoa@g^(0+256),w
  5829  0243  0020               	movlb	0	; select bank0
  5830  0244  00BA               	movwf	___flge@ff1
  5831  0245  0022               	movlb	2	; select bank2
  5832  0246  0858               	movf	(efgtoa@u+3)^(0+256),w
  5833  0247  0020               	movlb	0	; select bank0
  5834  0248  00C1               	movwf	___flge@ff2+3
  5835  0249  0022               	movlb	2	; select bank2
  5836  024A  0857               	movf	(efgtoa@u+2)^(0+256),w
  5837  024B  0020               	movlb	0	; select bank0
  5838  024C  00C0               	movwf	___flge@ff2+2
  5839  024D  0022               	movlb	2	; select bank2
  5840  024E  0856               	movf	(efgtoa@u+1)^(0+256),w
  5841  024F  0020               	movlb	0	; select bank0
  5842  0250  00BF               	movwf	___flge@ff2+1
  5843  0251  0022               	movlb	2	; select bank2
  5844  0252  0855               	movf	efgtoa@u^(0+256),w
  5845  0253  0020               	movlb	0	; select bank0
  5846  0254  00BE               	movwf	___flge@ff2
  5847  0255  3187  2778  3180   	fcall	___flge
  5848  0258  1C03               	btfss	3,0
  5849  0259  2A06               	goto	l4721
  5850  025A                     l4727:
  5851                           
  5852                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 390:     mode = (char)tolower
      +                          ((int)c);
  5853  025A  0021               	movlb	1	; select bank1
  5854  025B  0868               	movf	efgtoa@c^(0+128),w
  5855  025C  00E9               	movwf	??_efgtoa^(0+128)
  5856  025D  01EA               	clrf	(??_efgtoa^(0+128)+1)
  5857  025E  0869               	movf	??_efgtoa^(0+128),w
  5858  025F  00F6               	movwf	tolower@c
  5859  0260  086A               	movf	(??_efgtoa+1)^(0+128),w
  5860  0261  00F7               	movwf	tolower@c+1
  5861  0262  319C  24A9  3180   	fcall	_tolower
  5862  0265  0876               	movf	?_tolower,w
  5863  0266  0021               	movlb	1	; select bank1
  5864  0267  00EB               	movwf	(??_efgtoa+2)^(0+128)
  5865  0268  086B               	movf	(??_efgtoa+2)^(0+128),w
  5866  0269  0022               	movlb	2	; select bank2
  5867  026A  00C2               	movwf	efgtoa@mode^(0+256)
  5868                           
  5869                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 391:     nmode = mode;
  5870  026B  0842               	movf	efgtoa@mode^(0+256),w
  5871  026C  0021               	movlb	1	; select bank1
  5872  026D  00E9               	movwf	??_efgtoa^(0+128)
  5873  026E  0869               	movf	??_efgtoa^(0+128),w
  5874  026F  0022               	movlb	2	; select bank2
  5875  0270  00C1               	movwf	efgtoa@nmode^(0+256)
  5876                           
  5877                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 392:     if (mode == 'g') {
  5878  0271  3067               	movlw	103
  5879  0272  0642               	xorwf	efgtoa@mode^(0+256),w
  5880  0273  1D03               	btfss	3,2
  5881  0274  2A91               	goto	l1736
  5882                           
  5883                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 393:   if (prec == 0) {
  5884  0275  0023               	movlb	3	; select bank3
  5885  0276  082E               	movf	_prec^(0+384),w
  5886  0277  042F               	iorwf	(_prec+1)^(0+384),w
  5887  0278  1D03               	btfss	3,2
  5888  0279  2A7E               	goto	l1737
  5889                           
  5890                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 394:    prec = 1;
  5891  027A  3001               	movlw	1
  5892  027B  00AE               	movwf	_prec^(0+384)
  5893  027C  3000               	movlw	0
  5894  027D  00AF               	movwf	(_prec^(0+384)+1)
  5895  027E                     l1737:	
  5896                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 395:   }
  5897                           
  5898                           
  5899                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 396:         p = (0 < prec) ?
      +                           prec : 6;
  5900  027E  082F               	movf	(_prec+1)^(0+384),w
  5901  027F  3A80               	xorlw	128
  5902  0280  0021               	movlb	1	; select bank1
  5903  0281  00E9               	movwf	??_efgtoa^(0+128)
  5904  0282  3080               	movlw	128
  5905  0283  0269               	subwf	??_efgtoa^(0+128),w
  5906  0284  1D03               	skipz
  5907  0285  2A89               	goto	u5275
  5908  0286  3001               	movlw	1
  5909  0287  0023               	movlb	3	; select bank3
  5910  0288  022E               	subwf	_prec^(0+384),w
  5911  0289                     u5275:
  5912  0289  1803               	skipnc
  5913  028A  2A94               	goto	l4739
  5914  028B                     l4737:
  5915  028B  3006               	movlw	6
  5916  028C  0022               	movlb	2	; select bank2
  5917  028D  00BD               	movwf	efgtoa@p^(0+256)
  5918  028E  3000               	movlw	0
  5919  028F  00BE               	movwf	(efgtoa@p^(0+256)+1)
  5920  0290  2A9C               	goto	l4745
  5921  0291                     l1736:
  5922                           
  5923                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 398:         p = (prec < 0) ?
      +                           6 : prec;
  5924  0291  0023               	movlb	3	; select bank3
  5925  0292  1BAF               	btfsc	(_prec+1)^(0+384),7
  5926  0293  2A8B               	goto	l4737
  5927  0294                     l4739:
  5928  0294  0023               	movlb	3	; select bank3
  5929  0295  082F               	movf	(_prec+1)^(0+384),w
  5930  0296  0022               	movlb	2	; select bank2
  5931  0297  00BE               	movwf	(efgtoa@p+1)^(0+256)
  5932  0298  0023               	movlb	3	; select bank3
  5933  0299  082E               	movf	_prec^(0+384),w
  5934  029A  0022               	movlb	2	; select bank2
  5935  029B  00BD               	movwf	efgtoa@p^(0+256)
  5936  029C                     l4745:
  5937                           
  5938                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 402:     if (mode == 'g') {
  5939  029C  3067               	movlw	103
  5940  029D  0642               	xorwf	efgtoa@mode^(0+256),w
  5941  029E  1D03               	btfss	3,2
  5942  029F  2ACF               	goto	l1747
  5943                           
  5944                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 403:         if (!(e < -4) &&
      +                           !((p - 1) < e)) {
  5945  02A0  0852               	movf	(efgtoa@e+1)^(0+256),w
  5946  02A1  3A80               	xorlw	128
  5947  02A2  0021               	movlb	1	; select bank1
  5948  02A3  00E9               	movwf	??_efgtoa^(0+128)
  5949  02A4  307F               	movlw	127
  5950  02A5  0269               	subwf	??_efgtoa^(0+128),w
  5951  02A6  1D03               	skipz
  5952  02A7  2AAB               	goto	u5305
  5953  02A8  30FC               	movlw	252
  5954  02A9  0022               	movlb	2	; select bank2
  5955  02AA  0251               	subwf	efgtoa@e^(0+256),w
  5956  02AB                     u5305:
  5957  02AB  1C03               	skipc
  5958  02AC  2AC9               	goto	l4753
  5959  02AD  0022               	movlb	2	; select bank2
  5960  02AE  083D               	movf	efgtoa@p^(0+256),w
  5961  02AF  3EFF               	addlw	255
  5962  02B0  0021               	movlb	1	; select bank1
  5963  02B1  00E9               	movwf	??_efgtoa^(0+128)
  5964  02B2  30FF               	movlw	255
  5965  02B3  0022               	movlb	2	; select bank2
  5966  02B4  3D3E               	addwfc	(efgtoa@p+1)^(0+256),w
  5967  02B5  0021               	movlb	1	; select bank1
  5968  02B6  00EA               	movwf	(??_efgtoa+1)^(0+128)
  5969  02B7  086A               	movf	(??_efgtoa+1)^(0+128),w
  5970  02B8  3A80               	xorlw	128
  5971  02B9  00EB               	movwf	(??_efgtoa+2)^(0+128)
  5972  02BA  0022               	movlb	2	; select bank2
  5973  02BB  0852               	movf	(efgtoa@e+1)^(0+256),w
  5974  02BC  3A80               	xorlw	128
  5975  02BD  0021               	movlb	1	; select bank1
  5976  02BE  026B               	subwf	(??_efgtoa+2)^(0+128),w
  5977  02BF  1D03               	skipz
  5978  02C0  2AC5               	goto	u5315
  5979  02C1  0022               	movlb	2	; select bank2
  5980  02C2  0851               	movf	efgtoa@e^(0+256),w
  5981  02C3  0021               	movlb	1	; select bank1
  5982  02C4  0269               	subwf	??_efgtoa^(0+128),w
  5983  02C5                     u5315:
  5984  02C5  1C03               	skipc
  5985  02C6  2AC9               	goto	l4753
  5986                           
  5987                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 404:             nmode = 'f';
  5988  02C7  3066               	movlw	102
  5989  02C8  2ACA               	goto	L5
  5990  02C9                     l4753:	
  5991                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 405:         } else {
  5992                           
  5993                           
  5994                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 406:             nmode = 'e';
  5995  02C9  3065               	movlw	101
  5996  02CA                     L5:
  5997  02CA  0021               	movlb	1	; select bank1
  5998  02CB  00E9               	movwf	??_efgtoa^(0+128)
  5999  02CC  0869               	movf	??_efgtoa^(0+128),w
  6000  02CD  0022               	movlb	2	; select bank2
  6001  02CE  00C1               	movwf	efgtoa@nmode^(0+256)
  6002  02CF                     l1747:	
  6003                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 408:     }
  6004                           
  6005                           
  6006                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 411:     m = p;
  6007  02CF  083E               	movf	(efgtoa@p+1)^(0+256),w
  6008  02D0  00B3               	movwf	(efgtoa@m+1)^(0+256)
  6009  02D1  083D               	movf	efgtoa@p^(0+256),w
  6010  02D2  00B2               	movwf	efgtoa@m^(0+256)
  6011                           
  6012                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 412:     if (!(mode == 'g') |
      +                          | ((nmode == 'f') && (e < 0))) {
  6013  02D3  3067               	movlw	103
  6014  02D4  0642               	xorwf	efgtoa@mode^(0+256),w
  6015  02D5  1D03               	btfss	3,2
  6016  02D6  2ADC               	goto	l4761
  6017  02D7  3066               	movlw	102
  6018  02D8  0641               	xorwf	efgtoa@nmode^(0+256),w
  6019  02D9  1903               	btfsc	3,2
  6020  02DA  1FD2               	btfss	(efgtoa@e+1)^(0+256),7
  6021  02DB  2AE0               	goto	l4763
  6022  02DC                     l4761:
  6023                           
  6024                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 413:         ++m;
  6025  02DC  3001               	movlw	1
  6026  02DD  07B2               	addwf	efgtoa@m^(0+256),f
  6027  02DE  3000               	movlw	0
  6028  02DF  3DB3               	addwfc	(efgtoa@m+1)^(0+256),f
  6029  02E0                     l4763:
  6030                           
  6031                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 417:     if (nmode == 'f') {
  6032  02E0  3066               	movlw	102
  6033  02E1  0641               	xorwf	efgtoa@nmode^(0+256),w
  6034  02E2  1D03               	btfss	3,2
  6035  02E3  2AF8               	goto	l4775
  6036                           
  6037                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 418:         if (e < 0) {
  6038  02E4  1FD2               	btfss	(efgtoa@e+1)^(0+256),7
  6039  02E5  2AF0               	goto	l4771
  6040                           
  6041                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 419:             u = 1.0;
  6042  02E6  303F               	movlw	63
  6043  02E7  00D8               	movwf	(efgtoa@u+3)^(0+256)
  6044  02E8  3080               	movlw	128
  6045  02E9  00D7               	movwf	(efgtoa@u+2)^(0+256)
  6046  02EA  3000               	movlw	0
  6047  02EB  00D6               	movwf	(efgtoa@u+1)^(0+256)
  6048  02EC  3000               	movlw	0
  6049  02ED  00D5               	movwf	efgtoa@u^(0+256)
  6050                           
  6051                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 420:             e = 0;
  6052  02EE  01D1               	clrf	efgtoa@e^(0+256)
  6053  02EF  01D2               	clrf	(efgtoa@e+1)^(0+256)
  6054  02F0                     l4771:
  6055                           
  6056                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 422:         if (!(mode == 'g
      +                          ')) {
  6057  02F0  3067               	movlw	103
  6058  02F1  0642               	xorwf	efgtoa@mode^(0+256),w
  6059  02F2  1903               	btfsc	3,2
  6060  02F3  2AF8               	goto	l4775
  6061                           
  6062                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 423:             m += e;
  6063  02F4  0851               	movf	efgtoa@e^(0+256),w
  6064  02F5  07B2               	addwf	efgtoa@m^(0+256),f
  6065  02F6  0852               	movf	(efgtoa@e+1)^(0+256),w
  6066  02F7  3DB3               	addwfc	(efgtoa@m+1)^(0+256),f
  6067  02F8                     l4775:
  6068                           
  6069                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 428:     i = 0;
  6070  02F8  01CB               	clrf	efgtoa@i^(0+256)
  6071  02F9  01CC               	clrf	(efgtoa@i+1)^(0+256)
  6072                           
  6073                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 429:     h = g;
  6074  02FA  0850               	movf	(efgtoa@g+3)^(0+256),w
  6075  02FB  00C6               	movwf	(efgtoa@h+3)^(0+256)
  6076  02FC  084F               	movf	(efgtoa@g+2)^(0+256),w
  6077  02FD  00C5               	movwf	(efgtoa@h+2)^(0+256)
  6078  02FE  084E               	movf	(efgtoa@g+1)^(0+256),w
  6079  02FF  00C4               	movwf	(efgtoa@h+1)^(0+256)
  6080  0300  084D               	movf	efgtoa@g^(0+256),w
  6081  0301  00C3               	movwf	efgtoa@h^(0+256)
  6082                           
  6083                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 430:     ou = u;
  6084  0302  0858               	movf	(efgtoa@u+3)^(0+256),w
  6085  0303  00B7               	movwf	(efgtoa@ou+3)^(0+256)
  6086  0304  0857               	movf	(efgtoa@u+2)^(0+256),w
  6087  0305  00B6               	movwf	(efgtoa@ou+2)^(0+256)
  6088  0306  0856               	movf	(efgtoa@u+1)^(0+256),w
  6089  0307  00B5               	movwf	(efgtoa@ou+1)^(0+256)
  6090  0308  0855               	movf	efgtoa@u^(0+256),w
  6091  0309  00B4               	movwf	efgtoa@ou^(0+256)
  6092  030A                     l4785:	
  6093                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 431:     while (i < m) {
  6094                           
  6095                           
  6096                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 431:     while (i < m) {
  6097  030A  084C               	movf	(efgtoa@i+1)^(0+256),w
  6098  030B  3A80               	xorlw	128
  6099  030C  0021               	movlb	1	; select bank1
  6100  030D  00E9               	movwf	??_efgtoa^(0+128)
  6101  030E  0022               	movlb	2	; select bank2
  6102  030F  0833               	movf	(efgtoa@m+1)^(0+256),w
  6103  0310  3A80               	xorlw	128
  6104  0311  0021               	movlb	1	; select bank1
  6105  0312  0269               	subwf	??_efgtoa^(0+128),w
  6106  0313  1D03               	skipz
  6107  0314  2B18               	goto	u5385
  6108  0315  0022               	movlb	2	; select bank2
  6109  0316  0832               	movf	efgtoa@m^(0+256),w
  6110  0317  024B               	subwf	efgtoa@i^(0+256),w
  6111  0318                     u5385:
  6112  0318  1803               	btfsc	3,0
  6113  0319  2BEE               	goto	l4787
  6114                           
  6115                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 432:         l = floorf(h/u);
  6116  031A  0022               	movlb	2	; select bank2
  6117  031B  0858               	movf	(efgtoa@u+3)^(0+256),w
  6118  031C  0021               	movlb	1	; select bank1
  6119  031D  00CB               	movwf	(___fldiv@a+3)^(0+128)
  6120  031E  0022               	movlb	2	; select bank2
  6121  031F  0857               	movf	(efgtoa@u+2)^(0+256),w
  6122  0320  0021               	movlb	1	; select bank1
  6123  0321  00CA               	movwf	(___fldiv@a+2)^(0+128)
  6124  0322  0022               	movlb	2	; select bank2
  6125  0323  0856               	movf	(efgtoa@u+1)^(0+256),w
  6126  0324  0021               	movlb	1	; select bank1
  6127  0325  00C9               	movwf	(___fldiv@a+1)^(0+128)
  6128  0326  0022               	movlb	2	; select bank2
  6129  0327  0855               	movf	efgtoa@u^(0+256),w
  6130  0328  0021               	movlb	1	; select bank1
  6131  0329  00C8               	movwf	___fldiv@a^(0+128)
  6132  032A  0022               	movlb	2	; select bank2
  6133  032B  0846               	movf	(efgtoa@h+3)^(0+256),w
  6134  032C  0021               	movlb	1	; select bank1
  6135  032D  00CF               	movwf	(___fldiv@b+3)^(0+128)
  6136  032E  0022               	movlb	2	; select bank2
  6137  032F  0845               	movf	(efgtoa@h+2)^(0+256),w
  6138  0330  0021               	movlb	1	; select bank1
  6139  0331  00CE               	movwf	(___fldiv@b+2)^(0+128)
  6140  0332  0022               	movlb	2	; select bank2
  6141  0333  0844               	movf	(efgtoa@h+1)^(0+256),w
  6142  0334  0021               	movlb	1	; select bank1
  6143  0335  00CD               	movwf	(___fldiv@b+1)^(0+128)
  6144  0336  0022               	movlb	2	; select bank2
  6145  0337  0843               	movf	efgtoa@h^(0+256),w
  6146  0338  0021               	movlb	1	; select bank1
  6147  0339  00CC               	movwf	___fldiv@b^(0+128)
  6148  033A  3194  244F  3180   	fcall	___fldiv
  6149  033D  084B               	movf	(?___fldiv+3)^(0+128),w
  6150  033E  00D3               	movwf	(floorf@x+3)^(0+128)
  6151  033F  084A               	movf	(?___fldiv+2)^(0+128),w
  6152  0340  00D2               	movwf	(floorf@x+2)^(0+128)
  6153  0341  0849               	movf	(?___fldiv+1)^(0+128),w
  6154  0342  00D1               	movwf	(floorf@x+1)^(0+128)
  6155  0343  0848               	movf	?___fldiv^(0+128),w
  6156  0344  00D0               	movwf	floorf@x^(0+128)
  6157  0345  3188  2041  3180   	fcall	_floorf
  6158  0348  0021               	movlb	1	; select bank1
  6159  0349  0853               	movf	(?_floorf+3)^(0+128),w
  6160  034A  0022               	movlb	2	; select bank2
  6161  034B  00CA               	movwf	(efgtoa@l+3)^(0+256)
  6162  034C  0021               	movlb	1	; select bank1
  6163  034D  0852               	movf	(?_floorf+2)^(0+128),w
  6164  034E  0022               	movlb	2	; select bank2
  6165  034F  00C9               	movwf	(efgtoa@l+2)^(0+256)
  6166  0350  0021               	movlb	1	; select bank1
  6167  0351  0851               	movf	(?_floorf+1)^(0+128),w
  6168  0352  0022               	movlb	2	; select bank2
  6169  0353  00C8               	movwf	(efgtoa@l+1)^(0+256)
  6170  0354  0021               	movlb	1	; select bank1
  6171  0355  0850               	movf	?_floorf^(0+128),w
  6172  0356  0022               	movlb	2	; select bank2
  6173  0357  00C7               	movwf	efgtoa@l^(0+256)
  6174                           
  6175                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 433:         d = (int)l;
  6176  0358  084A               	movf	(efgtoa@l+3)^(0+256),w
  6177  0359  0021               	movlb	1	; select bank1
  6178  035A  00D3               	movwf	(___fltol@f1+3)^(0+128)
  6179  035B  0022               	movlb	2	; select bank2
  6180  035C  0849               	movf	(efgtoa@l+2)^(0+256),w
  6181  035D  0021               	movlb	1	; select bank1
  6182  035E  00D2               	movwf	(___fltol@f1+2)^(0+128)
  6183  035F  0022               	movlb	2	; select bank2
  6184  0360  0848               	movf	(efgtoa@l+1)^(0+256),w
  6185  0361  0021               	movlb	1	; select bank1
  6186  0362  00D1               	movwf	(___fltol@f1+1)^(0+128)
  6187  0363  0022               	movlb	2	; select bank2
  6188  0364  0847               	movf	efgtoa@l^(0+256),w
  6189  0365  0021               	movlb	1	; select bank1
  6190  0366  00D0               	movwf	___fltol@f1^(0+128)
  6191  0367  3190  2071  3180   	fcall	___fltol
  6192  036A  0021               	movlb	1	; select bank1
  6193  036B  0851               	movf	(?___fltol+1)^(0+128),w
  6194  036C  0022               	movlb	2	; select bank2
  6195  036D  00B9               	movwf	(efgtoa@d+1)^(0+256)
  6196  036E  0021               	movlb	1	; select bank1
  6197  036F  0850               	movf	?___fltol^(0+128),w
  6198  0370  0022               	movlb	2	; select bank2
  6199  0371  00B8               	movwf	efgtoa@d^(0+256)
  6200                           
  6201                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 434:         h -= l*u;
  6202  0372  084A               	movf	(efgtoa@l+3)^(0+256),w
  6203  0373  0020               	movlb	0	; select bank0
  6204  0374  00A7               	movwf	___flmul@a+3
  6205  0375  0022               	movlb	2	; select bank2
  6206  0376  0849               	movf	(efgtoa@l+2)^(0+256),w
  6207  0377  0020               	movlb	0	; select bank0
  6208  0378  00A6               	movwf	___flmul@a+2
  6209  0379  0022               	movlb	2	; select bank2
  6210  037A  0848               	movf	(efgtoa@l+1)^(0+256),w
  6211  037B  0020               	movlb	0	; select bank0
  6212  037C  00A5               	movwf	___flmul@a+1
  6213  037D  0022               	movlb	2	; select bank2
  6214  037E  0847               	movf	efgtoa@l^(0+256),w
  6215  037F  0020               	movlb	0	; select bank0
  6216  0380  00A4               	movwf	___flmul@a
  6217  0381  0022               	movlb	2	; select bank2
  6218  0382  0858               	movf	(efgtoa@u+3)^(0+256),w
  6219  0383  0020               	movlb	0	; select bank0
  6220  0384  00A3               	movwf	___flmul@b+3
  6221  0385  0022               	movlb	2	; select bank2
  6222  0386  0857               	movf	(efgtoa@u+2)^(0+256),w
  6223  0387  0020               	movlb	0	; select bank0
  6224  0388  00A2               	movwf	___flmul@b+2
  6225  0389  0022               	movlb	2	; select bank2
  6226  038A  0856               	movf	(efgtoa@u+1)^(0+256),w
  6227  038B  0020               	movlb	0	; select bank0
  6228  038C  00A1               	movwf	___flmul@b+1
  6229  038D  0022               	movlb	2	; select bank2
  6230  038E  0855               	movf	efgtoa@u^(0+256),w
  6231  038F  0020               	movlb	0	; select bank0
  6232  0390  00A0               	movwf	___flmul@b
  6233  0391  318A  22F4  3180   	fcall	___flmul
  6234  0394  0823               	movf	?___flmul+3,w
  6235  0395  00D1               	movwf	___flsub@a+3
  6236  0396  0822               	movf	?___flmul+2,w
  6237  0397  00D0               	movwf	___flsub@a+2
  6238  0398  0821               	movf	?___flmul+1,w
  6239  0399  00CF               	movwf	___flsub@a+1
  6240  039A  0820               	movf	?___flmul,w
  6241  039B  00CE               	movwf	___flsub@a
  6242  039C  0022               	movlb	2	; select bank2
  6243  039D  0846               	movf	(efgtoa@h+3)^(0+256),w
  6244  039E  0020               	movlb	0	; select bank0
  6245  039F  00D5               	movwf	___flsub@b+3
  6246  03A0  0022               	movlb	2	; select bank2
  6247  03A1  0845               	movf	(efgtoa@h+2)^(0+256),w
  6248  03A2  0020               	movlb	0	; select bank0
  6249  03A3  00D4               	movwf	___flsub@b+2
  6250  03A4  0022               	movlb	2	; select bank2
  6251  03A5  0844               	movf	(efgtoa@h+1)^(0+256),w
  6252  03A6  0020               	movlb	0	; select bank0
  6253  03A7  00D3               	movwf	___flsub@b+1
  6254  03A8  0022               	movlb	2	; select bank2
  6255  03A9  0843               	movf	efgtoa@h^(0+256),w
  6256  03AA  0020               	movlb	0	; select bank0
  6257  03AB  00D2               	movwf	___flsub@b
  6258  03AC  319C  244C  3180   	fcall	___flsub
  6259  03AF  0851               	movf	?___flsub+3,w
  6260  03B0  0022               	movlb	2	; select bank2
  6261  03B1  00C6               	movwf	(efgtoa@h+3)^(0+256)
  6262  03B2  0020               	movlb	0	; select bank0
  6263  03B3  0850               	movf	?___flsub+2,w
  6264  03B4  0022               	movlb	2	; select bank2
  6265  03B5  00C5               	movwf	(efgtoa@h+2)^(0+256)
  6266  03B6  0020               	movlb	0	; select bank0
  6267  03B7  084F               	movf	?___flsub+1,w
  6268  03B8  0022               	movlb	2	; select bank2
  6269  03B9  00C4               	movwf	(efgtoa@h+1)^(0+256)
  6270  03BA  0020               	movlb	0	; select bank0
  6271  03BB  084E               	movf	?___flsub,w
  6272  03BC  0022               	movlb	2	; select bank2
  6273  03BD  00C3               	movwf	efgtoa@h^(0+256)
  6274                           
  6275                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 435:         u = u/10.0;
  6276  03BE  3041               	movlw	65
  6277  03BF  0021               	movlb	1	; select bank1
  6278  03C0  00CB               	movwf	(___fldiv@a+3)^(0+128)
  6279  03C1  3020               	movlw	32
  6280  03C2  00CA               	movwf	(___fldiv@a+2)^(0+128)
  6281  03C3  3000               	movlw	0
  6282  03C4  00C9               	movwf	(___fldiv@a+1)^(0+128)
  6283  03C5  3000               	movlw	0
  6284  03C6  00C8               	movwf	___fldiv@a^(0+128)
  6285  03C7  0022               	movlb	2	; select bank2
  6286  03C8  0858               	movf	(efgtoa@u+3)^(0+256),w
  6287  03C9  0021               	movlb	1	; select bank1
  6288  03CA  00CF               	movwf	(___fldiv@b+3)^(0+128)
  6289  03CB  0022               	movlb	2	; select bank2
  6290  03CC  0857               	movf	(efgtoa@u+2)^(0+256),w
  6291  03CD  0021               	movlb	1	; select bank1
  6292  03CE  00CE               	movwf	(___fldiv@b+2)^(0+128)
  6293  03CF  0022               	movlb	2	; select bank2
  6294  03D0  0856               	movf	(efgtoa@u+1)^(0+256),w
  6295  03D1  0021               	movlb	1	; select bank1
  6296  03D2  00CD               	movwf	(___fldiv@b+1)^(0+128)
  6297  03D3  0022               	movlb	2	; select bank2
  6298  03D4  0855               	movf	efgtoa@u^(0+256),w
  6299  03D5  0021               	movlb	1	; select bank1
  6300  03D6  00CC               	movwf	___fldiv@b^(0+128)
  6301  03D7  3194  244F  3180   	fcall	___fldiv
  6302  03DA  084B               	movf	(?___fldiv+3)^(0+128),w
  6303  03DB  0022               	movlb	2	; select bank2
  6304  03DC  00D8               	movwf	(efgtoa@u+3)^(0+256)
  6305  03DD  0021               	movlb	1	; select bank1
  6306  03DE  084A               	movf	(?___fldiv+2)^(0+128),w
  6307  03DF  0022               	movlb	2	; select bank2
  6308  03E0  00D7               	movwf	(efgtoa@u+2)^(0+256)
  6309  03E1  0021               	movlb	1	; select bank1
  6310  03E2  0849               	movf	(?___fldiv+1)^(0+128),w
  6311  03E3  0022               	movlb	2	; select bank2
  6312  03E4  00D6               	movwf	(efgtoa@u+1)^(0+256)
  6313  03E5  0021               	movlb	1	; select bank1
  6314  03E6  0848               	movf	?___fldiv^(0+128),w
  6315  03E7  0022               	movlb	2	; select bank2
  6316  03E8  00D5               	movwf	efgtoa@u^(0+256)
  6317                           
  6318                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 436:         ++i;
  6319  03E9  3001               	movlw	1
  6320  03EA  07CB               	addwf	efgtoa@i^(0+256),f
  6321  03EB  3000               	movlw	0
  6322  03EC  3DCC               	addwfc	(efgtoa@i+1)^(0+256),f
  6323  03ED  2B0A               	goto	l4785
  6324  03EE                     l4787:
  6325                           
  6326                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 440:     l = u*5.0;
  6327  03EE  3040               	movlw	64
  6328  03EF  0020               	movlb	0	; select bank0
  6329  03F0  00A3               	movwf	___flmul@b+3
  6330  03F1  30A0               	movlw	160
  6331  03F2  00A2               	movwf	___flmul@b+2
  6332  03F3  3000               	movlw	0
  6333  03F4  00A1               	movwf	___flmul@b+1
  6334  03F5  3000               	movlw	0
  6335  03F6  00A0               	movwf	___flmul@b
  6336  03F7  0022               	movlb	2	; select bank2
  6337  03F8  0858               	movf	(efgtoa@u+3)^(0+256),w
  6338  03F9  0020               	movlb	0	; select bank0
  6339  03FA  00A7               	movwf	___flmul@a+3
  6340  03FB  0022               	movlb	2	; select bank2
  6341  03FC  0857               	movf	(efgtoa@u+2)^(0+256),w
  6342  03FD  0020               	movlb	0	; select bank0
  6343  03FE  00A6               	movwf	___flmul@a+2
  6344  03FF  0022               	movlb	2	; select bank2
  6345  0400  0856               	movf	(efgtoa@u+1)^(0+256),w
  6346  0401  0020               	movlb	0	; select bank0
  6347  0402  00A5               	movwf	___flmul@a+1
  6348  0403  0022               	movlb	2	; select bank2
  6349  0404  0855               	movf	efgtoa@u^(0+256),w
  6350  0405  0020               	movlb	0	; select bank0
  6351  0406  00A4               	movwf	___flmul@a
  6352  0407  318A  22F4  3180   	fcall	___flmul
  6353  040A  0823               	movf	?___flmul+3,w
  6354  040B  0022               	movlb	2	; select bank2
  6355  040C  00CA               	movwf	(efgtoa@l+3)^(0+256)
  6356  040D  0020               	movlb	0	; select bank0
  6357  040E  0822               	movf	?___flmul+2,w
  6358  040F  0022               	movlb	2	; select bank2
  6359  0410  00C9               	movwf	(efgtoa@l+2)^(0+256)
  6360  0411  0020               	movlb	0	; select bank0
  6361  0412  0821               	movf	?___flmul+1,w
  6362  0413  0022               	movlb	2	; select bank2
  6363  0414  00C8               	movwf	(efgtoa@l+1)^(0+256)
  6364  0415  0020               	movlb	0	; select bank0
  6365  0416  0820               	movf	?___flmul,w
  6366  0417  0022               	movlb	2	; select bank2
  6367  0418  00C7               	movwf	efgtoa@l^(0+256)
  6368                           
  6369                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 441:     if (h < l) {
  6370  0419  0846               	movf	(efgtoa@h+3)^(0+256),w
  6371  041A  0020               	movlb	0	; select bank0
  6372  041B  00BD               	movwf	___flge@ff1+3
  6373  041C  0022               	movlb	2	; select bank2
  6374  041D  0845               	movf	(efgtoa@h+2)^(0+256),w
  6375  041E  0020               	movlb	0	; select bank0
  6376  041F  00BC               	movwf	___flge@ff1+2
  6377  0420  0022               	movlb	2	; select bank2
  6378  0421  0844               	movf	(efgtoa@h+1)^(0+256),w
  6379  0422  0020               	movlb	0	; select bank0
  6380  0423  00BB               	movwf	___flge@ff1+1
  6381  0424  0022               	movlb	2	; select bank2
  6382  0425  0843               	movf	efgtoa@h^(0+256),w
  6383  0426  0020               	movlb	0	; select bank0
  6384  0427  00BA               	movwf	___flge@ff1
  6385  0428  0022               	movlb	2	; select bank2
  6386  0429  084A               	movf	(efgtoa@l+3)^(0+256),w
  6387  042A  0020               	movlb	0	; select bank0
  6388  042B  00C1               	movwf	___flge@ff2+3
  6389  042C  0022               	movlb	2	; select bank2
  6390  042D  0849               	movf	(efgtoa@l+2)^(0+256),w
  6391  042E  0020               	movlb	0	; select bank0
  6392  042F  00C0               	movwf	___flge@ff2+2
  6393  0430  0022               	movlb	2	; select bank2
  6394  0431  0848               	movf	(efgtoa@l+1)^(0+256),w
  6395  0432  0020               	movlb	0	; select bank0
  6396  0433  00BF               	movwf	___flge@ff2+1
  6397  0434  0022               	movlb	2	; select bank2
  6398  0435  0847               	movf	efgtoa@l^(0+256),w
  6399  0436  0020               	movlb	0	; select bank0
  6400  0437  00BE               	movwf	___flge@ff2
  6401  0438  3187  2778  3180   	fcall	___flge
  6402  043B  1803               	btfsc	3,0
  6403  043C  2C40               	goto	l4791
  6404                           
  6405                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 442:         l = 0.0;
  6406  043D  3000               	movlw	0
  6407  043E  0022               	movlb	2	; select bank2
  6408  043F  2C58               	goto	L6
  6409  0440                     l4791:	
  6410                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 443:     } else {
  6411                           
  6412                           
  6413                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 445:         if ((h == l) && 
      +                          !(d % 2)) {
  6414  0440  0022               	movlb	2	; select bank2
  6415  0441  0846               	movf	(efgtoa@h+3)^(0+256),w
  6416  0442  00F3               	movwf	___fleq@ff1+3
  6417  0443  0845               	movf	(efgtoa@h+2)^(0+256),w
  6418  0444  00F2               	movwf	___fleq@ff1+2
  6419  0445  0844               	movf	(efgtoa@h+1)^(0+256),w
  6420  0446  00F1               	movwf	___fleq@ff1+1
  6421  0447  0843               	movf	efgtoa@h^(0+256),w
  6422  0448  00F0               	movwf	___fleq@ff1
  6423  0449  084A               	movf	(efgtoa@l+3)^(0+256),w
  6424  044A  00F7               	movwf	___fleq@ff2+3
  6425  044B  0849               	movf	(efgtoa@l+2)^(0+256),w
  6426  044C  00F6               	movwf	___fleq@ff2+2
  6427  044D  0848               	movf	(efgtoa@l+1)^(0+256),w
  6428  044E  00F5               	movwf	___fleq@ff2+1
  6429  044F  0847               	movf	efgtoa@l^(0+256),w
  6430  0450  00F4               	movwf	___fleq@ff2
  6431  0451  319E  267A  3180   	fcall	___fleq
  6432  0454  1803               	btfsc	3,0
  6433  0455  1838               	btfsc	efgtoa@d^(0+256),0
  6434  0456  2C5F               	goto	l4797
  6435                           
  6436                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 446:             l = 0.0;
  6437  0457  3000               	movlw	0
  6438  0458                     L6:
  6439  0458  00CA               	movwf	(efgtoa@l+3)^(0+256)
  6440  0459  3000               	movlw	0
  6441  045A  00C9               	movwf	(efgtoa@l+2)^(0+256)
  6442  045B  3000               	movlw	0
  6443  045C  00C8               	movwf	(efgtoa@l+1)^(0+256)
  6444  045D  3000               	movlw	0
  6445  045E  00C7               	movwf	efgtoa@l^(0+256)
  6446  045F                     l4797:
  6447                           
  6448                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 451:     h = g + l;
  6449  045F  084A               	movf	(efgtoa@l+3)^(0+256),w
  6450  0460  0020               	movlb	0	; select bank0
  6451  0461  00BD               	movwf	___fladd@b+3
  6452  0462  0022               	movlb	2	; select bank2
  6453  0463  0849               	movf	(efgtoa@l+2)^(0+256),w
  6454  0464  0020               	movlb	0	; select bank0
  6455  0465  00BC               	movwf	___fladd@b+2
  6456  0466  0022               	movlb	2	; select bank2
  6457  0467  0848               	movf	(efgtoa@l+1)^(0+256),w
  6458  0468  0020               	movlb	0	; select bank0
  6459  0469  00BB               	movwf	___fladd@b+1
  6460  046A  0022               	movlb	2	; select bank2
  6461  046B  0847               	movf	efgtoa@l^(0+256),w
  6462  046C  0020               	movlb	0	; select bank0
  6463  046D  00BA               	movwf	___fladd@b
  6464  046E  0022               	movlb	2	; select bank2
  6465  046F  0850               	movf	(efgtoa@g+3)^(0+256),w
  6466  0470  0020               	movlb	0	; select bank0
  6467  0471  00C1               	movwf	___fladd@a+3
  6468  0472  0022               	movlb	2	; select bank2
  6469  0473  084F               	movf	(efgtoa@g+2)^(0+256),w
  6470  0474  0020               	movlb	0	; select bank0
  6471  0475  00C0               	movwf	___fladd@a+2
  6472  0476  0022               	movlb	2	; select bank2
  6473  0477  084E               	movf	(efgtoa@g+1)^(0+256),w
  6474  0478  0020               	movlb	0	; select bank0
  6475  0479  00BF               	movwf	___fladd@a+1
  6476  047A  0022               	movlb	2	; select bank2
  6477  047B  084D               	movf	efgtoa@g^(0+256),w
  6478  047C  0020               	movlb	0	; select bank0
  6479  047D  00BE               	movwf	___fladd@a
  6480  047E  3189  2113  3180   	fcall	___fladd
  6481  0481  083D               	movf	?___fladd+3,w
  6482  0482  0022               	movlb	2	; select bank2
  6483  0483  00C6               	movwf	(efgtoa@h+3)^(0+256)
  6484  0484  0020               	movlb	0	; select bank0
  6485  0485  083C               	movf	?___fladd+2,w
  6486  0486  0022               	movlb	2	; select bank2
  6487  0487  00C5               	movwf	(efgtoa@h+2)^(0+256)
  6488  0488  0020               	movlb	0	; select bank0
  6489  0489  083B               	movf	?___fladd+1,w
  6490  048A  0022               	movlb	2	; select bank2
  6491  048B  00C4               	movwf	(efgtoa@h+1)^(0+256)
  6492  048C  0020               	movlb	0	; select bank0
  6493  048D  083A               	movf	?___fladd,w
  6494  048E  0022               	movlb	2	; select bank2
  6495  048F  00C3               	movwf	efgtoa@h^(0+256)
  6496                           
  6497                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 453:  if (h >= (ou*10.0)) {
  6498  0490  0846               	movf	(efgtoa@h+3)^(0+256),w
  6499  0491  0020               	movlb	0	; select bank0
  6500  0492  00BD               	movwf	___flge@ff1+3
  6501  0493  0022               	movlb	2	; select bank2
  6502  0494  0845               	movf	(efgtoa@h+2)^(0+256),w
  6503  0495  0020               	movlb	0	; select bank0
  6504  0496  00BC               	movwf	___flge@ff1+2
  6505  0497  0022               	movlb	2	; select bank2
  6506  0498  0844               	movf	(efgtoa@h+1)^(0+256),w
  6507  0499  0020               	movlb	0	; select bank0
  6508  049A  00BB               	movwf	___flge@ff1+1
  6509  049B  0022               	movlb	2	; select bank2
  6510  049C  0843               	movf	efgtoa@h^(0+256),w
  6511  049D  0020               	movlb	0	; select bank0
  6512  049E  00BA               	movwf	___flge@ff1
  6513  049F  3041               	movlw	65
  6514  04A0  00A3               	movwf	___flmul@b+3
  6515  04A1  3020               	movlw	32
  6516  04A2  00A2               	movwf	___flmul@b+2
  6517  04A3  3000               	movlw	0
  6518  04A4  00A1               	movwf	___flmul@b+1
  6519  04A5  3000               	movlw	0
  6520  04A6  00A0               	movwf	___flmul@b
  6521  04A7  0022               	movlb	2	; select bank2
  6522  04A8  0837               	movf	(efgtoa@ou+3)^(0+256),w
  6523  04A9  0020               	movlb	0	; select bank0
  6524  04AA  00A7               	movwf	___flmul@a+3
  6525  04AB  0022               	movlb	2	; select bank2
  6526  04AC  0836               	movf	(efgtoa@ou+2)^(0+256),w
  6527  04AD  0020               	movlb	0	; select bank0
  6528  04AE  00A6               	movwf	___flmul@a+2
  6529  04AF  0022               	movlb	2	; select bank2
  6530  04B0  0835               	movf	(efgtoa@ou+1)^(0+256),w
  6531  04B1  0020               	movlb	0	; select bank0
  6532  04B2  00A5               	movwf	___flmul@a+1
  6533  04B3  0022               	movlb	2	; select bank2
  6534  04B4  0834               	movf	efgtoa@ou^(0+256),w
  6535  04B5  0020               	movlb	0	; select bank0
  6536  04B6  00A4               	movwf	___flmul@a
  6537  04B7  318A  22F4  3180   	fcall	___flmul
  6538  04BA  0823               	movf	?___flmul+3,w
  6539  04BB  00C1               	movwf	___flge@ff2+3
  6540  04BC  0822               	movf	?___flmul+2,w
  6541  04BD  00C0               	movwf	___flge@ff2+2
  6542  04BE  0821               	movf	?___flmul+1,w
  6543  04BF  00BF               	movwf	___flge@ff2+1
  6544  04C0  0820               	movf	?___flmul,w
  6545  04C1  00BE               	movwf	___flge@ff2
  6546  04C2  3187  2778  3180   	fcall	___flge
  6547  04C5  1C03               	btfss	3,0
  6548  04C6  2CFF               	goto	l1762
  6549                           
  6550                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 454:   e++;
  6551  04C7  3001               	movlw	1
  6552  04C8  0022               	movlb	2	; select bank2
  6553  04C9  07D1               	addwf	efgtoa@e^(0+256),f
  6554  04CA  3000               	movlw	0
  6555  04CB  3DD2               	addwfc	(efgtoa@e+1)^(0+256),f
  6556                           
  6557                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 455:   ou *= 10.0;
  6558  04CC  3041               	movlw	65
  6559  04CD  0020               	movlb	0	; select bank0
  6560  04CE  00A3               	movwf	___flmul@b+3
  6561  04CF  3020               	movlw	32
  6562  04D0  00A2               	movwf	___flmul@b+2
  6563  04D1  3000               	movlw	0
  6564  04D2  00A1               	movwf	___flmul@b+1
  6565  04D3  3000               	movlw	0
  6566  04D4  00A0               	movwf	___flmul@b
  6567  04D5  0022               	movlb	2	; select bank2
  6568  04D6  0837               	movf	(efgtoa@ou+3)^(0+256),w
  6569  04D7  0020               	movlb	0	; select bank0
  6570  04D8  00A7               	movwf	___flmul@a+3
  6571  04D9  0022               	movlb	2	; select bank2
  6572  04DA  0836               	movf	(efgtoa@ou+2)^(0+256),w
  6573  04DB  0020               	movlb	0	; select bank0
  6574  04DC  00A6               	movwf	___flmul@a+2
  6575  04DD  0022               	movlb	2	; select bank2
  6576  04DE  0835               	movf	(efgtoa@ou+1)^(0+256),w
  6577  04DF  0020               	movlb	0	; select bank0
  6578  04E0  00A5               	movwf	___flmul@a+1
  6579  04E1  0022               	movlb	2	; select bank2
  6580  04E2  0834               	movf	efgtoa@ou^(0+256),w
  6581  04E3  0020               	movlb	0	; select bank0
  6582  04E4  00A4               	movwf	___flmul@a
  6583  04E5  318A  22F4  3180   	fcall	___flmul
  6584  04E8  0823               	movf	?___flmul+3,w
  6585  04E9  0022               	movlb	2	; select bank2
  6586  04EA  00B7               	movwf	(efgtoa@ou+3)^(0+256)
  6587  04EB  0020               	movlb	0	; select bank0
  6588  04EC  0822               	movf	?___flmul+2,w
  6589  04ED  0022               	movlb	2	; select bank2
  6590  04EE  00B6               	movwf	(efgtoa@ou+2)^(0+256)
  6591  04EF  0020               	movlb	0	; select bank0
  6592  04F0  0821               	movf	?___flmul+1,w
  6593  04F1  0022               	movlb	2	; select bank2
  6594  04F2  00B5               	movwf	(efgtoa@ou+1)^(0+256)
  6595  04F3  0020               	movlb	0	; select bank0
  6596  04F4  0820               	movf	?___flmul,w
  6597  04F5  0022               	movlb	2	; select bank2
  6598  04F6  00B4               	movwf	efgtoa@ou^(0+256)
  6599                           
  6600                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 456:   if (nmode == 'f') {
  6601  04F7  3066               	movlw	102
  6602  04F8  0641               	xorwf	efgtoa@nmode^(0+256),w
  6603  04F9  1D03               	btfss	3,2
  6604  04FA  2CFF               	goto	l1762
  6605                           
  6606                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 458:    m++;
  6607  04FB  3001               	movlw	1
  6608  04FC  07B2               	addwf	efgtoa@m^(0+256),f
  6609  04FD  3000               	movlw	0
  6610  04FE  3DB3               	addwfc	(efgtoa@m+1)^(0+256),f
  6611  04FF                     l1762:	
  6612                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 460:  }
  6613                           
  6614                           
  6615                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 463:     u = ou;
  6616  04FF  0022               	movlb	2	; select bank2
  6617  0500  0837               	movf	(efgtoa@ou+3)^(0+256),w
  6618  0501  00D8               	movwf	(efgtoa@u+3)^(0+256)
  6619  0502  0836               	movf	(efgtoa@ou+2)^(0+256),w
  6620  0503  00D7               	movwf	(efgtoa@u+2)^(0+256)
  6621  0504  0835               	movf	(efgtoa@ou+1)^(0+256),w
  6622  0505  00D6               	movwf	(efgtoa@u+1)^(0+256)
  6623  0506  0834               	movf	efgtoa@ou^(0+256),w
  6624  0507  00D5               	movwf	efgtoa@u^(0+256)
  6625                           
  6626                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 464:     ne = (nmode == 'e') 
      +                          ? 0 : e;
  6627  0508  3065               	movlw	101
  6628  0509  0641               	xorwf	efgtoa@nmode^(0+256),w
  6629  050A  1903               	btfsc	3,2
  6630  050B  2D11               	goto	l4813
  6631  050C  0852               	movf	(efgtoa@e+1)^(0+256),w
  6632  050D  00B1               	movwf	(efgtoa@ne+1)^(0+256)
  6633  050E  0851               	movf	efgtoa@e^(0+256),w
  6634  050F  00B0               	movwf	efgtoa@ne^(0+256)
  6635  0510  2D13               	goto	l1767
  6636  0511                     l4813:
  6637  0511  01B0               	clrf	efgtoa@ne^(0+256)
  6638  0512  01B1               	clrf	(efgtoa@ne+1)^(0+256)
  6639  0513                     l1767:
  6640                           
  6641                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 465:     pp = 0;
  6642  0513  01AE               	clrf	efgtoa@pp^(0+256)
  6643  0514  01AF               	clrf	(efgtoa@pp+1)^(0+256)
  6644                           
  6645                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 466:     t = 0;
  6646  0515  01AC               	clrf	efgtoa@t^(0+256)
  6647  0516  01AD               	clrf	(efgtoa@t+1)^(0+256)
  6648                           
  6649                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 467:     i = 0;
  6650  0517  01CB               	clrf	efgtoa@i^(0+256)
  6651  0518  01CC               	clrf	(efgtoa@i+1)^(0+256)
  6652                           
  6653                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 468:     while ((i < m) && (n
      +                           < (80 - 5))) {
  6654  0519  2E56               	goto	l4863
  6655  051A                     l4815:
  6656                           
  6657                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 469:         l = floorf(h/u);
  6658  051A  0022               	movlb	2	; select bank2
  6659  051B  0858               	movf	(efgtoa@u+3)^(0+256),w
  6660  051C  0021               	movlb	1	; select bank1
  6661  051D  00CB               	movwf	(___fldiv@a+3)^(0+128)
  6662  051E  0022               	movlb	2	; select bank2
  6663  051F  0857               	movf	(efgtoa@u+2)^(0+256),w
  6664  0520  0021               	movlb	1	; select bank1
  6665  0521  00CA               	movwf	(___fldiv@a+2)^(0+128)
  6666  0522  0022               	movlb	2	; select bank2
  6667  0523  0856               	movf	(efgtoa@u+1)^(0+256),w
  6668  0524  0021               	movlb	1	; select bank1
  6669  0525  00C9               	movwf	(___fldiv@a+1)^(0+128)
  6670  0526  0022               	movlb	2	; select bank2
  6671  0527  0855               	movf	efgtoa@u^(0+256),w
  6672  0528  0021               	movlb	1	; select bank1
  6673  0529  00C8               	movwf	___fldiv@a^(0+128)
  6674  052A  0022               	movlb	2	; select bank2
  6675  052B  0846               	movf	(efgtoa@h+3)^(0+256),w
  6676  052C  0021               	movlb	1	; select bank1
  6677  052D  00CF               	movwf	(___fldiv@b+3)^(0+128)
  6678  052E  0022               	movlb	2	; select bank2
  6679  052F  0845               	movf	(efgtoa@h+2)^(0+256),w
  6680  0530  0021               	movlb	1	; select bank1
  6681  0531  00CE               	movwf	(___fldiv@b+2)^(0+128)
  6682  0532  0022               	movlb	2	; select bank2
  6683  0533  0844               	movf	(efgtoa@h+1)^(0+256),w
  6684  0534  0021               	movlb	1	; select bank1
  6685  0535  00CD               	movwf	(___fldiv@b+1)^(0+128)
  6686  0536  0022               	movlb	2	; select bank2
  6687  0537  0843               	movf	efgtoa@h^(0+256),w
  6688  0538  0021               	movlb	1	; select bank1
  6689  0539  00CC               	movwf	___fldiv@b^(0+128)
  6690  053A  3194  244F  3180   	fcall	___fldiv
  6691  053D  084B               	movf	(?___fldiv+3)^(0+128),w
  6692  053E  00D3               	movwf	(floorf@x+3)^(0+128)
  6693  053F  084A               	movf	(?___fldiv+2)^(0+128),w
  6694  0540  00D2               	movwf	(floorf@x+2)^(0+128)
  6695  0541  0849               	movf	(?___fldiv+1)^(0+128),w
  6696  0542  00D1               	movwf	(floorf@x+1)^(0+128)
  6697  0543  0848               	movf	?___fldiv^(0+128),w
  6698  0544  00D0               	movwf	floorf@x^(0+128)
  6699  0545  3188  2041  3180   	fcall	_floorf
  6700  0548  0021               	movlb	1	; select bank1
  6701  0549  0853               	movf	(?_floorf+3)^(0+128),w
  6702  054A  0022               	movlb	2	; select bank2
  6703  054B  00CA               	movwf	(efgtoa@l+3)^(0+256)
  6704  054C  0021               	movlb	1	; select bank1
  6705  054D  0852               	movf	(?_floorf+2)^(0+128),w
  6706  054E  0022               	movlb	2	; select bank2
  6707  054F  00C9               	movwf	(efgtoa@l+2)^(0+256)
  6708  0550  0021               	movlb	1	; select bank1
  6709  0551  0851               	movf	(?_floorf+1)^(0+128),w
  6710  0552  0022               	movlb	2	; select bank2
  6711  0553  00C8               	movwf	(efgtoa@l+1)^(0+256)
  6712  0554  0021               	movlb	1	; select bank1
  6713  0555  0850               	movf	?_floorf^(0+128),w
  6714  0556  0022               	movlb	2	; select bank2
  6715  0557  00C7               	movwf	efgtoa@l^(0+256)
  6716                           
  6717                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 470:         d = (int)l;
  6718  0558  084A               	movf	(efgtoa@l+3)^(0+256),w
  6719  0559  0021               	movlb	1	; select bank1
  6720  055A  00D3               	movwf	(___fltol@f1+3)^(0+128)
  6721  055B  0022               	movlb	2	; select bank2
  6722  055C  0849               	movf	(efgtoa@l+2)^(0+256),w
  6723  055D  0021               	movlb	1	; select bank1
  6724  055E  00D2               	movwf	(___fltol@f1+2)^(0+128)
  6725  055F  0022               	movlb	2	; select bank2
  6726  0560  0848               	movf	(efgtoa@l+1)^(0+256),w
  6727  0561  0021               	movlb	1	; select bank1
  6728  0562  00D1               	movwf	(___fltol@f1+1)^(0+128)
  6729  0563  0022               	movlb	2	; select bank2
  6730  0564  0847               	movf	efgtoa@l^(0+256),w
  6731  0565  0021               	movlb	1	; select bank1
  6732  0566  00D0               	movwf	___fltol@f1^(0+128)
  6733  0567  3190  2071  3180   	fcall	___fltol
  6734  056A  0021               	movlb	1	; select bank1
  6735  056B  0851               	movf	(?___fltol+1)^(0+128),w
  6736  056C  0022               	movlb	2	; select bank2
  6737  056D  00B9               	movwf	(efgtoa@d+1)^(0+256)
  6738  056E  0021               	movlb	1	; select bank1
  6739  056F  0850               	movf	?___fltol^(0+128),w
  6740  0570  0022               	movlb	2	; select bank2
  6741  0571  00B8               	movwf	efgtoa@d^(0+256)
  6742                           
  6743                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 471:         if (!(flags & (1
      +                           << 4)) && !d && (mode == 'g') && (ne < 0)) {
  6744  0572  0023               	movlb	3	; select bank3
  6745  0573  1A30               	btfsc	_flags^(0+384),4
  6746  0574  2D84               	goto	l4827
  6747  0575  0022               	movlb	2	; select bank2
  6748  0576  0838               	movf	efgtoa@d^(0+256),w
  6749  0577  0439               	iorwf	(efgtoa@d+1)^(0+256),w
  6750  0578  1D03               	btfss	3,2
  6751  0579  2D84               	goto	l4827
  6752  057A  3067               	movlw	103
  6753  057B  0642               	xorwf	efgtoa@mode^(0+256),w
  6754  057C  1903               	btfsc	3,2
  6755  057D  1FB1               	btfss	(efgtoa@ne+1)^(0+256),7
  6756  057E  2D84               	goto	l4827
  6757                           
  6758                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 472:             ++t;
  6759  057F  3001               	movlw	1
  6760  0580  07AC               	addwf	efgtoa@t^(0+256),f
  6761  0581  3000               	movlw	0
  6762  0582  3DAD               	addwfc	(efgtoa@t+1)^(0+256),f
  6763                           
  6764                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 473:         } else {
  6765  0583  2DD7               	goto	l4855
  6766  0584                     l4827:
  6767                           
  6768                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 474:             if (!pp && (
      +                          ne < 0)) {
  6769  0584  0022               	movlb	2	; select bank2
  6770  0585  082E               	movf	efgtoa@pp^(0+256),w
  6771  0586  042F               	iorwf	(efgtoa@pp+1)^(0+256),w
  6772  0587  1903               	btfsc	3,2
  6773  0588  1FB1               	btfss	(efgtoa@ne+1)^(0+256),7
  6774  0589  2DA3               	goto	l4847
  6775                           
  6776                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 475:                 dbuf[n++
      +                          ] = '.';
  6777  058A  302E               	movlw	46
  6778  058B  0021               	movlb	1	; select bank1
  6779  058C  00E9               	movwf	??_efgtoa^(0+128)
  6780  058D  0022               	movlb	2	; select bank2
  6781  058E  0853               	movf	efgtoa@n^(0+256),w
  6782  058F  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
  6783  0590  0086               	movwf	6
  6784  0591  3002               	movlw	2	; select bank5/6
  6785  0592  0087               	movwf	7
  6786  0593  0021               	movlb	1	; select bank1
  6787  0594  0869               	movf	??_efgtoa^(0+128),w
  6788  0595  0081               	movwf	1
  6789  0596  3001               	movlw	1
  6790  0597  0022               	movlb	2	; select bank2
  6791  0598  07D3               	addwf	efgtoa@n^(0+256),f
  6792  0599  3000               	movlw	0
  6793  059A  3DD4               	addwfc	(efgtoa@n+1)^(0+256),f
  6794                           
  6795                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 476:                 --w;
  6796  059B  30FF               	movlw	255
  6797  059C  07BF               	addwf	efgtoa@w^(0+256),f
  6798  059D  30FF               	movlw	255
  6799  059E  3DC0               	addwfc	(efgtoa@w+1)^(0+256),f
  6800                           
  6801                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 477:                 pp = 1;
  6802  059F  3001               	movlw	1
  6803  05A0  00AE               	movwf	efgtoa@pp^(0+256)
  6804  05A1  3000               	movlw	0
  6805  05A2  00AF               	movwf	(efgtoa@pp^(0+256)+1)
  6806  05A3                     l4847:
  6807                           
  6808                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 479:             while (t) {
  6809  05A3  082C               	movf	efgtoa@t^(0+256),w
  6810  05A4  042D               	iorwf	(efgtoa@t+1)^(0+256),w
  6811  05A5  1903               	btfsc	3,2
  6812  05A6  2DC1               	goto	l4849
  6813                           
  6814                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 480:                 dbuf[n++
      +                          ] = '0';
  6815  05A7  3030               	movlw	48
  6816  05A8  0021               	movlb	1	; select bank1
  6817  05A9  00E9               	movwf	??_efgtoa^(0+128)
  6818  05AA  0022               	movlb	2	; select bank2
  6819  05AB  0853               	movf	efgtoa@n^(0+256),w
  6820  05AC  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
  6821  05AD  0086               	movwf	6
  6822  05AE  3002               	movlw	2	; select bank5/6
  6823  05AF  0087               	movwf	7
  6824  05B0  0021               	movlb	1	; select bank1
  6825  05B1  0869               	movf	??_efgtoa^(0+128),w
  6826  05B2  0081               	movwf	1
  6827  05B3  3001               	movlw	1
  6828  05B4  0022               	movlb	2	; select bank2
  6829  05B5  07D3               	addwf	efgtoa@n^(0+256),f
  6830  05B6  3000               	movlw	0
  6831  05B7  3DD4               	addwfc	(efgtoa@n+1)^(0+256),f
  6832                           
  6833                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 481:                 --w;
  6834  05B8  30FF               	movlw	255
  6835  05B9  07BF               	addwf	efgtoa@w^(0+256),f
  6836  05BA  30FF               	movlw	255
  6837  05BB  3DC0               	addwfc	(efgtoa@w+1)^(0+256),f
  6838                           
  6839                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 482:                 --t;
  6840  05BC  30FF               	movlw	255
  6841  05BD  07AC               	addwf	efgtoa@t^(0+256),f
  6842  05BE  30FF               	movlw	255
  6843  05BF  3DAD               	addwfc	(efgtoa@t+1)^(0+256),f
  6844  05C0  2DA3               	goto	l4847
  6845  05C1                     l4849:
  6846                           
  6847                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 484:             dbuf[n++] = 
      +                          (char)((int)'0' + d);
  6848  05C1  0838               	movf	efgtoa@d^(0+256),w
  6849  05C2  3E30               	addlw	48
  6850  05C3  0021               	movlb	1	; select bank1
  6851  05C4  00E9               	movwf	??_efgtoa^(0+128)
  6852  05C5  0022               	movlb	2	; select bank2
  6853  05C6  0853               	movf	efgtoa@n^(0+256),w
  6854  05C7  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
  6855  05C8  0086               	movwf	6
  6856  05C9  3002               	movlw	2	; select bank5/6
  6857  05CA  0087               	movwf	7
  6858  05CB  0021               	movlb	1	; select bank1
  6859  05CC  0869               	movf	??_efgtoa^(0+128),w
  6860  05CD  0081               	movwf	1
  6861  05CE  3001               	movlw	1
  6862  05CF  0022               	movlb	2	; select bank2
  6863  05D0  07D3               	addwf	efgtoa@n^(0+256),f
  6864  05D1  3000               	movlw	0
  6865  05D2  3DD4               	addwfc	(efgtoa@n+1)^(0+256),f
  6866                           
  6867                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 485:             --w;
  6868  05D3  30FF               	movlw	255
  6869  05D4  07BF               	addwf	efgtoa@w^(0+256),f
  6870  05D5  30FF               	movlw	255
  6871  05D6  3DC0               	addwfc	(efgtoa@w+1)^(0+256),f
  6872  05D7                     l4855:
  6873                           
  6874                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 487:         h -= l*u;
  6875  05D7  084A               	movf	(efgtoa@l+3)^(0+256),w
  6876  05D8  0020               	movlb	0	; select bank0
  6877  05D9  00A7               	movwf	___flmul@a+3
  6878  05DA  0022               	movlb	2	; select bank2
  6879  05DB  0849               	movf	(efgtoa@l+2)^(0+256),w
  6880  05DC  0020               	movlb	0	; select bank0
  6881  05DD  00A6               	movwf	___flmul@a+2
  6882  05DE  0022               	movlb	2	; select bank2
  6883  05DF  0848               	movf	(efgtoa@l+1)^(0+256),w
  6884  05E0  0020               	movlb	0	; select bank0
  6885  05E1  00A5               	movwf	___flmul@a+1
  6886  05E2  0022               	movlb	2	; select bank2
  6887  05E3  0847               	movf	efgtoa@l^(0+256),w
  6888  05E4  0020               	movlb	0	; select bank0
  6889  05E5  00A4               	movwf	___flmul@a
  6890  05E6  0022               	movlb	2	; select bank2
  6891  05E7  0858               	movf	(efgtoa@u+3)^(0+256),w
  6892  05E8  0020               	movlb	0	; select bank0
  6893  05E9  00A3               	movwf	___flmul@b+3
  6894  05EA  0022               	movlb	2	; select bank2
  6895  05EB  0857               	movf	(efgtoa@u+2)^(0+256),w
  6896  05EC  0020               	movlb	0	; select bank0
  6897  05ED  00A2               	movwf	___flmul@b+2
  6898  05EE  0022               	movlb	2	; select bank2
  6899  05EF  0856               	movf	(efgtoa@u+1)^(0+256),w
  6900  05F0  0020               	movlb	0	; select bank0
  6901  05F1  00A1               	movwf	___flmul@b+1
  6902  05F2  0022               	movlb	2	; select bank2
  6903  05F3  0855               	movf	efgtoa@u^(0+256),w
  6904  05F4  0020               	movlb	0	; select bank0
  6905  05F5  00A0               	movwf	___flmul@b
  6906  05F6  318A  22F4  3180   	fcall	___flmul
  6907  05F9  0823               	movf	?___flmul+3,w
  6908  05FA  00D1               	movwf	___flsub@a+3
  6909  05FB  0822               	movf	?___flmul+2,w
  6910  05FC  00D0               	movwf	___flsub@a+2
  6911  05FD  0821               	movf	?___flmul+1,w
  6912  05FE  00CF               	movwf	___flsub@a+1
  6913  05FF  0820               	movf	?___flmul,w
  6914  0600  00CE               	movwf	___flsub@a
  6915  0601  0022               	movlb	2	; select bank2
  6916  0602  0846               	movf	(efgtoa@h+3)^(0+256),w
  6917  0603  0020               	movlb	0	; select bank0
  6918  0604  00D5               	movwf	___flsub@b+3
  6919  0605  0022               	movlb	2	; select bank2
  6920  0606  0845               	movf	(efgtoa@h+2)^(0+256),w
  6921  0607  0020               	movlb	0	; select bank0
  6922  0608  00D4               	movwf	___flsub@b+2
  6923  0609  0022               	movlb	2	; select bank2
  6924  060A  0844               	movf	(efgtoa@h+1)^(0+256),w
  6925  060B  0020               	movlb	0	; select bank0
  6926  060C  00D3               	movwf	___flsub@b+1
  6927  060D  0022               	movlb	2	; select bank2
  6928  060E  0843               	movf	efgtoa@h^(0+256),w
  6929  060F  0020               	movlb	0	; select bank0
  6930  0610  00D2               	movwf	___flsub@b
  6931  0611  319C  244C  3180   	fcall	___flsub
  6932  0614  0851               	movf	?___flsub+3,w
  6933  0615  0022               	movlb	2	; select bank2
  6934  0616  00C6               	movwf	(efgtoa@h+3)^(0+256)
  6935  0617  0020               	movlb	0	; select bank0
  6936  0618  0850               	movf	?___flsub+2,w
  6937  0619  0022               	movlb	2	; select bank2
  6938  061A  00C5               	movwf	(efgtoa@h+2)^(0+256)
  6939  061B  0020               	movlb	0	; select bank0
  6940  061C  084F               	movf	?___flsub+1,w
  6941  061D  0022               	movlb	2	; select bank2
  6942  061E  00C4               	movwf	(efgtoa@h+1)^(0+256)
  6943  061F  0020               	movlb	0	; select bank0
  6944  0620  084E               	movf	?___flsub,w
  6945  0621  0022               	movlb	2	; select bank2
  6946  0622  00C3               	movwf	efgtoa@h^(0+256)
  6947                           
  6948                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 488:         u = u/10.0;
  6949  0623  3041               	movlw	65
  6950  0624  0021               	movlb	1	; select bank1
  6951  0625  00CB               	movwf	(___fldiv@a+3)^(0+128)
  6952  0626  3020               	movlw	32
  6953  0627  00CA               	movwf	(___fldiv@a+2)^(0+128)
  6954  0628  3000               	movlw	0
  6955  0629  00C9               	movwf	(___fldiv@a+1)^(0+128)
  6956  062A  3000               	movlw	0
  6957  062B  00C8               	movwf	___fldiv@a^(0+128)
  6958  062C  0022               	movlb	2	; select bank2
  6959  062D  0858               	movf	(efgtoa@u+3)^(0+256),w
  6960  062E  0021               	movlb	1	; select bank1
  6961  062F  00CF               	movwf	(___fldiv@b+3)^(0+128)
  6962  0630  0022               	movlb	2	; select bank2
  6963  0631  0857               	movf	(efgtoa@u+2)^(0+256),w
  6964  0632  0021               	movlb	1	; select bank1
  6965  0633  00CE               	movwf	(___fldiv@b+2)^(0+128)
  6966  0634  0022               	movlb	2	; select bank2
  6967  0635  0856               	movf	(efgtoa@u+1)^(0+256),w
  6968  0636  0021               	movlb	1	; select bank1
  6969  0637  00CD               	movwf	(___fldiv@b+1)^(0+128)
  6970  0638  0022               	movlb	2	; select bank2
  6971  0639  0855               	movf	efgtoa@u^(0+256),w
  6972  063A  0021               	movlb	1	; select bank1
  6973  063B  00CC               	movwf	___fldiv@b^(0+128)
  6974  063C  3194  244F  3180   	fcall	___fldiv
  6975  063F  084B               	movf	(?___fldiv+3)^(0+128),w
  6976  0640  0022               	movlb	2	; select bank2
  6977  0641  00D8               	movwf	(efgtoa@u+3)^(0+256)
  6978  0642  0021               	movlb	1	; select bank1
  6979  0643  084A               	movf	(?___fldiv+2)^(0+128),w
  6980  0644  0022               	movlb	2	; select bank2
  6981  0645  00D7               	movwf	(efgtoa@u+2)^(0+256)
  6982  0646  0021               	movlb	1	; select bank1
  6983  0647  0849               	movf	(?___fldiv+1)^(0+128),w
  6984  0648  0022               	movlb	2	; select bank2
  6985  0649  00D6               	movwf	(efgtoa@u+1)^(0+256)
  6986  064A  0021               	movlb	1	; select bank1
  6987  064B  0848               	movf	?___fldiv^(0+128),w
  6988  064C  0022               	movlb	2	; select bank2
  6989  064D  00D5               	movwf	efgtoa@u^(0+256)
  6990                           
  6991                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 489:         --ne;
  6992  064E  30FF               	movlw	255
  6993  064F  07B0               	addwf	efgtoa@ne^(0+256),f
  6994  0650  30FF               	movlw	255
  6995  0651  3DB1               	addwfc	(efgtoa@ne+1)^(0+256),f
  6996                           
  6997                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 490:         ++i;
  6998  0652  3001               	movlw	1
  6999  0653  07CB               	addwf	efgtoa@i^(0+256),f
  7000  0654  3000               	movlw	0
  7001  0655  3DCC               	addwfc	(efgtoa@i+1)^(0+256),f
  7002  0656                     l4863:
  7003                           
  7004                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 468:     while ((i < m) && (n
      +                           < (80 - 5))) {
  7005  0656  084C               	movf	(efgtoa@i+1)^(0+256),w
  7006  0657  3A80               	xorlw	128
  7007  0658  0021               	movlb	1	; select bank1
  7008  0659  00E9               	movwf	??_efgtoa^(0+128)
  7009  065A  0022               	movlb	2	; select bank2
  7010  065B  0833               	movf	(efgtoa@m+1)^(0+256),w
  7011  065C  3A80               	xorlw	128
  7012  065D  0021               	movlb	1	; select bank1
  7013  065E  0269               	subwf	??_efgtoa^(0+128),w
  7014  065F  1D03               	skipz
  7015  0660  2E64               	goto	u5525
  7016  0661  0022               	movlb	2	; select bank2
  7017  0662  0832               	movf	efgtoa@m^(0+256),w
  7018  0663  024B               	subwf	efgtoa@i^(0+256),w
  7019  0664                     u5525:
  7020  0664  1803               	skipnc
  7021  0665  2E74               	goto	l4867
  7022  0666  0022               	movlb	2	; select bank2
  7023  0667  0854               	movf	(efgtoa@n+1)^(0+256),w
  7024  0668  3A80               	xorlw	128
  7025  0669  0021               	movlb	1	; select bank1
  7026  066A  00E9               	movwf	??_efgtoa^(0+128)
  7027  066B  3080               	movlw	128
  7028  066C  0269               	subwf	??_efgtoa^(0+128),w
  7029  066D  1D03               	skipz
  7030  066E  2E72               	goto	u5535
  7031  066F  304B               	movlw	75
  7032  0670  0022               	movlb	2	; select bank2
  7033  0671  0253               	subwf	efgtoa@n^(0+256),w
  7034  0672                     u5535:
  7035  0672  1C03               	skipc
  7036  0673  2D1A               	goto	l4815
  7037  0674                     l4867:
  7038                           
  7039                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 492:     if (!pp && (flags & 
      +                          (1 << 4))) {
  7040  0674  0022               	movlb	2	; select bank2
  7041  0675  082E               	movf	efgtoa@pp^(0+256),w
  7042  0676  042F               	iorwf	(efgtoa@pp+1)^(0+256),w
  7043  0677  1D03               	btfss	3,2
  7044  0678  2E8D               	goto	l4875
  7045  0679  0023               	movlb	3	; select bank3
  7046  067A  1E30               	btfss	_flags^(0+384),4
  7047  067B  2E8D               	goto	l4875
  7048                           
  7049                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 493:         dbuf[n++] = '.';
  7050  067C  302E               	movlw	46
  7051  067D  0021               	movlb	1	; select bank1
  7052  067E  00E9               	movwf	??_efgtoa^(0+128)
  7053  067F  0022               	movlb	2	; select bank2
  7054  0680  0853               	movf	efgtoa@n^(0+256),w
  7055  0681  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
  7056  0682  0086               	movwf	6
  7057  0683  3002               	movlw	2	; select bank5/6
  7058  0684  0087               	movwf	7
  7059  0685  0021               	movlb	1	; select bank1
  7060  0686  0869               	movf	??_efgtoa^(0+128),w
  7061  0687  0081               	movwf	1
  7062  0688  3001               	movlw	1
  7063  0689  0022               	movlb	2	; select bank2
  7064  068A  07D3               	addwf	efgtoa@n^(0+256),f
  7065  068B  3000               	movlw	0
  7066  068C  3DD4               	addwfc	(efgtoa@n+1)^(0+256),f
  7067  068D                     l4875:
  7068                           
  7069                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 495:     dbuf[n] = '\0';
  7070  068D  0022               	movlb	2	; select bank2
  7071  068E  0853               	movf	efgtoa@n^(0+256),w
  7072  068F  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
  7073  0690  0086               	movwf	6
  7074  0691  3002               	movlw	2	; select bank5/6
  7075  0692  0087               	movwf	7
  7076  0693  0181               	clrf	1
  7077                           
  7078                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 498:     if (nmode == 'e') {
  7079  0694  3065               	movlw	101
  7080  0695  0641               	xorwf	efgtoa@nmode^(0+256),w
  7081  0696  1D03               	btfss	3,2
  7082  0697  2F5E               	goto	l4937
  7083                           
  7084                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 499:         i = sizeof(dbuf)
      +                           - 1;
  7085  0698  304F               	movlw	79
  7086  0699  00CB               	movwf	efgtoa@i^(0+256)
  7087  069A  3000               	movlw	0
  7088  069B  00CC               	movwf	(efgtoa@i^(0+256)+1)
  7089                           
  7090                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 500:         dbuf[i] = '\0';
  7091  069C  084B               	movf	efgtoa@i^(0+256),w
  7092  069D  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
  7093  069E  0086               	movwf	6
  7094  069F  3002               	movlw	2	; select bank5/6
  7095  06A0  0087               	movwf	7
  7096  06A1  0181               	clrf	1
  7097                           
  7098                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 501:         sign = 0;
  7099  06A2  01BA               	clrf	efgtoa@sign^(0+256)
  7100  06A3  01BB               	clrf	(efgtoa@sign+1)^(0+256)
  7101                           
  7102                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 502:         if (e < 0) {
  7103  06A4  1FD2               	btfss	(efgtoa@e+1)^(0+256),7
  7104  06A5  2EAF               	goto	l4891
  7105                           
  7106                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 503:             sign = 1;
  7107  06A6  3001               	movlw	1
  7108  06A7  00BA               	movwf	efgtoa@sign^(0+256)
  7109  06A8  3000               	movlw	0
  7110  06A9  00BB               	movwf	(efgtoa@sign^(0+256)+1)
  7111                           
  7112                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 504:             e = -e;
  7113  06AA  09D1               	comf	efgtoa@e^(0+256),f
  7114  06AB  09D2               	comf	(efgtoa@e+1)^(0+256),f
  7115  06AC  0AD1               	incf	efgtoa@e^(0+256),f
  7116  06AD  1903               	skipnz
  7117  06AE  0AD2               	incf	(efgtoa@e+1)^(0+256),f
  7118  06AF                     l4891:
  7119                           
  7120                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 506:         p = 2;
  7121  06AF  3002               	movlw	2
  7122  06B0  00BD               	movwf	efgtoa@p^(0+256)
  7123  06B1  3000               	movlw	0
  7124  06B2  00BE               	movwf	(efgtoa@p^(0+256)+1)
  7125  06B3                     l4903:	
  7126                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 507:         while (e || (0 <
      +                           p)) {
  7127                           
  7128                           
  7129                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 507:         while (e || (0 <
      +                           p)) {
  7130  06B3  0851               	movf	efgtoa@e^(0+256),w
  7131  06B4  0452               	iorwf	(efgtoa@e+1)^(0+256),w
  7132  06B5  1903               	btfsc	3,2
  7133  06B6  2EED               	goto	l4905
  7134  06B7                     l4893:
  7135                           
  7136                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 508:             --i;
  7137  06B7  30FF               	movlw	255
  7138  06B8  0022               	movlb	2	; select bank2
  7139  06B9  07CB               	addwf	efgtoa@i^(0+256),f
  7140  06BA  30FF               	movlw	255
  7141  06BB  3DCC               	addwfc	(efgtoa@i+1)^(0+256),f
  7142                           
  7143                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 509:             dbuf[i] = '0
      +                          ' + (e % 10);
  7144  06BC  300A               	movlw	10
  7145  06BD  00F0               	movwf	___awmod@divisor
  7146  06BE  3000               	movlw	0
  7147  06BF  00F1               	movwf	___awmod@divisor+1
  7148  06C0  0852               	movf	(efgtoa@e+1)^(0+256),w
  7149  06C1  00F3               	movwf	___awmod@dividend+1
  7150  06C2  0851               	movf	efgtoa@e^(0+256),w
  7151  06C3  00F2               	movwf	___awmod@dividend
  7152  06C4  319E  2635  3180   	fcall	___awmod
  7153  06C7  0870               	movf	?___awmod,w
  7154  06C8  3E30               	addlw	48
  7155  06C9  0021               	movlb	1	; select bank1
  7156  06CA  00E9               	movwf	??_efgtoa^(0+128)
  7157  06CB  0022               	movlb	2	; select bank2
  7158  06CC  084B               	movf	efgtoa@i^(0+256),w
  7159  06CD  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
  7160  06CE  0086               	movwf	6
  7161  06CF  3002               	movlw	2	; select bank5/6
  7162  06D0  0087               	movwf	7
  7163  06D1  0021               	movlb	1	; select bank1
  7164  06D2  0869               	movf	??_efgtoa^(0+128),w
  7165  06D3  0081               	movwf	1
  7166                           
  7167                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 510:             e = e / 10;
  7168  06D4  300A               	movlw	10
  7169  06D5  00F0               	movwf	___awdiv@divisor
  7170  06D6  3000               	movlw	0
  7171  06D7  00F1               	movwf	___awdiv@divisor+1
  7172  06D8  0022               	movlb	2	; select bank2
  7173  06D9  0852               	movf	(efgtoa@e+1)^(0+256),w
  7174  06DA  00F3               	movwf	___awdiv@dividend+1
  7175  06DB  0851               	movf	efgtoa@e^(0+256),w
  7176  06DC  00F2               	movwf	___awdiv@dividend
  7177  06DD  319F  275E  3180   	fcall	___awdiv
  7178  06E0  0871               	movf	?___awdiv+1,w
  7179  06E1  00D2               	movwf	(efgtoa@e+1)^(0+256)
  7180  06E2  0870               	movf	?___awdiv,w
  7181  06E3  00D1               	movwf	efgtoa@e^(0+256)
  7182                           
  7183                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 511:             --p;
  7184  06E4  30FF               	movlw	255
  7185  06E5  07BD               	addwf	efgtoa@p^(0+256),f
  7186  06E6  30FF               	movlw	255
  7187  06E7  3DBE               	addwfc	(efgtoa@p+1)^(0+256),f
  7188                           
  7189                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 512:             --w;
  7190  06E8  30FF               	movlw	255
  7191  06E9  07BF               	addwf	efgtoa@w^(0+256),f
  7192  06EA  30FF               	movlw	255
  7193  06EB  3DC0               	addwfc	(efgtoa@w+1)^(0+256),f
  7194  06EC  2EB3               	goto	l4903
  7195  06ED                     l4905:
  7196  06ED  083E               	movf	(efgtoa@p+1)^(0+256),w
  7197  06EE  3A80               	xorlw	128
  7198  06EF  0021               	movlb	1	; select bank1
  7199  06F0  00E9               	movwf	??_efgtoa^(0+128)
  7200  06F1  3080               	movlw	128
  7201  06F2  0269               	subwf	??_efgtoa^(0+128),w
  7202  06F3  1D03               	skipz
  7203  06F4  2EF8               	goto	u5595
  7204  06F5  3001               	movlw	1
  7205  06F6  0022               	movlb	2	; select bank2
  7206  06F7  023D               	subwf	efgtoa@p^(0+256),w
  7207  06F8                     u5595:
  7208  06F8  1803               	skipnc
  7209  06F9  2EB7               	goto	l4893
  7210                           
  7211                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 514:         --i;
  7212  06FA  30FF               	movlw	255
  7213  06FB  0022               	movlb	2	; select bank2
  7214  06FC  07CB               	addwf	efgtoa@i^(0+256),f
  7215  06FD  30FF               	movlw	255
  7216  06FE  3DCC               	addwfc	(efgtoa@i+1)^(0+256),f
  7217                           
  7218                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 515:         dbuf[i] = sign ?
      +                           '-' : '+';
  7219  06FF  083A               	movf	efgtoa@sign^(0+256),w
  7220  0700  043B               	iorwf	(efgtoa@sign+1)^(0+256),w
  7221  0701  1D03               	btfss	3,2
  7222  0702  2F05               	goto	l4913
  7223  0703  302B               	movlw	43
  7224  0704  2F06               	goto	L7
  7225  0705                     l4913:
  7226  0705  302D               	movlw	45
  7227  0706                     L7:
  7228  0706  00A6               	movwf	_efgtoa$2367^(0+256)
  7229  0707  3000               	movlw	0
  7230  0708  00A7               	movwf	(_efgtoa$2367^(0+256)+1)
  7231  0709  0826               	movf	_efgtoa$2367^(0+256),w
  7232  070A  0021               	movlb	1	; select bank1
  7233  070B  00E9               	movwf	??_efgtoa^(0+128)
  7234  070C  0022               	movlb	2	; select bank2
  7235  070D  084B               	movf	efgtoa@i^(0+256),w
  7236  070E  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
  7237  070F  0086               	movwf	6
  7238  0710  3002               	movlw	2	; select bank5/6
  7239  0711  0087               	movwf	7
  7240  0712  0021               	movlb	1	; select bank1
  7241  0713  0869               	movf	??_efgtoa^(0+128),w
  7242  0714  0081               	movwf	1
  7243                           
  7244                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 516:         --w;
  7245  0715  30FF               	movlw	255
  7246  0716  0022               	movlb	2	; select bank2
  7247  0717  07BF               	addwf	efgtoa@w^(0+256),f
  7248  0718  30FF               	movlw	255
  7249  0719  3DC0               	addwfc	(efgtoa@w+1)^(0+256),f
  7250                           
  7251                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 518:         dbuf[i] = (0 ? i
      +                          supper((int)c) : ((unsigned)((int)c)-'A') < 26) ? 'E' : 'e';
  7252  071A  30FF               	movlw	255
  7253  071B  07CB               	addwf	efgtoa@i^(0+256),f
  7254  071C  30FF               	movlw	255
  7255  071D  3DCC               	addwfc	(efgtoa@i+1)^(0+256),f
  7256  071E  0021               	movlb	1	; select bank1
  7257  071F  0868               	movf	efgtoa@c^(0+128),w
  7258  0720  3EBF               	addlw	191
  7259  0721  00E9               	movwf	??_efgtoa^(0+128)
  7260  0722  30FF               	movlw	255
  7261  0723  1803               	skipnc
  7262  0724  3000               	movlw	0
  7263  0725  00EA               	movwf	(??_efgtoa^(0+128)+1)
  7264  0726  3000               	movlw	0
  7265  0727  026A               	subwf	(??_efgtoa+1)^(0+128),w
  7266  0728  301A               	movlw	26
  7267  0729  1903               	skipnz
  7268  072A  0269               	subwf	??_efgtoa^(0+128),w
  7269  072B  1803               	btfsc	3,0
  7270  072C  2F2F               	goto	u5610
  7271  072D  3001               	movlw	1
  7272  072E  2F30               	goto	u5620
  7273  072F                     u5610:
  7274  072F  3000               	movlw	0
  7275  0730                     u5620:
  7276  0730  00EB               	movwf	(??_efgtoa+2)^(0+128)
  7277  0731  01EC               	clrf	((??_efgtoa+2)^(0+128)+1)
  7278  0732  086B               	movf	(??_efgtoa+2)^(0+128),w
  7279  0733  0022               	movlb	2	; select bank2
  7280  0734  00AA               	movwf	_efgtoa$2369^(0+256)
  7281  0735  0021               	movlb	1	; select bank1
  7282  0736  086C               	movf	(??_efgtoa+3)^(0+128),w
  7283  0737  0022               	movlb	2	; select bank2
  7284  0738  00AB               	movwf	(_efgtoa$2369+1)^(0+256)
  7285  0739  082A               	movf	_efgtoa$2369^(0+256),w
  7286  073A  042B               	iorwf	(_efgtoa$2369+1)^(0+256),w
  7287  073B  1D03               	btfss	3,2
  7288  073C  2F3F               	goto	l4929
  7289  073D  3065               	movlw	101
  7290  073E  2F40               	goto	L8
  7291  073F                     l4929:
  7292  073F  3045               	movlw	69
  7293  0740                     L8:
  7294  0740  00A8               	movwf	_efgtoa$2368^(0+256)
  7295  0741  3000               	movlw	0
  7296  0742  00A9               	movwf	(_efgtoa$2368^(0+256)+1)
  7297  0743  0828               	movf	_efgtoa$2368^(0+256),w
  7298  0744  0021               	movlb	1	; select bank1
  7299  0745  00E9               	movwf	??_efgtoa^(0+128)
  7300  0746  0022               	movlb	2	; select bank2
  7301  0747  084B               	movf	efgtoa@i^(0+256),w
  7302  0748  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
  7303  0749  0086               	movwf	6
  7304  074A  3002               	movlw	2	; select bank5/6
  7305  074B  0087               	movwf	7
  7306  074C  0021               	movlb	1	; select bank1
  7307  074D  0869               	movf	??_efgtoa^(0+128),w
  7308  074E  0081               	movwf	1
  7309                           
  7310                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 519:         --w;
  7311  074F  30FF               	movlw	255
  7312  0750  0022               	movlb	2	; select bank2
  7313  0751  07BF               	addwf	efgtoa@w^(0+256),f
  7314  0752  30FF               	movlw	255
  7315  0753  3DC0               	addwfc	(efgtoa@w+1)^(0+256),f
  7316                           
  7317                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 520:         strcpy(&dbuf[n],
      +                           &dbuf[i]);
  7318  0754  084B               	movf	efgtoa@i^(0+256),w
  7319  0755  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
  7320  0756  00F0               	movwf	strcpy@src
  7321  0757  3002               	movlw	2
  7322  0758  00F1               	movwf	strcpy@src+1
  7323  0759  0853               	movf	efgtoa@n^(0+256),w
  7324  075A  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
  7325  075B  3190  2001  3180   	fcall	_strcpy
  7326  075E                     l4937:
  7327                           
  7328                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 524:     return pad(fp, &dbuf
      +                          [0], w);
  7329  075E  30A0               	movlw	(low (_dbuf| (0+512)))& (0+255)
  7330  075F  0021               	movlb	1	; select bank1
  7331  0760  00E9               	movwf	??_efgtoa^(0+128)
  7332  0761  0869               	movf	??_efgtoa^(0+128),w
  7333  0762  0020               	movlb	0	; select bank0
  7334  0763  00A4               	movwf	pad@buf
  7335  0764  0022               	movlb	2	; select bank2
  7336  0765  0840               	movf	(efgtoa@w+1)^(0+256),w
  7337  0766  0020               	movlb	0	; select bank0
  7338  0767  00A6               	movwf	pad@p+1
  7339  0768  0022               	movlb	2	; select bank2
  7340  0769  083F               	movf	efgtoa@w^(0+256),w
  7341  076A  0020               	movlb	0	; select bank0
  7342  076B  00A5               	movwf	pad@p
  7343  076C  0022               	movlb	2	; select bank2
  7344  076D  083C               	movf	efgtoa@fp^(0+256),w
  7345  076E  319F  270E         	fcall	_pad
  7346  0770  0825               	movf	?_pad+1,w
  7347  0771  0021               	movlb	1	; select bank1
  7348  0772  00E5               	movwf	(?_efgtoa+1)^(0+128)
  7349  0773  0020               	movlb	0	; select bank0
  7350  0774  0824               	movf	?_pad,w
  7351  0775  0021               	movlb	1	; select bank1
  7352  0776  00E4               	movwf	?_efgtoa^(0+128)
  7353  0777  0008               	return
  7354  0778                     __end_of_efgtoa:
  7355                           
  7356                           	psect	text6
  7357  1CA9                     __ptext6:	
  7358 ;; *************** function _tolower *****************
  7359 ;; Defined at:
  7360 ;;		line 4 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/tolower.c"
  7361 ;; Parameters:    Size  Location     Type
  7362 ;;  c               2    6[COMMON] int 
  7363 ;; Auto vars:     Size  Location     Type
  7364 ;;		None
  7365 ;; Return value:  Size  Location     Type
  7366 ;;                  2    6[COMMON] int 
  7367 ;; Registers used:
  7368 ;;		wreg, status,2, status,0
  7369 ;; Tracked objects:
  7370 ;;		On entry : 1C/2
  7371 ;;		On exit  : 1C/0
  7372 ;;		Unchanged: 1C/0
  7373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7374 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7375 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7376 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7377 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7378 ;;Total ram usage:        8 bytes
  7379 ;; Hardware stack levels used:    1
  7380 ;; Hardware stack levels required when called:    6
  7381 ;; This function calls:
  7382 ;;		_isupper
  7383 ;; This function is called by:
  7384 ;;		_efgtoa
  7385 ;;		_vfpfcnvrt
  7386 ;; This function uses a non-reentrant model
  7387 ;;
  7388                           
  7389                           
  7390                           ;psect for function _tolower
  7391  1CA9                     _tolower:
  7392                           
  7393                           ;incstack = 0
  7394                           ; Regs used in _tolower: [wreg+status,2+status,0]
  7395  1CA9  0876               	movf	tolower@c,w
  7396  1CAA  3EBF               	addlw	191
  7397  1CAB  00F8               	movwf	??_tolower
  7398  1CAC  30FF               	movlw	255
  7399  1CAD  3D77               	addwfc	tolower@c+1,w
  7400  1CAE  00F9               	movwf	??_tolower+1
  7401  1CAF  3000               	movlw	0
  7402  1CB0  0279               	subwf	??_tolower+1,w
  7403  1CB1  301A               	movlw	26
  7404  1CB2  1903               	skipnz
  7405  1CB3  0278               	subwf	??_tolower,w
  7406  1CB4  1803               	btfsc	3,0
  7407  1CB5  2CB8               	goto	u4850
  7408  1CB6  3001               	movlw	1
  7409  1CB7  2CB9               	goto	u4860
  7410  1CB8                     u4850:
  7411  1CB8  3000               	movlw	0
  7412  1CB9                     u4860:
  7413  1CB9  00FA               	movwf	??_tolower+2
  7414  1CBA  01FB               	clrf	??_tolower+3
  7415  1CBB  087A               	movf	??_tolower+2,w
  7416  1CBC  00FC               	movwf	_tolower$2518
  7417  1CBD  087B               	movf	??_tolower+3,w
  7418  1CBE  00FD               	movwf	_tolower$2518+1
  7419  1CBF  087C               	movf	_tolower$2518,w
  7420  1CC0  047D               	iorwf	_tolower$2518+1,w
  7421  1CC1  1903               	btfsc	3,2
  7422  1CC2  0008               	return
  7423  1CC3  3020               	movlw	32
  7424  1CC4  0476               	iorwf	tolower@c,w
  7425  1CC5  00F6               	movwf	?_tolower
  7426  1CC6  3000               	movlw	0
  7427  1CC7  0477               	iorwf	tolower@c+1,w
  7428  1CC8  00F7               	movwf	?_tolower+1
  7429  1CC9  0008               	return
  7430  1CCA                     __end_of_tolower:
  7431                           
  7432                           	psect	text7
  7433  1BB6                     __ptext7:	
  7434 ;; *************** function _isupper *****************
  7435 ;; Defined at:
  7436 ;;		line 5 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/isupper.c"
  7437 ;; Parameters:    Size  Location     Type
  7438 ;;  c               2    0[COMMON] int 
  7439 ;; Auto vars:     Size  Location     Type
  7440 ;;		None
  7441 ;; Return value:  Size  Location     Type
  7442 ;;                  2    0[COMMON] int 
  7443 ;; Registers used:
  7444 ;;		wreg, status,2, status,0
  7445 ;; Tracked objects:
  7446 ;;		On entry : 0/0
  7447 ;;		On exit  : 0/0
  7448 ;;		Unchanged: 0/0
  7449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7450 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7452 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7453 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7454 ;;Total ram usage:        6 bytes
  7455 ;; Hardware stack levels used:    1
  7456 ;; Hardware stack levels required when called:    5
  7457 ;; This function calls:
  7458 ;;		Nothing
  7459 ;; This function is called by:
  7460 ;;		_efgtoa
  7461 ;;		_vfpfcnvrt
  7462 ;;		_tolower
  7463 ;; This function uses a non-reentrant model
  7464 ;;
  7465                           
  7466                           
  7467                           ;psect for function _isupper
  7468  1BB6                     _isupper:
  7469                           
  7470                           ;incstack = 0
  7471                           ; Regs used in _isupper: [wreg+status,2+status,0]
  7472  1BB6  0870               	movf	isupper@c,w
  7473  1BB7  3EBF               	addlw	191
  7474  1BB8  00F2               	movwf	??_isupper
  7475  1BB9  30FF               	movlw	255
  7476  1BBA  3D71               	addwfc	isupper@c+1,w
  7477  1BBB  00F3               	movwf	??_isupper+1
  7478  1BBC  3000               	movlw	0
  7479  1BBD  0273               	subwf	??_isupper+1,w
  7480  1BBE  301A               	movlw	26
  7481  1BBF  1903               	skipnz
  7482  1BC0  0272               	subwf	??_isupper,w
  7483  1BC1  1803               	btfsc	3,0
  7484  1BC2  2BC5               	goto	u3730
  7485  1BC3  3001               	movlw	1
  7486  1BC4  2BC6               	goto	u3740
  7487  1BC5                     u3730:
  7488  1BC5  3000               	movlw	0
  7489  1BC6                     u3740:
  7490  1BC6  00F4               	movwf	??_isupper+2
  7491  1BC7  01F5               	clrf	??_isupper+3
  7492  1BC8  0874               	movf	??_isupper+2,w
  7493  1BC9  00F0               	movwf	?_isupper
  7494  1BCA  0875               	movf	??_isupper+3,w
  7495  1BCB  00F1               	movwf	?_isupper+1
  7496  1BCC  0008               	return
  7497  1BCD                     __end_of_isupper:
  7498                           
  7499                           	psect	text8
  7500  1001                     __ptext8:	
  7501 ;; *************** function _strcpy *****************
  7502 ;; Defined at:
  7503 ;;		line 3 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/strcpy.c"
  7504 ;; Parameters:    Size  Location     Type
  7505 ;;  dest            1    wreg     PTR unsigned char 
  7506 ;;		 -> dbuf(80), 
  7507 ;;  src             2    0[COMMON] PTR const unsigned char 
  7508 ;;		 -> STR_7(4), STR_6(4), STR_3(4), STR_2(4), 
  7509 ;;		 -> dbuf(80), 
  7510 ;; Auto vars:     Size  Location     Type
  7511 ;;  dest            1    7[COMMON] PTR unsigned char 
  7512 ;;		 -> dbuf(80), 
  7513 ;;  s               2    4[COMMON] PTR const unsigned char 
  7514 ;;		 -> STR_7(4), STR_6(4), STR_3(4), STR_2(4), 
  7515 ;;		 -> dbuf(80), 
  7516 ;;  d               1    6[COMMON] PTR unsigned char 
  7517 ;;		 -> dbuf(80), 
  7518 ;; Return value:  Size  Location     Type
  7519 ;;                  1    wreg      PTR unsigned char 
  7520 ;; Registers used:
  7521 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  7522 ;; Tracked objects:
  7523 ;;		On entry : 1F/2
  7524 ;;		On exit  : 1F/2
  7525 ;;		Unchanged: 1F/0
  7526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7527 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7528 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7529 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7530 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7531 ;;Total ram usage:        8 bytes
  7532 ;; Hardware stack levels used:    1
  7533 ;; Hardware stack levels required when called:    5
  7534 ;; This function calls:
  7535 ;;		Nothing
  7536 ;; This function is called by:
  7537 ;;		_efgtoa
  7538 ;; This function uses a non-reentrant model
  7539 ;;
  7540                           
  7541                           
  7542                           ;psect for function _strcpy
  7543  1001                     _strcpy:
  7544                           
  7545                           ;incstack = 0
  7546                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  7547                           ;strcpy@dest stored from wreg
  7548  1001  00F7               	movwf	strcpy@dest
  7549  1002  0871               	movf	strcpy@src+1,w
  7550  1003  00F5               	movwf	strcpy@s+1
  7551  1004  0870               	movf	strcpy@src,w
  7552  1005  00F4               	movwf	strcpy@s
  7553  1006  0877               	movf	strcpy@dest,w
  7554  1007  00F2               	movwf	??_strcpy
  7555  1008  0872               	movf	??_strcpy,w
  7556  1009  00F6               	movwf	strcpy@d
  7557  100A                     l4527:
  7558  100A  0876               	movf	strcpy@d,w
  7559  100B  0086               	movwf	6
  7560  100C  3002               	movlw	2	; select bank4/5
  7561  100D  0087               	movwf	7
  7562  100E  0AF6               	incf	strcpy@d,f
  7563  100F  0875               	movf	strcpy@s+1,w
  7564  1010  00F3               	movwf	??_strcpy+1
  7565  1011  0874               	movf	strcpy@s,w
  7566  1012  00F2               	movwf	??_strcpy
  7567  1013  0AF4               	incf	strcpy@s,f
  7568  1014  1903               	skipnz
  7569  1015  0AF5               	incf	strcpy@s+1,f
  7570  1016  0872               	movf	??_strcpy,w
  7571  1017  0084               	movwf	4
  7572  1018  0873               	movf	??_strcpy+1,w
  7573  1019  0085               	movwf	5
  7574  101A  0800               	movf	0,w	;code access
  7575  101B  3FC0               	movwi [0]fsr1
  7576  101C  0889               	movf	9,f
  7577  101D  1903               	btfsc	3,2
  7578  101E  0008               	return
  7579  101F  280A               	goto	l4527
  7580  1020                     __end_of_strcpy:
  7581                           
  7582                           	psect	text9
  7583  1F0E                     __ptext9:	
  7584 ;; *************** function _pad *****************
  7585 ;; Defined at:
  7586 ;;		line 72 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c"
  7587 ;; Parameters:    Size  Location     Type
  7588 ;;  fp              1    wreg     PTR struct _IO_FILE
  7589 ;;		 -> sprintf@f(5), 
  7590 ;;  buf             1    4[BANK0 ] PTR unsigned char 
  7591 ;;		 -> dbuf(80), 
  7592 ;;  p               2    5[BANK0 ] int 
  7593 ;; Auto vars:     Size  Location     Type
  7594 ;;  fp              1   11[BANK0 ] PTR struct _IO_FILE
  7595 ;;		 -> sprintf@f(5), 
  7596 ;;  w               2    9[BANK0 ] int 
  7597 ;;  i               2    7[BANK0 ] int 
  7598 ;; Return value:  Size  Location     Type
  7599 ;;                  2    4[BANK0 ] int 
  7600 ;; Registers used:
  7601 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7602 ;; Tracked objects:
  7603 ;;		On entry : 1F/2
  7604 ;;		On exit  : 1F/0
  7605 ;;		Unchanged: 0/0
  7606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7607 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7608 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7609 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7610 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7611 ;;Total ram usage:        9 bytes
  7612 ;; Hardware stack levels used:    1
  7613 ;; Hardware stack levels required when called:    8
  7614 ;; This function calls:
  7615 ;;		_fputc
  7616 ;;		_fputs
  7617 ;;		_strlen
  7618 ;; This function is called by:
  7619 ;;		_efgtoa
  7620 ;; This function uses a non-reentrant model
  7621 ;;
  7622                           
  7623                           
  7624                           ;psect for function _pad
  7625  1F0E                     _pad:
  7626                           
  7627                           ;incstack = 0
  7628                           ; Regs used in _pad: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7629                           ;pad@fp stored from wreg
  7630  1F0E  0020               	movlb	0	; select bank0
  7631  1F0F  00AB               	movwf	pad@fp
  7632                           
  7633                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 72: static int pad(FILE *fp, 
      +                          char *buf, int p);/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 73: {;/opt/m
      +                          icrochip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 74:     int i, w;;/opt/microchip/xc8
      +                          /v2.31/pic/sources/c99/common/doprnt.c: 77:     if (flags & (1 << 0)) {
  7634  1F10  0023               	movlb	3	; select bank3
  7635  1F11  1C30               	btfss	_flags^(0+384),0
  7636  1F12  2F1C               	goto	l4483
  7637                           
  7638                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 78:         fputs((const char
      +                           *)buf, fp);
  7639  1F13  0020               	movlb	0	; select bank0
  7640  1F14  082B               	movf	pad@fp,w
  7641  1F15  00FC               	movwf	??_pad
  7642  1F16  087C               	movf	??_pad,w
  7643  1F17  00F8               	movwf	fputs@fp
  7644  1F18  0824               	movf	pad@buf,w
  7645  1F19  319C  24ED  319F   	fcall	_fputs
  7646  1F1C                     l4483:
  7647                           
  7648                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 82:     w = (p < 0) ? 0 : p;
  7649  1F1C  0020               	movlb	0	; select bank0
  7650  1F1D  1BA6               	btfsc	pad@p+1,7
  7651  1F1E  2F24               	goto	l4487
  7652  1F1F  0826               	movf	pad@p+1,w
  7653  1F20  00AA               	movwf	pad@w+1
  7654  1F21  0825               	movf	pad@p,w
  7655  1F22  00A9               	movwf	pad@w
  7656  1F23  2F26               	goto	l1698
  7657  1F24                     l4487:
  7658  1F24  01A9               	clrf	pad@w
  7659  1F25  01AA               	clrf	pad@w+1
  7660  1F26                     l1698:
  7661                           
  7662                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 83:     i = 0;
  7663  1F26  01A7               	clrf	pad@i
  7664  1F27  01A8               	clrf	pad@i+1
  7665  1F28                     l4493:	
  7666                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 84:     while (i < w) {
  7667                           
  7668                           
  7669                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 84:     while (i < w) {
  7670  1F28  0828               	movf	pad@i+1,w
  7671  1F29  3A80               	xorlw	128
  7672  1F2A  00FC               	movwf	??_pad
  7673  1F2B  082A               	movf	pad@w+1,w
  7674  1F2C  3A80               	xorlw	128
  7675  1F2D  027C               	subwf	??_pad,w
  7676  1F2E  1D03               	skipz
  7677  1F2F  2F32               	goto	u4745
  7678  1F30  0829               	movf	pad@w,w
  7679  1F31  0227               	subwf	pad@i,w
  7680  1F32                     u4745:
  7681  1F32  1803               	btfsc	3,0
  7682  1F33  2F46               	goto	l1701
  7683                           
  7684                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 85:         fputc(' ', fp);
  7685  1F34  3020               	movlw	32
  7686  1F35  00F0               	movwf	fputc@c
  7687  1F36  3000               	movlw	0
  7688  1F37  00F1               	movwf	fputc@c+1
  7689  1F38  0020               	movlb	0	; select bank0
  7690  1F39  082B               	movf	pad@fp,w
  7691  1F3A  00FC               	movwf	??_pad
  7692  1F3B  087C               	movf	??_pad,w
  7693  1F3C  00F2               	movwf	fputc@fp
  7694  1F3D  319E  26C2  319F   	fcall	_fputc
  7695                           
  7696                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 86:         ++i;
  7697  1F40  3001               	movlw	1
  7698  1F41  0020               	movlb	0	; select bank0
  7699  1F42  07A7               	addwf	pad@i,f
  7700  1F43  3000               	movlw	0
  7701  1F44  3DA8               	addwfc	pad@i+1,f
  7702  1F45  2F28               	goto	l4493
  7703  1F46                     l1701:
  7704                           
  7705                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 90:     if (!(flags & (1 << 0
      +                          ))) {
  7706  1F46  0023               	movlb	3	; select bank3
  7707  1F47  1830               	btfsc	_flags^(0+384),0
  7708  1F48  2F52               	goto	l4497
  7709                           
  7710                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 91:         fputs((const char
      +                           *)buf, fp);
  7711  1F49  0020               	movlb	0	; select bank0
  7712  1F4A  082B               	movf	pad@fp,w
  7713  1F4B  00FC               	movwf	??_pad
  7714  1F4C  087C               	movf	??_pad,w
  7715  1F4D  00F8               	movwf	fputs@fp
  7716  1F4E  0824               	movf	pad@buf,w
  7717  1F4F  319C  24ED  319F   	fcall	_fputs
  7718  1F52                     l4497:
  7719                           
  7720                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 94:     return (int)(strlen(b
      +                          uf) + (size_t)w);
  7721  1F52  0020               	movlb	0	; select bank0
  7722  1F53  0824               	movf	pad@buf,w
  7723  1F54  319B  23E5         	fcall	_strlen
  7724  1F56  0020               	movlb	0	; select bank0
  7725  1F57  0829               	movf	pad@w,w
  7726  1F58  0770               	addwf	?_strlen,w
  7727  1F59  00A4               	movwf	?_pad
  7728  1F5A  082A               	movf	pad@w+1,w
  7729  1F5B  3D71               	addwfc	?_strlen+1,w
  7730  1F5C  00A5               	movwf	?_pad+1
  7731  1F5D  0008               	return
  7732  1F5E                     __end_of_pad:
  7733                           
  7734                           	psect	text10
  7735  1CED                     __ptext10:	
  7736 ;; *************** function _fputs *****************
  7737 ;; Defined at:
  7738 ;;		line 8 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/nf_fputs.c"
  7739 ;; Parameters:    Size  Location     Type
  7740 ;;  s               1    wreg     PTR const unsigned char 
  7741 ;;		 -> dbuf(80), 
  7742 ;;  fp              1    8[COMMON] PTR struct _IO_FILE
  7743 ;;		 -> sprintf@f(5), 
  7744 ;; Auto vars:     Size  Location     Type
  7745 ;;  s               1    3[BANK0 ] PTR const unsigned char 
  7746 ;;		 -> dbuf(80), 
  7747 ;;  i               2    1[BANK0 ] int 
  7748 ;;  c               1    0[BANK0 ] unsigned char 
  7749 ;; Return value:  Size  Location     Type
  7750 ;;                  2    8[COMMON] int 
  7751 ;; Registers used:
  7752 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7753 ;; Tracked objects:
  7754 ;;		On entry : 1F/0
  7755 ;;		On exit  : 1F/0
  7756 ;;		Unchanged: 0/0
  7757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7758 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7759 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7760 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7761 ;;      Totals:         4       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7762 ;;Total ram usage:        8 bytes
  7763 ;; Hardware stack levels used:    1
  7764 ;; Hardware stack levels required when called:    7
  7765 ;; This function calls:
  7766 ;;		_fputc
  7767 ;; This function is called by:
  7768 ;;		_pad
  7769 ;; This function uses a non-reentrant model
  7770 ;;
  7771                           
  7772                           
  7773                           ;psect for function _fputs
  7774  1CED                     _fputs:
  7775                           
  7776                           ;incstack = 0
  7777                           ; Regs used in _fputs: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7778                           ;fputs@s stored from wreg
  7779  1CED  00A3               	movwf	fputs@s
  7780  1CEE  01A1               	clrf	fputs@i
  7781  1CEF  01A2               	clrf	fputs@i+1
  7782  1CF0                     l4009:
  7783  1CF0  0821               	movf	fputs@i,w
  7784  1CF1  0723               	addwf	fputs@s,w
  7785  1CF2  00F9               	movwf	??_fputs
  7786  1CF3  0879               	movf	??_fputs,w
  7787  1CF4  0086               	movwf	6
  7788  1CF5  3002               	movlw	2	; select bank4/5
  7789  1CF6  0087               	movwf	7
  7790  1CF7  0801               	movf	1,w
  7791  1CF8  00FA               	movwf	??_fputs+1
  7792  1CF9  087A               	movf	??_fputs+1,w
  7793  1CFA  00A0               	movwf	fputs@c
  7794  1CFB  0820               	movf	fputs@c,w
  7795  1CFC  1903               	btfsc	3,2
  7796  1CFD  0008               	return
  7797  1CFE  0820               	movf	fputs@c,w
  7798  1CFF  00F9               	movwf	??_fputs
  7799  1D00  01FA               	clrf	??_fputs+1
  7800  1D01  0879               	movf	??_fputs,w
  7801  1D02  00F0               	movwf	fputc@c
  7802  1D03  087A               	movf	??_fputs+1,w
  7803  1D04  00F1               	movwf	fputc@c+1
  7804  1D05  0878               	movf	fputs@fp,w
  7805  1D06  00FB               	movwf	??_fputs+2
  7806  1D07  087B               	movf	??_fputs+2,w
  7807  1D08  00F2               	movwf	fputc@fp
  7808  1D09  319E  26C2  319C   	fcall	_fputc
  7809  1D0C  3001               	movlw	1
  7810  1D0D  0020               	movlb	0	; select bank0
  7811  1D0E  07A1               	addwf	fputs@i,f
  7812  1D0F  3000               	movlw	0
  7813  1D10  3DA2               	addwfc	fputs@i+1,f
  7814  1D11  2CF0               	goto	l4009
  7815  1D12                     __end_of_fputs:
  7816                           
  7817                           	psect	text11
  7818  1EC2                     __ptext11:	
  7819 ;; *************** function _fputc *****************
  7820 ;; Defined at:
  7821 ;;		line 8 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/nf_fputc.c"
  7822 ;; Parameters:    Size  Location     Type
  7823 ;;  c               2    0[COMMON] int 
  7824 ;;  fp              1    2[COMMON] PTR struct _IO_FILE
  7825 ;;		 -> sprintf@f(5), 
  7826 ;; Auto vars:     Size  Location     Type
  7827 ;;		None
  7828 ;; Return value:  Size  Location     Type
  7829 ;;                  2    0[COMMON] int 
  7830 ;; Registers used:
  7831 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7832 ;; Tracked objects:
  7833 ;;		On entry : 1D/2
  7834 ;;		On exit  : 0/0
  7835 ;;		Unchanged: 0/0
  7836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7837 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7839 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7840 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7841 ;;Total ram usage:        8 bytes
  7842 ;; Hardware stack levels used:    1
  7843 ;; Hardware stack levels required when called:    6
  7844 ;; This function calls:
  7845 ;;		_putch
  7846 ;; This function is called by:
  7847 ;;		_pad
  7848 ;;		_vfpfcnvrt
  7849 ;;		_fputs
  7850 ;; This function uses a non-reentrant model
  7851 ;;
  7852                           
  7853                           
  7854                           ;psect for function _fputc
  7855  1EC2                     _fputc:
  7856                           
  7857                           ;incstack = 0
  7858                           ; Regs used in _fputc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7859  1EC2  0872               	movf	fputc@fp,w
  7860  1EC3  1D03               	btfss	3,2
  7861  1EC4  0872               	movf	fputc@fp,w
  7862  1EC5  1D03               	btfss	3,2
  7863  1EC6  2ECB               	goto	l3737
  7864  1EC7  0870               	movf	fputc@c,w
  7865  1EC8  3180  2003         	fcall	_putch
  7866  1ECA  0008               	return
  7867  1ECB                     l3737:
  7868  1ECB  0872               	movf	fputc@fp,w
  7869  1ECC  3E03               	addlw	3
  7870  1ECD  0086               	movwf	6
  7871  1ECE  3001               	movlw	1	; select bank2/3
  7872  1ECF  0087               	movwf	7
  7873  1ED0  0016               	moviw fsr1++
  7874  1ED1  0401               	iorwf	1,w
  7875  1ED2  1903               	btfsc	3,2
  7876  1ED3  2EF1               	goto	l3741
  7877  1ED4  0872               	movf	fputc@fp,w
  7878  1ED5  3E03               	addlw	3
  7879  1ED6  0086               	movwf	6
  7880  1ED7  3001               	movlw	1	; select bank2/3
  7881  1ED8  0087               	movwf	7
  7882  1ED9  3F40               	moviw [0]fsr1
  7883  1EDA  00F3               	movwf	??_fputc
  7884  1EDB  3F41               	moviw [1]fsr1
  7885  1EDC  00F4               	movwf	??_fputc+1
  7886  1EDD  0A72               	incf	fputc@fp,w
  7887  1EDE  0086               	movwf	6
  7888  1EDF  3001               	movlw	1	; select bank2/3
  7889  1EE0  0087               	movwf	7
  7890  1EE1  3F40               	moviw [0]fsr1
  7891  1EE2  00F5               	movwf	??_fputc+2
  7892  1EE3  3F41               	moviw [1]fsr1
  7893  1EE4  00F6               	movwf	??_fputc+3
  7894  1EE5  0876               	movf	??_fputc+3,w
  7895  1EE6  3A80               	xorlw	128
  7896  1EE7  00F7               	movwf	??_fputc+4
  7897  1EE8  0874               	movf	??_fputc+1,w
  7898  1EE9  3A80               	xorlw	128
  7899  1EEA  0277               	subwf	??_fputc+4,w
  7900  1EEB  1D03               	skipz
  7901  1EEC  2EEF               	goto	u3215
  7902  1EED  0873               	movf	??_fputc,w
  7903  1EEE  0275               	subwf	??_fputc+2,w
  7904  1EEF                     u3215:
  7905  1EEF  1803               	skipnc
  7906  1EF0  0008               	return
  7907  1EF1                     l3741:
  7908  1EF1  0870               	movf	fputc@c,w
  7909  1EF2  00F3               	movwf	??_fputc
  7910  1EF3  0872               	movf	fputc@fp,w
  7911  1EF4  0086               	movwf	6
  7912  1EF5  3001               	movlw	1	; select bank2/3
  7913  1EF6  0087               	movwf	7
  7914  1EF7  0A72               	incf	fputc@fp,w
  7915  1EF8  0084               	movwf	4
  7916  1EF9  3001               	movlw	1	; select bank2/3
  7917  1EFA  0085               	movwf	5
  7918  1EFB  0800               	movf	0,w
  7919  1EFC  0701               	addwf	1,w
  7920  1EFD  00F4               	movwf	??_fputc+1
  7921  1EFE  0874               	movf	??_fputc+1,w
  7922  1EFF  0086               	movwf	6
  7923  1F00  3002               	movlw	2	; select bank4/5
  7924  1F01  0087               	movwf	7
  7925  1F02  0873               	movf	??_fputc,w
  7926  1F03  0081               	movwf	1
  7927  1F04  0A72               	incf	fputc@fp,w
  7928  1F05  0086               	movwf	6
  7929  1F06  3001               	movlw	1	; select bank2/3
  7930  1F07  0087               	movwf	7
  7931  1F08  3001               	movlw	1
  7932  1F09  0781               	addwf	1,f
  7933  1F0A  3141               	addfsr 1,1
  7934  1F0B  1803               	skipnc
  7935  1F0C  0A81               	incf	1,f
  7936  1F0D  0008               	return
  7937  1F0E                     __end_of_fputc:
  7938                           
  7939                           	psect	text12
  7940  0003                     __ptext12:	
  7941 ;; *************** function _putch *****************
  7942 ;; Defined at:
  7943 ;;		line 7 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/putch.c"
  7944 ;; Parameters:    Size  Location     Type
  7945 ;;  c               1    wreg     unsigned char 
  7946 ;; Auto vars:     Size  Location     Type
  7947 ;;  c               1    0[COMMON] unsigned char 
  7948 ;; Return value:  Size  Location     Type
  7949 ;;                  1    wreg      void 
  7950 ;; Registers used:
  7951 ;;		wreg
  7952 ;; Tracked objects:
  7953 ;;		On entry : 1D/2
  7954 ;;		On exit  : 1D/0
  7955 ;;		Unchanged: 1D/0
  7956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7960 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7961 ;;Total ram usage:        0 bytes
  7962 ;; Hardware stack levels used:    1
  7963 ;; Hardware stack levels required when called:    5
  7964 ;; This function calls:
  7965 ;;		Nothing
  7966 ;; This function is called by:
  7967 ;;		_fputc
  7968 ;; This function uses a non-reentrant model
  7969 ;;
  7970                           
  7971                           
  7972                           ;psect for function _putch
  7973  0003                     _putch:
  7974                           
  7975                           ;incstack = 0
  7976                           ; Regs used in _putch: [wreg]
  7977  0003  0008               	return
  7978  0004                     __end_of_putch:
  7979                           
  7980                           	psect	text13
  7981  0841                     __ptext13:	
  7982 ;; *************** function _floorf *****************
  7983 ;; Defined at:
  7984 ;;		line 3 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/floorf.c"
  7985 ;; Parameters:    Size  Location     Type
  7986 ;;  x               4   48[BANK1 ] float 
  7987 ;; Auto vars:     Size  Location     Type
  7988 ;;  u               4   64[BANK1 ] struct .
  7989 ;;  m               4   58[BANK1 ] unsigned long 
  7990 ;;  e               2   62[BANK1 ] int 
  7991 ;; Return value:  Size  Location     Type
  7992 ;;                  4   48[BANK1 ] float 
  7993 ;; Registers used:
  7994 ;;		wreg, status,2, status,0
  7995 ;; Tracked objects:
  7996 ;;		On entry : 1F/1
  7997 ;;		On exit  : 0/0
  7998 ;;		Unchanged: 0/0
  7999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8000 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8001 ;;      Locals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0
  8002 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  8003 ;;      Totals:         0       0      20       0       0       0       0       0       0       0       0       0       
      +0       0
  8004 ;;Total ram usage:       20 bytes
  8005 ;; Hardware stack levels used:    1
  8006 ;; Hardware stack levels required when called:    5
  8007 ;; This function calls:
  8008 ;;		Nothing
  8009 ;; This function is called by:
  8010 ;;		_efgtoa
  8011 ;; This function uses a non-reentrant model
  8012 ;;
  8013                           
  8014                           
  8015                           ;psect for function _floorf
  8016  0841                     _floorf:
  8017                           
  8018                           ;incstack = 0
  8019                           ; Regs used in _floorf: [wreg+status,2+status,0]
  8020  0841  0023               	movlb	3	; select bank3
  8021  0842  0823               	movf	(floorf@F527+3)^(0+384),w
  8022  0843  0021               	movlb	1	; select bank1
  8023  0844  00E3               	movwf	(floorf@u+3)^(0+128)
  8024  0845  0023               	movlb	3	; select bank3
  8025  0846  0822               	movf	(floorf@F527+2)^(0+384),w
  8026  0847  0021               	movlb	1	; select bank1
  8027  0848  00E2               	movwf	(floorf@u+2)^(0+128)
  8028  0849  0023               	movlb	3	; select bank3
  8029  084A  0821               	movf	(floorf@F527+1)^(0+384),w
  8030  084B  0021               	movlb	1	; select bank1
  8031  084C  00E1               	movwf	(floorf@u+1)^(0+128)
  8032  084D  0023               	movlb	3	; select bank3
  8033  084E  0820               	movf	floorf@F527^(0+384),w
  8034  084F  0021               	movlb	1	; select bank1
  8035  0850  00E0               	movwf	floorf@u^(0+128)
  8036  0851  0853               	movf	(floorf@x+3)^(0+128),w
  8037  0852  00E3               	movwf	(floorf@u+3)^(0+128)
  8038  0853  0852               	movf	(floorf@x+2)^(0+128),w
  8039  0854  00E2               	movwf	(floorf@u+2)^(0+128)
  8040  0855  0851               	movf	(floorf@x+1)^(0+128),w
  8041  0856  00E1               	movwf	(floorf@u+1)^(0+128)
  8042  0857  0850               	movf	floorf@x^(0+128),w
  8043  0858  00E0               	movwf	floorf@u^(0+128)
  8044  0859  0860               	movf	floorf@u^(0+128),w
  8045  085A  00D4               	movwf	??_floorf^(0+128)
  8046  085B  0861               	movf	(floorf@u+1)^(0+128),w
  8047  085C  00D5               	movwf	(??_floorf^(0+128)+1)
  8048  085D  0862               	movf	(floorf@u+2)^(0+128),w
  8049  085E  00D6               	movwf	(??_floorf^(0+128)+2)
  8050  085F  0863               	movf	(floorf@u+3)^(0+128),w
  8051  0860  00D7               	movwf	(??_floorf^(0+128)+3)
  8052  0861  3017               	movlw	23
  8053  0862                     u4885:
  8054  0862  36D7               	lsrf	(??_floorf^(0+128)+3),f
  8055  0863  0CD6               	rrf	(??_floorf^(0+128)+2),f
  8056  0864  0CD5               	rrf	(??_floorf^(0+128)+1),f
  8057  0865  0CD4               	rrf	??_floorf^(0+128),f
  8058  0866  0B89               	decfsz	9,f
  8059  0867  2862               	goto	u4885
  8060  0868  30FF               	movlw	255
  8061  0869  0554               	andwf	??_floorf^(0+128),w
  8062  086A  00D8               	movwf	(??_floorf+4)^(0+128)
  8063  086B  3000               	movlw	0
  8064  086C  0555               	andwf	(??_floorf+1)^(0+128),w
  8065  086D  00D9               	movwf	(??_floorf+5)^(0+128)
  8066  086E  0858               	movf	(??_floorf+4)^(0+128),w
  8067  086F  3E81               	addlw	129
  8068  0870  00DE               	movwf	floorf@e^(0+128)
  8069  0871  30FF               	movlw	255
  8070  0872  3D59               	addwfc	(??_floorf+5)^(0+128),w
  8071  0873  00DF               	movwf	(floorf@e+1)^(0+128)
  8072  0874  085F               	movf	(floorf@e+1)^(0+128),w
  8073  0875  3A80               	xorlw	128
  8074  0876  00D4               	movwf	??_floorf^(0+128)
  8075  0877  3080               	movlw	128
  8076  0878  0254               	subwf	??_floorf^(0+128),w
  8077  0879  1D03               	skipz
  8078  087A  287D               	goto	u4895
  8079  087B  3017               	movlw	23
  8080  087C  025E               	subwf	floorf@e^(0+128),w
  8081  087D                     u4895:
  8082  087D  1803               	btfsc	3,0
  8083  087E  0008               	return
  8084  087F  0021               	movlb	1	; select bank1
  8085  0880  1BDF               	btfsc	(floorf@e+1)^(0+128),7
  8086  0881  28D7               	goto	l4559
  8087  0882  30FF               	movlw	255
  8088  0883  00D4               	movwf	??_floorf^(0+128)
  8089  0884  30FF               	movlw	255
  8090  0885  00D5               	movwf	(??_floorf^(0+128)+1)
  8091  0886  307F               	movlw	127
  8092  0887  00D6               	movwf	(??_floorf^(0+128)+2)
  8093  0888  3000               	movlw	0
  8094  0889  00D7               	movwf	(??_floorf^(0+128)+3)
  8095  088A  0A5E               	incf	floorf@e^(0+128),w
  8096  088B  2890               	goto	u4910
  8097  088C                     u4915:
  8098  088C  37D7               	asrf	(??_floorf^(0+128)+3),f
  8099  088D  0CD6               	rrf	(??_floorf^(0+128)+2),f
  8100  088E  0CD5               	rrf	(??_floorf^(0+128)+1),f
  8101  088F  0CD4               	rrf	??_floorf^(0+128),f
  8102  0890                     u4910:
  8103  0890  0B89               	decfsz	9,f
  8104  0891  288C               	goto	u4915
  8105  0892  0857               	movf	(??_floorf+3)^(0+128),w
  8106  0893  00DD               	movwf	(floorf@m+3)^(0+128)
  8107  0894  0856               	movf	(??_floorf+2)^(0+128),w
  8108  0895  00DC               	movwf	(floorf@m+2)^(0+128)
  8109  0896  0855               	movf	(??_floorf+1)^(0+128),w
  8110  0897  00DB               	movwf	(floorf@m+1)^(0+128)
  8111  0898  0854               	movf	??_floorf^(0+128),w
  8112  0899  00DA               	movwf	floorf@m^(0+128)
  8113  089A  0860               	movf	floorf@u^(0+128),w
  8114  089B  055A               	andwf	floorf@m^(0+128),w
  8115  089C  00D4               	movwf	??_floorf^(0+128)
  8116  089D  0861               	movf	(floorf@u+1)^(0+128),w
  8117  089E  055B               	andwf	(floorf@m+1)^(0+128),w
  8118  089F  00D5               	movwf	(??_floorf^(0+128)+1)
  8119  08A0  0862               	movf	(floorf@u+2)^(0+128),w
  8120  08A1  055C               	andwf	(floorf@m+2)^(0+128),w
  8121  08A2  00D6               	movwf	(??_floorf^(0+128)+2)
  8122  08A3  0863               	movf	(floorf@u+3)^(0+128),w
  8123  08A4  055D               	andwf	(floorf@m+3)^(0+128),w
  8124  08A5  00D7               	movwf	(??_floorf^(0+128)+3)
  8125  08A6  0857               	movf	(??_floorf+3)^(0+128),w
  8126  08A7  0456               	iorwf	(??_floorf+2)^(0+128),w
  8127  08A8  0455               	iorwf	(??_floorf+1)^(0+128),w
  8128  08A9  0454               	iorwf	??_floorf^(0+128),w
  8129  08AA  1903               	btfsc	3,2
  8130  08AB  0008               	return
  8131  08AC  0860               	movf	floorf@u^(0+128),w
  8132  08AD  00D4               	movwf	??_floorf^(0+128)
  8133  08AE  0861               	movf	(floorf@u+1)^(0+128),w
  8134  08AF  00D5               	movwf	(??_floorf^(0+128)+1)
  8135  08B0  0862               	movf	(floorf@u+2)^(0+128),w
  8136  08B1  00D6               	movwf	(??_floorf^(0+128)+2)
  8137  08B2  0863               	movf	(floorf@u+3)^(0+128),w
  8138  08B3  00D7               	movwf	(??_floorf^(0+128)+3)
  8139  08B4  301F               	movlw	31
  8140  08B5                     u4935:
  8141  08B5  36D7               	lsrf	(??_floorf^(0+128)+3),f
  8142  08B6  0CD6               	rrf	(??_floorf^(0+128)+2),f
  8143  08B7  0CD5               	rrf	(??_floorf^(0+128)+1),f
  8144  08B8  0CD4               	rrf	??_floorf^(0+128),f
  8145  08B9  0B89               	decfsz	9,f
  8146  08BA  28B5               	goto	u4935
  8147  08BB  0854               	movf	??_floorf^(0+128),w
  8148  08BC  1903               	btfsc	3,2
  8149  08BD  28C6               	goto	l4557
  8150  08BE  085A               	movf	floorf@m^(0+128),w
  8151  08BF  07E0               	addwf	floorf@u^(0+128),f
  8152  08C0  085B               	movf	(floorf@m+1)^(0+128),w
  8153  08C1  3DE1               	addwfc	(floorf@u+1)^(0+128),f
  8154  08C2  085C               	movf	(floorf@m+2)^(0+128),w
  8155  08C3  3DE2               	addwfc	(floorf@u+2)^(0+128),f
  8156  08C4  085D               	movf	(floorf@m+3)^(0+128),w
  8157  08C5  3DE3               	addwfc	(floorf@u+3)^(0+128),f
  8158  08C6                     l4557:
  8159  08C6  095A               	comf	floorf@m^(0+128),w
  8160  08C7  00D4               	movwf	??_floorf^(0+128)
  8161  08C8  095B               	comf	(floorf@m+1)^(0+128),w
  8162  08C9  00D5               	movwf	(??_floorf^(0+128)+1)
  8163  08CA  095C               	comf	(floorf@m+2)^(0+128),w
  8164  08CB  00D6               	movwf	(??_floorf^(0+128)+2)
  8165  08CC  095D               	comf	(floorf@m+3)^(0+128),w
  8166  08CD  00D7               	movwf	(??_floorf^(0+128)+3)
  8167  08CE  0854               	movf	??_floorf^(0+128),w
  8168  08CF  05E0               	andwf	floorf@u^(0+128),f
  8169  08D0  0855               	movf	(??_floorf+1)^(0+128),w
  8170  08D1  05E1               	andwf	(floorf@u+1)^(0+128),f
  8171  08D2  0856               	movf	(??_floorf+2)^(0+128),w
  8172  08D3  05E2               	andwf	(floorf@u+2)^(0+128),f
  8173  08D4  0857               	movf	(??_floorf+3)^(0+128),w
  8174  08D5  05E3               	andwf	(floorf@u+3)^(0+128),f
  8175  08D6  290A               	goto	l1838
  8176  08D7                     l4559:
  8177  08D7  0860               	movf	floorf@u^(0+128),w
  8178  08D8  00D4               	movwf	??_floorf^(0+128)
  8179  08D9  0861               	movf	(floorf@u+1)^(0+128),w
  8180  08DA  00D5               	movwf	(??_floorf^(0+128)+1)
  8181  08DB  0862               	movf	(floorf@u+2)^(0+128),w
  8182  08DC  00D6               	movwf	(??_floorf^(0+128)+2)
  8183  08DD  0863               	movf	(floorf@u+3)^(0+128),w
  8184  08DE  00D7               	movwf	(??_floorf^(0+128)+3)
  8185  08DF  301F               	movlw	31
  8186  08E0                     u4955:
  8187  08E0  36D7               	lsrf	(??_floorf^(0+128)+3),f
  8188  08E1  0CD6               	rrf	(??_floorf^(0+128)+2),f
  8189  08E2  0CD5               	rrf	(??_floorf^(0+128)+1),f
  8190  08E3  0CD4               	rrf	??_floorf^(0+128),f
  8191  08E4  0B89               	decfsz	9,f
  8192  08E5  28E0               	goto	u4955
  8193  08E6  0854               	movf	??_floorf^(0+128),w
  8194  08E7  1D03               	btfss	3,2
  8195  08E8  28ED               	goto	l4563
  8196  08E9  3000               	movlw	0
  8197  08EA  00E3               	movwf	(floorf@u+3)^(0+128)
  8198  08EB  3000               	movlw	0
  8199  08EC  2905               	goto	L9
  8200  08ED                     l4563:
  8201  08ED  0860               	movf	floorf@u^(0+128),w
  8202  08EE  00D4               	movwf	??_floorf^(0+128)
  8203  08EF  0861               	movf	(floorf@u+1)^(0+128),w
  8204  08F0  00D5               	movwf	(??_floorf^(0+128)+1)
  8205  08F1  0862               	movf	(floorf@u+2)^(0+128),w
  8206  08F2  00D6               	movwf	(??_floorf^(0+128)+2)
  8207  08F3  0863               	movf	(floorf@u+3)^(0+128),w
  8208  08F4  00D7               	movwf	(??_floorf^(0+128)+3)
  8209  08F5  3001               	movlw	1
  8210  08F6                     u4975:
  8211  08F6  35D4               	lslf	??_floorf^(0+128),f
  8212  08F7  0DD5               	rlf	(??_floorf^(0+128)+1),f
  8213  08F8  0DD6               	rlf	(??_floorf^(0+128)+2),f
  8214  08F9  0DD7               	rlf	(??_floorf^(0+128)+3),f
  8215  08FA  0B89               	decfsz	9,f
  8216  08FB  28F6               	goto	u4975
  8217  08FC  0857               	movf	(??_floorf+3)^(0+128),w
  8218  08FD  0456               	iorwf	(??_floorf+2)^(0+128),w
  8219  08FE  0455               	iorwf	(??_floorf+1)^(0+128),w
  8220  08FF  0454               	iorwf	??_floorf^(0+128),w
  8221  0900  1903               	skipnz
  8222  0901  290A               	goto	l1838
  8223  0902  30BF               	movlw	191
  8224  0903  00E3               	movwf	(floorf@u+3)^(0+128)
  8225  0904  3080               	movlw	128
  8226  0905                     L9:
  8227  0905  00E2               	movwf	(floorf@u+2)^(0+128)
  8228  0906  3000               	movlw	0
  8229  0907  00E1               	movwf	(floorf@u+1)^(0+128)
  8230  0908  3000               	movlw	0
  8231  0909  00E0               	movwf	floorf@u^(0+128)
  8232  090A                     l1838:
  8233  090A  0863               	movf	(floorf@u+3)^(0+128),w
  8234  090B  00D3               	movwf	(?_floorf+3)^(0+128)
  8235  090C  0862               	movf	(floorf@u+2)^(0+128),w
  8236  090D  00D2               	movwf	(?_floorf+2)^(0+128)
  8237  090E  0861               	movf	(floorf@u+1)^(0+128),w
  8238  090F  00D1               	movwf	(?_floorf+1)^(0+128)
  8239  0910  0860               	movf	floorf@u^(0+128),w
  8240  0911  00D0               	movwf	?_floorf^(0+128)
  8241  0912  0008               	return
  8242  0913                     __end_of_floorf:
  8243                           
  8244                           	psect	text14
  8245  11CB                     __ptext14:	
  8246 ;; *************** function ___fpclassifyf *****************
  8247 ;; Defined at:
  8248 ;;		line 4 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/__fpclassifyf.c"
  8249 ;; Parameters:    Size  Location     Type
  8250 ;;  x               4    0[COMMON] float 
  8251 ;; Auto vars:     Size  Location     Type
  8252 ;;  u               4    2[BANK0 ] struct .
  8253 ;;  e               2    0[BANK0 ] int 
  8254 ;; Return value:  Size  Location     Type
  8255 ;;                  2    0[COMMON] int 
  8256 ;; Registers used:
  8257 ;;		wreg, status,2, status,0
  8258 ;; Tracked objects:
  8259 ;;		On entry : 1F/2
  8260 ;;		On exit  : 1F/0
  8261 ;;		Unchanged: 0/0
  8262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8263 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8264 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8265 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8266 ;;      Totals:        10       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8267 ;;Total ram usage:       16 bytes
  8268 ;; Hardware stack levels used:    1
  8269 ;; Hardware stack levels required when called:    5
  8270 ;; This function calls:
  8271 ;;		Nothing
  8272 ;; This function is called by:
  8273 ;;		_efgtoa
  8274 ;; This function uses a non-reentrant model
  8275 ;;
  8276                           
  8277                           
  8278                           ;psect for function ___fpclassifyf
  8279  11CB                     ___fpclassifyf:
  8280                           
  8281                           ;incstack = 0
  8282                           ; Regs used in ___fpclassifyf: [wreg+status,2+status,0]
  8283  11CB  0023               	movlb	3	; select bank3
  8284  11CC  0827               	movf	(___fpclassifyf@F465+3)^(0+384),w
  8285  11CD  0020               	movlb	0	; select bank0
  8286  11CE  00A5               	movwf	___fpclassifyf@u+3
  8287  11CF  0023               	movlb	3	; select bank3
  8288  11D0  0826               	movf	(___fpclassifyf@F465+2)^(0+384),w
  8289  11D1  0020               	movlb	0	; select bank0
  8290  11D2  00A4               	movwf	___fpclassifyf@u+2
  8291  11D3  0023               	movlb	3	; select bank3
  8292  11D4  0825               	movf	(___fpclassifyf@F465+1)^(0+384),w
  8293  11D5  0020               	movlb	0	; select bank0
  8294  11D6  00A3               	movwf	___fpclassifyf@u+1
  8295  11D7  0023               	movlb	3	; select bank3
  8296  11D8  0824               	movf	___fpclassifyf@F465^(0+384),w
  8297  11D9  0020               	movlb	0	; select bank0
  8298  11DA  00A2               	movwf	___fpclassifyf@u
  8299  11DB  0873               	movf	___fpclassifyf@x+3,w
  8300  11DC  00A5               	movwf	___fpclassifyf@u+3
  8301  11DD  0872               	movf	___fpclassifyf@x+2,w
  8302  11DE  00A4               	movwf	___fpclassifyf@u+2
  8303  11DF  0871               	movf	___fpclassifyf@x+1,w
  8304  11E0  00A3               	movwf	___fpclassifyf@u+1
  8305  11E1  0870               	movf	___fpclassifyf@x,w
  8306  11E2  00A2               	movwf	___fpclassifyf@u
  8307  11E3  0822               	movf	___fpclassifyf@u,w
  8308  11E4  00F4               	movwf	??___fpclassifyf
  8309  11E5  0823               	movf	___fpclassifyf@u+1,w
  8310  11E6  00F5               	movwf	??___fpclassifyf+1
  8311  11E7  0824               	movf	___fpclassifyf@u+2,w
  8312  11E8  00F6               	movwf	??___fpclassifyf+2
  8313  11E9  0825               	movf	___fpclassifyf@u+3,w
  8314  11EA  00F7               	movwf	??___fpclassifyf+3
  8315  11EB  3017               	movlw	23
  8316  11EC                     u4765:
  8317  11EC  36F7               	lsrf	??___fpclassifyf+3,f
  8318  11ED  0CF6               	rrf	??___fpclassifyf+2,f
  8319  11EE  0CF5               	rrf	??___fpclassifyf+1,f
  8320  11EF  0CF4               	rrf	??___fpclassifyf,f
  8321  11F0  0B89               	decfsz	9,f
  8322  11F1  29EC               	goto	u4765
  8323  11F2  30FF               	movlw	255
  8324  11F3  0574               	andwf	??___fpclassifyf,w
  8325  11F4  00A0               	movwf	___fpclassifyf@e
  8326  11F5  3000               	movlw	0
  8327  11F6  0575               	andwf	??___fpclassifyf+1,w
  8328  11F7  00A1               	movwf	___fpclassifyf@e+1
  8329  11F8  0820               	movf	___fpclassifyf@e,w
  8330  11F9  0421               	iorwf	___fpclassifyf@e+1,w
  8331  11FA  1D03               	btfss	3,2
  8332  11FB  2A1B               	goto	l4515
  8333  11FC  0822               	movf	___fpclassifyf@u,w
  8334  11FD  00F4               	movwf	??___fpclassifyf
  8335  11FE  0823               	movf	___fpclassifyf@u+1,w
  8336  11FF  00F5               	movwf	??___fpclassifyf+1
  8337  1200  0824               	movf	___fpclassifyf@u+2,w
  8338  1201  00F6               	movwf	??___fpclassifyf+2
  8339  1202  0825               	movf	___fpclassifyf@u+3,w
  8340  1203  00F7               	movwf	??___fpclassifyf+3
  8341  1204  3001               	movlw	1
  8342  1205                     u4785:
  8343  1205  35F4               	lslf	??___fpclassifyf,f
  8344  1206  0DF5               	rlf	??___fpclassifyf+1,f
  8345  1207  0DF6               	rlf	??___fpclassifyf+2,f
  8346  1208  0DF7               	rlf	??___fpclassifyf+3,f
  8347  1209  0B89               	decfsz	9,f
  8348  120A  2A05               	goto	u4785
  8349  120B  0877               	movf	??___fpclassifyf+3,w
  8350  120C  0476               	iorwf	??___fpclassifyf+2,w
  8351  120D  0475               	iorwf	??___fpclassifyf+1,w
  8352  120E  0474               	iorwf	??___fpclassifyf,w
  8353  120F  1D03               	skipz
  8354  1210  2A16               	goto	l4511
  8355  1211  3002               	movlw	2
  8356  1212  00F0               	movwf	?___fpclassifyf
  8357  1213  3000               	movlw	0
  8358  1214  00F1               	movwf	?___fpclassifyf+1
  8359  1215  0008               	return
  8360  1216                     l4511:
  8361  1216  3003               	movlw	3
  8362  1217  00F0               	movwf	?___fpclassifyf
  8363  1218  3000               	movlw	0
  8364  1219  00F1               	movwf	?___fpclassifyf+1
  8365  121A  0008               	return
  8366  121B                     l4515:
  8367  121B  0A20               	incf	___fpclassifyf@e,w
  8368  121C  0421               	iorwf	___fpclassifyf@e+1,w
  8369  121D  1D03               	btfss	3,2
  8370  121E  2A3E               	goto	l4521
  8371  121F  0822               	movf	___fpclassifyf@u,w
  8372  1220  00F4               	movwf	??___fpclassifyf
  8373  1221  0823               	movf	___fpclassifyf@u+1,w
  8374  1222  00F5               	movwf	??___fpclassifyf+1
  8375  1223  0824               	movf	___fpclassifyf@u+2,w
  8376  1224  00F6               	movwf	??___fpclassifyf+2
  8377  1225  0825               	movf	___fpclassifyf@u+3,w
  8378  1226  00F7               	movwf	??___fpclassifyf+3
  8379  1227  3009               	movlw	9
  8380  1228                     u4815:
  8381  1228  35F4               	lslf	??___fpclassifyf,f
  8382  1229  0DF5               	rlf	??___fpclassifyf+1,f
  8383  122A  0DF6               	rlf	??___fpclassifyf+2,f
  8384  122B  0DF7               	rlf	??___fpclassifyf+3,f
  8385  122C  0B89               	decfsz	9,f
  8386  122D  2A28               	goto	u4815
  8387  122E  0877               	movf	??___fpclassifyf+3,w
  8388  122F  0476               	iorwf	??___fpclassifyf+2,w
  8389  1230  0475               	iorwf	??___fpclassifyf+1,w
  8390  1231  0474               	iorwf	??___fpclassifyf,w
  8391  1232  1D03               	btfss	3,2
  8392  1233  2A36               	goto	u4820
  8393  1234  3001               	movlw	1
  8394  1235  2A37               	goto	u4830
  8395  1236                     u4820:
  8396  1236  3000               	movlw	0
  8397  1237                     u4830:
  8398  1237  00F8               	movwf	??___fpclassifyf+4
  8399  1238  01F9               	clrf	??___fpclassifyf+5
  8400  1239  0878               	movf	??___fpclassifyf+4,w
  8401  123A  00F0               	movwf	?___fpclassifyf
  8402  123B  0879               	movf	??___fpclassifyf+5,w
  8403  123C  00F1               	movwf	?___fpclassifyf+1
  8404  123D  0008               	return
  8405  123E                     l4521:
  8406  123E  3004               	movlw	4
  8407  123F  00F0               	movwf	?___fpclassifyf
  8408  1240  3000               	movlw	0
  8409  1241  00F1               	movwf	?___fpclassifyf+1
  8410  1242  0008               	return
  8411  1243                     __end_of___fpclassifyf:
  8412                           
  8413                           	psect	text15
  8414  1AAB                     __ptext15:	
  8415 ;; *************** function ___flneg *****************
  8416 ;; Defined at:
  8417 ;;		line 15 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/flneg.c"
  8418 ;; Parameters:    Size  Location     Type
  8419 ;;  f1              4    0[COMMON] int 
  8420 ;; Auto vars:     Size  Location     Type
  8421 ;;		None
  8422 ;; Return value:  Size  Location     Type
  8423 ;;                  4    0[COMMON] int 
  8424 ;; Registers used:
  8425 ;;		wreg
  8426 ;; Tracked objects:
  8427 ;;		On entry : 1F/2
  8428 ;;		On exit  : 1F/2
  8429 ;;		Unchanged: 1F/0
  8430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8431 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8434 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8435 ;;Total ram usage:        4 bytes
  8436 ;; Hardware stack levels used:    1
  8437 ;; Hardware stack levels required when called:    5
  8438 ;; This function calls:
  8439 ;;		Nothing
  8440 ;; This function is called by:
  8441 ;;		_efgtoa
  8442 ;; This function uses a non-reentrant model
  8443 ;;
  8444                           
  8445                           
  8446                           ;psect for function ___flneg
  8447  1AAB                     ___flneg:
  8448                           
  8449                           ;incstack = 0
  8450                           ; Regs used in ___flneg: [wreg]
  8451  1AAB  0873               	movf	___flneg@f1+3,w
  8452  1AAC  0472               	iorwf	___flneg@f1+2,w
  8453  1AAD  0471               	iorwf	___flneg@f1+1,w
  8454  1AAE  0470               	iorwf	___flneg@f1,w
  8455  1AAF  1903               	skipnz
  8456  1AB0  0008               	return
  8457  1AB1  3080               	movlw	128
  8458  1AB2  06F3               	xorwf	___flneg@f1+3,f
  8459  1AB3  0008               	return
  8460  1AB4                     __end_of___flneg:
  8461                           
  8462                           	psect	text16
  8463  1E7A                     __ptext16:	
  8464 ;; *************** function ___fleq *****************
  8465 ;; Defined at:
  8466 ;;		line 4 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/fleq.c"
  8467 ;; Parameters:    Size  Location     Type
  8468 ;;  ff1             4    0[COMMON] int 
  8469 ;;  ff2             4    4[COMMON] int 
  8470 ;; Auto vars:     Size  Location     Type
  8471 ;;		None
  8472 ;; Return value:  Size  Location     Type
  8473 ;;		None               void
  8474 ;; Registers used:
  8475 ;;		wreg, status,2, status,0
  8476 ;; Tracked objects:
  8477 ;;		On entry : 1F/2
  8478 ;;		On exit  : 1F/2
  8479 ;;		Unchanged: 1F/0
  8480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8481 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8483 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8484 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8485 ;;Total ram usage:       12 bytes
  8486 ;; Hardware stack levels used:    1
  8487 ;; Hardware stack levels required when called:    5
  8488 ;; This function calls:
  8489 ;;		Nothing
  8490 ;; This function is called by:
  8491 ;;		_efgtoa
  8492 ;; This function uses a non-reentrant model
  8493 ;;
  8494                           
  8495                           
  8496                           ;psect for function ___fleq
  8497  1E7A                     ___fleq:
  8498                           
  8499                           ;incstack = 0
  8500                           ; Regs used in ___fleq: [wreg+status,2+status,0]
  8501  1E7A  3000               	movlw	0
  8502  1E7B  0570               	andwf	___fleq@ff1,w
  8503  1E7C  00F8               	movwf	??___fleq
  8504  1E7D  3000               	movlw	0
  8505  1E7E  0571               	andwf	___fleq@ff1+1,w
  8506  1E7F  00F9               	movwf	??___fleq+1
  8507  1E80  3080               	movlw	128
  8508  1E81  0572               	andwf	___fleq@ff1+2,w
  8509  1E82  00FA               	movwf	??___fleq+2
  8510  1E83  307F               	movlw	127
  8511  1E84  0573               	andwf	___fleq@ff1+3,w
  8512  1E85  00FB               	movwf	??___fleq+3
  8513  1E86  087B               	movf	??___fleq+3,w
  8514  1E87  047A               	iorwf	??___fleq+2,w
  8515  1E88  0479               	iorwf	??___fleq+1,w
  8516  1E89  0478               	iorwf	??___fleq,w
  8517  1E8A  1D03               	skipz
  8518  1E8B  2E94               	goto	l1354
  8519  1E8C  3000               	movlw	0
  8520  1E8D  00F3               	movwf	___fleq@ff1+3
  8521  1E8E  3000               	movlw	0
  8522  1E8F  00F2               	movwf	___fleq@ff1+2
  8523  1E90  3000               	movlw	0
  8524  1E91  00F1               	movwf	___fleq@ff1+1
  8525  1E92  3000               	movlw	0
  8526  1E93  00F0               	movwf	___fleq@ff1
  8527  1E94                     l1354:
  8528  1E94  3000               	movlw	0
  8529  1E95  0574               	andwf	___fleq@ff2,w
  8530  1E96  00F8               	movwf	??___fleq
  8531  1E97  3000               	movlw	0
  8532  1E98  0575               	andwf	___fleq@ff2+1,w
  8533  1E99  00F9               	movwf	??___fleq+1
  8534  1E9A  3080               	movlw	128
  8535  1E9B  0576               	andwf	___fleq@ff2+2,w
  8536  1E9C  00FA               	movwf	??___fleq+2
  8537  1E9D  307F               	movlw	127
  8538  1E9E  0577               	andwf	___fleq@ff2+3,w
  8539  1E9F  00FB               	movwf	??___fleq+3
  8540  1EA0  087B               	movf	??___fleq+3,w
  8541  1EA1  047A               	iorwf	??___fleq+2,w
  8542  1EA2  0479               	iorwf	??___fleq+1,w
  8543  1EA3  0478               	iorwf	??___fleq,w
  8544  1EA4  1D03               	skipz
  8545  1EA5  2EAE               	goto	l1355
  8546  1EA6  3000               	movlw	0
  8547  1EA7  00F7               	movwf	___fleq@ff2+3
  8548  1EA8  3000               	movlw	0
  8549  1EA9  00F6               	movwf	___fleq@ff2+2
  8550  1EAA  3000               	movlw	0
  8551  1EAB  00F5               	movwf	___fleq@ff2+1
  8552  1EAC  3000               	movlw	0
  8553  1EAD  00F4               	movwf	___fleq@ff2
  8554  1EAE                     l1355:
  8555  1EAE  0877               	movf	___fleq@ff2+3,w
  8556  1EAF  0673               	xorwf	___fleq@ff1+3,w
  8557  1EB0  1D03               	skipz
  8558  1EB1  2EBC               	goto	u4015
  8559  1EB2  0876               	movf	___fleq@ff2+2,w
  8560  1EB3  0672               	xorwf	___fleq@ff1+2,w
  8561  1EB4  1D03               	skipz
  8562  1EB5  2EBC               	goto	u4015
  8563  1EB6  0875               	movf	___fleq@ff2+1,w
  8564  1EB7  0671               	xorwf	___fleq@ff1+1,w
  8565  1EB8  1D03               	skipz
  8566  1EB9  2EBC               	goto	u4015
  8567  1EBA  0874               	movf	___fleq@ff2,w
  8568  1EBB  0670               	xorwf	___fleq@ff1,w
  8569  1EBC                     u4015:
  8570  1EBC  1903               	skipnz
  8571  1EBD  2EC0               	goto	l4125
  8572  1EBE  1003               	clrc
  8573  1EBF  0008               	return
  8574  1EC0                     l4125:
  8575  1EC0  1403               	setc
  8576  1EC1  0008               	return
  8577  1EC2                     __end_of___fleq:
  8578                           
  8579                           	psect	text17
  8580  1E35                     __ptext17:	
  8581 ;; *************** function ___awmod *****************
  8582 ;; Defined at:
  8583 ;;		line 5 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/awmod.c"
  8584 ;; Parameters:    Size  Location     Type
  8585 ;;  divisor         2    0[COMMON] int 
  8586 ;;  dividend        2    2[COMMON] int 
  8587 ;; Auto vars:     Size  Location     Type
  8588 ;;  sign            1    6[COMMON] unsigned char 
  8589 ;;  counter         1    5[COMMON] unsigned char 
  8590 ;; Return value:  Size  Location     Type
  8591 ;;                  2    0[COMMON] int 
  8592 ;; Registers used:
  8593 ;;		wreg, status,2, status,0
  8594 ;; Tracked objects:
  8595 ;;		On entry : 1F/2
  8596 ;;		On exit  : 1F/2
  8597 ;;		Unchanged: 1F/0
  8598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8599 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8600 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8601 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8602 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8603 ;;Total ram usage:        7 bytes
  8604 ;; Hardware stack levels used:    1
  8605 ;; Hardware stack levels required when called:    5
  8606 ;; This function calls:
  8607 ;;		Nothing
  8608 ;; This function is called by:
  8609 ;;		_efgtoa
  8610 ;; This function uses a non-reentrant model
  8611 ;;
  8612                           
  8613                           
  8614                           ;psect for function ___awmod
  8615  1E35                     ___awmod:
  8616                           
  8617                           ;incstack = 0
  8618                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  8619  1E35  01F6               	clrf	___awmod@sign
  8620  1E36  1FF3               	btfss	___awmod@dividend+1,7
  8621  1E37  2E3F               	goto	l4087
  8622  1E38  09F2               	comf	___awmod@dividend,f
  8623  1E39  09F3               	comf	___awmod@dividend+1,f
  8624  1E3A  0AF2               	incf	___awmod@dividend,f
  8625  1E3B  1903               	skipnz
  8626  1E3C  0AF3               	incf	___awmod@dividend+1,f
  8627  1E3D  01F6               	clrf	___awmod@sign
  8628  1E3E  0AF6               	incf	___awmod@sign,f
  8629  1E3F                     l4087:
  8630  1E3F  1FF1               	btfss	___awmod@divisor+1,7
  8631  1E40  2E46               	goto	l4091
  8632  1E41  09F0               	comf	___awmod@divisor,f
  8633  1E42  09F1               	comf	___awmod@divisor+1,f
  8634  1E43  0AF0               	incf	___awmod@divisor,f
  8635  1E44  1903               	skipnz
  8636  1E45  0AF1               	incf	___awmod@divisor+1,f
  8637  1E46                     l4091:
  8638  1E46  0870               	movf	___awmod@divisor,w
  8639  1E47  0471               	iorwf	___awmod@divisor+1,w
  8640  1E48  1903               	btfsc	3,2
  8641  1E49  2E6D               	goto	l4109
  8642  1E4A  01F5               	clrf	___awmod@counter
  8643  1E4B  0AF5               	incf	___awmod@counter,f
  8644  1E4C                     l4099:
  8645  1E4C  1BF1               	btfsc	___awmod@divisor+1,7
  8646  1E4D  2E58               	goto	l4101
  8647  1E4E  3001               	movlw	1
  8648  1E4F                     u3935:
  8649  1E4F  35F0               	lslf	___awmod@divisor,f
  8650  1E50  0DF1               	rlf	___awmod@divisor+1,f
  8651  1E51  0B89               	decfsz	9,f
  8652  1E52  2E4F               	goto	u3935
  8653  1E53  3001               	movlw	1
  8654  1E54  00F4               	movwf	??___awmod
  8655  1E55  0874               	movf	??___awmod,w
  8656  1E56  07F5               	addwf	___awmod@counter,f
  8657  1E57  2E4C               	goto	l4099
  8658  1E58                     l4101:
  8659  1E58  0871               	movf	___awmod@divisor+1,w
  8660  1E59  0273               	subwf	___awmod@dividend+1,w
  8661  1E5A  1D03               	skipz
  8662  1E5B  2E5E               	goto	u3955
  8663  1E5C  0870               	movf	___awmod@divisor,w
  8664  1E5D  0272               	subwf	___awmod@dividend,w
  8665  1E5E                     u3955:
  8666  1E5E  1C03               	skipc
  8667  1E5F  2E64               	goto	l4105
  8668  1E60  0870               	movf	___awmod@divisor,w
  8669  1E61  02F2               	subwf	___awmod@dividend,f
  8670  1E62  0871               	movf	___awmod@divisor+1,w
  8671  1E63  3BF3               	subwfb	___awmod@dividend+1,f
  8672  1E64                     l4105:
  8673  1E64  3001               	movlw	1
  8674  1E65                     u3965:
  8675  1E65  36F1               	lsrf	___awmod@divisor+1,f
  8676  1E66  0CF0               	rrf	___awmod@divisor,f
  8677  1E67  0B89               	decfsz	9,f
  8678  1E68  2E65               	goto	u3965
  8679  1E69  3001               	movlw	1
  8680  1E6A  02F5               	subwf	___awmod@counter,f
  8681  1E6B  1D03               	btfss	3,2
  8682  1E6C  2E58               	goto	l4101
  8683  1E6D                     l4109:
  8684  1E6D  0876               	movf	___awmod@sign,w
  8685  1E6E  1903               	btfsc	3,2
  8686  1E6F  2E75               	goto	l4113
  8687  1E70  09F2               	comf	___awmod@dividend,f
  8688  1E71  09F3               	comf	___awmod@dividend+1,f
  8689  1E72  0AF2               	incf	___awmod@dividend,f
  8690  1E73  1903               	skipnz
  8691  1E74  0AF3               	incf	___awmod@dividend+1,f
  8692  1E75                     l4113:
  8693  1E75  0873               	movf	___awmod@dividend+1,w
  8694  1E76  00F1               	movwf	?___awmod+1
  8695  1E77  0872               	movf	___awmod@dividend,w
  8696  1E78  00F0               	movwf	?___awmod
  8697  1E79  0008               	return
  8698  1E7A                     __end_of___awmod:
  8699                           
  8700                           	psect	text18
  8701  1F5E                     __ptext18:	
  8702 ;; *************** function ___awdiv *****************
  8703 ;; Defined at:
  8704 ;;		line 5 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/awdiv.c"
  8705 ;; Parameters:    Size  Location     Type
  8706 ;;  divisor         2    0[COMMON] int 
  8707 ;;  dividend        2    2[COMMON] int 
  8708 ;; Auto vars:     Size  Location     Type
  8709 ;;  quotient        2    7[COMMON] int 
  8710 ;;  sign            1    6[COMMON] unsigned char 
  8711 ;;  counter         1    5[COMMON] unsigned char 
  8712 ;; Return value:  Size  Location     Type
  8713 ;;                  2    0[COMMON] int 
  8714 ;; Registers used:
  8715 ;;		wreg, status,2, status,0
  8716 ;; Tracked objects:
  8717 ;;		On entry : 1F/2
  8718 ;;		On exit  : 1F/2
  8719 ;;		Unchanged: 1F/0
  8720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8721 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8722 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8723 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8724 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8725 ;;Total ram usage:        9 bytes
  8726 ;; Hardware stack levels used:    1
  8727 ;; Hardware stack levels required when called:    5
  8728 ;; This function calls:
  8729 ;;		Nothing
  8730 ;; This function is called by:
  8731 ;;		_efgtoa
  8732 ;; This function uses a non-reentrant model
  8733 ;;
  8734                           
  8735                           
  8736                           ;psect for function ___awdiv
  8737  1F5E                     ___awdiv:
  8738                           
  8739                           ;incstack = 0
  8740                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  8741  1F5E  01F6               	clrf	___awdiv@sign
  8742  1F5F  1FF1               	btfss	___awdiv@divisor+1,7
  8743  1F60  2F68               	goto	l4043
  8744  1F61  09F0               	comf	___awdiv@divisor,f
  8745  1F62  09F1               	comf	___awdiv@divisor+1,f
  8746  1F63  0AF0               	incf	___awdiv@divisor,f
  8747  1F64  1903               	skipnz
  8748  1F65  0AF1               	incf	___awdiv@divisor+1,f
  8749  1F66  01F6               	clrf	___awdiv@sign
  8750  1F67  0AF6               	incf	___awdiv@sign,f
  8751  1F68                     l4043:
  8752  1F68  1FF3               	btfss	___awdiv@dividend+1,7
  8753  1F69  2F73               	goto	l4049
  8754  1F6A  09F2               	comf	___awdiv@dividend,f
  8755  1F6B  09F3               	comf	___awdiv@dividend+1,f
  8756  1F6C  0AF2               	incf	___awdiv@dividend,f
  8757  1F6D  1903               	skipnz
  8758  1F6E  0AF3               	incf	___awdiv@dividend+1,f
  8759  1F6F  3001               	movlw	1
  8760  1F70  00F4               	movwf	??___awdiv
  8761  1F71  0874               	movf	??___awdiv,w
  8762  1F72  06F6               	xorwf	___awdiv@sign,f
  8763  1F73                     l4049:
  8764  1F73  01F7               	clrf	___awdiv@quotient
  8765  1F74  01F8               	clrf	___awdiv@quotient+1
  8766  1F75  0870               	movf	___awdiv@divisor,w
  8767  1F76  0471               	iorwf	___awdiv@divisor+1,w
  8768  1F77  1903               	btfsc	3,2
  8769  1F78  2FA2               	goto	l4071
  8770  1F79  01F5               	clrf	___awdiv@counter
  8771  1F7A  0AF5               	incf	___awdiv@counter,f
  8772  1F7B                     l4059:
  8773  1F7B  1BF1               	btfsc	___awdiv@divisor+1,7
  8774  1F7C  2F87               	goto	l4061
  8775  1F7D  3001               	movlw	1
  8776  1F7E                     u3835:
  8777  1F7E  35F0               	lslf	___awdiv@divisor,f
  8778  1F7F  0DF1               	rlf	___awdiv@divisor+1,f
  8779  1F80  0B89               	decfsz	9,f
  8780  1F81  2F7E               	goto	u3835
  8781  1F82  3001               	movlw	1
  8782  1F83  00F4               	movwf	??___awdiv
  8783  1F84  0874               	movf	??___awdiv,w
  8784  1F85  07F5               	addwf	___awdiv@counter,f
  8785  1F86  2F7B               	goto	l4059
  8786  1F87                     l4061:
  8787  1F87  3001               	movlw	1
  8788  1F88                     u3855:
  8789  1F88  35F7               	lslf	___awdiv@quotient,f
  8790  1F89  0DF8               	rlf	___awdiv@quotient+1,f
  8791  1F8A  0B89               	decfsz	9,f
  8792  1F8B  2F88               	goto	u3855
  8793  1F8C  0871               	movf	___awdiv@divisor+1,w
  8794  1F8D  0273               	subwf	___awdiv@dividend+1,w
  8795  1F8E  1D03               	skipz
  8796  1F8F  2F92               	goto	u3865
  8797  1F90  0870               	movf	___awdiv@divisor,w
  8798  1F91  0272               	subwf	___awdiv@dividend,w
  8799  1F92                     u3865:
  8800  1F92  1C03               	skipc
  8801  1F93  2F99               	goto	l4067
  8802  1F94  0870               	movf	___awdiv@divisor,w
  8803  1F95  02F2               	subwf	___awdiv@dividend,f
  8804  1F96  0871               	movf	___awdiv@divisor+1,w
  8805  1F97  3BF3               	subwfb	___awdiv@dividend+1,f
  8806  1F98  1477               	bsf	___awdiv@quotient,0
  8807  1F99                     l4067:
  8808  1F99  3001               	movlw	1
  8809  1F9A                     u3875:
  8810  1F9A  36F1               	lsrf	___awdiv@divisor+1,f
  8811  1F9B  0CF0               	rrf	___awdiv@divisor,f
  8812  1F9C  0B89               	decfsz	9,f
  8813  1F9D  2F9A               	goto	u3875
  8814  1F9E  3001               	movlw	1
  8815  1F9F  02F5               	subwf	___awdiv@counter,f
  8816  1FA0  1D03               	btfss	3,2
  8817  1FA1  2F87               	goto	l4061
  8818  1FA2                     l4071:
  8819  1FA2  0876               	movf	___awdiv@sign,w
  8820  1FA3  1903               	btfsc	3,2
  8821  1FA4  2FAA               	goto	l4075
  8822  1FA5  09F7               	comf	___awdiv@quotient,f
  8823  1FA6  09F8               	comf	___awdiv@quotient+1,f
  8824  1FA7  0AF7               	incf	___awdiv@quotient,f
  8825  1FA8  1903               	skipnz
  8826  1FA9  0AF8               	incf	___awdiv@quotient+1,f
  8827  1FAA                     l4075:
  8828  1FAA  0878               	movf	___awdiv@quotient+1,w
  8829  1FAB  00F1               	movwf	?___awdiv+1
  8830  1FAC  0877               	movf	___awdiv@quotient,w
  8831  1FAD  00F0               	movwf	?___awdiv
  8832  1FAE  0008               	return
  8833  1FAF                     __end_of___awdiv:
  8834                           
  8835                           	psect	text19
  8836  1D65                     __ptext19:	
  8837 ;; *************** function _TX_Whole_String *****************
  8838 ;; Defined at:
  8839 ;;		line 119 in file "main.c"
  8840 ;; Parameters:    Size  Location     Type
  8841 ;;  input_string    1    wreg     PTR unsigned char 
  8842 ;;		 -> Buff_g(20), 
  8843 ;; Auto vars:     Size  Location     Type
  8844 ;;  input_string    1    9[COMMON] PTR unsigned char 
  8845 ;;		 -> Buff_g(20), 
  8846 ;;  i               1   10[COMMON] unsigned char 
  8847 ;;  size_of_stri    2    7[COMMON] unsigned short 
  8848 ;; Return value:  Size  Location     Type
  8849 ;;                  1    wreg      void 
  8850 ;; Registers used:
  8851 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8852 ;; Tracked objects:
  8853 ;;		On entry : 1F/2
  8854 ;;		On exit  : 0/0
  8855 ;;		Unchanged: 0/0
  8856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8858 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8859 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8860 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8861 ;;Total ram usage:        6 bytes
  8862 ;; Hardware stack levels used:    1
  8863 ;; Hardware stack levels required when called:    7
  8864 ;; This function calls:
  8865 ;;		_TX_Command
  8866 ;;		_strlen
  8867 ;; This function is called by:
  8868 ;;		_main
  8869 ;; This function uses a non-reentrant model
  8870 ;;
  8871                           
  8872                           
  8873                           ;psect for function _TX_Whole_String
  8874  1D65                     _TX_Whole_String:
  8875                           
  8876                           ;incstack = 0
  8877                           ; Regs used in _TX_Whole_String: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8878                           ;TX_Whole_String@input_string stored from wreg
  8879  1D65  00F9               	movwf	TX_Whole_String@input_string
  8880                           
  8881                           ;main.c: 121:     uint16_t size_of_string = strlen(input_string);
  8882  1D66  0879               	movf	TX_Whole_String@input_string,w
  8883  1D67  319B  23E5  319D   	fcall	_strlen
  8884  1D6A  0871               	movf	?_strlen+1,w
  8885  1D6B  00F8               	movwf	TX_Whole_String@size_of_string+1
  8886  1D6C  0870               	movf	?_strlen,w
  8887  1D6D  00F7               	movwf	TX_Whole_String@size_of_string
  8888                           
  8889                           ;main.c: 123:     for (uint8_t i = 0; i < size_of_string; i++){
  8890  1D6E  01FA               	clrf	TX_Whole_String@i
  8891  1D6F                     l5477:
  8892  1D6F  087A               	movf	TX_Whole_String@i,w
  8893  1D70  00F5               	movwf	??_TX_Whole_String
  8894  1D71  01F6               	clrf	??_TX_Whole_String+1
  8895  1D72  0878               	movf	TX_Whole_String@size_of_string+1,w
  8896  1D73  0276               	subwf	??_TX_Whole_String+1,w
  8897  1D74  1D03               	skipz
  8898  1D75  2D78               	goto	u6325
  8899  1D76  0877               	movf	TX_Whole_String@size_of_string,w
  8900  1D77  0275               	subwf	??_TX_Whole_String,w
  8901  1D78                     u6325:
  8902  1D78  1803               	btfsc	3,0
  8903  1D79  0008               	return
  8904                           
  8905                           ;main.c: 125:         TX_Command(input_string[i]);
  8906  1D7A  087A               	movf	TX_Whole_String@i,w
  8907  1D7B  0779               	addwf	TX_Whole_String@input_string,w
  8908  1D7C  00F5               	movwf	??_TX_Whole_String
  8909  1D7D  0875               	movf	??_TX_Whole_String,w
  8910  1D7E  0086               	movwf	6
  8911  1D7F  3002               	movlw	2	; select bank4/5
  8912  1D80  0087               	movwf	7
  8913  1D81  0801               	movf	1,w
  8914  1D82  319A  22BF  319D   	fcall	_TX_Command
  8915                           
  8916                           ;main.c: 126:         _delay((unsigned long)((5)*(8000000/4000.0)));
  8917  1D85  300D               	movlw	13
  8918  1D86  00F5               	movwf	??_TX_Whole_String
  8919  1D87  30FC               	movlw	252
  8920  1D88                     u6417:
  8921  1D88  0B89               	decfsz	9,f
  8922  1D89  2D88               	goto	u6417
  8923  1D8A  0BF5               	decfsz	??_TX_Whole_String,f
  8924  1D8B  2D88               	goto	u6417
  8925                           
  8926                           ;main.c: 128:     }
  8927  1D8C  3001               	movlw	1
  8928  1D8D  00F5               	movwf	??_TX_Whole_String
  8929  1D8E  0875               	movf	??_TX_Whole_String,w
  8930  1D8F  07FA               	addwf	TX_Whole_String@i,f
  8931  1D90  2D6F               	goto	l5477
  8932  1D91                     __end_of_TX_Whole_String:
  8933                           
  8934                           	psect	text20
  8935  1BE5                     __ptext20:	
  8936 ;; *************** function _strlen *****************
  8937 ;; Defined at:
  8938 ;;		line 5 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/strlen.c"
  8939 ;; Parameters:    Size  Location     Type
  8940 ;;  s               1    wreg     PTR const unsigned char 
  8941 ;;		 -> dbuf(80), Buff_g(20), 
  8942 ;; Auto vars:     Size  Location     Type
  8943 ;;  s               1    4[COMMON] PTR const unsigned char 
  8944 ;;		 -> dbuf(80), Buff_g(20), 
  8945 ;;  a               1    3[COMMON] PTR const unsigned char 
  8946 ;;		 -> dbuf(80), Buff_g(20), 
  8947 ;; Return value:  Size  Location     Type
  8948 ;;                  2    0[COMMON] unsigned int 
  8949 ;; Registers used:
  8950 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8951 ;; Tracked objects:
  8952 ;;		On entry : 1D/0
  8953 ;;		On exit  : 1D/0
  8954 ;;		Unchanged: 1D/0
  8955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8956 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8957 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8958 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8959 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8960 ;;Total ram usage:        5 bytes
  8961 ;; Hardware stack levels used:    1
  8962 ;; Hardware stack levels required when called:    5
  8963 ;; This function calls:
  8964 ;;		Nothing
  8965 ;; This function is called by:
  8966 ;;		_TX_Whole_String
  8967 ;;		_pad
  8968 ;; This function uses a non-reentrant model
  8969 ;;
  8970                           
  8971                           
  8972                           ;psect for function _strlen
  8973  1BE5                     _strlen:
  8974                           
  8975                           ;incstack = 0
  8976                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  8977                           ;strlen@s stored from wreg
  8978  1BE5  00F4               	movwf	strlen@s
  8979  1BE6  0874               	movf	strlen@s,w
  8980  1BE7  00F2               	movwf	??_strlen
  8981  1BE8  0872               	movf	??_strlen,w
  8982  1BE9  00F3               	movwf	strlen@a
  8983  1BEA                     l3775:
  8984  1BEA  0874               	movf	strlen@s,w
  8985  1BEB  0086               	movwf	6
  8986  1BEC  3002               	movlw	2	; select bank4/5
  8987  1BED  0087               	movwf	7
  8988  1BEE  0801               	movf	1,w
  8989  1BEF  1903               	btfsc	3,2
  8990  1BF0  2BF6               	goto	l3777
  8991  1BF1  3001               	movlw	1
  8992  1BF2  00F2               	movwf	??_strlen
  8993  1BF3  0872               	movf	??_strlen,w
  8994  1BF4  07F4               	addwf	strlen@s,f
  8995  1BF5  2BEA               	goto	l3775
  8996  1BF6                     l3777:
  8997  1BF6  0873               	movf	strlen@a,w
  8998  1BF7  0274               	subwf	strlen@s,w
  8999  1BF8  00F0               	movwf	?_strlen
  9000  1BF9  01F1               	clrf	?_strlen+1
  9001  1BFA  1BF0               	btfsc	?_strlen,7
  9002  1BFB  03F1               	decf	?_strlen+1,f
  9003  1BFC  0008               	return
  9004  1BFD                     __end_of_strlen:
  9005                           
  9006                           	psect	text21
  9007  1ABF                     __ptext21:	
  9008 ;; *************** function _TX_Command *****************
  9009 ;; Defined at:
  9010 ;;		line 110 in file "main.c"
  9011 ;; Parameters:    Size  Location     Type
  9012 ;;  txData          1    wreg     unsigned char 
  9013 ;; Auto vars:     Size  Location     Type
  9014 ;;  txData          1    1[COMMON] unsigned char 
  9015 ;; Return value:  Size  Location     Type
  9016 ;;                  1    wreg      void 
  9017 ;; Registers used:
  9018 ;;		wreg, status,2, status,0, pclath, cstack
  9019 ;; Tracked objects:
  9020 ;;		On entry : 0/2
  9021 ;;		On exit  : 1C/0
  9022 ;;		Unchanged: 0/0
  9023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9025 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9027 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9028 ;;Total ram usage:        1 bytes
  9029 ;; Hardware stack levels used:    1
  9030 ;; Hardware stack levels required when called:    6
  9031 ;; This function calls:
  9032 ;;		_EUSART_Write
  9033 ;;		_EUSART_is_tx_ready
  9034 ;; This function is called by:
  9035 ;;		_TX_Whole_String
  9036 ;; This function uses a non-reentrant model
  9037 ;;
  9038                           
  9039                           
  9040                           ;psect for function _TX_Command
  9041  1ABF                     _TX_Command:
  9042                           
  9043                           ;incstack = 0
  9044                           ; Regs used in _TX_Command: [wreg+status,2+status,0+pclath+cstack]
  9045                           ;TX_Command@txData stored from wreg
  9046  1ABF  00F1               	movwf	TX_Command@txData
  9047                           
  9048                           ;main.c: 112:     if (EUSART_is_tx_ready()) {
  9049  1AC0  319A  22B4  319A   	fcall	_EUSART_is_tx_ready
  9050  1AC3  3A00               	xorlw	0
  9051  1AC4  1903               	skipnz
  9052  1AC5  0008               	return
  9053                           
  9054                           ;main.c: 114:         EUSART_Write(txData);
  9055  1AC6  0871               	movf	TX_Command@txData,w
  9056  1AC7  319A  22A3         	fcall	_EUSART_Write
  9057  1AC9  0008               	return
  9058  1ACA                     __end_of_TX_Command:
  9059                           
  9060                           	psect	text22
  9061  1AB4                     __ptext22:	
  9062 ;; *************** function _EUSART_is_tx_ready *****************
  9063 ;; Defined at:
  9064 ;;		line 94 in file "mcc_generated_files/eusart.c"
  9065 ;; Parameters:    Size  Location     Type
  9066 ;;		None
  9067 ;; Auto vars:     Size  Location     Type
  9068 ;;		None
  9069 ;; Return value:  Size  Location     Type
  9070 ;;                  1    wreg      _Bool 
  9071 ;; Registers used:
  9072 ;;		wreg, status,2
  9073 ;; Tracked objects:
  9074 ;;		On entry : 0/2
  9075 ;;		On exit  : 1C/0
  9076 ;;		Unchanged: 0/0
  9077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9079 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9081 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9082 ;;Total ram usage:        1 bytes
  9083 ;; Hardware stack levels used:    1
  9084 ;; Hardware stack levels required when called:    5
  9085 ;; This function calls:
  9086 ;;		Nothing
  9087 ;; This function is called by:
  9088 ;;		_TX_Command
  9089 ;; This function uses a non-reentrant model
  9090 ;;
  9091                           
  9092                           
  9093                           ;psect for function _EUSART_is_tx_ready
  9094  1AB4                     _EUSART_is_tx_ready:
  9095                           
  9096                           ;mcc_generated_files/eusart.c: 96:     return (_Bool)(PIR1bits.TXIF && TXSTAbits.TXEN);
  9097                           
  9098                           ;incstack = 0
  9099                           ; Regs used in _EUSART_is_tx_ready: [wreg+status,2]
  9100  1AB4  01F0               	clrf	_EUSART_is_tx_ready$1170
  9101  1AB5  0020               	movlb	0	; select bank0
  9102  1AB6  1E11               	btfss	17,4	;volatile
  9103  1AB7  2ABD               	goto	l5027
  9104  1AB8  0023               	movlb	3	; select bank3
  9105  1AB9  1E9E               	btfss	30,5	;volatile
  9106  1ABA  2ABD               	goto	l5027
  9107  1ABB  01F0               	clrf	_EUSART_is_tx_ready$1170
  9108  1ABC  0AF0               	incf	_EUSART_is_tx_ready$1170,f
  9109  1ABD                     l5027:
  9110  1ABD  0870               	movf	_EUSART_is_tx_ready$1170,w
  9111  1ABE  0008               	return
  9112  1ABF                     __end_of_EUSART_is_tx_ready:
  9113                           
  9114                           	psect	text23
  9115  1AA3                     __ptext23:	
  9116 ;; *************** function _EUSART_Write *****************
  9117 ;; Defined at:
  9118 ;;		line 132 in file "mcc_generated_files/eusart.c"
  9119 ;; Parameters:    Size  Location     Type
  9120 ;;  txData          1    wreg     unsigned char 
  9121 ;; Auto vars:     Size  Location     Type
  9122 ;;  txData          1    0[COMMON] unsigned char 
  9123 ;; Return value:  Size  Location     Type
  9124 ;;                  1    wreg      void 
  9125 ;; Registers used:
  9126 ;;		wreg
  9127 ;; Tracked objects:
  9128 ;;		On entry : 1C/2
  9129 ;;		On exit  : 1F/3
  9130 ;;		Unchanged: 0/0
  9131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9133 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9135 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9136 ;;Total ram usage:        1 bytes
  9137 ;; Hardware stack levels used:    1
  9138 ;; Hardware stack levels required when called:    5
  9139 ;; This function calls:
  9140 ;;		Nothing
  9141 ;; This function is called by:
  9142 ;;		_TX_Command
  9143 ;; This function uses a non-reentrant model
  9144 ;;
  9145                           
  9146                           
  9147                           ;psect for function _EUSART_Write
  9148  1AA3                     _EUSART_Write:
  9149                           
  9150                           ;incstack = 0
  9151                           ; Regs used in _EUSART_Write: [wreg]
  9152                           ;EUSART_Write@txData stored from wreg
  9153  1AA3  00F0               	movwf	EUSART_Write@txData
  9154  1AA4                     l670:	
  9155                           ;mcc_generated_files/eusart.c: 135:     {;mcc_generated_files/eusart.c: 136:     }
  9156                           
  9157                           
  9158                           ;mcc_generated_files/eusart.c: 134:     while(0 == PIR1bits.TXIF)
  9159  1AA4  0020               	movlb	0	; select bank0
  9160  1AA5  1E11               	btfss	17,4	;volatile
  9161  1AA6  2AA4               	goto	l670
  9162                           
  9163                           ;mcc_generated_files/eusart.c: 138:     TXREG = txData;
  9164  1AA7  0870               	movf	EUSART_Write@txData,w
  9165  1AA8  0023               	movlb	3	; select bank3
  9166  1AA9  009A               	movwf	26	;volatile
  9167  1AAA  0008               	return
  9168  1AAB                     __end_of_EUSART_Write:
  9169                           
  9170                           	psect	text24
  9171  1BCD                     __ptext24:	
  9172 ;; *************** function _SYSTEM_Initialize *****************
  9173 ;; Defined at:
  9174 ;;		line 50 in file "mcc_generated_files/mcc.c"
  9175 ;; Parameters:    Size  Location     Type
  9176 ;;		None
  9177 ;; Auto vars:     Size  Location     Type
  9178 ;;		None
  9179 ;; Return value:  Size  Location     Type
  9180 ;;                  1    wreg      void 
  9181 ;; Registers used:
  9182 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9183 ;; Tracked objects:
  9184 ;;		On entry : B1F/0
  9185 ;;		On exit  : 1F/1
  9186 ;;		Unchanged: 0/0
  9187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9191 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9192 ;;Total ram usage:        0 bytes
  9193 ;; Hardware stack levels used:    1
  9194 ;; Hardware stack levels required when called:   10
  9195 ;; This function calls:
  9196 ;;		_ADC_Initialize
  9197 ;;		_EUSART_Initialize
  9198 ;;		_MTOUCH_Initialize
  9199 ;;		_OSCILLATOR_Initialize
  9200 ;;		_PIN_MANAGER_Initialize
  9201 ;;		_TMR2_Initialize
  9202 ;;		_TMR4_Initialize
  9203 ;;		_WDT_Initialize
  9204 ;; This function is called by:
  9205 ;;		_main
  9206 ;; This function uses a non-reentrant model
  9207 ;;
  9208                           
  9209                           
  9210                           ;psect for function _SYSTEM_Initialize
  9211  1BCD                     _SYSTEM_Initialize:
  9212                           
  9213                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  9214                           
  9215                           ;incstack = 0
  9216                           ; Regs used in _SYSTEM_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9217  1BCD  319D  2512  319B   	fcall	_PIN_MANAGER_Initialize
  9218                           
  9219                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  9220  1BD0  319A  2284  319B   	fcall	_OSCILLATOR_Initialize
  9221                           
  9222                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  9223  1BD3  319A  2235  319B   	fcall	_WDT_Initialize
  9224                           
  9225                           ;mcc_generated_files/mcc.c: 56:     ADC_Initialize();
  9226  1BD6  319A  227D  319B   	fcall	_ADC_Initialize
  9227                           
  9228                           ;mcc_generated_files/mcc.c: 57:     TMR4_Initialize();
  9229  1BD9  319B  237F  319B   	fcall	_TMR4_Initialize
  9230                           
  9231                           ;mcc_generated_files/mcc.c: 58:     TMR2_Initialize();
  9232  1BDC  319B  2309  319B   	fcall	_TMR2_Initialize
  9233                           
  9234                           ;mcc_generated_files/mcc.c: 59:     EUSART_Initialize();
  9235  1BDF  319C  2488  319B   	fcall	_EUSART_Initialize
  9236                           
  9237                           ;mcc_generated_files/mcc.c: 60:     MTOUCH_Initialize();
  9238  1BE2  319A  22E2         	fcall	_MTOUCH_Initialize
  9239  1BE4  0008               	return
  9240  1BE5                     __end_of_SYSTEM_Initialize:
  9241                           
  9242                           	psect	text25
  9243  1A35                     __ptext25:	
  9244 ;; *************** function _WDT_Initialize *****************
  9245 ;; Defined at:
  9246 ;;		line 73 in file "mcc_generated_files/mcc.c"
  9247 ;; Parameters:    Size  Location     Type
  9248 ;;		None
  9249 ;; Auto vars:     Size  Location     Type
  9250 ;;		None
  9251 ;; Return value:  Size  Location     Type
  9252 ;;                  1    wreg      void 
  9253 ;; Registers used:
  9254 ;;		wreg
  9255 ;; Tracked objects:
  9256 ;;		On entry : 1F/2
  9257 ;;		On exit  : 1F/1
  9258 ;;		Unchanged: 0/0
  9259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9263 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9264 ;;Total ram usage:        0 bytes
  9265 ;; Hardware stack levels used:    1
  9266 ;; Hardware stack levels required when called:    5
  9267 ;; This function calls:
  9268 ;;		Nothing
  9269 ;; This function is called by:
  9270 ;;		_SYSTEM_Initialize
  9271 ;; This function uses a non-reentrant model
  9272 ;;
  9273                           
  9274                           
  9275                           ;psect for function _WDT_Initialize
  9276  1A35                     _WDT_Initialize:
  9277                           
  9278                           ;mcc_generated_files/mcc.c: 76:     WDTCON = 0x16;
  9279                           
  9280                           ;incstack = 0
  9281                           ; Regs used in _WDT_Initialize: [wreg]
  9282  1A35  3016               	movlw	22
  9283  1A36  0021               	movlb	1	; select bank1
  9284  1A37  0097               	movwf	23	;volatile
  9285  1A38  0008               	return
  9286  1A39                     __end_of_WDT_Initialize:
  9287                           
  9288                           	psect	text26
  9289  1B7F                     __ptext26:	
  9290 ;; *************** function _TMR4_Initialize *****************
  9291 ;; Defined at:
  9292 ;;		line 64 in file "mcc_generated_files/tmr4.c"
  9293 ;; Parameters:    Size  Location     Type
  9294 ;;		None
  9295 ;; Auto vars:     Size  Location     Type
  9296 ;;		None
  9297 ;; Return value:  Size  Location     Type
  9298 ;;                  1    wreg      void 
  9299 ;; Registers used:
  9300 ;;		wreg, status,2, status,0, pclath, cstack
  9301 ;; Tracked objects:
  9302 ;;		On entry : 1F/1
  9303 ;;		On exit  : 1F/8
  9304 ;;		Unchanged: 0/0
  9305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9309 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9310 ;;Total ram usage:        0 bytes
  9311 ;; Hardware stack levels used:    1
  9312 ;; Hardware stack levels required when called:    6
  9313 ;; This function calls:
  9314 ;;		_TMR4_SetInterruptHandler
  9315 ;; This function is called by:
  9316 ;;		_SYSTEM_Initialize
  9317 ;; This function uses a non-reentrant model
  9318 ;;
  9319                           
  9320                           
  9321                           ;psect for function _TMR4_Initialize
  9322  1B7F                     _TMR4_Initialize:
  9323                           
  9324                           ;mcc_generated_files/tmr4.c: 69:     PR4 = 0x7C;
  9325                           
  9326                           ;incstack = 0
  9327                           ; Regs used in _TMR4_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9328  1B7F  307C               	movlw	124
  9329  1B80  0028               	movlb	8	; select bank8
  9330  1B81  0096               	movwf	22	;volatile
  9331                           
  9332                           ;mcc_generated_files/tmr4.c: 72:     TMR4 = 0x00;
  9333  1B82  0195               	clrf	21	;volatile
  9334                           
  9335                           ;mcc_generated_files/tmr4.c: 75:     PIR3bits.TMR4IF = 0;
  9336  1B83  0020               	movlb	0	; select bank0
  9337  1B84  1093               	bcf	19,1	;volatile
  9338                           
  9339                           ;mcc_generated_files/tmr4.c: 78:     PIE3bits.TMR4IE = 1;
  9340  1B85  0021               	movlb	1	; select bank1
  9341  1B86  1493               	bsf	19,1	;volatile
  9342                           
  9343                           ;mcc_generated_files/tmr4.c: 81:     TMR4_SetInterruptHandler(TMR4_DefaultInterruptHandl
      +                          er);
  9344  1B87  3000               	movlw	low _TMR4_DefaultInterruptHandler
  9345  1B88  00F0               	movwf	TMR4_SetInterruptHandler@InterruptHandler
  9346  1B89  3010               	movlw	high _TMR4_DefaultInterruptHandler
  9347  1B8A  00F1               	movwf	TMR4_SetInterruptHandler@InterruptHandler+1
  9348  1B8B  319A  226B         	fcall	_TMR4_SetInterruptHandler
  9349                           
  9350                           ;mcc_generated_files/tmr4.c: 84:     T4CON = 0x06;
  9351  1B8D  3006               	movlw	6
  9352  1B8E  0028               	movlb	8	; select bank8
  9353  1B8F  0097               	movwf	23	;volatile
  9354  1B90  0008               	return
  9355  1B91                     __end_of_TMR4_Initialize:
  9356                           
  9357                           	psect	text27
  9358  1A6B                     __ptext27:	
  9359 ;; *************** function _TMR4_SetInterruptHandler *****************
  9360 ;; Defined at:
  9361 ;;		line 132 in file "mcc_generated_files/tmr4.c"
  9362 ;; Parameters:    Size  Location     Type
  9363 ;;  InterruptHan    2    0[COMMON] PTR FTN()void 
  9364 ;;		 -> TMR4_DefaultInterruptHandler(1), TMR4_Wroking_Blink_AlarmLED_isr(1), 
  9365 ;; Auto vars:     Size  Location     Type
  9366 ;;		None
  9367 ;; Return value:  Size  Location     Type
  9368 ;;                  1    wreg      void 
  9369 ;; Registers used:
  9370 ;;		wreg
  9371 ;; Tracked objects:
  9372 ;;		On entry : 1D/3
  9373 ;;		On exit  : 1F/3
  9374 ;;		Unchanged: 0/0
  9375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9376 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9379 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9380 ;;Total ram usage:        2 bytes
  9381 ;; Hardware stack levels used:    1
  9382 ;; Hardware stack levels required when called:    5
  9383 ;; This function calls:
  9384 ;;		Nothing
  9385 ;; This function is called by:
  9386 ;;		_main
  9387 ;;		_TMR4_Initialize
  9388 ;; This function uses a non-reentrant model
  9389 ;;
  9390                           
  9391                           
  9392                           ;psect for function _TMR4_SetInterruptHandler
  9393  1A6B                     _TMR4_SetInterruptHandler:
  9394                           
  9395                           ;mcc_generated_files/tmr4.c: 133:     TMR4_InterruptHandler = InterruptHandler;
  9396                           
  9397                           ;incstack = 0
  9398                           ; Regs used in _TMR4_SetInterruptHandler: [wreg]
  9399  1A6B  0871               	movf	TMR4_SetInterruptHandler@InterruptHandler+1,w
  9400  1A6C  0023               	movlb	3	; select bank3
  9401  1A6D  00EB               	movwf	(_TMR4_InterruptHandler+1)^(0+384)
  9402  1A6E  0870               	movf	TMR4_SetInterruptHandler@InterruptHandler,w
  9403  1A6F  00EA               	movwf	_TMR4_InterruptHandler^(0+384)
  9404  1A70  0008               	return
  9405  1A71                     __end_of_TMR4_SetInterruptHandler:
  9406                           
  9407                           	psect	text28
  9408  1B09                     __ptext28:	
  9409 ;; *************** function _TMR2_Initialize *****************
  9410 ;; Defined at:
  9411 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  9412 ;; Parameters:    Size  Location     Type
  9413 ;;		None
  9414 ;; Auto vars:     Size  Location     Type
  9415 ;;		None
  9416 ;; Return value:  Size  Location     Type
  9417 ;;                  1    wreg      void 
  9418 ;; Registers used:
  9419 ;;		wreg, status,2, status,0, pclath, cstack
  9420 ;; Tracked objects:
  9421 ;;		On entry : 1F/8
  9422 ;;		On exit  : 1F/0
  9423 ;;		Unchanged: 0/0
  9424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9428 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9429 ;;Total ram usage:        0 bytes
  9430 ;; Hardware stack levels used:    1
  9431 ;; Hardware stack levels required when called:    6
  9432 ;; This function calls:
  9433 ;;		_TMR2_SetInterruptHandler
  9434 ;; This function is called by:
  9435 ;;		_SYSTEM_Initialize
  9436 ;; This function uses a non-reentrant model
  9437 ;;
  9438                           
  9439                           
  9440                           ;psect for function _TMR2_Initialize
  9441  1B09                     _TMR2_Initialize:
  9442                           
  9443                           ;mcc_generated_files/tmr2.c: 69:     PR2 = 0xC7;
  9444                           
  9445                           ;incstack = 0
  9446                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9447  1B09  30C7               	movlw	199
  9448  1B0A  0020               	movlb	0	; select bank0
  9449  1B0B  009B               	movwf	27	;volatile
  9450                           
  9451                           ;mcc_generated_files/tmr2.c: 72:     TMR2 = 0x00;
  9452  1B0C  019A               	clrf	26	;volatile
  9453                           
  9454                           ;mcc_generated_files/tmr2.c: 75:     PIR1bits.TMR2IF = 0;
  9455  1B0D  1091               	bcf	17,1	;volatile
  9456                           
  9457                           ;mcc_generated_files/tmr2.c: 78:     PIE1bits.TMR2IE = 1;
  9458  1B0E  0021               	movlb	1	; select bank1
  9459  1B0F  1491               	bsf	17,1	;volatile
  9460                           
  9461                           ;mcc_generated_files/tmr2.c: 81:     TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandl
      +                          er);
  9462  1B10  3028               	movlw	low _TMR2_DefaultInterruptHandler
  9463  1B11  00F0               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  9464  1B12  301A               	movlw	high _TMR2_DefaultInterruptHandler
  9465  1B13  00F1               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  9466  1B14  319A  2265         	fcall	_TMR2_SetInterruptHandler
  9467                           
  9468                           ;mcc_generated_files/tmr2.c: 84:     T2CON = 0x00;
  9469  1B16  0020               	movlb	0	; select bank0
  9470  1B17  019C               	clrf	28	;volatile
  9471  1B18  0008               	return
  9472  1B19                     __end_of_TMR2_Initialize:
  9473                           
  9474                           	psect	text29
  9475  1A65                     __ptext29:	
  9476 ;; *************** function _TMR2_SetInterruptHandler *****************
  9477 ;; Defined at:
  9478 ;;		line 132 in file "mcc_generated_files/tmr2.c"
  9479 ;; Parameters:    Size  Location     Type
  9480 ;;  InterruptHan    2    0[COMMON] PTR FTN()void 
  9481 ;;		 -> TMR2_Int_isr(1), TMR2_DefaultInterruptHandler(1), 
  9482 ;; Auto vars:     Size  Location     Type
  9483 ;;		None
  9484 ;; Return value:  Size  Location     Type
  9485 ;;                  1    wreg      void 
  9486 ;; Registers used:
  9487 ;;		wreg
  9488 ;; Tracked objects:
  9489 ;;		On entry : 1D/3
  9490 ;;		On exit  : 1F/3
  9491 ;;		Unchanged: 0/0
  9492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9493 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9496 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9497 ;;Total ram usage:        2 bytes
  9498 ;; Hardware stack levels used:    1
  9499 ;; Hardware stack levels required when called:    5
  9500 ;; This function calls:
  9501 ;;		Nothing
  9502 ;; This function is called by:
  9503 ;;		_TMR2_Initialize
  9504 ;;		_main
  9505 ;; This function uses a non-reentrant model
  9506 ;;
  9507                           
  9508                           
  9509                           ;psect for function _TMR2_SetInterruptHandler
  9510  1A65                     _TMR2_SetInterruptHandler:
  9511                           
  9512                           ;mcc_generated_files/tmr2.c: 133:     TMR2_InterruptHandler = InterruptHandler;
  9513                           
  9514                           ;incstack = 0
  9515                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  9516  1A65  0871               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
  9517  1A66  0023               	movlb	3	; select bank3
  9518  1A67  00ED               	movwf	(_TMR2_InterruptHandler+1)^(0+384)
  9519  1A68  0870               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
  9520  1A69  00EC               	movwf	_TMR2_InterruptHandler^(0+384)
  9521  1A6A  0008               	return
  9522  1A6B                     __end_of_TMR2_SetInterruptHandler:
  9523                           
  9524                           	psect	text30
  9525  1D12                     __ptext30:	
  9526 ;; *************** function _PIN_MANAGER_Initialize *****************
  9527 ;; Defined at:
  9528 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  9529 ;; Parameters:    Size  Location     Type
  9530 ;;		None
  9531 ;; Auto vars:     Size  Location     Type
  9532 ;;		None
  9533 ;; Return value:  Size  Location     Type
  9534 ;;                  1    wreg      void 
  9535 ;; Registers used:
  9536 ;;		wreg, status,2, status,0, pclath, cstack
  9537 ;; Tracked objects:
  9538 ;;		On entry : B1F/0
  9539 ;;		On exit  : 1F/3
  9540 ;;		Unchanged: 0/0
  9541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9545 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9546 ;;Total ram usage:        0 bytes
  9547 ;; Hardware stack levels used:    1
  9548 ;; Hardware stack levels required when called:    6
  9549 ;; This function calls:
  9550 ;;		_IOCAF2_SetInterruptHandler
  9551 ;; This function is called by:
  9552 ;;		_SYSTEM_Initialize
  9553 ;; This function uses a non-reentrant model
  9554 ;;
  9555                           
  9556                           
  9557                           ;psect for function _PIN_MANAGER_Initialize
  9558  1D12                     _PIN_MANAGER_Initialize:
  9559                           
  9560                           ;mcc_generated_files/pin_manager.c: 62:     LATA = 0x00;
  9561                           
  9562                           ;incstack = 0
  9563                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9564  1D12  0022               	movlb	2	; select bank2
  9565  1D13  018C               	clrf	12	;volatile
  9566                           
  9567                           ;mcc_generated_files/pin_manager.c: 63:     LATB = 0x00;
  9568  1D14  018D               	clrf	13	;volatile
  9569                           
  9570                           ;mcc_generated_files/pin_manager.c: 64:     LATC = 0x00;
  9571  1D15  018E               	clrf	14	;volatile
  9572                           
  9573                           ;mcc_generated_files/pin_manager.c: 69:     TRISA = 0x2F;
  9574  1D16  302F               	movlw	47
  9575  1D17  0021               	movlb	1	; select bank1
  9576  1D18  008C               	movwf	12	;volatile
  9577                           
  9578                           ;mcc_generated_files/pin_manager.c: 70:     TRISB = 0x70;
  9579  1D19  3070               	movlw	112
  9580  1D1A  008D               	movwf	13	;volatile
  9581                           
  9582                           ;mcc_generated_files/pin_manager.c: 71:     TRISC = 0x03;
  9583  1D1B  3003               	movlw	3
  9584  1D1C  008E               	movwf	14	;volatile
  9585                           
  9586                           ;mcc_generated_files/pin_manager.c: 76:     ANSELC = 0x03;
  9587  1D1D  3003               	movlw	3
  9588  1D1E  0023               	movlb	3	; select bank3
  9589  1D1F  008E               	movwf	14	;volatile
  9590                           
  9591                           ;mcc_generated_files/pin_manager.c: 77:     ANSELB = 0x10;
  9592  1D20  3010               	movlw	16
  9593  1D21  008D               	movwf	13	;volatile
  9594                           
  9595                           ;mcc_generated_files/pin_manager.c: 78:     ANSELA = 0x03;
  9596  1D22  3003               	movlw	3
  9597  1D23  008C               	movwf	12	;volatile
  9598                           
  9599                           ;mcc_generated_files/pin_manager.c: 83:     WPUB = 0x00;
  9600  1D24  0024               	movlb	4	; select bank4
  9601  1D25  018D               	clrf	13	;volatile
  9602                           
  9603                           ;mcc_generated_files/pin_manager.c: 84:     WPUA = 0x04;
  9604  1D26  3004               	movlw	4
  9605  1D27  008C               	movwf	12	;volatile
  9606                           
  9607                           ;mcc_generated_files/pin_manager.c: 85:     WPUC = 0x00;
  9608  1D28  018E               	clrf	14	;volatile
  9609                           
  9610                           ;mcc_generated_files/pin_manager.c: 86:     OPTION_REGbits.nWPUEN = 0;
  9611  1D29  0021               	movlb	1	; select bank1
  9612  1D2A  1395               	bcf	21,7	;volatile
  9613                           
  9614                           ;mcc_generated_files/pin_manager.c: 92:     APFCON0 = 0x00;
  9615  1D2B  0022               	movlb	2	; select bank2
  9616  1D2C  019D               	clrf	29	;volatile
  9617                           
  9618                           ;mcc_generated_files/pin_manager.c: 93:     APFCON1 = 0x00;
  9619  1D2D  019E               	clrf	30	;volatile
  9620                           
  9621                           ;mcc_generated_files/pin_manager.c: 99:     IOCAFbits.IOCAF2 = 0;
  9622  1D2E  0027               	movlb	7	; select bank7
  9623  1D2F  1113               	bcf	19,2	;volatile
  9624                           
  9625                           ;mcc_generated_files/pin_manager.c: 101:     IOCANbits.IOCAN2 = 0;
  9626  1D30  1112               	bcf	18,2	;volatile
  9627                           
  9628                           ;mcc_generated_files/pin_manager.c: 103:     IOCAPbits.IOCAP2 = 1;
  9629  1D31  1511               	bsf	17,2	;volatile
  9630                           
  9631                           ;mcc_generated_files/pin_manager.c: 108:     IOCAF2_SetInterruptHandler(IOCAF2_DefaultIn
      +                          terruptHandler);
  9632  1D32  3027               	movlw	low _IOCAF2_DefaultInterruptHandler
  9633  1D33  00F0               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler
  9634  1D34  301A               	movlw	high _IOCAF2_DefaultInterruptHandler
  9635  1D35  00F1               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler+1
  9636  1D36  319A  225F         	fcall	_IOCAF2_SetInterruptHandler
  9637                           
  9638                           ;mcc_generated_files/pin_manager.c: 111:     INTCONbits.IOCIE = 1;
  9639  1D38  158B               	bsf	11,3	;volatile
  9640  1D39  0008               	return
  9641  1D3A                     __end_of_PIN_MANAGER_Initialize:
  9642                           
  9643                           	psect	text31
  9644  1A5F                     __ptext31:	
  9645 ;; *************** function _IOCAF2_SetInterruptHandler *****************
  9646 ;; Defined at:
  9647 ;;		line 142 in file "mcc_generated_files/pin_manager.c"
  9648 ;; Parameters:    Size  Location     Type
  9649 ;;  InterruptHan    2    0[COMMON] PTR FTN()void 
  9650 ;;		 -> Zero_Detection_isr(1), IOCAF2_DefaultInterruptHandler(1), 
  9651 ;; Auto vars:     Size  Location     Type
  9652 ;;		None
  9653 ;; Return value:  Size  Location     Type
  9654 ;;                  1    wreg      void 
  9655 ;; Registers used:
  9656 ;;		wreg
  9657 ;; Tracked objects:
  9658 ;;		On entry : 1B/3
  9659 ;;		On exit  : 1F/3
  9660 ;;		Unchanged: 0/0
  9661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9662 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9665 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9666 ;;Total ram usage:        2 bytes
  9667 ;; Hardware stack levels used:    1
  9668 ;; Hardware stack levels required when called:    5
  9669 ;; This function calls:
  9670 ;;		Nothing
  9671 ;; This function is called by:
  9672 ;;		_PIN_MANAGER_Initialize
  9673 ;;		_main
  9674 ;; This function uses a non-reentrant model
  9675 ;;
  9676                           
  9677                           
  9678                           ;psect for function _IOCAF2_SetInterruptHandler
  9679  1A5F                     _IOCAF2_SetInterruptHandler:
  9680                           
  9681                           ;mcc_generated_files/pin_manager.c: 143:     IOCAF2_InterruptHandler = InterruptHandler;
  9682                           
  9683                           ;incstack = 0
  9684                           ; Regs used in _IOCAF2_SetInterruptHandler: [wreg]
  9685  1A5F  0871               	movf	IOCAF2_SetInterruptHandler@InterruptHandler+1,w
  9686  1A60  0023               	movlb	3	; select bank3
  9687  1A61  00EF               	movwf	(_IOCAF2_InterruptHandler+1)^(0+384)
  9688  1A62  0870               	movf	IOCAF2_SetInterruptHandler@InterruptHandler,w
  9689  1A63  00EE               	movwf	_IOCAF2_InterruptHandler^(0+384)
  9690  1A64  0008               	return
  9691  1A65                     __end_of_IOCAF2_SetInterruptHandler:
  9692                           
  9693                           	psect	text32
  9694  1A84                     __ptext32:	
  9695 ;; *************** function _OSCILLATOR_Initialize *****************
  9696 ;; Defined at:
  9697 ;;		line 63 in file "mcc_generated_files/mcc.c"
  9698 ;; Parameters:    Size  Location     Type
  9699 ;;		None
  9700 ;; Auto vars:     Size  Location     Type
  9701 ;;		None
  9702 ;; Return value:  Size  Location     Type
  9703 ;;                  1    wreg      void 
  9704 ;; Registers used:
  9705 ;;		wreg, status,2
  9706 ;; Tracked objects:
  9707 ;;		On entry : 1F/3
  9708 ;;		On exit  : 1F/2
  9709 ;;		Unchanged: 0/0
  9710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9714 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9715 ;;Total ram usage:        0 bytes
  9716 ;; Hardware stack levels used:    1
  9717 ;; Hardware stack levels required when called:    5
  9718 ;; This function calls:
  9719 ;;		Nothing
  9720 ;; This function is called by:
  9721 ;;		_SYSTEM_Initialize
  9722 ;; This function uses a non-reentrant model
  9723 ;;
  9724                           
  9725                           
  9726                           ;psect for function _OSCILLATOR_Initialize
  9727  1A84                     _OSCILLATOR_Initialize:
  9728                           
  9729                           ;mcc_generated_files/mcc.c: 66:     OSCCON = 0x70;
  9730                           
  9731                           ;incstack = 0
  9732                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  9733  1A84  3070               	movlw	112
  9734  1A85  0021               	movlb	1	; select bank1
  9735  1A86  0099               	movwf	25	;volatile
  9736                           
  9737                           ;mcc_generated_files/mcc.c: 68:     OSCTUNE = 0x00;
  9738  1A87  0198               	clrf	24	;volatile
  9739                           
  9740                           ;mcc_generated_files/mcc.c: 70:     BORCON = 0x00;
  9741  1A88  0022               	movlb	2	; select bank2
  9742  1A89  0196               	clrf	22	;volatile
  9743  1A8A  0008               	return
  9744  1A8B                     __end_of_OSCILLATOR_Initialize:
  9745                           
  9746                           	psect	text33
  9747  1AE2                     __ptext33:	
  9748 ;; *************** function _MTOUCH_Initialize *****************
  9749 ;; Defined at:
  9750 ;;		line 81 in file "mcc_generated_files/mtouch/mtouch.c"
  9751 ;; Parameters:    Size  Location     Type
  9752 ;;		None
  9753 ;; Auto vars:     Size  Location     Type
  9754 ;;		None
  9755 ;; Return value:  Size  Location     Type
  9756 ;;                  1    wreg      void 
  9757 ;; Registers used:
  9758 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9759 ;; Tracked objects:
  9760 ;;		On entry : 1F/3
  9761 ;;		On exit  : 1F/1
  9762 ;;		Unchanged: 0/0
  9763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9767 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9768 ;;Total ram usage:        0 bytes
  9769 ;; Hardware stack levels used:    1
  9770 ;; Hardware stack levels required when called:    9
  9771 ;; This function calls:
  9772 ;;		_MTOUCH_Button_InitializeAll
  9773 ;;		_MTOUCH_Sensor_InitializeAll
  9774 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  9775 ;;		_MTOUCH_Sensor_Scan_Initialize
  9776 ;; This function is called by:
  9777 ;;		_SYSTEM_Initialize
  9778 ;; This function uses a non-reentrant model
  9779 ;;
  9780                           
  9781                           
  9782                           ;psect for function _MTOUCH_Initialize
  9783  1AE2                     _MTOUCH_Initialize:
  9784                           
  9785                           ;mcc_generated_files/mtouch/mtouch.c: 83:     MTOUCH_Sensor_InitializeAll();
  9786                           
  9787                           ;incstack = 0
  9788                           ; Regs used in _MTOUCH_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9789  1AE2  319A  22FB  319A   	fcall	_MTOUCH_Sensor_InitializeAll
  9790                           
  9791                           ;mcc_generated_files/mtouch/mtouch.c: 84:     MTOUCH_Button_InitializeAll();
  9792  1AE5  319C  2416  319A   	fcall	_MTOUCH_Button_InitializeAll
  9793                           
  9794                           ;mcc_generated_files/mtouch/mtouch.c: 85:     MTOUCH_Sensor_Sampled_ResetAll();
  9795  1AE8  319B  23A3  319A   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  9796                           
  9797                           ;mcc_generated_files/mtouch/mtouch.c: 86:     MTOUCH_Sensor_Scan_Initialize();
  9798  1AEB  319A  2248         	fcall	_MTOUCH_Sensor_Scan_Initialize
  9799  1AED  0008               	return
  9800  1AEE                     __end_of_MTOUCH_Initialize:
  9801                           
  9802                           	psect	text34
  9803  1A48                     __ptext34:	
  9804 ;; *************** function _MTOUCH_Sensor_Scan_Initialize *****************
  9805 ;; Defined at:
  9806 ;;		line 172 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9807 ;; Parameters:    Size  Location     Type
  9808 ;;		None
  9809 ;; Auto vars:     Size  Location     Type
  9810 ;;		None
  9811 ;; Return value:  Size  Location     Type
  9812 ;;                  1    wreg      void 
  9813 ;; Registers used:
  9814 ;;		wreg, status,2
  9815 ;; Tracked objects:
  9816 ;;		On entry : 0/3
  9817 ;;		On exit  : 1F/1
  9818 ;;		Unchanged: 0/0
  9819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9823 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9824 ;;Total ram usage:        0 bytes
  9825 ;; Hardware stack levels used:    1
  9826 ;; Hardware stack levels required when called:    5
  9827 ;; This function calls:
  9828 ;;		Nothing
  9829 ;; This function is called by:
  9830 ;;		_MTOUCH_Initialize
  9831 ;; This function uses a non-reentrant model
  9832 ;;
  9833                           
  9834                           
  9835                           ;psect for function _MTOUCH_Sensor_Scan_Initialize
  9836  1A48                     _MTOUCH_Sensor_Scan_Initialize:
  9837                           
  9838                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 175:     ADCON0 = (uint8_t)0;
  9839                           
  9840                           ;incstack = 0
  9841                           ; Regs used in _MTOUCH_Sensor_Scan_Initialize: [wreg+status,2]
  9842  1A48  0021               	movlb	1	; select bank1
  9843  1A49  019D               	clrf	29	;volatile
  9844                           
  9845                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 176:     ADCON1 = (uint8_t)( 0x1<<7 | 0x1<<
      +                          4 | 0x0 );
  9846  1A4A  3090               	movlw	144
  9847  1A4B  009E               	movwf	30	;volatile
  9848  1A4C  0008               	return
  9849  1A4D                     __end_of_MTOUCH_Sensor_Scan_Initialize:
  9850                           
  9851                           	psect	text35
  9852  1BA3                     __ptext35:	
  9853 ;; *************** function _MTOUCH_Sensor_Sampled_ResetAll *****************
  9854 ;; Defined at:
  9855 ;;		line 547 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9856 ;; Parameters:    Size  Location     Type
  9857 ;;		None
  9858 ;; Auto vars:     Size  Location     Type
  9859 ;;  sensor          1    2[COMMON] PTR struct .
  9860 ;;		 -> mtouch_sensor(18), 
  9861 ;; Return value:  Size  Location     Type
  9862 ;;                  1    wreg      void 
  9863 ;; Registers used:
  9864 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9865 ;; Tracked objects:
  9866 ;;		On entry : 0/3
  9867 ;;		On exit  : 0/0
  9868 ;;		Unchanged: 0/0
  9869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9871 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9872 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9873 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9874 ;;Total ram usage:        2 bytes
  9875 ;; Hardware stack levels used:    1
  9876 ;; Hardware stack levels required when called:    6
  9877 ;; This function calls:
  9878 ;;		_Sensor_Sampled_Reset
  9879 ;; This function is called by:
  9880 ;;		_MTOUCH_Initialize
  9881 ;; This function uses a non-reentrant model
  9882 ;;
  9883                           
  9884                           
  9885                           ;psect for function _MTOUCH_Sensor_Sampled_ResetAll
  9886  1BA3                     _MTOUCH_Sensor_Sampled_ResetAll:
  9887                           
  9888                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 549:     mtouch_sensor_t* sensor;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 550:     for(sensor = &mtouch_sensor[0];sensor<= &mto
      +                          uch_sensor[(2u)-1];sensor++)
  9889                           
  9890                           ;incstack = 0
  9891                           ; Regs used in _MTOUCH_Sensor_Sampled_ResetAll: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
  9892  1BA3  3054               	movlw	(low (_mtouch_sensor| (0+512)))& (0+255)
  9893  1BA4  00F1               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  9894  1BA5  0871               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  9895  1BA6  00F2               	movwf	MTOUCH_Sensor_Sampled_ResetAll@sensor
  9896  1BA7                     L10:
  9897  1BA7  305D               	movlw	(low ((_mtouch_sensor| (0+512)+9)))& (0+255)
  9898  1BA8  00F1               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  9899  1BA9  0872               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  9900  1BAA  0271               	subwf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  9901  1BAB  1C03               	btfss	3,0
  9902  1BAC  0008               	return
  9903                           
  9904                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 551:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 552:         Sensor_Sampled_Reset(sensor);
  9905  1BAD  0872               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  9906  1BAE  319A  229B  319B   	fcall	_Sensor_Sampled_Reset
  9907                           
  9908                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 553:     }
  9909  1BB1  3009               	movlw	9
  9910  1BB2  00F1               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  9911  1BB3  0871               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  9912  1BB4  07F2               	addwf	MTOUCH_Sensor_Sampled_ResetAll@sensor,f
  9913  1BB5  2BA7               	goto	L10
  9914  1BB6                     __end_of_MTOUCH_Sensor_Sampled_ResetAll:
  9915                           
  9916                           	psect	text36
  9917  1AFB                     __ptext36:	
  9918 ;; *************** function _MTOUCH_Sensor_InitializeAll *****************
  9919 ;; Defined at:
  9920 ;;		line 157 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9921 ;; Parameters:    Size  Location     Type
  9922 ;;		None
  9923 ;; Auto vars:     Size  Location     Type
  9924 ;;  sensor          1    9[COMMON] enum E2661
  9925 ;; Return value:  Size  Location     Type
  9926 ;;                  1    wreg      void 
  9927 ;; Registers used:
  9928 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9929 ;; Tracked objects:
  9930 ;;		On entry : 1F/3
  9931 ;;		On exit  : 0/0
  9932 ;;		Unchanged: 0/0
  9933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9935 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9936 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9937 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9938 ;;Total ram usage:        2 bytes
  9939 ;; Hardware stack levels used:    1
  9940 ;; Hardware stack levels required when called:    8
  9941 ;; This function calls:
  9942 ;;		_MTOUCH_Sensor_Initialize
  9943 ;; This function is called by:
  9944 ;;		_MTOUCH_Initialize
  9945 ;; This function uses a non-reentrant model
  9946 ;;
  9947                           
  9948                           
  9949                           ;psect for function _MTOUCH_Sensor_InitializeAll
  9950  1AFB                     _MTOUCH_Sensor_InitializeAll:
  9951                           
  9952                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 159:     enum mtouch_sensor_names sensor;;m
      +                          cc_generated_files/mtouch/mtouch_sensor.c: 160:     for (sensor = 0; sensor < (2u); sens
      +                          or++)
  9953                           
  9954                           ;incstack = 0
  9955                           ; Regs used in _MTOUCH_Sensor_InitializeAll: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  9956  1AFB  01F9               	clrf	MTOUCH_Sensor_InitializeAll@sensor
  9957  1AFC                     l4977:
  9958                           
  9959                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 161:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 162:         MTOUCH_Sensor_Initialize(sensor);
  9960  1AFC  0879               	movf	MTOUCH_Sensor_InitializeAll@sensor,w
  9961  1AFD  319B  235C  319A   	fcall	_MTOUCH_Sensor_Initialize
  9962                           
  9963                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 163:     }
  9964  1B00  3001               	movlw	1
  9965  1B01  00F8               	movwf	??_MTOUCH_Sensor_InitializeAll
  9966  1B02  0878               	movf	??_MTOUCH_Sensor_InitializeAll,w
  9967  1B03  07F9               	addwf	MTOUCH_Sensor_InitializeAll@sensor,f
  9968  1B04  3002               	movlw	2
  9969  1B05  0279               	subwf	MTOUCH_Sensor_InitializeAll@sensor,w
  9970  1B06  1803               	btfsc	3,0
  9971  1B07  0008               	return
  9972  1B08  2AFC               	goto	l4977
  9973  1B09                     __end_of_MTOUCH_Sensor_InitializeAll:
  9974                           
  9975                           	psect	text37
  9976  1B5C                     __ptext37:	
  9977 ;; *************** function _MTOUCH_Sensor_Initialize *****************
  9978 ;; Defined at:
  9979 ;;		line 143 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9980 ;; Parameters:    Size  Location     Type
  9981 ;;  sensor          1    wreg     enum E2661
  9982 ;; Auto vars:     Size  Location     Type
  9983 ;;  sensor          1    7[COMMON] enum E2661
  9984 ;; Return value:  Size  Location     Type
  9985 ;;                  1    wreg      enum E2664
  9986 ;; Registers used:
  9987 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9988 ;; Tracked objects:
  9989 ;;		On entry : 0/3
  9990 ;;		On exit  : 0/0
  9991 ;;		Unchanged: 0/0
  9992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9994 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9995 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9996 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9997 ;;Total ram usage:        2 bytes
  9998 ;; Hardware stack levels used:    1
  9999 ;; Hardware stack levels required when called:    7
 10000 ;; This function calls:
 10001 ;;		_MTOUCH_Sensor_Enable
 10002 ;;		_Sensor_Sampled_Reset
 10003 ;;		___bmul
 10004 ;; This function is called by:
 10005 ;;		_MTOUCH_Sensor_InitializeAll
 10006 ;; This function uses a non-reentrant model
 10007 ;;
 10008                           
 10009                           
 10010                           ;psect for function _MTOUCH_Sensor_Initialize
 10011  1B5C                     _MTOUCH_Sensor_Initialize:
 10012                           
 10013                           ;incstack = 0
 10014                           ; Regs used in _MTOUCH_Sensor_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 10015                           ;MTOUCH_Sensor_Initialize@sensor stored from wreg
 10016  1B5C  00F7               	movwf	MTOUCH_Sensor_Initialize@sensor
 10017                           
 10018                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 143: enum mtouch_sensor_error MTOUCH_Sensor
      +                          _Initialize(enum mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c:
      +                           144: {;mcc_generated_files/mtouch/mtouch_sensor.c: 145:     MTOUCH_Sensor_Enable(sensor
      +                          );
 10019  1B5D  0877               	movf	MTOUCH_Sensor_Initialize@sensor,w
 10020  1B5E  319B  236D  319B   	fcall	_MTOUCH_Sensor_Enable
 10021                           
 10022                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 146:     Sensor_Sampled_Reset(&mtouch_senso
      +                          r[sensor]);
 10023  1B61  3009               	movlw	9
 10024  1B62  00F6               	movwf	??_MTOUCH_Sensor_Initialize
 10025  1B63  0876               	movf	??_MTOUCH_Sensor_Initialize,w
 10026  1B64  00F0               	movwf	___bmul@multiplicand
 10027  1B65  0877               	movf	MTOUCH_Sensor_Initialize@sensor,w
 10028  1B66  319B  234B  319B   	fcall	___bmul
 10029  1B69  3E54               	addlw	(low (_mtouch_sensor| (0+512)))& (0+255)
 10030  1B6A  319A  229B         	fcall	_Sensor_Sampled_Reset
 10031  1B6C  0008               	return
 10032  1B6D                     __end_of_MTOUCH_Sensor_Initialize:
 10033                           
 10034                           	psect	text38
 10035  1A9B                     __ptext38:	
 10036 ;; *************** function _Sensor_Sampled_Reset *****************
 10037 ;; Defined at:
 10038 ;;		line 564 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10039 ;; Parameters:    Size  Location     Type
 10040 ;;  sensor          1    wreg     PTR struct .
 10041 ;;		 -> mtouch_sensor(18), 
 10042 ;; Auto vars:     Size  Location     Type
 10043 ;;  sensor          1    0[COMMON] PTR struct .
 10044 ;;		 -> mtouch_sensor(18), 
 10045 ;; Return value:  Size  Location     Type
 10046 ;;                  1    wreg      void 
 10047 ;; Registers used:
 10048 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10049 ;; Tracked objects:
 10050 ;;		On entry : 0/3
 10051 ;;		On exit  : 0/0
 10052 ;;		Unchanged: 0/0
 10053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10055 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10057 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10058 ;;Total ram usage:        1 bytes
 10059 ;; Hardware stack levels used:    1
 10060 ;; Hardware stack levels required when called:    5
 10061 ;; This function calls:
 10062 ;;		Nothing
 10063 ;; This function is called by:
 10064 ;;		_MTOUCH_Sensor_Initialize
 10065 ;;		_MTOUCH_Sensor_Sampled_ResetAll
 10066 ;; This function uses a non-reentrant model
 10067 ;;
 10068                           
 10069                           
 10070                           ;psect for function _Sensor_Sampled_Reset
 10071  1A9B                     _Sensor_Sampled_Reset:
 10072                           
 10073                           ;incstack = 0
 10074                           ; Regs used in _Sensor_Sampled_Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
 10075                           ;Sensor_Sampled_Reset@sensor stored from wreg
 10076  1A9B  00F0               	movwf	Sensor_Sampled_Reset@sensor
 10077                           
 10078                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 564: static __attribute__((inline)) void Se
      +                          nsor_Sampled_Reset(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          565: {;mcc_generated_files/mtouch/mtouch_sensor.c: 566:     sensor->sampled = 0;
 10079  1A9C  0870               	movf	Sensor_Sampled_Reset@sensor,w
 10080  1A9D  3E08               	addlw	8
 10081  1A9E  0086               	movwf	6
 10082  1A9F  3002               	movlw	2	; select bank4/5
 10083  1AA0  0087               	movwf	7
 10084  1AA1  1081               	bcf	1,1
 10085  1AA2  0008               	return
 10086  1AA3                     __end_of_Sensor_Sampled_Reset:
 10087                           
 10088                           	psect	text39
 10089  1B6D                     __ptext39:	
 10090 ;; *************** function _MTOUCH_Sensor_Enable *****************
 10091 ;; Defined at:
 10092 ;;		line 481 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10093 ;; Parameters:    Size  Location     Type
 10094 ;;  sensor          1    wreg     enum E2661
 10095 ;; Auto vars:     Size  Location     Type
 10096 ;;  sensor          1    5[COMMON] enum E2661
 10097 ;; Return value:  Size  Location     Type
 10098 ;;                  1    wreg      void 
 10099 ;; Registers used:
 10100 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10101 ;; Tracked objects:
 10102 ;;		On entry : 0/3
 10103 ;;		On exit  : 0/0
 10104 ;;		Unchanged: 0/0
 10105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10107 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10108 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10109 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10110 ;;Total ram usage:        2 bytes
 10111 ;; Hardware stack levels used:    1
 10112 ;; Hardware stack levels required when called:    6
 10113 ;; This function calls:
 10114 ;;		___bmul
 10115 ;; This function is called by:
 10116 ;;		_MTOUCH_Sensor_Initialize
 10117 ;; This function uses a non-reentrant model
 10118 ;;
 10119                           
 10120                           
 10121                           ;psect for function _MTOUCH_Sensor_Enable
 10122  1B6D                     _MTOUCH_Sensor_Enable:
 10123                           
 10124                           ;incstack = 0
 10125                           ; Regs used in _MTOUCH_Sensor_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10126                           ;MTOUCH_Sensor_Enable@sensor stored from wreg
 10127  1B6D  00F5               	movwf	MTOUCH_Sensor_Enable@sensor
 10128                           
 10129                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 481: void MTOUCH_Sensor_Enable(enum mtouch_
      +                          sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 482: {;mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 483:     if(sensor < (2u))
 10130  1B6E  3002               	movlw	2
 10131  1B6F  0275               	subwf	MTOUCH_Sensor_Enable@sensor,w
 10132  1B70  1803               	skipnc
 10133  1B71  0008               	return
 10134                           
 10135                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 484:         mtouch_sensor[sensor].enabled 
      +                          = 1;
 10136  1B72  3009               	movlw	9
 10137  1B73  00F4               	movwf	??_MTOUCH_Sensor_Enable
 10138  1B74  0874               	movf	??_MTOUCH_Sensor_Enable,w
 10139  1B75  00F0               	movwf	___bmul@multiplicand
 10140  1B76  0875               	movf	MTOUCH_Sensor_Enable@sensor,w
 10141  1B77  319B  234B         	fcall	___bmul
 10142  1B79  3E5C               	addlw	(low ((_mtouch_sensor| (0+512)+8)))& (0+255)
 10143  1B7A  0086               	movwf	6
 10144  1B7B  3002               	movlw	2	; select bank4/5
 10145  1B7C  0087               	movwf	7
 10146  1B7D  1401               	bsf	1,0
 10147  1B7E  0008               	return
 10148  1B7F                     __end_of_MTOUCH_Sensor_Enable:
 10149                           
 10150                           	psect	text40
 10151  1B4B                     __ptext40:	
 10152 ;; *************** function ___bmul *****************
 10153 ;; Defined at:
 10154 ;;		line 4 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/Umul8.c"
 10155 ;; Parameters:    Size  Location     Type
 10156 ;;  multiplier      1    wreg     unsigned char 
 10157 ;;  multiplicand    1    0[COMMON] unsigned char 
 10158 ;; Auto vars:     Size  Location     Type
 10159 ;;  multiplier      1    3[COMMON] unsigned char 
 10160 ;;  product         1    2[COMMON] unsigned char 
 10161 ;; Return value:  Size  Location     Type
 10162 ;;                  1    wreg      unsigned char 
 10163 ;; Registers used:
 10164 ;;		wreg, status,2, status,0
 10165 ;; Tracked objects:
 10166 ;;		On entry : 0/3
 10167 ;;		On exit  : 0/0
 10168 ;;		Unchanged: 0/0
 10169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10170 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10171 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10172 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10173 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10174 ;;Total ram usage:        4 bytes
 10175 ;; Hardware stack levels used:    1
 10176 ;; Hardware stack levels required when called:    5
 10177 ;; This function calls:
 10178 ;;		Nothing
 10179 ;; This function is called by:
 10180 ;;		_MTOUCH_Sensor_Initialize
 10181 ;;		_MTOUCH_Sensor_Enable
 10182 ;;		_MTOUCH_Sensor_RawSample_Get
 10183 ;; This function uses a non-reentrant model
 10184 ;;
 10185                           
 10186                           
 10187                           ;psect for function ___bmul
 10188  1B4B                     ___bmul:
 10189                           
 10190                           ;incstack = 0
 10191                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 10192                           ;___bmul@multiplier stored from wreg
 10193  1B4B  00F3               	movwf	___bmul@multiplier
 10194  1B4C  01F2               	clrf	___bmul@product
 10195  1B4D                     l3783:
 10196  1B4D  1C73               	btfss	___bmul@multiplier,0
 10197  1B4E  2B53               	goto	l3787
 10198  1B4F  0870               	movf	___bmul@multiplicand,w
 10199  1B50  00F1               	movwf	??___bmul
 10200  1B51  0871               	movf	??___bmul,w
 10201  1B52  07F2               	addwf	___bmul@product,f
 10202  1B53                     l3787:
 10203  1B53  1003               	clrc
 10204  1B54  0DF0               	rlf	___bmul@multiplicand,f
 10205  1B55  1003               	clrc
 10206  1B56  0CF3               	rrf	___bmul@multiplier,f
 10207  1B57  0873               	movf	___bmul@multiplier,w
 10208  1B58  1D03               	btfss	3,2
 10209  1B59  2B4D               	goto	l3783
 10210  1B5A  0872               	movf	___bmul@product,w
 10211  1B5B  0008               	return
 10212  1B5C                     __end_of___bmul:
 10213                           
 10214                           	psect	text41
 10215  1C16                     __ptext41:	
 10216 ;; *************** function _MTOUCH_Button_InitializeAll *****************
 10217 ;; Defined at:
 10218 ;;		line 163 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10219 ;; Parameters:    Size  Location     Type
 10220 ;;		None
 10221 ;; Auto vars:     Size  Location     Type
 10222 ;;  button          1   11[COMMON] enum E2819
 10223 ;; Return value:  Size  Location     Type
 10224 ;;                  1    wreg      void 
 10225 ;; Registers used:
 10226 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10227 ;; Tracked objects:
 10228 ;;		On entry : 0/3
 10229 ;;		On exit  : 0/0
 10230 ;;		Unchanged: 0/0
 10231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10233 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10234 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10235 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10236 ;;Total ram usage:        2 bytes
 10237 ;; Hardware stack levels used:    1
 10238 ;; Hardware stack levels required when called:    7
 10239 ;; This function calls:
 10240 ;;		_MTOUCH_Button_Initialize
 10241 ;;		_memcpy
 10242 ;; This function is called by:
 10243 ;;		_MTOUCH_Initialize
 10244 ;; This function uses a non-reentrant model
 10245 ;;
 10246                           
 10247                           
 10248                           ;psect for function _MTOUCH_Button_InitializeAll
 10249  1C16                     _MTOUCH_Button_InitializeAll:
 10250                           
 10251                           ;mcc_generated_files/mtouch/mtouch_button.c: 165:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 167:     memcpy(mtouch_button,mtouch_button_i
      +                          nit,sizeof(mtouch_button_init));
 10252                           
 10253                           ;incstack = 0
 10254                           ; Regs used in _MTOUCH_Button_InitializeAll: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10255  1C16  3000               	movlw	low (_mtouch_button_init| (0+32768))
 10256  1C17  00F0               	movwf	memcpy@s1
 10257  1C18  3098               	movlw	high (_mtouch_button_init| (0+32768))
 10258  1C19  00F1               	movwf	memcpy@s1+1
 10259  1C1A  3020               	movlw	32
 10260  1C1B  00F2               	movwf	memcpy@n
 10261  1C1C  3000               	movlw	0
 10262  1C1D  00F3               	movwf	memcpy@n+1
 10263  1C1E  3020               	movlw	(low (_mtouch_button| (0+512)))& (0+255)
 10264  1C1F  319D  253A  319C   	fcall	_memcpy
 10265                           
 10266                           ;mcc_generated_files/mtouch/mtouch_button.c: 169:     for (button = 0; button < 2u; butt
      +                          on++)
 10267  1C22  01FB               	clrf	MTOUCH_Button_InitializeAll@button
 10268  1C23                     l5005:
 10269                           
 10270                           ;mcc_generated_files/mtouch/mtouch_button.c: 170:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 171:         MTOUCH_Button_Initialize(button);
 10271  1C23  087B               	movf	MTOUCH_Button_InitializeAll@button,w
 10272  1C24  319D  25BD  319C   	fcall	_MTOUCH_Button_Initialize
 10273                           
 10274                           ;mcc_generated_files/mtouch/mtouch_button.c: 172:     }
 10275  1C27  3001               	movlw	1
 10276  1C28  00FA               	movwf	??_MTOUCH_Button_InitializeAll
 10277  1C29  087A               	movf	??_MTOUCH_Button_InitializeAll,w
 10278  1C2A  07FB               	addwf	MTOUCH_Button_InitializeAll@button,f
 10279  1C2B  3002               	movlw	2
 10280  1C2C  027B               	subwf	MTOUCH_Button_InitializeAll@button,w
 10281  1C2D  1803               	btfsc	3,0
 10282  1C2E  0008               	return
 10283  1C2F  2C23               	goto	l5005
 10284  1C30                     __end_of_MTOUCH_Button_InitializeAll:
 10285                           
 10286                           	psect	text42
 10287  1D3A                     __ptext42:	
 10288 ;; *************** function _memcpy *****************
 10289 ;; Defined at:
 10290 ;;		line 4 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/memcpy.c"
 10291 ;; Parameters:    Size  Location     Type
 10292 ;;  d1              1    wreg     PTR void 
 10293 ;;		 -> mtouch_button(32), 
 10294 ;;  s1              2    0[COMMON] PTR const void 
 10295 ;;		 -> mtouch_button_init(32), 
 10296 ;;  n               2    2[COMMON] unsigned int 
 10297 ;; Auto vars:     Size  Location     Type
 10298 ;;  d1              1    8[COMMON] PTR void 
 10299 ;;		 -> mtouch_button(32), 
 10300 ;;  s               2    5[COMMON] PTR const unsigned char 
 10301 ;;		 -> mtouch_button_init(32), 
 10302 ;;  d               1    9[COMMON] PTR unsigned char 
 10303 ;;		 -> mtouch_button(32), 
 10304 ;;  tmp             1    7[COMMON] unsigned char 
 10305 ;; Return value:  Size  Location     Type
 10306 ;;                  1    wreg      PTR void 
 10307 ;; Registers used:
 10308 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 10309 ;; Tracked objects:
 10310 ;;		On entry : 0/3
 10311 ;;		On exit  : 0/0
 10312 ;;		Unchanged: 0/0
 10313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10314 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10315 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10316 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10317 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10318 ;;Total ram usage:       10 bytes
 10319 ;; Hardware stack levels used:    1
 10320 ;; Hardware stack levels required when called:    5
 10321 ;; This function calls:
 10322 ;;		Nothing
 10323 ;; This function is called by:
 10324 ;;		_MTOUCH_Button_InitializeAll
 10325 ;; This function uses a non-reentrant model
 10326 ;;
 10327                           
 10328                           
 10329                           ;psect for function _memcpy
 10330  1D3A                     _memcpy:
 10331                           
 10332                           ;incstack = 0
 10333                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0+pclath]
 10334                           ;memcpy@d1 stored from wreg
 10335  1D3A  00F8               	movwf	memcpy@d1
 10336  1D3B  0871               	movf	memcpy@s1+1,w
 10337  1D3C  00F6               	movwf	memcpy@s+1
 10338  1D3D  0870               	movf	memcpy@s1,w
 10339  1D3E  00F5               	movwf	memcpy@s
 10340  1D3F  0878               	movf	memcpy@d1,w
 10341  1D40  00F4               	movwf	??_memcpy
 10342  1D41  0874               	movf	??_memcpy,w
 10343  1D42  00F9               	movwf	memcpy@d
 10344  1D43                     l4595:
 10345  1D43  3001               	movlw	1
 10346  1D44  02F2               	subwf	memcpy@n,f
 10347  1D45  3000               	movlw	0
 10348  1D46  3BF3               	subwfb	memcpy@n+1,f
 10349  1D47  0A72               	incf	memcpy@n,w
 10350  1D48  1903               	btfsc	3,2
 10351  1D49  0A73               	incf	memcpy@n+1,w
 10352  1D4A  1903               	btfsc	3,2
 10353  1D4B  0008               	return
 10354  1D4C  0875               	movf	memcpy@s,w
 10355  1D4D  0084               	movwf	4
 10356  1D4E  0876               	movf	memcpy@s+1,w
 10357  1D4F  0085               	movwf	5
 10358  1D50  0800               	movf	0,w	;code access
 10359  1D51  00F4               	movwf	??_memcpy
 10360  1D52  0874               	movf	??_memcpy,w
 10361  1D53  00F7               	movwf	memcpy@tmp
 10362  1D54  3001               	movlw	1
 10363  1D55  07F5               	addwf	memcpy@s,f
 10364  1D56  3000               	movlw	0
 10365  1D57  3DF6               	addwfc	memcpy@s+1,f
 10366  1D58  0877               	movf	memcpy@tmp,w
 10367  1D59  00F4               	movwf	??_memcpy
 10368  1D5A  0879               	movf	memcpy@d,w
 10369  1D5B  0086               	movwf	6
 10370  1D5C  3002               	movlw	2	; select bank4/5
 10371  1D5D  0087               	movwf	7
 10372  1D5E  0874               	movf	??_memcpy,w
 10373  1D5F  0081               	movwf	1
 10374  1D60  3001               	movlw	1
 10375  1D61  00F4               	movwf	??_memcpy
 10376  1D62  0874               	movf	??_memcpy,w
 10377  1D63  07F9               	addwf	memcpy@d,f
 10378  1D64  2D43               	goto	l4595
 10379  1D65                     __end_of_memcpy:
 10380                           
 10381                           	psect	text43
 10382  1DBD                     __ptext43:	
 10383 ;; *************** function _MTOUCH_Button_Initialize *****************
 10384 ;; Defined at:
 10385 ;;		line 151 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10386 ;; Parameters:    Size  Location     Type
 10387 ;;  name            1    wreg     enum E2819
 10388 ;; Auto vars:     Size  Location     Type
 10389 ;;  name            1    2[COMMON] enum E2819
 10390 ;;  button          1    3[COMMON] PTR struct .
 10391 ;;		 -> mtouch_button(32), 
 10392 ;; Return value:  Size  Location     Type
 10393 ;;                  1    wreg      void 
 10394 ;; Registers used:
 10395 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10396 ;; Tracked objects:
 10397 ;;		On entry : 0/3
 10398 ;;		On exit  : 0/0
 10399 ;;		Unchanged: 0/0
 10400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10402 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10403 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10404 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10405 ;;Total ram usage:        4 bytes
 10406 ;; Hardware stack levels used:    1
 10407 ;; Hardware stack levels required when called:    6
 10408 ;; This function calls:
 10409 ;;		_MTOUCH_Sensor_Calibrate
 10410 ;; This function is called by:
 10411 ;;		_MTOUCH_Button_InitializeAll
 10412 ;;		_Button_State_NotPressed
 10413 ;;		_Button_State_Pressed
 10414 ;; This function uses a non-reentrant model
 10415 ;;
 10416                           
 10417                           
 10418                           ;psect for function _MTOUCH_Button_Initialize
 10419  1DBD                     _MTOUCH_Button_Initialize:
 10420                           
 10421                           ;incstack = 0
 10422                           ; Regs used in _MTOUCH_Button_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 10423                           ;MTOUCH_Button_Initialize@name stored from wreg
 10424  1DBD  00F2               	movwf	MTOUCH_Button_Initialize@name
 10425                           
 10426                           ;mcc_generated_files/mtouch/mtouch_button.c: 151: void MTOUCH_Button_Initialize(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 152: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 153:     mtouch_button_t* button = &mtouch_button[name];
 10427  1DBE  0872               	movf	MTOUCH_Button_Initialize@name,w
 10428  1DBF  00F0               	movwf	??_MTOUCH_Button_Initialize
 10429  1DC0  3003               	movlw	3
 10430  1DC1                     u4995:
 10431  1DC1  35F0               	lslf	??_MTOUCH_Button_Initialize,f
 10432  1DC2  3EFF               	addlw	-1
 10433  1DC3  1D03               	skipz
 10434  1DC4  2DC1               	goto	u4995
 10435  1DC5  3570               	lslf	??_MTOUCH_Button_Initialize,w
 10436  1DC6  3E20               	addlw	(low (_mtouch_button| (0+512)))& (0+255)
 10437  1DC7  00F1               	movwf	??_MTOUCH_Button_Initialize+1
 10438  1DC8  0871               	movf	??_MTOUCH_Button_Initialize+1,w
 10439  1DC9  00F3               	movwf	MTOUCH_Button_Initialize@button
 10440                           
 10441                           ;mcc_generated_files/mtouch/mtouch_button.c: 155:     button->state = MTOUCH_BUTTON_STAT
      +                          E_initializing;
 10442  1DCA  0873               	movf	MTOUCH_Button_Initialize@button,w
 10443  1DCB  3E02               	addlw	2
 10444  1DCC  0086               	movwf	6
 10445  1DCD  3002               	movlw	2	; select bank4/5
 10446  1DCE  0087               	movwf	7
 10447  1DCF  0181               	clrf	1
 10448                           
 10449                           ;mcc_generated_files/mtouch/mtouch_button.c: 156:     button->baseline = (mtouch_button_
      +                          baseline_t)0;
 10450  1DD0  0873               	movf	MTOUCH_Button_Initialize@button,w
 10451  1DD1  3E05               	addlw	5
 10452  1DD2  0086               	movwf	6
 10453  1DD3  3002               	movlw	2	; select bank4/5
 10454  1DD4  0087               	movwf	7
 10455  1DD5  3000               	movlw	0
 10456  1DD6  3FC0               	movwi [0]fsr1
 10457  1DD7  3000               	movlw	0
 10458  1DD8  3FC1               	movwi [1]fsr1
 10459  1DD9  3FC2               	movwi [2]fsr1
 10460  1DDA  3FC3               	movwi [3]fsr1
 10461                           
 10462                           ;mcc_generated_files/mtouch/mtouch_button.c: 157:     button->counter = (mtouch_button_s
      +                          tatecounter_t)0;
 10463  1DDB  0873               	movf	MTOUCH_Button_Initialize@button,w
 10464  1DDC  3E0A               	addlw	10
 10465  1DDD  0086               	movwf	6
 10466  1DDE  3002               	movlw	2	; select bank4/5
 10467  1DDF  0087               	movwf	7
 10468  1DE0  3000               	movlw	0
 10469  1DE1  3FC0               	movwi [0]fsr1
 10470  1DE2  3FC1               	movwi [1]fsr1
 10471                           
 10472                           ;mcc_generated_files/mtouch/mtouch_button.c: 158:     button->baseline_count = (mtouch_b
      +                          utton_baselinecounter_t)0;
 10473  1DE3  0873               	movf	MTOUCH_Button_Initialize@button,w
 10474  1DE4  3E0C               	addlw	12
 10475  1DE5  0086               	movwf	6
 10476  1DE6  3002               	movlw	2	; select bank4/5
 10477  1DE7  0087               	movwf	7
 10478  1DE8  3000               	movlw	0
 10479  1DE9  3FC0               	movwi [0]fsr1
 10480  1DEA  3FC1               	movwi [1]fsr1
 10481                           
 10482                           ;mcc_generated_files/mtouch/mtouch_button.c: 160:     MTOUCH_Sensor_Calibrate(button->se
      +                          nsor);
 10483  1DEB  0A73               	incf	MTOUCH_Button_Initialize@button,w
 10484  1DEC  0086               	movwf	6
 10485  1DED  3002               	movlw	2	; select bank4/5
 10486  1DEE  0087               	movwf	7
 10487  1DEF  0801               	movf	1,w
 10488  1DF0  3180  2002         	fcall	_MTOUCH_Sensor_Calibrate
 10489  1DF2  0008               	return
 10490  1DF3                     __end_of_MTOUCH_Button_Initialize:
 10491                           
 10492                           	psect	text44
 10493  0002                     __ptext44:	
 10494 ;; *************** function _MTOUCH_Sensor_Calibrate *****************
 10495 ;; Defined at:
 10496 ;;		line 535 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10497 ;; Parameters:    Size  Location     Type
 10498 ;;  sensor          1    wreg     enum E2661
 10499 ;; Auto vars:     Size  Location     Type
 10500 ;;  sensor          1    0[COMMON] enum E2661
 10501 ;; Return value:  Size  Location     Type
 10502 ;;                  1    wreg      void 
 10503 ;; Registers used:
 10504 ;;		wreg
 10505 ;; Tracked objects:
 10506 ;;		On entry : 0/3
 10507 ;;		On exit  : 0/0
 10508 ;;		Unchanged: 0/0
 10509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10513 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10514 ;;Total ram usage:        0 bytes
 10515 ;; Hardware stack levels used:    1
 10516 ;; Hardware stack levels required when called:    5
 10517 ;; This function calls:
 10518 ;;		Nothing
 10519 ;; This function is called by:
 10520 ;;		_MTOUCH_Button_Initialize
 10521 ;; This function uses a non-reentrant model
 10522 ;;
 10523                           
 10524                           
 10525                           ;psect for function _MTOUCH_Sensor_Calibrate
 10526  0002                     _MTOUCH_Sensor_Calibrate:
 10527                           
 10528                           ;incstack = 0
 10529                           ; Regs used in _MTOUCH_Sensor_Calibrate: [wreg]
 10530  0002  0008               	return
 10531  0003                     __end_of_MTOUCH_Sensor_Calibrate:
 10532                           
 10533                           	psect	text45
 10534  1C88                     __ptext45:	
 10535 ;; *************** function _EUSART_Initialize *****************
 10536 ;; Defined at:
 10537 ;;		line 66 in file "mcc_generated_files/eusart.c"
 10538 ;; Parameters:    Size  Location     Type
 10539 ;;		None
 10540 ;; Auto vars:     Size  Location     Type
 10541 ;;		None
 10542 ;; Return value:  Size  Location     Type
 10543 ;;                  1    wreg      void 
 10544 ;; Registers used:
 10545 ;;		wreg, status,2, status,0, pclath, cstack
 10546 ;; Tracked objects:
 10547 ;;		On entry : 1F/0
 10548 ;;		On exit  : 1F/3
 10549 ;;		Unchanged: 0/0
 10550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10554 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10555 ;;Total ram usage:        0 bytes
 10556 ;; Hardware stack levels used:    1
 10557 ;; Hardware stack levels required when called:    6
 10558 ;; This function calls:
 10559 ;;		_EUSART_SetErrorHandler
 10560 ;;		_EUSART_SetFramingErrorHandler
 10561 ;;		_EUSART_SetOverrunErrorHandler
 10562 ;; This function is called by:
 10563 ;;		_SYSTEM_Initialize
 10564 ;; This function uses a non-reentrant model
 10565 ;;
 10566                           
 10567                           
 10568                           ;psect for function _EUSART_Initialize
 10569  1C88                     _EUSART_Initialize:
 10570                           
 10571                           ;mcc_generated_files/eusart.c: 71:     BAUDCON = 0x08;
 10572                           
 10573                           ;incstack = 0
 10574                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10575  1C88  3008               	movlw	8
 10576  1C89  0023               	movlb	3	; select bank3
 10577  1C8A  009F               	movwf	31	;volatile
 10578                           
 10579                           ;mcc_generated_files/eusart.c: 74:     RCSTA = 0x90;
 10580  1C8B  3090               	movlw	144
 10581  1C8C  009D               	movwf	29	;volatile
 10582                           
 10583                           ;mcc_generated_files/eusart.c: 77:     TXSTA = 0x24;
 10584  1C8D  3024               	movlw	36
 10585  1C8E  009E               	movwf	30	;volatile
 10586                           
 10587                           ;mcc_generated_files/eusart.c: 80:     SPBRGL = 0xCF;
 10588  1C8F  30CF               	movlw	207
 10589  1C90  009B               	movwf	27	;volatile
 10590                           
 10591                           ;mcc_generated_files/eusart.c: 83:     SPBRGH = 0x00;
 10592  1C91  019C               	clrf	28	;volatile
 10593                           
 10594                           ;mcc_generated_files/eusart.c: 86:     EUSART_SetFramingErrorHandler(EUSART_DefaultFrami
      +                          ngErrorHandler);
 10595  1C92  3000               	movlw	0
 10596  1C93  00F0               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
 10597  1C94  3000               	movlw	0
 10598  1C95  00F1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
 10599  1C96  319A  2259  319C   	fcall	_EUSART_SetFramingErrorHandler
 10600                           
 10601                           ;mcc_generated_files/eusart.c: 87:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOverr
      +                          unErrorHandler);
 10602  1C99  3000               	movlw	0
 10603  1C9A  00F0               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
 10604  1C9B  3000               	movlw	0
 10605  1C9C  00F1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
 10606  1C9D  319A  2243  319C   	fcall	_EUSART_SetOverrunErrorHandler
 10607                           
 10608                           ;mcc_generated_files/eusart.c: 88:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandler
      +                          );
 10609  1CA0  3000               	movlw	0
 10610  1CA1  00F0               	movwf	EUSART_SetErrorHandler@interruptHandler
 10611  1CA2  3000               	movlw	0
 10612  1CA3  00F1               	movwf	EUSART_SetErrorHandler@interruptHandler+1
 10613  1CA4  319A  223E         	fcall	_EUSART_SetErrorHandler
 10614                           
 10615                           ;mcc_generated_files/eusart.c: 90:     eusartRxLastError.status = 0;
 10616  1CA6  0023               	movlb	3	; select bank3
 10617  1CA7  01BC               	clrf	_eusartRxLastError^(0+384)	;volatile
 10618  1CA8  0008               	return
 10619  1CA9                     __end_of_EUSART_Initialize:
 10620                           
 10621                           	psect	text46
 10622  1A43                     __ptext46:	
 10623 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
 10624 ;; Defined at:
 10625 ;;		line 161 in file "mcc_generated_files/eusart.c"
 10626 ;; Parameters:    Size  Location     Type
 10627 ;;  interruptHan    2    0[COMMON] PTR FTN()void 
 10628 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
 10629 ;; Auto vars:     Size  Location     Type
 10630 ;;		None
 10631 ;; Return value:  Size  Location     Type
 10632 ;;                  1    wreg      void 
 10633 ;; Registers used:
 10634 ;;		wreg
 10635 ;; Tracked objects:
 10636 ;;		On entry : 1F/4
 10637 ;;		On exit  : 1F/4
 10638 ;;		Unchanged: 0/0
 10639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10640 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10643 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10644 ;;Total ram usage:        2 bytes
 10645 ;; Hardware stack levels used:    1
 10646 ;; Hardware stack levels required when called:    5
 10647 ;; This function calls:
 10648 ;;		Nothing
 10649 ;; This function is called by:
 10650 ;;		_EUSART_Initialize
 10651 ;; This function uses a non-reentrant model
 10652 ;;
 10653                           
 10654                           
 10655                           ;psect for function _EUSART_SetOverrunErrorHandler
 10656  1A43                     _EUSART_SetOverrunErrorHandler:
 10657                           
 10658                           ;mcc_generated_files/eusart.c: 162:     EUSART_OverrunErrorHandler = interruptHandler;
 10659                           
 10660                           ;incstack = 0
 10661                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
 10662  1A43  0871               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
 10663  1A44  00E9               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+512)
 10664  1A45  0870               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
 10665  1A46  00E8               	movwf	_EUSART_OverrunErrorHandler^(0+512)
 10666  1A47  0008               	return
 10667  1A48                     __end_of_EUSART_SetOverrunErrorHandler:
 10668                           
 10669                           	psect	text47
 10670  1A59                     __ptext47:	
 10671 ;; *************** function _EUSART_SetFramingErrorHandler *****************
 10672 ;; Defined at:
 10673 ;;		line 157 in file "mcc_generated_files/eusart.c"
 10674 ;; Parameters:    Size  Location     Type
 10675 ;;  interruptHan    2    0[COMMON] PTR FTN()void 
 10676 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
 10677 ;; Auto vars:     Size  Location     Type
 10678 ;;		None
 10679 ;; Return value:  Size  Location     Type
 10680 ;;                  1    wreg      void 
 10681 ;; Registers used:
 10682 ;;		wreg
 10683 ;; Tracked objects:
 10684 ;;		On entry : 1F/3
 10685 ;;		On exit  : 1F/4
 10686 ;;		Unchanged: 0/0
 10687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10688 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10691 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10692 ;;Total ram usage:        2 bytes
 10693 ;; Hardware stack levels used:    1
 10694 ;; Hardware stack levels required when called:    5
 10695 ;; This function calls:
 10696 ;;		Nothing
 10697 ;; This function is called by:
 10698 ;;		_EUSART_Initialize
 10699 ;; This function uses a non-reentrant model
 10700 ;;
 10701                           
 10702                           
 10703                           ;psect for function _EUSART_SetFramingErrorHandler
 10704  1A59                     _EUSART_SetFramingErrorHandler:
 10705                           
 10706                           ;mcc_generated_files/eusart.c: 158:     EUSART_FramingErrorHandler = interruptHandler;
 10707                           
 10708                           ;incstack = 0
 10709                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
 10710  1A59  0871               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
 10711  1A5A  0024               	movlb	4	; select bank4
 10712  1A5B  00EB               	movwf	(_EUSART_FramingErrorHandler+1)^(0+512)
 10713  1A5C  0870               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
 10714  1A5D  00EA               	movwf	_EUSART_FramingErrorHandler^(0+512)
 10715  1A5E  0008               	return
 10716  1A5F                     __end_of_EUSART_SetFramingErrorHandler:
 10717                           
 10718                           	psect	text48
 10719  1A3E                     __ptext48:	
 10720 ;; *************** function _EUSART_SetErrorHandler *****************
 10721 ;; Defined at:
 10722 ;;		line 165 in file "mcc_generated_files/eusart.c"
 10723 ;; Parameters:    Size  Location     Type
 10724 ;;  interruptHan    2    0[COMMON] PTR FTN()void 
 10725 ;;		 -> EUSART_DefaultErrorHandler(1), 
 10726 ;; Auto vars:     Size  Location     Type
 10727 ;;		None
 10728 ;; Return value:  Size  Location     Type
 10729 ;;                  1    wreg      void 
 10730 ;; Registers used:
 10731 ;;		wreg
 10732 ;; Tracked objects:
 10733 ;;		On entry : 1F/4
 10734 ;;		On exit  : 1F/4
 10735 ;;		Unchanged: 0/0
 10736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10737 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10740 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10741 ;;Total ram usage:        2 bytes
 10742 ;; Hardware stack levels used:    1
 10743 ;; Hardware stack levels required when called:    5
 10744 ;; This function calls:
 10745 ;;		Nothing
 10746 ;; This function is called by:
 10747 ;;		_EUSART_Initialize
 10748 ;; This function uses a non-reentrant model
 10749 ;;
 10750                           
 10751                           
 10752                           ;psect for function _EUSART_SetErrorHandler
 10753  1A3E                     _EUSART_SetErrorHandler:
 10754                           
 10755                           ;mcc_generated_files/eusart.c: 166:     EUSART_ErrorHandler = interruptHandler;
 10756                           
 10757                           ;incstack = 0
 10758                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
 10759  1A3E  0871               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
 10760  1A3F  00E7               	movwf	(_EUSART_ErrorHandler+1)^(0+512)
 10761  1A40  0870               	movf	EUSART_SetErrorHandler@interruptHandler,w
 10762  1A41  00E6               	movwf	_EUSART_ErrorHandler^(0+512)
 10763  1A42  0008               	return
 10764  1A43                     __end_of_EUSART_SetErrorHandler:
 10765                           
 10766                           	psect	text49
 10767  1A7D                     __ptext49:	
 10768 ;; *************** function _ADC_Initialize *****************
 10769 ;; Defined at:
 10770 ;;		line 67 in file "mcc_generated_files/adc.c"
 10771 ;; Parameters:    Size  Location     Type
 10772 ;;		None
 10773 ;; Auto vars:     Size  Location     Type
 10774 ;;		None
 10775 ;; Return value:  Size  Location     Type
 10776 ;;                  1    wreg      void 
 10777 ;; Registers used:
 10778 ;;		wreg, status,2
 10779 ;; Tracked objects:
 10780 ;;		On entry : 1F/1
 10781 ;;		On exit  : 1F/1
 10782 ;;		Unchanged: 0/0
 10783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10787 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10788 ;;Total ram usage:        0 bytes
 10789 ;; Hardware stack levels used:    1
 10790 ;; Hardware stack levels required when called:    5
 10791 ;; This function calls:
 10792 ;;		Nothing
 10793 ;; This function is called by:
 10794 ;;		_SYSTEM_Initialize
 10795 ;; This function uses a non-reentrant model
 10796 ;;
 10797                           
 10798                           
 10799                           ;psect for function _ADC_Initialize
 10800  1A7D                     _ADC_Initialize:
 10801                           
 10802                           ;mcc_generated_files/adc.c: 72:     ADCON1 = 0x10;
 10803                           
 10804                           ;incstack = 0
 10805                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 10806  1A7D  3010               	movlw	16
 10807  1A7E  009E               	movwf	30	;volatile
 10808                           
 10809                           ;mcc_generated_files/adc.c: 75:     ADRESL = 0x00;
 10810  1A7F  019B               	clrf	27	;volatile
 10811                           
 10812                           ;mcc_generated_files/adc.c: 78:     ADRESH = 0x00;
 10813  1A80  019C               	clrf	28	;volatile
 10814                           
 10815                           ;mcc_generated_files/adc.c: 81:     ADCON0 = 0x01;
 10816  1A81  3001               	movlw	1
 10817  1A82  009D               	movwf	29	;volatile
 10818  1A83  0008               	return
 10819  1A84                     __end_of_ADC_Initialize:
 10820                           
 10821                           	psect	text50
 10822  1156                     __ptext50:	
 10823 ;; *************** function _Read_PT100_Temp *****************
 10824 ;; Defined at:
 10825 ;;		line 185 in file "main.c"
 10826 ;; Parameters:    Size  Location     Type
 10827 ;;		None
 10828 ;; Auto vars:     Size  Location     Type
 10829 ;;  Temp_PT100      4    8[BANK2 ] float 
 10830 ;;  R_PT100         4    4[BANK2 ] float 
 10831 ;;  ADC_volt        4    0[BANK2 ] float 
 10832 ;;  ADC_num         2   12[BANK2 ] unsigned short 
 10833 ;; Return value:  Size  Location     Type
 10834 ;;                  4   68[BANK1 ] float 
 10835 ;; Registers used:
 10836 ;;		wreg, status,2, status,0, pclath, cstack
 10837 ;; Tracked objects:
 10838 ;;		On entry : 0/3
 10839 ;;		On exit  : 1F/1
 10840 ;;		Unchanged: 0/0
 10841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10842 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 10843 ;;      Locals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0
 10844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10845 ;;      Totals:         0       0       4      14       0       0       0       0       0       0       0       0       
      +0       0
 10846 ;;Total ram usage:       18 bytes
 10847 ;; Hardware stack levels used:    1
 10848 ;; Hardware stack levels required when called:    9
 10849 ;; This function calls:
 10850 ;;		_ADC_StartConversion
 10851 ;;		_ChangeADCtoVoltage
 10852 ;;		_Measure_R_PT100_2Wire
 10853 ;;		_Measure_Temp_PT100_2Wire
 10854 ;;		_Read_ADC_Num
 10855 ;; This function is called by:
 10856 ;;		_main
 10857 ;; This function uses a non-reentrant model
 10858 ;;
 10859                           
 10860                           
 10861                           ;psect for function _Read_PT100_Temp
 10862  1156                     _Read_PT100_Temp:
 10863                           
 10864                           ;main.c: 192:     ADC_StartConversion();
 10865                           
 10866                           ;incstack = 0
 10867                           ; Regs used in _Read_PT100_Temp: [wreg+status,2+status,0+pclath+cstack]
 10868  1156  319A  2232  3191   	fcall	_ADC_StartConversion
 10869                           
 10870                           ;main.c: 194:     ADC_num = Read_ADC_Num();
 10871  1159  319B  233A  3191   	fcall	_Read_ADC_Num
 10872  115C  0873               	movf	?_Read_ADC_Num+1,w
 10873  115D  0022               	movlb	2	; select bank2
 10874  115E  00AD               	movwf	(Read_PT100_Temp@ADC_num+1)^(0+256)
 10875  115F  0872               	movf	?_Read_ADC_Num,w
 10876  1160  00AC               	movwf	Read_PT100_Temp@ADC_num^(0+256)
 10877                           
 10878                           ;main.c: 196:     ADC_volt = ChangeADCtoVoltage(ADC_num);
 10879  1161  082D               	movf	(Read_PT100_Temp@ADC_num+1)^(0+256),w
 10880  1162  0021               	movlb	1	; select bank1
 10881  1163  00D1               	movwf	(ChangeADCtoVoltage@ADC_number+1)^(0+128)
 10882  1164  0022               	movlb	2	; select bank2
 10883  1165  082C               	movf	Read_PT100_Temp@ADC_num^(0+256),w
 10884  1166  0021               	movlb	1	; select bank1
 10885  1167  00D0               	movwf	ChangeADCtoVoltage@ADC_number^(0+128)
 10886  1168  319D  25F3  3191   	fcall	_ChangeADCtoVoltage
 10887  116B  0853               	movf	(?_ChangeADCtoVoltage+3)^(0+128),w
 10888  116C  0022               	movlb	2	; select bank2
 10889  116D  00A3               	movwf	(Read_PT100_Temp@ADC_volt+3)^(0+256)
 10890  116E  0021               	movlb	1	; select bank1
 10891  116F  0852               	movf	(?_ChangeADCtoVoltage+2)^(0+128),w
 10892  1170  0022               	movlb	2	; select bank2
 10893  1171  00A2               	movwf	(Read_PT100_Temp@ADC_volt+2)^(0+256)
 10894  1172  0021               	movlb	1	; select bank1
 10895  1173  0851               	movf	(?_ChangeADCtoVoltage+1)^(0+128),w
 10896  1174  0022               	movlb	2	; select bank2
 10897  1175  00A1               	movwf	(Read_PT100_Temp@ADC_volt+1)^(0+256)
 10898  1176  0021               	movlb	1	; select bank1
 10899  1177  0850               	movf	?_ChangeADCtoVoltage^(0+128),w
 10900  1178  0022               	movlb	2	; select bank2
 10901  1179  00A0               	movwf	Read_PT100_Temp@ADC_volt^(0+256)
 10902                           
 10903                           ;main.c: 198:     R_PT100 = Measure_R_PT100_2Wire(ADC_volt);
 10904  117A  0823               	movf	(Read_PT100_Temp@ADC_volt+3)^(0+256),w
 10905  117B  0021               	movlb	1	; select bank1
 10906  117C  00D3               	movwf	(Measure_R_PT100_2Wire@ADC_volt+3)^(0+128)
 10907  117D  0022               	movlb	2	; select bank2
 10908  117E  0822               	movf	(Read_PT100_Temp@ADC_volt+2)^(0+256),w
 10909  117F  0021               	movlb	1	; select bank1
 10910  1180  00D2               	movwf	(Measure_R_PT100_2Wire@ADC_volt+2)^(0+128)
 10911  1181  0022               	movlb	2	; select bank2
 10912  1182  0821               	movf	(Read_PT100_Temp@ADC_volt+1)^(0+256),w
 10913  1183  0021               	movlb	1	; select bank1
 10914  1184  00D1               	movwf	(Measure_R_PT100_2Wire@ADC_volt+1)^(0+128)
 10915  1185  0022               	movlb	2	; select bank2
 10916  1186  0820               	movf	Read_PT100_Temp@ADC_volt^(0+256),w
 10917  1187  0021               	movlb	1	; select bank1
 10918  1188  00D0               	movwf	Measure_R_PT100_2Wire@ADC_volt^(0+128)
 10919  1189  3190  20E1  3191   	fcall	_Measure_R_PT100_2Wire
 10920  118C  0853               	movf	(?_Measure_R_PT100_2Wire+3)^(0+128),w
 10921  118D  0022               	movlb	2	; select bank2
 10922  118E  00A7               	movwf	(Read_PT100_Temp@R_PT100+3)^(0+256)
 10923  118F  0021               	movlb	1	; select bank1
 10924  1190  0852               	movf	(?_Measure_R_PT100_2Wire+2)^(0+128),w
 10925  1191  0022               	movlb	2	; select bank2
 10926  1192  00A6               	movwf	(Read_PT100_Temp@R_PT100+2)^(0+256)
 10927  1193  0021               	movlb	1	; select bank1
 10928  1194  0851               	movf	(?_Measure_R_PT100_2Wire+1)^(0+128),w
 10929  1195  0022               	movlb	2	; select bank2
 10930  1196  00A5               	movwf	(Read_PT100_Temp@R_PT100+1)^(0+256)
 10931  1197  0021               	movlb	1	; select bank1
 10932  1198  0850               	movf	?_Measure_R_PT100_2Wire^(0+128),w
 10933  1199  0022               	movlb	2	; select bank2
 10934  119A  00A4               	movwf	Read_PT100_Temp@R_PT100^(0+256)
 10935                           
 10936                           ;main.c: 200:     Temp_PT100 = Measure_Temp_PT100_2Wire(R_PT100);
 10937  119B  0827               	movf	(Read_PT100_Temp@R_PT100+3)^(0+256),w
 10938  119C  0021               	movlb	1	; select bank1
 10939  119D  00D3               	movwf	(Measure_Temp_PT100_2Wire@R_PT100+3)^(0+128)
 10940  119E  0022               	movlb	2	; select bank2
 10941  119F  0826               	movf	(Read_PT100_Temp@R_PT100+2)^(0+256),w
 10942  11A0  0021               	movlb	1	; select bank1
 10943  11A1  00D2               	movwf	(Measure_Temp_PT100_2Wire@R_PT100+2)^(0+128)
 10944  11A2  0022               	movlb	2	; select bank2
 10945  11A3  0825               	movf	(Read_PT100_Temp@R_PT100+1)^(0+256),w
 10946  11A4  0021               	movlb	1	; select bank1
 10947  11A5  00D1               	movwf	(Measure_Temp_PT100_2Wire@R_PT100+1)^(0+128)
 10948  11A6  0022               	movlb	2	; select bank2
 10949  11A7  0824               	movf	Read_PT100_Temp@R_PT100^(0+256),w
 10950  11A8  0021               	movlb	1	; select bank1
 10951  11A9  00D0               	movwf	Measure_Temp_PT100_2Wire@R_PT100^(0+128)
 10952  11AA  3193  237F         	fcall	_Measure_Temp_PT100_2Wire
 10953  11AC  0853               	movf	(?_Measure_Temp_PT100_2Wire+3)^(0+128),w
 10954  11AD  0022               	movlb	2	; select bank2
 10955  11AE  00AB               	movwf	(Read_PT100_Temp@Temp_PT100+3)^(0+256)
 10956  11AF  0021               	movlb	1	; select bank1
 10957  11B0  0852               	movf	(?_Measure_Temp_PT100_2Wire+2)^(0+128),w
 10958  11B1  0022               	movlb	2	; select bank2
 10959  11B2  00AA               	movwf	(Read_PT100_Temp@Temp_PT100+2)^(0+256)
 10960  11B3  0021               	movlb	1	; select bank1
 10961  11B4  0851               	movf	(?_Measure_Temp_PT100_2Wire+1)^(0+128),w
 10962  11B5  0022               	movlb	2	; select bank2
 10963  11B6  00A9               	movwf	(Read_PT100_Temp@Temp_PT100+1)^(0+256)
 10964  11B7  0021               	movlb	1	; select bank1
 10965  11B8  0850               	movf	?_Measure_Temp_PT100_2Wire^(0+128),w
 10966  11B9  0022               	movlb	2	; select bank2
 10967  11BA  00A8               	movwf	Read_PT100_Temp@Temp_PT100^(0+256)
 10968                           
 10969                           ;main.c: 202:     return Temp_PT100;
 10970  11BB  082B               	movf	(Read_PT100_Temp@Temp_PT100+3)^(0+256),w
 10971  11BC  0021               	movlb	1	; select bank1
 10972  11BD  00E7               	movwf	(?_Read_PT100_Temp+3)^(0+128)
 10973  11BE  0022               	movlb	2	; select bank2
 10974  11BF  082A               	movf	(Read_PT100_Temp@Temp_PT100+2)^(0+256),w
 10975  11C0  0021               	movlb	1	; select bank1
 10976  11C1  00E6               	movwf	(?_Read_PT100_Temp+2)^(0+128)
 10977  11C2  0022               	movlb	2	; select bank2
 10978  11C3  0829               	movf	(Read_PT100_Temp@Temp_PT100+1)^(0+256),w
 10979  11C4  0021               	movlb	1	; select bank1
 10980  11C5  00E5               	movwf	(?_Read_PT100_Temp+1)^(0+128)
 10981  11C6  0022               	movlb	2	; select bank2
 10982  11C7  0828               	movf	Read_PT100_Temp@Temp_PT100^(0+256),w
 10983  11C8  0021               	movlb	1	; select bank1
 10984  11C9  00E4               	movwf	?_Read_PT100_Temp^(0+128)
 10985  11CA  0008               	return
 10986  11CB                     __end_of_Read_PT100_Temp:
 10987                           
 10988                           	psect	text51
 10989  1B3A                     __ptext51:	
 10990 ;; *************** function _Read_ADC_Num *****************
 10991 ;; Defined at:
 10992 ;;		line 144 in file "main.c"
 10993 ;; Parameters:    Size  Location     Type
 10994 ;;		None
 10995 ;; Auto vars:     Size  Location     Type
 10996 ;;  convertedVal    2    4[COMMON] unsigned short 
 10997 ;; Return value:  Size  Location     Type
 10998 ;;                  2    2[COMMON] unsigned short 
 10999 ;; Registers used:
 11000 ;;		wreg, status,0, pclath, cstack
 11001 ;; Tracked objects:
 11002 ;;		On entry : 1F/1
 11003 ;;		On exit  : 1F/1
 11004 ;;		Unchanged: 0/0
 11005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11006 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11007 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11009 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11010 ;;Total ram usage:        4 bytes
 11011 ;; Hardware stack levels used:    1
 11012 ;; Hardware stack levels required when called:    6
 11013 ;; This function calls:
 11014 ;;		_ADC_GetConversionResult
 11015 ;;		_ADC_IsConversionDone
 11016 ;; This function is called by:
 11017 ;;		_Read_PT100_Temp
 11018 ;; This function uses a non-reentrant model
 11019 ;;
 11020                           
 11021                           
 11022                           ;psect for function _Read_ADC_Num
 11023  1B3A                     _Read_ADC_Num:
 11024  1B3A                     l5355:	
 11025                           ;main.c: 146:     uint16_t convertedValue;;main.c: 148:     while(!ADC_IsConversionDone(
      +                          ));
 11026                           
 11027                           ;incstack = 0
 11028                           ; Regs used in _Read_ADC_Num: [wreg+status,0+pclath+cstack]
 11029                           
 11030  1B3A  319A  2253  319B   	fcall	_ADC_IsConversionDone
 11031  1B3D  3A00               	xorlw	0
 11032  1B3E  1903               	skipnz
 11033  1B3F  2B3A               	goto	l5355
 11034                           
 11035                           ;main.c: 149:     convertedValue = ADC_GetConversionResult();
 11036  1B40  319A  2239         	fcall	_ADC_GetConversionResult
 11037  1B42  0871               	movf	?_ADC_GetConversionResult+1,w
 11038  1B43  00F5               	movwf	Read_ADC_Num@convertedValue+1
 11039  1B44  0870               	movf	?_ADC_GetConversionResult,w
 11040  1B45  00F4               	movwf	Read_ADC_Num@convertedValue
 11041                           
 11042                           ;main.c: 151:     return convertedValue;
 11043  1B46  0875               	movf	Read_ADC_Num@convertedValue+1,w
 11044  1B47  00F3               	movwf	?_Read_ADC_Num+1
 11045  1B48  0874               	movf	Read_ADC_Num@convertedValue,w
 11046  1B49  00F2               	movwf	?_Read_ADC_Num
 11047  1B4A  0008               	return
 11048  1B4B                     __end_of_Read_ADC_Num:
 11049                           
 11050                           	psect	text52
 11051  1A53                     __ptext52:	
 11052 ;; *************** function _ADC_IsConversionDone *****************
 11053 ;; Defined at:
 11054 ;;		line 100 in file "mcc_generated_files/adc.c"
 11055 ;; Parameters:    Size  Location     Type
 11056 ;;		None
 11057 ;; Auto vars:     Size  Location     Type
 11058 ;;		None
 11059 ;; Return value:  Size  Location     Type
 11060 ;;                  1    wreg      _Bool 
 11061 ;; Registers used:
 11062 ;;		wreg, status,0
 11063 ;; Tracked objects:
 11064 ;;		On entry : 1F/1
 11065 ;;		On exit  : 1F/1
 11066 ;;		Unchanged: 0/0
 11067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11071 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11072 ;;Total ram usage:        0 bytes
 11073 ;; Hardware stack levels used:    1
 11074 ;; Hardware stack levels required when called:    5
 11075 ;; This function calls:
 11076 ;;		Nothing
 11077 ;; This function is called by:
 11078 ;;		_Read_ADC_Num
 11079 ;; This function uses a non-reentrant model
 11080 ;;
 11081                           
 11082                           
 11083                           ;psect for function _ADC_IsConversionDone
 11084  1A53                     _ADC_IsConversionDone:
 11085                           
 11086                           ;mcc_generated_files/adc.c: 103:    return ((_Bool)(!ADCON0bits.GO_nDONE));
 11087                           
 11088                           ;incstack = 0
 11089                           ; Regs used in _ADC_IsConversionDone: [wreg+status,0]
 11090  1A53  1003               	clrc
 11091  1A54  1C9D               	btfss	29,1	;volatile
 11092  1A55  1403               	setc
 11093  1A56  3000               	movlw	0
 11094  1A57  3D09               	addwfc	9,w
 11095  1A58  0008               	return
 11096  1A59                     __end_of_ADC_IsConversionDone:
 11097                           
 11098                           	psect	text53
 11099  1A39                     __ptext53:	
 11100 ;; *************** function _ADC_GetConversionResult *****************
 11101 ;; Defined at:
 11102 ;;		line 106 in file "mcc_generated_files/adc.c"
 11103 ;; Parameters:    Size  Location     Type
 11104 ;;		None
 11105 ;; Auto vars:     Size  Location     Type
 11106 ;;		None
 11107 ;; Return value:  Size  Location     Type
 11108 ;;                  2    0[COMMON] unsigned short 
 11109 ;; Registers used:
 11110 ;;		wreg
 11111 ;; Tracked objects:
 11112 ;;		On entry : 1F/1
 11113 ;;		On exit  : 1F/1
 11114 ;;		Unchanged: 0/0
 11115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11116 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11119 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11120 ;;Total ram usage:        2 bytes
 11121 ;; Hardware stack levels used:    1
 11122 ;; Hardware stack levels required when called:    5
 11123 ;; This function calls:
 11124 ;;		Nothing
 11125 ;; This function is called by:
 11126 ;;		_Read_ADC_Num
 11127 ;; This function uses a non-reentrant model
 11128 ;;
 11129                           
 11130                           
 11131                           ;psect for function _ADC_GetConversionResult
 11132  1A39                     _ADC_GetConversionResult:
 11133                           
 11134                           ;mcc_generated_files/adc.c: 109:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
 11135                           
 11136                           ;incstack = 0
 11137                           ; Regs used in _ADC_GetConversionResult: [wreg]
 11138  1A39  081C               	movf	28,w	;volatile
 11139  1A3A  00F1               	movwf	?_ADC_GetConversionResult+1
 11140  1A3B  081B               	movf	27,w	;volatile
 11141  1A3C  00F0               	movwf	?_ADC_GetConversionResult
 11142  1A3D  0008               	return
 11143  1A3E                     __end_of_ADC_GetConversionResult:
 11144                           
 11145                           	psect	text54
 11146  137F                     __ptext54:	
 11147 ;; *************** function _Measure_Temp_PT100_2Wire *****************
 11148 ;; Defined at:
 11149 ;;		line 174 in file "main.c"
 11150 ;; Parameters:    Size  Location     Type
 11151 ;;  R_PT100         4   48[BANK1 ] float 
 11152 ;; Auto vars:     Size  Location     Type
 11153 ;;  Temp_PT100      4   52[BANK1 ] float 
 11154 ;; Return value:  Size  Location     Type
 11155 ;;                  4   48[BANK1 ] float 
 11156 ;; Registers used:
 11157 ;;		wreg, status,2, status,0, pclath, cstack
 11158 ;; Tracked objects:
 11159 ;;		On entry : 1F/1
 11160 ;;		On exit  : 1F/1
 11161 ;;		Unchanged: 0/0
 11162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11163 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 11164 ;;      Locals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0
 11165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11166 ;;      Totals:         0       0      20       0       0       0       0       0       0       0       0       0       
      +0       0
 11167 ;;Total ram usage:       20 bytes
 11168 ;; Hardware stack levels used:    1
 11169 ;; Hardware stack levels required when called:    8
 11170 ;; This function calls:
 11171 ;;		___fladd
 11172 ;;		___fldiv
 11173 ;;		___flmul
 11174 ;;		_sqrtf
 11175 ;; This function is called by:
 11176 ;;		_Read_PT100_Temp
 11177 ;; This function uses a non-reentrant model
 11178 ;;
 11179                           
 11180                           
 11181                           ;psect for function _Measure_Temp_PT100_2Wire
 11182  137F                     _Measure_Temp_PT100_2Wire:
 11183                           
 11184                           ;main.c: 176:     float Temp_PT100;;main.c: 178:     Temp_PT100 = ((-3.9083E-03 + sqrtf(
      +                          17.58480889E-06 + -23.10E-09 * R_PT100)) / -1.155E-06) - Tolerance_Temp_const;
 11185                           
 11186                           ;incstack = 0
 11187                           ; Regs used in _Measure_Temp_PT100_2Wire: [wreg+status,2+status,0+pclath+cstack]
 11188  137F  3037               	movlw	55
 11189  1380  0020               	movlb	0	; select bank0
 11190  1381  00BD               	movwf	___fladd@b+3
 11191  1382  3093               	movlw	147
 11192  1383  00BC               	movwf	___fladd@b+2
 11193  1384  3083               	movlw	131
 11194  1385  00BB               	movwf	___fladd@b+1
 11195  1386  3017               	movlw	23
 11196  1387  00BA               	movwf	___fladd@b
 11197  1388  30B2               	movlw	178
 11198  1389  00A3               	movwf	___flmul@b+3
 11199  138A  30C6               	movlw	198
 11200  138B  00A2               	movwf	___flmul@b+2
 11201  138C  306D               	movlw	109
 11202  138D  00A1               	movwf	___flmul@b+1
 11203  138E  3070               	movlw	112
 11204  138F  00A0               	movwf	___flmul@b
 11205  1390  0021               	movlb	1	; select bank1
 11206  1391  0853               	movf	(Measure_Temp_PT100_2Wire@R_PT100+3)^(0+128),w
 11207  1392  0020               	movlb	0	; select bank0
 11208  1393  00A7               	movwf	___flmul@a+3
 11209  1394  0021               	movlb	1	; select bank1
 11210  1395  0852               	movf	(Measure_Temp_PT100_2Wire@R_PT100+2)^(0+128),w
 11211  1396  0020               	movlb	0	; select bank0
 11212  1397  00A6               	movwf	___flmul@a+2
 11213  1398  0021               	movlb	1	; select bank1
 11214  1399  0851               	movf	(Measure_Temp_PT100_2Wire@R_PT100+1)^(0+128),w
 11215  139A  0020               	movlb	0	; select bank0
 11216  139B  00A5               	movwf	___flmul@a+1
 11217  139C  0021               	movlb	1	; select bank1
 11218  139D  0850               	movf	Measure_Temp_PT100_2Wire@R_PT100^(0+128),w
 11219  139E  0020               	movlb	0	; select bank0
 11220  139F  00A4               	movwf	___flmul@a
 11221  13A0  318A  22F4  3193   	fcall	___flmul
 11222  13A3  0823               	movf	?___flmul+3,w
 11223  13A4  00C1               	movwf	___fladd@a+3
 11224  13A5  0822               	movf	?___flmul+2,w
 11225  13A6  00C0               	movwf	___fladd@a+2
 11226  13A7  0821               	movf	?___flmul+1,w
 11227  13A8  00BF               	movwf	___fladd@a+1
 11228  13A9  0820               	movf	?___flmul,w
 11229  13AA  00BE               	movwf	___fladd@a
 11230  13AB  3189  2113  3193   	fcall	___fladd
 11231  13AE  083D               	movf	?___fladd+3,w
 11232  13AF  0021               	movlb	1	; select bank1
 11233  13B0  00DB               	movwf	(_Measure_Temp_PT100_2Wire$2891+3)^(0+128)
 11234  13B1  0020               	movlb	0	; select bank0
 11235  13B2  083C               	movf	?___fladd+2,w
 11236  13B3  0021               	movlb	1	; select bank1
 11237  13B4  00DA               	movwf	(_Measure_Temp_PT100_2Wire$2891+2)^(0+128)
 11238  13B5  0020               	movlb	0	; select bank0
 11239  13B6  083B               	movf	?___fladd+1,w
 11240  13B7  0021               	movlb	1	; select bank1
 11241  13B8  00D9               	movwf	(_Measure_Temp_PT100_2Wire$2891+1)^(0+128)
 11242  13B9  0020               	movlb	0	; select bank0
 11243  13BA  083A               	movf	?___fladd,w
 11244  13BB  0021               	movlb	1	; select bank1
 11245  13BC  00D8               	movwf	_Measure_Temp_PT100_2Wire$2891^(0+128)
 11246                           
 11247                           ;main.c: 176:     float Temp_PT100;;main.c: 178:     Temp_PT100 = ((-3.9083E-03 + sqrtf(
      +                          17.58480889E-06 + -23.10E-09 * R_PT100)) / -1.155E-06) - Tolerance_Temp_const;
 11248  13BD  085B               	movf	(_Measure_Temp_PT100_2Wire$2891+3)^(0+128),w
 11249  13BE  0020               	movlb	0	; select bank0
 11250  13BF  00D1               	movwf	sqrtf@x+3
 11251  13C0  0021               	movlb	1	; select bank1
 11252  13C1  085A               	movf	(_Measure_Temp_PT100_2Wire$2891+2)^(0+128),w
 11253  13C2  0020               	movlb	0	; select bank0
 11254  13C3  00D0               	movwf	sqrtf@x+2
 11255  13C4  0021               	movlb	1	; select bank1
 11256  13C5  0859               	movf	(_Measure_Temp_PT100_2Wire$2891+1)^(0+128),w
 11257  13C6  0020               	movlb	0	; select bank0
 11258  13C7  00CF               	movwf	sqrtf@x+1
 11259  13C8  0021               	movlb	1	; select bank1
 11260  13C9  0858               	movf	_Measure_Temp_PT100_2Wire$2891^(0+128),w
 11261  13CA  0020               	movlb	0	; select bank0
 11262  13CB  00CE               	movwf	sqrtf@x
 11263  13CC  318D  250C  3193   	fcall	_sqrtf
 11264  13CF  0851               	movf	?_sqrtf+3,w
 11265  13D0  0021               	movlb	1	; select bank1
 11266  13D1  00DF               	movwf	(_Measure_Temp_PT100_2Wire$2892+3)^(0+128)
 11267  13D2  0020               	movlb	0	; select bank0
 11268  13D3  0850               	movf	?_sqrtf+2,w
 11269  13D4  0021               	movlb	1	; select bank1
 11270  13D5  00DE               	movwf	(_Measure_Temp_PT100_2Wire$2892+2)^(0+128)
 11271  13D6  0020               	movlb	0	; select bank0
 11272  13D7  084F               	movf	?_sqrtf+1,w
 11273  13D8  0021               	movlb	1	; select bank1
 11274  13D9  00DD               	movwf	(_Measure_Temp_PT100_2Wire$2892+1)^(0+128)
 11275  13DA  0020               	movlb	0	; select bank0
 11276  13DB  084E               	movf	?_sqrtf,w
 11277  13DC  0021               	movlb	1	; select bank1
 11278  13DD  00DC               	movwf	_Measure_Temp_PT100_2Wire$2892^(0+128)
 11279                           
 11280                           ;main.c: 176:     float Temp_PT100;;main.c: 178:     Temp_PT100 = ((-3.9083E-03 + sqrtf(
      +                          17.58480889E-06 + -23.10E-09 * R_PT100)) / -1.155E-06) - Tolerance_Temp_const;
 11281  13DE  30B5               	movlw	181
 11282  13DF  00CB               	movwf	(___fldiv@a+3)^(0+128)
 11283  13E0  309B               	movlw	155
 11284  13E1  00CA               	movwf	(___fldiv@a+2)^(0+128)
 11285  13E2  3005               	movlw	5
 11286  13E3  00C9               	movwf	(___fldiv@a+1)^(0+128)
 11287  13E4  307F               	movlw	127
 11288  13E5  00C8               	movwf	___fldiv@a^(0+128)
 11289  13E6  30BB               	movlw	187
 11290  13E7  0020               	movlb	0	; select bank0
 11291  13E8  00BD               	movwf	___fladd@b+3
 11292  13E9  3080               	movlw	128
 11293  13EA  00BC               	movwf	___fladd@b+2
 11294  13EB  3011               	movlw	17
 11295  13EC  00BB               	movwf	___fladd@b+1
 11296  13ED  3032               	movlw	50
 11297  13EE  00BA               	movwf	___fladd@b
 11298  13EF  0021               	movlb	1	; select bank1
 11299  13F0  085F               	movf	(_Measure_Temp_PT100_2Wire$2892+3)^(0+128),w
 11300  13F1  0020               	movlb	0	; select bank0
 11301  13F2  00C1               	movwf	___fladd@a+3
 11302  13F3  0021               	movlb	1	; select bank1
 11303  13F4  085E               	movf	(_Measure_Temp_PT100_2Wire$2892+2)^(0+128),w
 11304  13F5  0020               	movlb	0	; select bank0
 11305  13F6  00C0               	movwf	___fladd@a+2
 11306  13F7  0021               	movlb	1	; select bank1
 11307  13F8  085D               	movf	(_Measure_Temp_PT100_2Wire$2892+1)^(0+128),w
 11308  13F9  0020               	movlb	0	; select bank0
 11309  13FA  00BF               	movwf	___fladd@a+1
 11310  13FB  0021               	movlb	1	; select bank1
 11311  13FC  085C               	movf	_Measure_Temp_PT100_2Wire$2892^(0+128),w
 11312  13FD  0020               	movlb	0	; select bank0
 11313  13FE  00BE               	movwf	___fladd@a
 11314  13FF  3189  2113  3193   	fcall	___fladd
 11315  1402  083D               	movf	?___fladd+3,w
 11316  1403  0021               	movlb	1	; select bank1
 11317  1404  00CF               	movwf	(___fldiv@b+3)^(0+128)
 11318  1405  0020               	movlb	0	; select bank0
 11319  1406  083C               	movf	?___fladd+2,w
 11320  1407  0021               	movlb	1	; select bank1
 11321  1408  00CE               	movwf	(___fldiv@b+2)^(0+128)
 11322  1409  0020               	movlb	0	; select bank0
 11323  140A  083B               	movf	?___fladd+1,w
 11324  140B  0021               	movlb	1	; select bank1
 11325  140C  00CD               	movwf	(___fldiv@b+1)^(0+128)
 11326  140D  0020               	movlb	0	; select bank0
 11327  140E  083A               	movf	?___fladd,w
 11328  140F  0021               	movlb	1	; select bank1
 11329  1410  00CC               	movwf	___fldiv@b^(0+128)
 11330  1411  3194  244F  3193   	fcall	___fldiv
 11331  1414  084B               	movf	(?___fldiv+3)^(0+128),w
 11332  1415  00E3               	movwf	(_Measure_Temp_PT100_2Wire$2893+3)^(0+128)
 11333  1416  084A               	movf	(?___fldiv+2)^(0+128),w
 11334  1417  00E2               	movwf	(_Measure_Temp_PT100_2Wire$2893+2)^(0+128)
 11335  1418  0849               	movf	(?___fldiv+1)^(0+128),w
 11336  1419  00E1               	movwf	(_Measure_Temp_PT100_2Wire$2893+1)^(0+128)
 11337  141A  0848               	movf	?___fldiv^(0+128),w
 11338  141B  00E0               	movwf	_Measure_Temp_PT100_2Wire$2893^(0+128)
 11339                           
 11340                           ;main.c: 176:     float Temp_PT100;;main.c: 178:     Temp_PT100 = ((-3.9083E-03 + sqrtf(
      +                          17.58480889E-06 + -23.10E-09 * R_PT100)) / -1.155E-06) - Tolerance_Temp_const;
 11341  141C  30C2               	movlw	194
 11342  141D  0020               	movlb	0	; select bank0
 11343  141E  00BD               	movwf	___fladd@b+3
 11344  141F  3014               	movlw	20
 11345  1420  00BC               	movwf	___fladd@b+2
 11346  1421  30CC               	movlw	204
 11347  1422  00BB               	movwf	___fladd@b+1
 11348  1423  30CD               	movlw	205
 11349  1424  00BA               	movwf	___fladd@b
 11350  1425  0021               	movlb	1	; select bank1
 11351  1426  0863               	movf	(_Measure_Temp_PT100_2Wire$2893+3)^(0+128),w
 11352  1427  0020               	movlb	0	; select bank0
 11353  1428  00C1               	movwf	___fladd@a+3
 11354  1429  0021               	movlb	1	; select bank1
 11355  142A  0862               	movf	(_Measure_Temp_PT100_2Wire$2893+2)^(0+128),w
 11356  142B  0020               	movlb	0	; select bank0
 11357  142C  00C0               	movwf	___fladd@a+2
 11358  142D  0021               	movlb	1	; select bank1
 11359  142E  0861               	movf	(_Measure_Temp_PT100_2Wire$2893+1)^(0+128),w
 11360  142F  0020               	movlb	0	; select bank0
 11361  1430  00BF               	movwf	___fladd@a+1
 11362  1431  0021               	movlb	1	; select bank1
 11363  1432  0860               	movf	_Measure_Temp_PT100_2Wire$2893^(0+128),w
 11364  1433  0020               	movlb	0	; select bank0
 11365  1434  00BE               	movwf	___fladd@a
 11366  1435  3189  2113         	fcall	___fladd
 11367  1437  083D               	movf	?___fladd+3,w
 11368  1438  0021               	movlb	1	; select bank1
 11369  1439  00D7               	movwf	(Measure_Temp_PT100_2Wire@Temp_PT100+3)^(0+128)
 11370  143A  0020               	movlb	0	; select bank0
 11371  143B  083C               	movf	?___fladd+2,w
 11372  143C  0021               	movlb	1	; select bank1
 11373  143D  00D6               	movwf	(Measure_Temp_PT100_2Wire@Temp_PT100+2)^(0+128)
 11374  143E  0020               	movlb	0	; select bank0
 11375  143F  083B               	movf	?___fladd+1,w
 11376  1440  0021               	movlb	1	; select bank1
 11377  1441  00D5               	movwf	(Measure_Temp_PT100_2Wire@Temp_PT100+1)^(0+128)
 11378  1442  0020               	movlb	0	; select bank0
 11379  1443  083A               	movf	?___fladd,w
 11380  1444  0021               	movlb	1	; select bank1
 11381  1445  00D4               	movwf	Measure_Temp_PT100_2Wire@Temp_PT100^(0+128)
 11382                           
 11383                           ;main.c: 180:     return Temp_PT100;
 11384  1446  0857               	movf	(Measure_Temp_PT100_2Wire@Temp_PT100+3)^(0+128),w
 11385  1447  00D3               	movwf	(?_Measure_Temp_PT100_2Wire+3)^(0+128)
 11386  1448  0856               	movf	(Measure_Temp_PT100_2Wire@Temp_PT100+2)^(0+128),w
 11387  1449  00D2               	movwf	(?_Measure_Temp_PT100_2Wire+2)^(0+128)
 11388  144A  0855               	movf	(Measure_Temp_PT100_2Wire@Temp_PT100+1)^(0+128),w
 11389  144B  00D1               	movwf	(?_Measure_Temp_PT100_2Wire+1)^(0+128)
 11390  144C  0854               	movf	Measure_Temp_PT100_2Wire@Temp_PT100^(0+128),w
 11391  144D  00D0               	movwf	?_Measure_Temp_PT100_2Wire^(0+128)
 11392  144E  0008               	return
 11393  144F                     __end_of_Measure_Temp_PT100_2Wire:
 11394                           
 11395                           	psect	text55
 11396  0D0C                     __ptext55:	
 11397 ;; *************** function _sqrtf *****************
 11398 ;; Defined at:
 11399 ;;		line 22 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/sqrtf.c"
 11400 ;; Parameters:    Size  Location     Type
 11401 ;;  x               4   46[BANK0 ] float 
 11402 ;; Auto vars:     Size  Location     Type
 11403 ;;  ix              4   36[BANK1 ] long 
 11404 ;;  r               4   32[BANK1 ] unsigned long 
 11405 ;;  m               4   28[BANK1 ] long 
 11406 ;;  z               4   24[BANK1 ] float 
 11407 ;;  t               4   20[BANK1 ] long 
 11408 ;;  q               4   16[BANK1 ] long 
 11409 ;;  __xc8_float_    4   12[BANK1 ] struct .
 11410 ;;  i               4    8[BANK1 ] long 
 11411 ;;  s               4    4[BANK1 ] long 
 11412 ;;  sign            4    0        long 
 11413 ;; Return value:  Size  Location     Type
 11414 ;;                  4   46[BANK0 ] float 
 11415 ;; Registers used:
 11416 ;;		wreg, status,2, status,0, pclath, cstack
 11417 ;; Tracked objects:
 11418 ;;		On entry : 1F/0
 11419 ;;		On exit  : 1F/0
 11420 ;;		Unchanged: 0/0
 11421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11422 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11423 ;;      Locals:         0       0      40       0       0       0       0       0       0       0       0       0       
      +0       0
 11424 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11425 ;;      Totals:         0      12      40       0       0       0       0       0       0       0       0       0       
      +0       0
 11426 ;;Total ram usage:       52 bytes
 11427 ;; Hardware stack levels used:    1
 11428 ;; Hardware stack levels required when called:    7
 11429 ;; This function calls:
 11430 ;;		___fladd
 11431 ;;		___flge
 11432 ;;		___flmul
 11433 ;;		_nanf
 11434 ;; This function is called by:
 11435 ;;		_Measure_Temp_PT100_2Wire
 11436 ;; This function uses a non-reentrant model
 11437 ;;
 11438                           
 11439                           
 11440                           ;psect for function _sqrtf
 11441  0D0C                     _sqrtf:
 11442                           
 11443                           ;incstack = 0
 11444                           ; Regs used in _sqrtf: [wreg+status,2+status,0+pclath+cstack]
 11445  0D0C  0851               	movf	sqrtf@x+3,w
 11446  0D0D  0021               	movlb	1	; select bank1
 11447  0D0E  00AF               	movwf	(sqrtf@__xc8_float_word+3)^(0+128)
 11448  0D0F  0020               	movlb	0	; select bank0
 11449  0D10  0850               	movf	sqrtf@x+2,w
 11450  0D11  0021               	movlb	1	; select bank1
 11451  0D12  00AE               	movwf	(sqrtf@__xc8_float_word+2)^(0+128)
 11452  0D13  0020               	movlb	0	; select bank0
 11453  0D14  084F               	movf	sqrtf@x+1,w
 11454  0D15  0021               	movlb	1	; select bank1
 11455  0D16  00AD               	movwf	(sqrtf@__xc8_float_word+1)^(0+128)
 11456  0D17  0020               	movlb	0	; select bank0
 11457  0D18  084E               	movf	sqrtf@x,w
 11458  0D19  0021               	movlb	1	; select bank1
 11459  0D1A  00AC               	movwf	sqrtf@__xc8_float_word^(0+128)
 11460  0D1B  082F               	movf	(sqrtf@__xc8_float_word+3)^(0+128),w
 11461  0D1C  00C7               	movwf	(sqrtf@ix+3)^(0+128)
 11462  0D1D  082E               	movf	(sqrtf@__xc8_float_word+2)^(0+128),w
 11463  0D1E  00C6               	movwf	(sqrtf@ix+2)^(0+128)
 11464  0D1F  082D               	movf	(sqrtf@__xc8_float_word+1)^(0+128),w
 11465  0D20  00C5               	movwf	(sqrtf@ix+1)^(0+128)
 11466  0D21  082C               	movf	sqrtf@__xc8_float_word^(0+128),w
 11467  0D22  00C4               	movwf	sqrtf@ix^(0+128)
 11468  0D23  3000               	movlw	0
 11469  0D24  0544               	andwf	sqrtf@ix^(0+128),w
 11470  0D25  0020               	movlb	0	; select bank0
 11471  0D26  00D2               	movwf	??_sqrtf
 11472  0D27  3000               	movlw	0
 11473  0D28  0021               	movlb	1	; select bank1
 11474  0D29  0545               	andwf	(sqrtf@ix+1)^(0+128),w
 11475  0D2A  0020               	movlb	0	; select bank0
 11476  0D2B  00D3               	movwf	??_sqrtf+1
 11477  0D2C  3080               	movlw	128
 11478  0D2D  0021               	movlb	1	; select bank1
 11479  0D2E  0546               	andwf	(sqrtf@ix+2)^(0+128),w
 11480  0D2F  0020               	movlb	0	; select bank0
 11481  0D30  00D4               	movwf	??_sqrtf+2
 11482  0D31  307F               	movlw	127
 11483  0D32  0021               	movlb	1	; select bank1
 11484  0D33  0547               	andwf	(sqrtf@ix+3)^(0+128),w
 11485  0D34  0020               	movlb	0	; select bank0
 11486  0D35  00D5               	movwf	??_sqrtf+3
 11487  0D36  3080               	movlw	128
 11488  0D37  0654               	xorwf	??_sqrtf+2,w
 11489  0D38  307F               	movlw	127
 11490  0D39  1903               	skipnz
 11491  0D3A  0655               	xorwf	??_sqrtf+3,w
 11492  0D3B  0452               	iorwf	??_sqrtf,w
 11493  0D3C  0453               	iorwf	??_sqrtf+1,w
 11494  0D3D  1D03               	btfss	3,2
 11495  0D3E  2D6E               	goto	l5057
 11496  0D3F  0020               	movlb	0	; select bank0
 11497  0D40  0851               	movf	sqrtf@x+3,w
 11498  0D41  00BD               	movwf	___fladd@b+3
 11499  0D42  0850               	movf	sqrtf@x+2,w
 11500  0D43  00BC               	movwf	___fladd@b+2
 11501  0D44  084F               	movf	sqrtf@x+1,w
 11502  0D45  00BB               	movwf	___fladd@b+1
 11503  0D46  084E               	movf	sqrtf@x,w
 11504  0D47  00BA               	movwf	___fladd@b
 11505  0D48  0851               	movf	sqrtf@x+3,w
 11506  0D49  00A3               	movwf	___flmul@b+3
 11507  0D4A  0850               	movf	sqrtf@x+2,w
 11508  0D4B  00A2               	movwf	___flmul@b+2
 11509  0D4C  084F               	movf	sqrtf@x+1,w
 11510  0D4D  00A1               	movwf	___flmul@b+1
 11511  0D4E  084E               	movf	sqrtf@x,w
 11512  0D4F  00A0               	movwf	___flmul@b
 11513  0D50  0851               	movf	sqrtf@x+3,w
 11514  0D51  00A7               	movwf	___flmul@a+3
 11515  0D52  0850               	movf	sqrtf@x+2,w
 11516  0D53  00A6               	movwf	___flmul@a+2
 11517  0D54  084F               	movf	sqrtf@x+1,w
 11518  0D55  00A5               	movwf	___flmul@a+1
 11519  0D56  084E               	movf	sqrtf@x,w
 11520  0D57  00A4               	movwf	___flmul@a
 11521  0D58  318A  22F4  318D   	fcall	___flmul
 11522  0D5B  0823               	movf	?___flmul+3,w
 11523  0D5C  00C1               	movwf	___fladd@a+3
 11524  0D5D  0822               	movf	?___flmul+2,w
 11525  0D5E  00C0               	movwf	___fladd@a+2
 11526  0D5F  0821               	movf	?___flmul+1,w
 11527  0D60  00BF               	movwf	___fladd@a+1
 11528  0D61  0820               	movf	?___flmul,w
 11529  0D62  00BE               	movwf	___fladd@a
 11530  0D63  3189  2113         	fcall	___fladd
 11531  0D65  083D               	movf	?___fladd+3,w
 11532  0D66  00D1               	movwf	?_sqrtf+3
 11533  0D67  083C               	movf	?___fladd+2,w
 11534  0D68  00D0               	movwf	?_sqrtf+2
 11535  0D69  083B               	movf	?___fladd+1,w
 11536  0D6A  00CF               	movwf	?_sqrtf+1
 11537  0D6B  083A               	movf	?___fladd,w
 11538  0D6C  00CE               	movwf	?_sqrtf
 11539  0D6D  0008               	return
 11540  0D6E                     l5057:
 11541  0D6E  0021               	movlb	1	; select bank1
 11542  0D6F  1BC7               	btfsc	(sqrtf@ix+3)^(0+128),7
 11543  0D70  2D7E               	goto	l5059
 11544  0D71  0847               	movf	(sqrtf@ix+3)^(0+128),w
 11545  0D72  1D03               	btfss	3,2
 11546  0D73  2DB0               	goto	l5069
 11547  0D74  0846               	movf	(sqrtf@ix+2)^(0+128),w
 11548  0D75  1D03               	btfss	3,2
 11549  0D76  2DB0               	goto	l5069
 11550  0D77  0845               	movf	(sqrtf@ix+1)^(0+128),w
 11551  0D78  1D03               	btfss	3,2
 11552  0D79  2DB0               	goto	l5069
 11553  0D7A  3001               	movlw	1
 11554  0D7B  0244               	subwf	sqrtf@ix^(0+128),w
 11555  0D7C  1803               	btfsc	3,0
 11556  0D7D  2DB0               	goto	l5069
 11557  0D7E                     l5059:
 11558  0D7E  30FF               	movlw	255
 11559  0D7F  0021               	movlb	1	; select bank1
 11560  0D80  0544               	andwf	sqrtf@ix^(0+128),w
 11561  0D81  0020               	movlb	0	; select bank0
 11562  0D82  00D2               	movwf	??_sqrtf
 11563  0D83  30FF               	movlw	255
 11564  0D84  0021               	movlb	1	; select bank1
 11565  0D85  0545               	andwf	(sqrtf@ix+1)^(0+128),w
 11566  0D86  0020               	movlb	0	; select bank0
 11567  0D87  00D3               	movwf	??_sqrtf+1
 11568  0D88  30FF               	movlw	255
 11569  0D89  0021               	movlb	1	; select bank1
 11570  0D8A  0546               	andwf	(sqrtf@ix+2)^(0+128),w
 11571  0D8B  0020               	movlb	0	; select bank0
 11572  0D8C  00D4               	movwf	??_sqrtf+2
 11573  0D8D  307F               	movlw	127
 11574  0D8E  0021               	movlb	1	; select bank1
 11575  0D8F  0547               	andwf	(sqrtf@ix+3)^(0+128),w
 11576  0D90  0020               	movlb	0	; select bank0
 11577  0D91  00D5               	movwf	??_sqrtf+3
 11578  0D92  0855               	movf	??_sqrtf+3,w
 11579  0D93  0454               	iorwf	??_sqrtf+2,w
 11580  0D94  0453               	iorwf	??_sqrtf+1,w
 11581  0D95  0452               	iorwf	??_sqrtf,w
 11582  0D96  1903               	btfsc	3,2
 11583  0D97  0008               	return
 11584  0D98  0021               	movlb	1	; select bank1
 11585  0D99  1FC7               	btfss	(sqrtf@ix+3)^(0+128),7
 11586  0D9A  2DB0               	goto	l5069
 11587  0D9B  3021               	movlw	33
 11588  0D9C  0023               	movlb	3	; select bank3
 11589  0D9D  00A8               	movwf	_errno^(0+384)
 11590  0D9E  3000               	movlw	0
 11591  0D9F  00A9               	movwf	(_errno^(0+384)+1)
 11592  0DA0  302B               	movlw	low ((STR_1+11)| (0+32768))
 11593  0DA1  00F0               	movwf	nanf@s
 11594  0DA2  3098               	movlw	high ((STR_1+11)| (0+32768))
 11595  0DA3  00F1               	movwf	nanf@s+1
 11596  0DA4  319B  2329         	fcall	_nanf
 11597  0DA6  0873               	movf	?_nanf+3,w
 11598  0DA7  0020               	movlb	0	; select bank0
 11599  0DA8  00D1               	movwf	?_sqrtf+3
 11600  0DA9  0872               	movf	?_nanf+2,w
 11601  0DAA  00D0               	movwf	?_sqrtf+2
 11602  0DAB  0871               	movf	?_nanf+1,w
 11603  0DAC  00CF               	movwf	?_sqrtf+1
 11604  0DAD  0870               	movf	?_nanf,w
 11605  0DAE  00CE               	movwf	?_sqrtf
 11606  0DAF  0008               	return
 11607  0DB0                     l5069:
 11608  0DB0  0021               	movlb	1	; select bank1
 11609  0DB1  0844               	movf	sqrtf@ix^(0+128),w
 11610  0DB2  0020               	movlb	0	; select bank0
 11611  0DB3  00D2               	movwf	??_sqrtf
 11612  0DB4  0021               	movlb	1	; select bank1
 11613  0DB5  0845               	movf	(sqrtf@ix+1)^(0+128),w
 11614  0DB6  0020               	movlb	0	; select bank0
 11615  0DB7  00D3               	movwf	??_sqrtf+1
 11616  0DB8  0021               	movlb	1	; select bank1
 11617  0DB9  0846               	movf	(sqrtf@ix+2)^(0+128),w
 11618  0DBA  0020               	movlb	0	; select bank0
 11619  0DBB  00D4               	movwf	??_sqrtf+2
 11620  0DBC  0021               	movlb	1	; select bank1
 11621  0DBD  0847               	movf	(sqrtf@ix+3)^(0+128),w
 11622  0DBE  0020               	movlb	0	; select bank0
 11623  0DBF  00D5               	movwf	??_sqrtf+3
 11624  0DC0  3017               	movlw	23
 11625  0DC1  00D6               	movwf	??_sqrtf+4
 11626  0DC2                     u5805:
 11627  0DC2  37D5               	asrf	??_sqrtf+3,f
 11628  0DC3  0CD4               	rrf	??_sqrtf+2,f
 11629  0DC4  0CD3               	rrf	??_sqrtf+1,f
 11630  0DC5  0CD2               	rrf	??_sqrtf,f
 11631  0DC6  0BD6               	decfsz	??_sqrtf+4,f
 11632  0DC7  2DC2               	goto	u5805
 11633  0DC8  0855               	movf	??_sqrtf+3,w
 11634  0DC9  0021               	movlb	1	; select bank1
 11635  0DCA  00BF               	movwf	(sqrtf@m+3)^(0+128)
 11636  0DCB  0020               	movlb	0	; select bank0
 11637  0DCC  0854               	movf	??_sqrtf+2,w
 11638  0DCD  0021               	movlb	1	; select bank1
 11639  0DCE  00BE               	movwf	(sqrtf@m+2)^(0+128)
 11640  0DCF  0020               	movlb	0	; select bank0
 11641  0DD0  0853               	movf	??_sqrtf+1,w
 11642  0DD1  0021               	movlb	1	; select bank1
 11643  0DD2  00BD               	movwf	(sqrtf@m+1)^(0+128)
 11644  0DD3  0020               	movlb	0	; select bank0
 11645  0DD4  0852               	movf	??_sqrtf,w
 11646  0DD5  0021               	movlb	1	; select bank1
 11647  0DD6  00BC               	movwf	sqrtf@m^(0+128)
 11648  0DD7  083F               	movf	(sqrtf@m+3)^(0+128),w
 11649  0DD8  043E               	iorwf	(sqrtf@m+2)^(0+128),w
 11650  0DD9  043D               	iorwf	(sqrtf@m+1)^(0+128),w
 11651  0DDA  043C               	iorwf	sqrtf@m^(0+128),w
 11652  0DDB  1D03               	skipz
 11653  0DDC  2E1F               	goto	l1886
 11654  0DDD  3000               	movlw	0
 11655  0DDE  00AB               	movwf	(sqrtf@i+3)^(0+128)
 11656  0DDF  3000               	movlw	0
 11657  0DE0  00AA               	movwf	(sqrtf@i+2)^(0+128)
 11658  0DE1  3000               	movlw	0
 11659  0DE2  00A9               	movwf	(sqrtf@i+1)^(0+128)
 11660  0DE3  3000               	movlw	0
 11661  0DE4  00A8               	movwf	sqrtf@i^(0+128)
 11662  0DE5                     l5079:
 11663  0DE5  1BC6               	btfsc	(sqrtf@ix+2)^(0+128),7
 11664  0DE6  2DF7               	goto	l5081
 11665  0DE7  3001               	movlw	1
 11666  0DE8                     u5825:
 11667  0DE8  35C4               	lslf	sqrtf@ix^(0+128),f
 11668  0DE9  0DC5               	rlf	(sqrtf@ix+1)^(0+128),f
 11669  0DEA  0DC6               	rlf	(sqrtf@ix+2)^(0+128),f
 11670  0DEB  0DC7               	rlf	(sqrtf@ix+3)^(0+128),f
 11671  0DEC  0B89               	decfsz	9,f
 11672  0DED  2DE8               	goto	u5825
 11673  0DEE  3001               	movlw	1
 11674  0DEF  07A8               	addwf	sqrtf@i^(0+128),f
 11675  0DF0  3000               	movlw	0
 11676  0DF1  3DA9               	addwfc	(sqrtf@i+1)^(0+128),f
 11677  0DF2  3000               	movlw	0
 11678  0DF3  3DAA               	addwfc	(sqrtf@i+2)^(0+128),f
 11679  0DF4  3000               	movlw	0
 11680  0DF5  3DAB               	addwfc	(sqrtf@i+3)^(0+128),f
 11681  0DF6  2DE5               	goto	l5079
 11682  0DF7                     l5081:
 11683  0DF7  30FF               	movlw	255
 11684  0DF8  0020               	movlb	0	; select bank0
 11685  0DF9  00D2               	movwf	??_sqrtf
 11686  0DFA  30FF               	movlw	255
 11687  0DFB  00D3               	movwf	??_sqrtf+1
 11688  0DFC  30FF               	movlw	255
 11689  0DFD  00D4               	movwf	??_sqrtf+2
 11690  0DFE  30FF               	movlw	255
 11691  0DFF  00D5               	movwf	??_sqrtf+3
 11692  0E00  0021               	movlb	1	; select bank1
 11693  0E01  0828               	movf	sqrtf@i^(0+128),w
 11694  0E02  0020               	movlb	0	; select bank0
 11695  0E03  07D2               	addwf	??_sqrtf,f
 11696  0E04  0021               	movlb	1	; select bank1
 11697  0E05  0829               	movf	(sqrtf@i+1)^(0+128),w
 11698  0E06  0020               	movlb	0	; select bank0
 11699  0E07  3DD3               	addwfc	??_sqrtf+1,f
 11700  0E08  0021               	movlb	1	; select bank1
 11701  0E09  082A               	movf	(sqrtf@i+2)^(0+128),w
 11702  0E0A  0020               	movlb	0	; select bank0
 11703  0E0B  3DD4               	addwfc	??_sqrtf+2,f
 11704  0E0C  0021               	movlb	1	; select bank1
 11705  0E0D  082B               	movf	(sqrtf@i+3)^(0+128),w
 11706  0E0E  0020               	movlb	0	; select bank0
 11707  0E0F  3DD5               	addwfc	??_sqrtf+3,f
 11708  0E10  0852               	movf	??_sqrtf,w
 11709  0E11  0021               	movlb	1	; select bank1
 11710  0E12  02BC               	subwf	sqrtf@m^(0+128),f
 11711  0E13  0020               	movlb	0	; select bank0
 11712  0E14  0853               	movf	??_sqrtf+1,w
 11713  0E15  0021               	movlb	1	; select bank1
 11714  0E16  3BBD               	subwfb	(sqrtf@m+1)^(0+128),f
 11715  0E17  0020               	movlb	0	; select bank0
 11716  0E18  0854               	movf	??_sqrtf+2,w
 11717  0E19  0021               	movlb	1	; select bank1
 11718  0E1A  3BBE               	subwfb	(sqrtf@m+2)^(0+128),f
 11719  0E1B  0020               	movlb	0	; select bank0
 11720  0E1C  0855               	movf	??_sqrtf+3,w
 11721  0E1D  0021               	movlb	1	; select bank1
 11722  0E1E  3BBF               	subwfb	(sqrtf@m+3)^(0+128),f
 11723  0E1F                     l1886:
 11724  0E1F  3081               	movlw	129
 11725  0E20  07BC               	addwf	sqrtf@m^(0+128),f
 11726  0E21  30FF               	movlw	255
 11727  0E22  3DBD               	addwfc	(sqrtf@m+1)^(0+128),f
 11728  0E23  30FF               	movlw	255
 11729  0E24  3DBE               	addwfc	(sqrtf@m+2)^(0+128),f
 11730  0E25  30FF               	movlw	255
 11731  0E26  3DBF               	addwfc	(sqrtf@m+3)^(0+128),f
 11732  0E27  3000               	movlw	0
 11733  0E28  0020               	movlb	0	; select bank0
 11734  0E29  00D2               	movwf	??_sqrtf
 11735  0E2A  3000               	movlw	0
 11736  0E2B  00D3               	movwf	??_sqrtf+1
 11737  0E2C  3080               	movlw	128
 11738  0E2D  00D4               	movwf	??_sqrtf+2
 11739  0E2E  3000               	movlw	0
 11740  0E2F  00D5               	movwf	??_sqrtf+3
 11741  0E30  30FF               	movlw	255
 11742  0E31  0021               	movlb	1	; select bank1
 11743  0E32  0544               	andwf	sqrtf@ix^(0+128),w
 11744  0E33  0020               	movlb	0	; select bank0
 11745  0E34  00D6               	movwf	??_sqrtf+4
 11746  0E35  30FF               	movlw	255
 11747  0E36  0021               	movlb	1	; select bank1
 11748  0E37  0545               	andwf	(sqrtf@ix+1)^(0+128),w
 11749  0E38  0020               	movlb	0	; select bank0
 11750  0E39  00D7               	movwf	??_sqrtf+5
 11751  0E3A  307F               	movlw	127
 11752  0E3B  0021               	movlb	1	; select bank1
 11753  0E3C  0546               	andwf	(sqrtf@ix+2)^(0+128),w
 11754  0E3D  0020               	movlb	0	; select bank0
 11755  0E3E  00D8               	movwf	??_sqrtf+6
 11756  0E3F  3000               	movlw	0
 11757  0E40  0021               	movlb	1	; select bank1
 11758  0E41  0547               	andwf	(sqrtf@ix+3)^(0+128),w
 11759  0E42  0020               	movlb	0	; select bank0
 11760  0E43  00D9               	movwf	??_sqrtf+7
 11761  0E44  0856               	movf	??_sqrtf+4,w
 11762  0E45  04D2               	iorwf	??_sqrtf,f
 11763  0E46  0857               	movf	??_sqrtf+5,w
 11764  0E47  04D3               	iorwf	??_sqrtf+1,f
 11765  0E48  0858               	movf	??_sqrtf+6,w
 11766  0E49  04D4               	iorwf	??_sqrtf+2,f
 11767  0E4A  0859               	movf	??_sqrtf+7,w
 11768  0E4B  04D5               	iorwf	??_sqrtf+3,f
 11769  0E4C  0855               	movf	??_sqrtf+3,w
 11770  0E4D  0021               	movlb	1	; select bank1
 11771  0E4E  00C7               	movwf	(sqrtf@ix+3)^(0+128)
 11772  0E4F  0020               	movlb	0	; select bank0
 11773  0E50  0854               	movf	??_sqrtf+2,w
 11774  0E51  0021               	movlb	1	; select bank1
 11775  0E52  00C6               	movwf	(sqrtf@ix+2)^(0+128)
 11776  0E53  0020               	movlb	0	; select bank0
 11777  0E54  0853               	movf	??_sqrtf+1,w
 11778  0E55  0021               	movlb	1	; select bank1
 11779  0E56  00C5               	movwf	(sqrtf@ix+1)^(0+128)
 11780  0E57  0020               	movlb	0	; select bank0
 11781  0E58  0852               	movf	??_sqrtf,w
 11782  0E59  0021               	movlb	1	; select bank1
 11783  0E5A  00C4               	movwf	sqrtf@ix^(0+128)
 11784  0E5B  1C3C               	btfss	sqrtf@m^(0+128),0
 11785  0E5C  2E65               	goto	l1890
 11786  0E5D  0844               	movf	sqrtf@ix^(0+128),w
 11787  0E5E  07C4               	addwf	sqrtf@ix^(0+128),f
 11788  0E5F  0845               	movf	(sqrtf@ix+1)^(0+128),w
 11789  0E60  3DC5               	addwfc	(sqrtf@ix+1)^(0+128),f
 11790  0E61  0846               	movf	(sqrtf@ix+2)^(0+128),w
 11791  0E62  3DC6               	addwfc	(sqrtf@ix+2)^(0+128),f
 11792  0E63  0847               	movf	(sqrtf@ix+3)^(0+128),w
 11793  0E64  3DC7               	addwfc	(sqrtf@ix+3)^(0+128),f
 11794  0E65                     l1890:
 11795  0E65  3001               	movlw	1
 11796  0E66  0020               	movlb	0	; select bank0
 11797  0E67  00D2               	movwf	??_sqrtf
 11798  0E68                     u5855:
 11799  0E68  0021               	movlb	1	; select bank1
 11800  0E69  37BF               	asrf	(sqrtf@m+3)^(0+128),f
 11801  0E6A  0CBE               	rrf	(sqrtf@m+2)^(0+128),f
 11802  0E6B  0CBD               	rrf	(sqrtf@m+1)^(0+128),f
 11803  0E6C  0CBC               	rrf	sqrtf@m^(0+128),f
 11804  0E6D  0020               	movlb	0	; select bank0
 11805  0E6E  0BD2               	decfsz	??_sqrtf& (0+127),f
 11806  0E6F  2E68               	goto	u5855
 11807  0E70  0021               	movlb	1	; select bank1
 11808  0E71  0844               	movf	sqrtf@ix^(0+128),w
 11809  0E72  07C4               	addwf	sqrtf@ix^(0+128),f
 11810  0E73  0845               	movf	(sqrtf@ix+1)^(0+128),w
 11811  0E74  3DC5               	addwfc	(sqrtf@ix+1)^(0+128),f
 11812  0E75  0846               	movf	(sqrtf@ix+2)^(0+128),w
 11813  0E76  3DC6               	addwfc	(sqrtf@ix+2)^(0+128),f
 11814  0E77  0847               	movf	(sqrtf@ix+3)^(0+128),w
 11815  0E78  3DC7               	addwfc	(sqrtf@ix+3)^(0+128),f
 11816  0E79  3000               	movlw	0
 11817  0E7A  00A7               	movwf	(sqrtf@s+3)^(0+128)
 11818  0E7B  3000               	movlw	0
 11819  0E7C  00A6               	movwf	(sqrtf@s+2)^(0+128)
 11820  0E7D  3000               	movlw	0
 11821  0E7E  00A5               	movwf	(sqrtf@s+1)^(0+128)
 11822  0E7F  3000               	movlw	0
 11823  0E80  00A4               	movwf	sqrtf@s^(0+128)
 11824  0E81  0827               	movf	(sqrtf@s+3)^(0+128),w
 11825  0E82  00B3               	movwf	(sqrtf@q+3)^(0+128)
 11826  0E83  0826               	movf	(sqrtf@s+2)^(0+128),w
 11827  0E84  00B2               	movwf	(sqrtf@q+2)^(0+128)
 11828  0E85  0825               	movf	(sqrtf@s+1)^(0+128),w
 11829  0E86  00B1               	movwf	(sqrtf@q+1)^(0+128)
 11830  0E87  0824               	movf	sqrtf@s^(0+128),w
 11831  0E88  00B0               	movwf	sqrtf@q^(0+128)
 11832  0E89  3001               	movlw	1
 11833  0E8A  00C3               	movwf	(sqrtf@r+3)^(0+128)
 11834  0E8B  3000               	movlw	0
 11835  0E8C  00C2               	movwf	(sqrtf@r+2)^(0+128)
 11836  0E8D  3000               	movlw	0
 11837  0E8E  00C1               	movwf	(sqrtf@r+1)^(0+128)
 11838  0E8F  3000               	movlw	0
 11839  0E90  00C0               	movwf	sqrtf@r^(0+128)
 11840  0E91                     l5093:
 11841  0E91  0843               	movf	(sqrtf@r+3)^(0+128),w
 11842  0E92  0442               	iorwf	(sqrtf@r+2)^(0+128),w
 11843  0E93  0441               	iorwf	(sqrtf@r+1)^(0+128),w
 11844  0E94  0440               	iorwf	sqrtf@r^(0+128),w
 11845  0E95  1903               	btfsc	3,2
 11846  0E96  2F13               	goto	l5095
 11847  0E97  0840               	movf	sqrtf@r^(0+128),w
 11848  0E98  0724               	addwf	sqrtf@s^(0+128),w
 11849  0E99  0020               	movlb	0	; select bank0
 11850  0E9A  00D2               	movwf	??_sqrtf
 11851  0E9B  0021               	movlb	1	; select bank1
 11852  0E9C  0841               	movf	(sqrtf@r+1)^(0+128),w
 11853  0E9D  3D25               	addwfc	(sqrtf@s+1)^(0+128),w
 11854  0E9E  0020               	movlb	0	; select bank0
 11855  0E9F  00D3               	movwf	??_sqrtf+1
 11856  0EA0  0021               	movlb	1	; select bank1
 11857  0EA1  0842               	movf	(sqrtf@r+2)^(0+128),w
 11858  0EA2  3D26               	addwfc	(sqrtf@s+2)^(0+128),w
 11859  0EA3  0020               	movlb	0	; select bank0
 11860  0EA4  00D4               	movwf	??_sqrtf+2
 11861  0EA5  0021               	movlb	1	; select bank1
 11862  0EA6  0843               	movf	(sqrtf@r+3)^(0+128),w
 11863  0EA7  3D27               	addwfc	(sqrtf@s+3)^(0+128),w
 11864  0EA8  0020               	movlb	0	; select bank0
 11865  0EA9  00D5               	movwf	??_sqrtf+3
 11866  0EAA  0855               	movf	??_sqrtf+3,w
 11867  0EAB  0021               	movlb	1	; select bank1
 11868  0EAC  00B7               	movwf	(sqrtf@t+3)^(0+128)
 11869  0EAD  0020               	movlb	0	; select bank0
 11870  0EAE  0854               	movf	??_sqrtf+2,w
 11871  0EAF  0021               	movlb	1	; select bank1
 11872  0EB0  00B6               	movwf	(sqrtf@t+2)^(0+128)
 11873  0EB1  0020               	movlb	0	; select bank0
 11874  0EB2  0853               	movf	??_sqrtf+1,w
 11875  0EB3  0021               	movlb	1	; select bank1
 11876  0EB4  00B5               	movwf	(sqrtf@t+1)^(0+128)
 11877  0EB5  0020               	movlb	0	; select bank0
 11878  0EB6  0852               	movf	??_sqrtf,w
 11879  0EB7  0021               	movlb	1	; select bank1
 11880  0EB8  00B4               	movwf	sqrtf@t^(0+128)
 11881  0EB9  0847               	movf	(sqrtf@ix+3)^(0+128),w
 11882  0EBA  3A80               	xorlw	128
 11883  0EBB  0020               	movlb	0	; select bank0
 11884  0EBC  00D2               	movwf	??_sqrtf
 11885  0EBD  0021               	movlb	1	; select bank1
 11886  0EBE  0837               	movf	(sqrtf@t+3)^(0+128),w
 11887  0EBF  3A80               	xorlw	128
 11888  0EC0  0020               	movlb	0	; select bank0
 11889  0EC1  0252               	subwf	??_sqrtf,w
 11890  0EC2  0021               	movlb	1	; select bank1
 11891  0EC3  1D03               	skipz
 11892  0EC4  2ECF               	goto	u5863
 11893  0EC5  0836               	movf	(sqrtf@t+2)^(0+128),w
 11894  0EC6  0246               	subwf	(sqrtf@ix+2)^(0+128),w
 11895  0EC7  1D03               	skipz
 11896  0EC8  2ECF               	goto	u5863
 11897  0EC9  0835               	movf	(sqrtf@t+1)^(0+128),w
 11898  0ECA  0245               	subwf	(sqrtf@ix+1)^(0+128),w
 11899  0ECB  1D03               	skipz
 11900  0ECC  2ECF               	goto	u5863
 11901  0ECD  0834               	movf	sqrtf@t^(0+128),w
 11902  0ECE  0244               	subwf	sqrtf@ix^(0+128),w
 11903  0ECF                     u5863:
 11904  0ECF  1C03               	skipc
 11905  0ED0  2F03               	goto	l1893
 11906  0ED1  0840               	movf	sqrtf@r^(0+128),w
 11907  0ED2  0734               	addwf	sqrtf@t^(0+128),w
 11908  0ED3  0020               	movlb	0	; select bank0
 11909  0ED4  00D2               	movwf	??_sqrtf
 11910  0ED5  0021               	movlb	1	; select bank1
 11911  0ED6  0841               	movf	(sqrtf@r+1)^(0+128),w
 11912  0ED7  3D35               	addwfc	(sqrtf@t+1)^(0+128),w
 11913  0ED8  0020               	movlb	0	; select bank0
 11914  0ED9  00D3               	movwf	??_sqrtf+1
 11915  0EDA  0021               	movlb	1	; select bank1
 11916  0EDB  0842               	movf	(sqrtf@r+2)^(0+128),w
 11917  0EDC  3D36               	addwfc	(sqrtf@t+2)^(0+128),w
 11918  0EDD  0020               	movlb	0	; select bank0
 11919  0EDE  00D4               	movwf	??_sqrtf+2
 11920  0EDF  0021               	movlb	1	; select bank1
 11921  0EE0  0843               	movf	(sqrtf@r+3)^(0+128),w
 11922  0EE1  3D37               	addwfc	(sqrtf@t+3)^(0+128),w
 11923  0EE2  0020               	movlb	0	; select bank0
 11924  0EE3  00D5               	movwf	??_sqrtf+3
 11925  0EE4  0855               	movf	??_sqrtf+3,w
 11926  0EE5  0021               	movlb	1	; select bank1
 11927  0EE6  00A7               	movwf	(sqrtf@s+3)^(0+128)
 11928  0EE7  0020               	movlb	0	; select bank0
 11929  0EE8  0854               	movf	??_sqrtf+2,w
 11930  0EE9  0021               	movlb	1	; select bank1
 11931  0EEA  00A6               	movwf	(sqrtf@s+2)^(0+128)
 11932  0EEB  0020               	movlb	0	; select bank0
 11933  0EEC  0853               	movf	??_sqrtf+1,w
 11934  0EED  0021               	movlb	1	; select bank1
 11935  0EEE  00A5               	movwf	(sqrtf@s+1)^(0+128)
 11936  0EEF  0020               	movlb	0	; select bank0
 11937  0EF0  0852               	movf	??_sqrtf,w
 11938  0EF1  0021               	movlb	1	; select bank1
 11939  0EF2  00A4               	movwf	sqrtf@s^(0+128)
 11940  0EF3  0834               	movf	sqrtf@t^(0+128),w
 11941  0EF4  02C4               	subwf	sqrtf@ix^(0+128),f
 11942  0EF5  0835               	movf	(sqrtf@t+1)^(0+128),w
 11943  0EF6  3BC5               	subwfb	(sqrtf@ix+1)^(0+128),f
 11944  0EF7  0836               	movf	(sqrtf@t+2)^(0+128),w
 11945  0EF8  3BC6               	subwfb	(sqrtf@ix+2)^(0+128),f
 11946  0EF9  0837               	movf	(sqrtf@t+3)^(0+128),w
 11947  0EFA  3BC7               	subwfb	(sqrtf@ix+3)^(0+128),f
 11948  0EFB  0840               	movf	sqrtf@r^(0+128),w
 11949  0EFC  07B0               	addwf	sqrtf@q^(0+128),f
 11950  0EFD  0841               	movf	(sqrtf@r+1)^(0+128),w
 11951  0EFE  3DB1               	addwfc	(sqrtf@q+1)^(0+128),f
 11952  0EFF  0842               	movf	(sqrtf@r+2)^(0+128),w
 11953  0F00  3DB2               	addwfc	(sqrtf@q+2)^(0+128),f
 11954  0F01  0843               	movf	(sqrtf@r+3)^(0+128),w
 11955  0F02  3DB3               	addwfc	(sqrtf@q+3)^(0+128),f
 11956  0F03                     l1893:
 11957  0F03  0844               	movf	sqrtf@ix^(0+128),w
 11958  0F04  07C4               	addwf	sqrtf@ix^(0+128),f
 11959  0F05  0845               	movf	(sqrtf@ix+1)^(0+128),w
 11960  0F06  3DC5               	addwfc	(sqrtf@ix+1)^(0+128),f
 11961  0F07  0846               	movf	(sqrtf@ix+2)^(0+128),w
 11962  0F08  3DC6               	addwfc	(sqrtf@ix+2)^(0+128),f
 11963  0F09  0847               	movf	(sqrtf@ix+3)^(0+128),w
 11964  0F0A  3DC7               	addwfc	(sqrtf@ix+3)^(0+128),f
 11965  0F0B  3001               	movlw	1
 11966  0F0C                     u5875:
 11967  0F0C  36C3               	lsrf	(sqrtf@r+3)^(0+128),f
 11968  0F0D  0CC2               	rrf	(sqrtf@r+2)^(0+128),f
 11969  0F0E  0CC1               	rrf	(sqrtf@r+1)^(0+128),f
 11970  0F0F  0CC0               	rrf	sqrtf@r^(0+128),f
 11971  0F10  0B89               	decfsz	9,f
 11972  0F11  2F0C               	goto	u5875
 11973  0F12  2E91               	goto	l5093
 11974  0F13                     l5095:
 11975  0F13  0847               	movf	(sqrtf@ix+3)^(0+128),w
 11976  0F14  0446               	iorwf	(sqrtf@ix+2)^(0+128),w
 11977  0F15  0445               	iorwf	(sqrtf@ix+1)^(0+128),w
 11978  0F16  0444               	iorwf	sqrtf@ix^(0+128),w
 11979  0F17  1903               	skipnz
 11980  0F18  2F90               	goto	l5109
 11981  0F19  303F               	movlw	63
 11982  0F1A  00BB               	movwf	(sqrtf@z+3)^(0+128)
 11983  0F1B  3080               	movlw	128
 11984  0F1C  00BA               	movwf	(sqrtf@z+2)^(0+128)
 11985  0F1D  3000               	movlw	0
 11986  0F1E  00B9               	movwf	(sqrtf@z+1)^(0+128)
 11987  0F1F  3000               	movlw	0
 11988  0F20  00B8               	movwf	sqrtf@z^(0+128)
 11989  0F21  083B               	movf	(sqrtf@z+3)^(0+128),w
 11990  0F22  0020               	movlb	0	; select bank0
 11991  0F23  00BD               	movwf	___flge@ff1+3
 11992  0F24  0021               	movlb	1	; select bank1
 11993  0F25  083A               	movf	(sqrtf@z+2)^(0+128),w
 11994  0F26  0020               	movlb	0	; select bank0
 11995  0F27  00BC               	movwf	___flge@ff1+2
 11996  0F28  0021               	movlb	1	; select bank1
 11997  0F29  0839               	movf	(sqrtf@z+1)^(0+128),w
 11998  0F2A  0020               	movlb	0	; select bank0
 11999  0F2B  00BB               	movwf	___flge@ff1+1
 12000  0F2C  0021               	movlb	1	; select bank1
 12001  0F2D  0838               	movf	sqrtf@z^(0+128),w
 12002  0F2E  0020               	movlb	0	; select bank0
 12003  0F2F  00BA               	movwf	___flge@ff1
 12004  0F30  303F               	movlw	63
 12005  0F31  00C1               	movwf	___flge@ff2+3
 12006  0F32  3080               	movlw	128
 12007  0F33  00C0               	movwf	___flge@ff2+2
 12008  0F34  3000               	movlw	0
 12009  0F35  00BF               	movwf	___flge@ff2+1
 12010  0F36  3000               	movlw	0
 12011  0F37  00BE               	movwf	___flge@ff2
 12012  0F38  3187  2778  318D   	fcall	___flge
 12013  0F3B  1C03               	btfss	3,0
 12014  0F3C  2F90               	goto	l5109
 12015  0F3D  303F               	movlw	63
 12016  0F3E  0021               	movlb	1	; select bank1
 12017  0F3F  00BB               	movwf	(sqrtf@z+3)^(0+128)
 12018  0F40  3080               	movlw	128
 12019  0F41  00BA               	movwf	(sqrtf@z+2)^(0+128)
 12020  0F42  3000               	movlw	0
 12021  0F43  00B9               	movwf	(sqrtf@z+1)^(0+128)
 12022  0F44  3000               	movlw	0
 12023  0F45  00B8               	movwf	sqrtf@z^(0+128)
 12024  0F46  303F               	movlw	63
 12025  0F47  0020               	movlb	0	; select bank0
 12026  0F48  00BD               	movwf	___flge@ff1+3
 12027  0F49  3080               	movlw	128
 12028  0F4A  00BC               	movwf	___flge@ff1+2
 12029  0F4B  3000               	movlw	0
 12030  0F4C  00BB               	movwf	___flge@ff1+1
 12031  0F4D  3000               	movlw	0
 12032  0F4E  00BA               	movwf	___flge@ff1
 12033  0F4F  0021               	movlb	1	; select bank1
 12034  0F50  083B               	movf	(sqrtf@z+3)^(0+128),w
 12035  0F51  0020               	movlb	0	; select bank0
 12036  0F52  00C1               	movwf	___flge@ff2+3
 12037  0F53  0021               	movlb	1	; select bank1
 12038  0F54  083A               	movf	(sqrtf@z+2)^(0+128),w
 12039  0F55  0020               	movlb	0	; select bank0
 12040  0F56  00C0               	movwf	___flge@ff2+2
 12041  0F57  0021               	movlb	1	; select bank1
 12042  0F58  0839               	movf	(sqrtf@z+1)^(0+128),w
 12043  0F59  0020               	movlb	0	; select bank0
 12044  0F5A  00BF               	movwf	___flge@ff2+1
 12045  0F5B  0021               	movlb	1	; select bank1
 12046  0F5C  0838               	movf	sqrtf@z^(0+128),w
 12047  0F5D  0020               	movlb	0	; select bank0
 12048  0F5E  00BE               	movwf	___flge@ff2
 12049  0F5F  3187  2778  318D   	fcall	___flge
 12050  0F62  1803               	btfsc	3,0
 12051  0F63  2F6D               	goto	l5107
 12052  0F64  3002               	movlw	2
 12053  0F65  0021               	movlb	1	; select bank1
 12054  0F66  07B0               	addwf	sqrtf@q^(0+128),f
 12055  0F67  3000               	movlw	0
 12056  0F68  3DB1               	addwfc	(sqrtf@q+1)^(0+128),f
 12057  0F69  3000               	movlw	0
 12058  0F6A  3DB2               	addwfc	(sqrtf@q+2)^(0+128),f
 12059  0F6B  3000               	movlw	0
 12060  0F6C  2F8F               	goto	L11
 12061  0F6D                     l5107:
 12062  0F6D  3001               	movlw	1
 12063  0F6E  0021               	movlb	1	; select bank1
 12064  0F6F  0530               	andwf	sqrtf@q^(0+128),w
 12065  0F70  0020               	movlb	0	; select bank0
 12066  0F71  00D2               	movwf	??_sqrtf
 12067  0F72  3000               	movlw	0
 12068  0F73  0021               	movlb	1	; select bank1
 12069  0F74  0531               	andwf	(sqrtf@q+1)^(0+128),w
 12070  0F75  0020               	movlb	0	; select bank0
 12071  0F76  00D3               	movwf	??_sqrtf+1
 12072  0F77  3000               	movlw	0
 12073  0F78  0021               	movlb	1	; select bank1
 12074  0F79  0532               	andwf	(sqrtf@q+2)^(0+128),w
 12075  0F7A  0020               	movlb	0	; select bank0
 12076  0F7B  00D4               	movwf	??_sqrtf+2
 12077  0F7C  3000               	movlw	0
 12078  0F7D  0021               	movlb	1	; select bank1
 12079  0F7E  0533               	andwf	(sqrtf@q+3)^(0+128),w
 12080  0F7F  0020               	movlb	0	; select bank0
 12081  0F80  00D5               	movwf	??_sqrtf+3
 12082  0F81  0852               	movf	??_sqrtf,w
 12083  0F82  0021               	movlb	1	; select bank1
 12084  0F83  07B0               	addwf	sqrtf@q^(0+128),f
 12085  0F84  0020               	movlb	0	; select bank0
 12086  0F85  0853               	movf	??_sqrtf+1,w
 12087  0F86  0021               	movlb	1	; select bank1
 12088  0F87  3DB1               	addwfc	(sqrtf@q+1)^(0+128),f
 12089  0F88  0020               	movlb	0	; select bank0
 12090  0F89  0854               	movf	??_sqrtf+2,w
 12091  0F8A  0021               	movlb	1	; select bank1
 12092  0F8B  3DB2               	addwfc	(sqrtf@q+2)^(0+128),f
 12093  0F8C  0020               	movlb	0	; select bank0
 12094  0F8D  0855               	movf	??_sqrtf+3,w
 12095  0F8E  0021               	movlb	1	; select bank1
 12096  0F8F                     L11:
 12097  0F8F  3DB3               	addwfc	(sqrtf@q+3)^(0+128),f
 12098  0F90                     l5109:
 12099  0F90  0021               	movlb	1	; select bank1
 12100  0F91  0830               	movf	sqrtf@q^(0+128),w
 12101  0F92  0020               	movlb	0	; select bank0
 12102  0F93  00D2               	movwf	??_sqrtf
 12103  0F94  0021               	movlb	1	; select bank1
 12104  0F95  0831               	movf	(sqrtf@q+1)^(0+128),w
 12105  0F96  0020               	movlb	0	; select bank0
 12106  0F97  00D3               	movwf	??_sqrtf+1
 12107  0F98  0021               	movlb	1	; select bank1
 12108  0F99  0832               	movf	(sqrtf@q+2)^(0+128),w
 12109  0F9A  0020               	movlb	0	; select bank0
 12110  0F9B  00D4               	movwf	??_sqrtf+2
 12111  0F9C  0021               	movlb	1	; select bank1
 12112  0F9D  0833               	movf	(sqrtf@q+3)^(0+128),w
 12113  0F9E  0020               	movlb	0	; select bank0
 12114  0F9F  00D5               	movwf	??_sqrtf+3
 12115  0FA0  3001               	movlw	1
 12116  0FA1  00D6               	movwf	??_sqrtf+4
 12117  0FA2                     u5925:
 12118  0FA2  37D5               	asrf	??_sqrtf+3,f
 12119  0FA3  0CD4               	rrf	??_sqrtf+2,f
 12120  0FA4  0CD3               	rrf	??_sqrtf+1,f
 12121  0FA5  0CD2               	rrf	??_sqrtf,f
 12122  0FA6  0BD6               	decfsz	??_sqrtf+4,f
 12123  0FA7  2FA2               	goto	u5925
 12124  0FA8  3000               	movlw	0
 12125  0FA9  0752               	addwf	??_sqrtf,w
 12126  0FAA  0021               	movlb	1	; select bank1
 12127  0FAB  00C4               	movwf	sqrtf@ix^(0+128)
 12128  0FAC  3000               	movlw	0
 12129  0FAD  0020               	movlb	0	; select bank0
 12130  0FAE  3D53               	addwfc	??_sqrtf+1,w
 12131  0FAF  0021               	movlb	1	; select bank1
 12132  0FB0  00C5               	movwf	(sqrtf@ix+1)^(0+128)
 12133  0FB1  3000               	movlw	0
 12134  0FB2  0020               	movlb	0	; select bank0
 12135  0FB3  3D54               	addwfc	??_sqrtf+2,w
 12136  0FB4  0021               	movlb	1	; select bank1
 12137  0FB5  00C6               	movwf	(sqrtf@ix+2)^(0+128)
 12138  0FB6  303F               	movlw	63
 12139  0FB7  0020               	movlb	0	; select bank0
 12140  0FB8  3D55               	addwfc	??_sqrtf+3,w
 12141  0FB9  0021               	movlb	1	; select bank1
 12142  0FBA  00C7               	movwf	(sqrtf@ix+3)^(0+128)
 12143  0FBB  083C               	movf	sqrtf@m^(0+128),w
 12144  0FBC  0020               	movlb	0	; select bank0
 12145  0FBD  00D2               	movwf	??_sqrtf
 12146  0FBE  0021               	movlb	1	; select bank1
 12147  0FBF  083D               	movf	(sqrtf@m+1)^(0+128),w
 12148  0FC0  0020               	movlb	0	; select bank0
 12149  0FC1  00D3               	movwf	??_sqrtf+1
 12150  0FC2  0021               	movlb	1	; select bank1
 12151  0FC3  083E               	movf	(sqrtf@m+2)^(0+128),w
 12152  0FC4  0020               	movlb	0	; select bank0
 12153  0FC5  00D4               	movwf	??_sqrtf+2
 12154  0FC6  0021               	movlb	1	; select bank1
 12155  0FC7  083F               	movf	(sqrtf@m+3)^(0+128),w
 12156  0FC8  0020               	movlb	0	; select bank0
 12157  0FC9  00D5               	movwf	??_sqrtf+3
 12158  0FCA  3017               	movlw	23
 12159  0FCB                     u5935:
 12160  0FCB  35D2               	lslf	??_sqrtf,f
 12161  0FCC  0DD3               	rlf	??_sqrtf+1,f
 12162  0FCD  0DD4               	rlf	??_sqrtf+2,f
 12163  0FCE  0DD5               	rlf	??_sqrtf+3,f
 12164  0FCF  0B89               	decfsz	9,f
 12165  0FD0  2FCB               	goto	u5935
 12166  0FD1  0852               	movf	??_sqrtf,w
 12167  0FD2  0021               	movlb	1	; select bank1
 12168  0FD3  07C4               	addwf	sqrtf@ix^(0+128),f
 12169  0FD4  0020               	movlb	0	; select bank0
 12170  0FD5  0853               	movf	??_sqrtf+1,w
 12171  0FD6  0021               	movlb	1	; select bank1
 12172  0FD7  3DC5               	addwfc	(sqrtf@ix+1)^(0+128),f
 12173  0FD8  0020               	movlb	0	; select bank0
 12174  0FD9  0854               	movf	??_sqrtf+2,w
 12175  0FDA  0021               	movlb	1	; select bank1
 12176  0FDB  3DC6               	addwfc	(sqrtf@ix+2)^(0+128),f
 12177  0FDC  0020               	movlb	0	; select bank0
 12178  0FDD  0855               	movf	??_sqrtf+3,w
 12179  0FDE  0021               	movlb	1	; select bank1
 12180  0FDF  3DC7               	addwfc	(sqrtf@ix+3)^(0+128),f
 12181  0FE0  0847               	movf	(sqrtf@ix+3)^(0+128),w
 12182  0FE1  00AF               	movwf	(sqrtf@__xc8_float_word+3)^(0+128)
 12183  0FE2  0846               	movf	(sqrtf@ix+2)^(0+128),w
 12184  0FE3  00AE               	movwf	(sqrtf@__xc8_float_word+2)^(0+128)
 12185  0FE4  0845               	movf	(sqrtf@ix+1)^(0+128),w
 12186  0FE5  00AD               	movwf	(sqrtf@__xc8_float_word+1)^(0+128)
 12187  0FE6  0844               	movf	sqrtf@ix^(0+128),w
 12188  0FE7  00AC               	movwf	sqrtf@__xc8_float_word^(0+128)
 12189  0FE8  082F               	movf	(sqrtf@__xc8_float_word+3)^(0+128),w
 12190  0FE9  00BB               	movwf	(sqrtf@z+3)^(0+128)
 12191  0FEA  082E               	movf	(sqrtf@__xc8_float_word+2)^(0+128),w
 12192  0FEB  00BA               	movwf	(sqrtf@z+2)^(0+128)
 12193  0FEC  082D               	movf	(sqrtf@__xc8_float_word+1)^(0+128),w
 12194  0FED  00B9               	movwf	(sqrtf@z+1)^(0+128)
 12195  0FEE  082C               	movf	sqrtf@__xc8_float_word^(0+128),w
 12196  0FEF  00B8               	movwf	sqrtf@z^(0+128)
 12197  0FF0  083B               	movf	(sqrtf@z+3)^(0+128),w
 12198  0FF1  0020               	movlb	0	; select bank0
 12199  0FF2  00D1               	movwf	?_sqrtf+3
 12200  0FF3  0021               	movlb	1	; select bank1
 12201  0FF4  083A               	movf	(sqrtf@z+2)^(0+128),w
 12202  0FF5  0020               	movlb	0	; select bank0
 12203  0FF6  00D0               	movwf	?_sqrtf+2
 12204  0FF7  0021               	movlb	1	; select bank1
 12205  0FF8  0839               	movf	(sqrtf@z+1)^(0+128),w
 12206  0FF9  0020               	movlb	0	; select bank0
 12207  0FFA  00CF               	movwf	?_sqrtf+1
 12208  0FFB  0021               	movlb	1	; select bank1
 12209  0FFC  0838               	movf	sqrtf@z^(0+128),w
 12210  0FFD  0020               	movlb	0	; select bank0
 12211  0FFE  00CE               	movwf	?_sqrtf
 12212  0FFF  0008               	return
 12213  1000                     __end_of_sqrtf:
 12214                           
 12215                           	psect	text56
 12216  1B29                     __ptext56:	
 12217 ;; *************** function _nanf *****************
 12218 ;; Defined at:
 12219 ;;		line 4 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/nanf.c"
 12220 ;; Parameters:    Size  Location     Type
 12221 ;;  s               2    0[COMMON] PTR const unsigned char 
 12222 ;;		 -> STR_15(1), 
 12223 ;; Auto vars:     Size  Location     Type
 12224 ;;  u               4    4[COMMON] struct .
 12225 ;; Return value:  Size  Location     Type
 12226 ;;                  4    0[COMMON] float 
 12227 ;; Registers used:
 12228 ;;		wreg
 12229 ;; Tracked objects:
 12230 ;;		On entry : 1F/3
 12231 ;;		On exit  : 1F/3
 12232 ;;		Unchanged: 1E/0
 12233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12234 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12235 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12237 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12238 ;;Total ram usage:        8 bytes
 12239 ;; Hardware stack levels used:    1
 12240 ;; Hardware stack levels required when called:    5
 12241 ;; This function calls:
 12242 ;;		Nothing
 12243 ;; This function is called by:
 12244 ;;		_sqrtf
 12245 ;; This function uses a non-reentrant model
 12246 ;;
 12247                           
 12248                           
 12249                           ;psect for function _nanf
 12250  1B29                     _nanf:
 12251                           
 12252                           ;incstack = 0
 12253                           ; Regs used in _nanf: [wreg]
 12254  1B29  307F               	movlw	127
 12255  1B2A  00F7               	movwf	nanf@u+3
 12256  1B2B  30FF               	movlw	255
 12257  1B2C  00F6               	movwf	nanf@u+2
 12258  1B2D  30FF               	movlw	255
 12259  1B2E  00F5               	movwf	nanf@u+1
 12260  1B2F  30FF               	movlw	255
 12261  1B30  00F4               	movwf	nanf@u
 12262  1B31  0877               	movf	nanf@u+3,w
 12263  1B32  00F3               	movwf	?_nanf+3
 12264  1B33  0876               	movf	nanf@u+2,w
 12265  1B34  00F2               	movwf	?_nanf+2
 12266  1B35  0875               	movf	nanf@u+1,w
 12267  1B36  00F1               	movwf	?_nanf+1
 12268  1B37  0874               	movf	nanf@u,w
 12269  1B38  00F0               	movwf	?_nanf
 12270  1B39  0008               	return
 12271  1B3A                     __end_of_nanf:
 12272                           
 12273                           	psect	text57
 12274  0778                     __ptext57:	
 12275 ;; *************** function ___flge *****************
 12276 ;; Defined at:
 12277 ;;		line 4 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/flge.c"
 12278 ;; Parameters:    Size  Location     Type
 12279 ;;  ff1             4   26[BANK0 ] float 
 12280 ;;  ff2             4   30[BANK0 ] float 
 12281 ;; Auto vars:     Size  Location     Type
 12282 ;;		None
 12283 ;; Return value:  Size  Location     Type
 12284 ;;		None               void
 12285 ;; Registers used:
 12286 ;;		wreg, status,2, status,0
 12287 ;; Tracked objects:
 12288 ;;		On entry : 1F/0
 12289 ;;		On exit  : 1F/0
 12290 ;;		Unchanged: 0/0
 12291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12292 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12294 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12295 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12296 ;;Total ram usage:       12 bytes
 12297 ;; Hardware stack levels used:    1
 12298 ;; Hardware stack levels required when called:    5
 12299 ;; This function calls:
 12300 ;;		Nothing
 12301 ;; This function is called by:
 12302 ;;		_efgtoa
 12303 ;;		_sqrtf
 12304 ;; This function uses a non-reentrant model
 12305 ;;
 12306                           
 12307                           
 12308                           ;psect for function ___flge
 12309  0778                     ___flge:
 12310                           
 12311                           ;incstack = 0
 12312                           ; Regs used in ___flge: [wreg+status,2+status,0]
 12313  0778  3000               	movlw	0
 12314  0779  053A               	andwf	___flge@ff1,w
 12315  077A  00C2               	movwf	??___flge
 12316  077B  3000               	movlw	0
 12317  077C  053B               	andwf	___flge@ff1+1,w
 12318  077D  00C3               	movwf	??___flge+1
 12319  077E  3080               	movlw	128
 12320  077F  053C               	andwf	___flge@ff1+2,w
 12321  0780  00C4               	movwf	??___flge+2
 12322  0781  307F               	movlw	127
 12323  0782  053D               	andwf	___flge@ff1+3,w
 12324  0783  00C5               	movwf	??___flge+3
 12325  0784  0845               	movf	??___flge+3,w
 12326  0785  0444               	iorwf	??___flge+2,w
 12327  0786  0443               	iorwf	??___flge+1,w
 12328  0787  0442               	iorwf	??___flge,w
 12329  0788  1D03               	skipz
 12330  0789  2F92               	goto	l1363
 12331  078A  3000               	movlw	0
 12332  078B  00BD               	movwf	___flge@ff1+3
 12333  078C  3000               	movlw	0
 12334  078D  00BC               	movwf	___flge@ff1+2
 12335  078E  3000               	movlw	0
 12336  078F  00BB               	movwf	___flge@ff1+1
 12337  0790  3000               	movlw	0
 12338  0791  00BA               	movwf	___flge@ff1
 12339  0792                     l1363:
 12340  0792  3000               	movlw	0
 12341  0793  053E               	andwf	___flge@ff2,w
 12342  0794  00C2               	movwf	??___flge
 12343  0795  3000               	movlw	0
 12344  0796  053F               	andwf	___flge@ff2+1,w
 12345  0797  00C3               	movwf	??___flge+1
 12346  0798  3080               	movlw	128
 12347  0799  0540               	andwf	___flge@ff2+2,w
 12348  079A  00C4               	movwf	??___flge+2
 12349  079B  307F               	movlw	127
 12350  079C  0541               	andwf	___flge@ff2+3,w
 12351  079D  00C5               	movwf	??___flge+3
 12352  079E  0845               	movf	??___flge+3,w
 12353  079F  0444               	iorwf	??___flge+2,w
 12354  07A0  0443               	iorwf	??___flge+1,w
 12355  07A1  0442               	iorwf	??___flge,w
 12356  07A2  1D03               	skipz
 12357  07A3  2FAC               	goto	l4135
 12358  07A4  3000               	movlw	0
 12359  07A5  00C1               	movwf	___flge@ff2+3
 12360  07A6  3000               	movlw	0
 12361  07A7  00C0               	movwf	___flge@ff2+2
 12362  07A8  3000               	movlw	0
 12363  07A9  00BF               	movwf	___flge@ff2+1
 12364  07AA  3000               	movlw	0
 12365  07AB  00BE               	movwf	___flge@ff2
 12366  07AC                     l4135:
 12367  07AC  1FBD               	btfss	___flge@ff1+3,7
 12368  07AD  2FC6               	goto	l4139
 12369  07AE  3000               	movlw	0
 12370  07AF  00C2               	movwf	??___flge
 12371  07B0  3000               	movlw	0
 12372  07B1  00C3               	movwf	??___flge+1
 12373  07B2  3000               	movlw	0
 12374  07B3  00C4               	movwf	??___flge+2
 12375  07B4  3080               	movlw	128
 12376  07B5  00C5               	movwf	??___flge+3
 12377  07B6  083A               	movf	___flge@ff1,w
 12378  07B7  02C2               	subwf	??___flge,f
 12379  07B8  083B               	movf	___flge@ff1+1,w
 12380  07B9  3BC3               	subwfb	??___flge+1,f
 12381  07BA  083C               	movf	___flge@ff1+2,w
 12382  07BB  3BC4               	subwfb	??___flge+2,f
 12383  07BC  083D               	movf	___flge@ff1+3,w
 12384  07BD  3BC5               	subwfb	??___flge+3,f
 12385  07BE  0845               	movf	??___flge+3,w
 12386  07BF  00BD               	movwf	___flge@ff1+3
 12387  07C0  0844               	movf	??___flge+2,w
 12388  07C1  00BC               	movwf	___flge@ff1+2
 12389  07C2  0843               	movf	??___flge+1,w
 12390  07C3  00BB               	movwf	___flge@ff1+1
 12391  07C4  0842               	movf	??___flge,w
 12392  07C5  00BA               	movwf	___flge@ff1
 12393  07C6                     l4139:
 12394  07C6  1FC1               	btfss	___flge@ff2+3,7
 12395  07C7  2FE0               	goto	l1366
 12396  07C8  3000               	movlw	0
 12397  07C9  00C2               	movwf	??___flge
 12398  07CA  3000               	movlw	0
 12399  07CB  00C3               	movwf	??___flge+1
 12400  07CC  3000               	movlw	0
 12401  07CD  00C4               	movwf	??___flge+2
 12402  07CE  3080               	movlw	128
 12403  07CF  00C5               	movwf	??___flge+3
 12404  07D0  083E               	movf	___flge@ff2,w
 12405  07D1  02C2               	subwf	??___flge,f
 12406  07D2  083F               	movf	___flge@ff2+1,w
 12407  07D3  3BC3               	subwfb	??___flge+1,f
 12408  07D4  0840               	movf	___flge@ff2+2,w
 12409  07D5  3BC4               	subwfb	??___flge+2,f
 12410  07D6  0841               	movf	___flge@ff2+3,w
 12411  07D7  3BC5               	subwfb	??___flge+3,f
 12412  07D8  0845               	movf	??___flge+3,w
 12413  07D9  00C1               	movwf	___flge@ff2+3
 12414  07DA  0844               	movf	??___flge+2,w
 12415  07DB  00C0               	movwf	___flge@ff2+2
 12416  07DC  0843               	movf	??___flge+1,w
 12417  07DD  00BF               	movwf	___flge@ff2+1
 12418  07DE  0842               	movf	??___flge,w
 12419  07DF  00BE               	movwf	___flge@ff2
 12420  07E0                     l1366:
 12421  07E0  3080               	movlw	128
 12422  07E1  06BD               	xorwf	___flge@ff1+3,f
 12423  07E2  3080               	movlw	128
 12424  07E3  06C1               	xorwf	___flge@ff2+3,f
 12425  07E4  0841               	movf	___flge@ff2+3,w
 12426  07E5  023D               	subwf	___flge@ff1+3,w
 12427  07E6  1D03               	skipz
 12428  07E7  0008               	return
 12429  07E8  0840               	movf	___flge@ff2+2,w
 12430  07E9  023C               	subwf	___flge@ff1+2,w
 12431  07EA  1D03               	skipz
 12432  07EB  0008               	return
 12433  07EC  083F               	movf	___flge@ff2+1,w
 12434  07ED  023B               	subwf	___flge@ff1+1,w
 12435  07EE  1D03               	skipz
 12436  07EF  0008               	return
 12437  07F0  083E               	movf	___flge@ff2,w
 12438  07F1  023A               	subwf	___flge@ff1,w
 12439  07F2  0008               	return
 12440  07F3                     __end_of___flge:
 12441                           
 12442                           	psect	text58
 12443  10E1                     __ptext58:	
 12444 ;; *************** function _Measure_R_PT100_2Wire *****************
 12445 ;; Defined at:
 12446 ;;		line 163 in file "main.c"
 12447 ;; Parameters:    Size  Location     Type
 12448 ;;  ADC_volt        4   48[BANK1 ] float 
 12449 ;; Auto vars:     Size  Location     Type
 12450 ;;  R_PT100         4   76[BANK0 ] float 
 12451 ;; Return value:  Size  Location     Type
 12452 ;;                  4   48[BANK1 ] float 
 12453 ;; Registers used:
 12454 ;;		wreg, status,2, status,0, pclath, cstack
 12455 ;; Tracked objects:
 12456 ;;		On entry : 1F/1
 12457 ;;		On exit  : 1F/1
 12458 ;;		Unchanged: 0/0
 12459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12460 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 12461 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12463 ;;      Totals:         0       4       4       0       0       0       0       0       0       0       0       0       
      +0       0
 12464 ;;Total ram usage:        8 bytes
 12465 ;; Hardware stack levels used:    1
 12466 ;; Hardware stack levels required when called:    7
 12467 ;; This function calls:
 12468 ;;		___fldiv
 12469 ;;		___flmul
 12470 ;;		___flsub
 12471 ;; This function is called by:
 12472 ;;		_Read_PT100_Temp
 12473 ;; This function uses a non-reentrant model
 12474 ;;
 12475                           
 12476                           
 12477                           ;psect for function _Measure_R_PT100_2Wire
 12478  10E1                     _Measure_R_PT100_2Wire:
 12479                           
 12480                           ;main.c: 167:     R_PT100 = R_const * ADC_volt / (V_cc_const - ADC_volt);
 12481                           
 12482                           ;incstack = 0
 12483                           ; Regs used in _Measure_R_PT100_2Wire: [wreg+status,2+status,0+pclath+cstack]
 12484  10E1  0853               	movf	(Measure_R_PT100_2Wire@ADC_volt+3)^(0+128),w
 12485  10E2  0020               	movlb	0	; select bank0
 12486  10E3  00D1               	movwf	___flsub@a+3
 12487  10E4  0021               	movlb	1	; select bank1
 12488  10E5  0852               	movf	(Measure_R_PT100_2Wire@ADC_volt+2)^(0+128),w
 12489  10E6  0020               	movlb	0	; select bank0
 12490  10E7  00D0               	movwf	___flsub@a+2
 12491  10E8  0021               	movlb	1	; select bank1
 12492  10E9  0851               	movf	(Measure_R_PT100_2Wire@ADC_volt+1)^(0+128),w
 12493  10EA  0020               	movlb	0	; select bank0
 12494  10EB  00CF               	movwf	___flsub@a+1
 12495  10EC  0021               	movlb	1	; select bank1
 12496  10ED  0850               	movf	Measure_R_PT100_2Wire@ADC_volt^(0+128),w
 12497  10EE  0020               	movlb	0	; select bank0
 12498  10EF  00CE               	movwf	___flsub@a
 12499  10F0  3040               	movlw	64
 12500  10F1  00D5               	movwf	___flsub@b+3
 12501  10F2  30A0               	movlw	160
 12502  10F3  00D4               	movwf	___flsub@b+2
 12503  10F4  3000               	movlw	0
 12504  10F5  00D3               	movwf	___flsub@b+1
 12505  10F6  3000               	movlw	0
 12506  10F7  00D2               	movwf	___flsub@b
 12507  10F8  319C  244C  3190   	fcall	___flsub
 12508  10FB  0851               	movf	?___flsub+3,w
 12509  10FC  0021               	movlb	1	; select bank1
 12510  10FD  00CB               	movwf	(___fldiv@a+3)^(0+128)
 12511  10FE  0020               	movlb	0	; select bank0
 12512  10FF  0850               	movf	?___flsub+2,w
 12513  1100  0021               	movlb	1	; select bank1
 12514  1101  00CA               	movwf	(___fldiv@a+2)^(0+128)
 12515  1102  0020               	movlb	0	; select bank0
 12516  1103  084F               	movf	?___flsub+1,w
 12517  1104  0021               	movlb	1	; select bank1
 12518  1105  00C9               	movwf	(___fldiv@a+1)^(0+128)
 12519  1106  0020               	movlb	0	; select bank0
 12520  1107  084E               	movf	?___flsub,w
 12521  1108  0021               	movlb	1	; select bank1
 12522  1109  00C8               	movwf	___fldiv@a^(0+128)
 12523  110A  3042               	movlw	66
 12524  110B  0020               	movlb	0	; select bank0
 12525  110C  00A3               	movwf	___flmul@b+3
 12526  110D  30C8               	movlw	200
 12527  110E  00A2               	movwf	___flmul@b+2
 12528  110F  3000               	movlw	0
 12529  1110  00A1               	movwf	___flmul@b+1
 12530  1111  3000               	movlw	0
 12531  1112  00A0               	movwf	___flmul@b
 12532  1113  0021               	movlb	1	; select bank1
 12533  1114  0853               	movf	(Measure_R_PT100_2Wire@ADC_volt+3)^(0+128),w
 12534  1115  0020               	movlb	0	; select bank0
 12535  1116  00A7               	movwf	___flmul@a+3
 12536  1117  0021               	movlb	1	; select bank1
 12537  1118  0852               	movf	(Measure_R_PT100_2Wire@ADC_volt+2)^(0+128),w
 12538  1119  0020               	movlb	0	; select bank0
 12539  111A  00A6               	movwf	___flmul@a+2
 12540  111B  0021               	movlb	1	; select bank1
 12541  111C  0851               	movf	(Measure_R_PT100_2Wire@ADC_volt+1)^(0+128),w
 12542  111D  0020               	movlb	0	; select bank0
 12543  111E  00A5               	movwf	___flmul@a+1
 12544  111F  0021               	movlb	1	; select bank1
 12545  1120  0850               	movf	Measure_R_PT100_2Wire@ADC_volt^(0+128),w
 12546  1121  0020               	movlb	0	; select bank0
 12547  1122  00A4               	movwf	___flmul@a
 12548  1123  318A  22F4  3190   	fcall	___flmul
 12549  1126  0823               	movf	?___flmul+3,w
 12550  1127  0021               	movlb	1	; select bank1
 12551  1128  00CF               	movwf	(___fldiv@b+3)^(0+128)
 12552  1129  0020               	movlb	0	; select bank0
 12553  112A  0822               	movf	?___flmul+2,w
 12554  112B  0021               	movlb	1	; select bank1
 12555  112C  00CE               	movwf	(___fldiv@b+2)^(0+128)
 12556  112D  0020               	movlb	0	; select bank0
 12557  112E  0821               	movf	?___flmul+1,w
 12558  112F  0021               	movlb	1	; select bank1
 12559  1130  00CD               	movwf	(___fldiv@b+1)^(0+128)
 12560  1131  0020               	movlb	0	; select bank0
 12561  1132  0820               	movf	?___flmul,w
 12562  1133  0021               	movlb	1	; select bank1
 12563  1134  00CC               	movwf	___fldiv@b^(0+128)
 12564  1135  3194  244F         	fcall	___fldiv
 12565  1137  084B               	movf	(?___fldiv+3)^(0+128),w
 12566  1138  0020               	movlb	0	; select bank0
 12567  1139  00EF               	movwf	Measure_R_PT100_2Wire@R_PT100+3
 12568  113A  0021               	movlb	1	; select bank1
 12569  113B  084A               	movf	(?___fldiv+2)^(0+128),w
 12570  113C  0020               	movlb	0	; select bank0
 12571  113D  00EE               	movwf	Measure_R_PT100_2Wire@R_PT100+2
 12572  113E  0021               	movlb	1	; select bank1
 12573  113F  0849               	movf	(?___fldiv+1)^(0+128),w
 12574  1140  0020               	movlb	0	; select bank0
 12575  1141  00ED               	movwf	Measure_R_PT100_2Wire@R_PT100+1
 12576  1142  0021               	movlb	1	; select bank1
 12577  1143  0848               	movf	?___fldiv^(0+128),w
 12578  1144  0020               	movlb	0	; select bank0
 12579  1145  00EC               	movwf	Measure_R_PT100_2Wire@R_PT100
 12580                           
 12581                           ;main.c: 169:     return R_PT100;
 12582  1146  086F               	movf	Measure_R_PT100_2Wire@R_PT100+3,w
 12583  1147  0021               	movlb	1	; select bank1
 12584  1148  00D3               	movwf	(?_Measure_R_PT100_2Wire+3)^(0+128)
 12585  1149  0020               	movlb	0	; select bank0
 12586  114A  086E               	movf	Measure_R_PT100_2Wire@R_PT100+2,w
 12587  114B  0021               	movlb	1	; select bank1
 12588  114C  00D2               	movwf	(?_Measure_R_PT100_2Wire+2)^(0+128)
 12589  114D  0020               	movlb	0	; select bank0
 12590  114E  086D               	movf	Measure_R_PT100_2Wire@R_PT100+1,w
 12591  114F  0021               	movlb	1	; select bank1
 12592  1150  00D1               	movwf	(?_Measure_R_PT100_2Wire+1)^(0+128)
 12593  1151  0020               	movlb	0	; select bank0
 12594  1152  086C               	movf	Measure_R_PT100_2Wire@R_PT100,w
 12595  1153  0021               	movlb	1	; select bank1
 12596  1154  00D0               	movwf	?_Measure_R_PT100_2Wire^(0+128)
 12597  1155  0008               	return
 12598  1156                     __end_of_Measure_R_PT100_2Wire:
 12599                           
 12600                           	psect	text59
 12601  1DF3                     __ptext59:	
 12602 ;; *************** function _ChangeADCtoVoltage *****************
 12603 ;; Defined at:
 12604 ;;		line 156 in file "main.c"
 12605 ;; Parameters:    Size  Location     Type
 12606 ;;  ADC_number      2   48[BANK1 ] unsigned short 
 12607 ;; Auto vars:     Size  Location     Type
 12608 ;;		None
 12609 ;; Return value:  Size  Location     Type
 12610 ;;                  4   48[BANK1 ] float 
 12611 ;; Registers used:
 12612 ;;		wreg, status,2, status,0, pclath, cstack
 12613 ;; Tracked objects:
 12614 ;;		On entry : 1F/1
 12615 ;;		On exit  : 1F/1
 12616 ;;		Unchanged: 0/0
 12617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12618 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 12619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12621 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 12622 ;;Total ram usage:        4 bytes
 12623 ;; Hardware stack levels used:    1
 12624 ;; Hardware stack levels required when called:    7
 12625 ;; This function calls:
 12626 ;;		___fldiv
 12627 ;;		___flmul
 12628 ;;		___xxtofl
 12629 ;; This function is called by:
 12630 ;;		_Read_PT100_Temp
 12631 ;; This function uses a non-reentrant model
 12632 ;;
 12633                           
 12634                           
 12635                           ;psect for function _ChangeADCtoVoltage
 12636  1DF3                     _ChangeADCtoVoltage:
 12637                           
 12638                           ;main.c: 158:     return (float)(5.0 * ADC_number / 1023);
 12639                           
 12640                           ;incstack = 0
 12641                           ; Regs used in _ChangeADCtoVoltage: [wreg+status,2+status,0+pclath+cstack]
 12642  1DF3  3044               	movlw	68
 12643  1DF4  00CB               	movwf	(___fldiv@a+3)^(0+128)
 12644  1DF5  307F               	movlw	127
 12645  1DF6  00CA               	movwf	(___fldiv@a+2)^(0+128)
 12646  1DF7  30C0               	movlw	192
 12647  1DF8  00C9               	movwf	(___fldiv@a+1)^(0+128)
 12648  1DF9  3000               	movlw	0
 12649  1DFA  00C8               	movwf	___fldiv@a^(0+128)
 12650  1DFB  3040               	movlw	64
 12651  1DFC  0020               	movlb	0	; select bank0
 12652  1DFD  00A3               	movwf	___flmul@b+3
 12653  1DFE  30A0               	movlw	160
 12654  1DFF  00A2               	movwf	___flmul@b+2
 12655  1E00  3000               	movlw	0
 12656  1E01  00A1               	movwf	___flmul@b+1
 12657  1E02  3000               	movlw	0
 12658  1E03  00A0               	movwf	___flmul@b
 12659  1E04  0021               	movlb	1	; select bank1
 12660  1E05  0850               	movf	ChangeADCtoVoltage@ADC_number^(0+128),w
 12661  1E06  00F0               	movwf	___xxtofl@val
 12662  1E07  0851               	movf	(ChangeADCtoVoltage@ADC_number+1)^(0+128),w
 12663  1E08  00F1               	movwf	___xxtofl@val+1
 12664  1E09  01F2               	clrf	___xxtofl@val+2
 12665  1E0A  01F3               	clrf	___xxtofl@val+3
 12666  1E0B  3000               	movlw	0
 12667  1E0C  3192  2243  319D   	fcall	___xxtofl
 12668  1E0F  0873               	movf	?___xxtofl+3,w
 12669  1E10  0020               	movlb	0	; select bank0
 12670  1E11  00A7               	movwf	___flmul@a+3
 12671  1E12  0872               	movf	?___xxtofl+2,w
 12672  1E13  00A6               	movwf	___flmul@a+2
 12673  1E14  0871               	movf	?___xxtofl+1,w
 12674  1E15  00A5               	movwf	___flmul@a+1
 12675  1E16  0870               	movf	?___xxtofl,w
 12676  1E17  00A4               	movwf	___flmul@a
 12677  1E18  318A  22F4  319D   	fcall	___flmul
 12678  1E1B  0823               	movf	?___flmul+3,w
 12679  1E1C  0021               	movlb	1	; select bank1
 12680  1E1D  00CF               	movwf	(___fldiv@b+3)^(0+128)
 12681  1E1E  0020               	movlb	0	; select bank0
 12682  1E1F  0822               	movf	?___flmul+2,w
 12683  1E20  0021               	movlb	1	; select bank1
 12684  1E21  00CE               	movwf	(___fldiv@b+2)^(0+128)
 12685  1E22  0020               	movlb	0	; select bank0
 12686  1E23  0821               	movf	?___flmul+1,w
 12687  1E24  0021               	movlb	1	; select bank1
 12688  1E25  00CD               	movwf	(___fldiv@b+1)^(0+128)
 12689  1E26  0020               	movlb	0	; select bank0
 12690  1E27  0820               	movf	?___flmul,w
 12691  1E28  0021               	movlb	1	; select bank1
 12692  1E29  00CC               	movwf	___fldiv@b^(0+128)
 12693  1E2A  3194  244F         	fcall	___fldiv
 12694  1E2C  084B               	movf	(?___fldiv+3)^(0+128),w
 12695  1E2D  00D3               	movwf	(?_ChangeADCtoVoltage+3)^(0+128)
 12696  1E2E  084A               	movf	(?___fldiv+2)^(0+128),w
 12697  1E2F  00D2               	movwf	(?_ChangeADCtoVoltage+2)^(0+128)
 12698  1E30  0849               	movf	(?___fldiv+1)^(0+128),w
 12699  1E31  00D1               	movwf	(?_ChangeADCtoVoltage+1)^(0+128)
 12700  1E32  0848               	movf	?___fldiv^(0+128),w
 12701  1E33  00D0               	movwf	?_ChangeADCtoVoltage^(0+128)
 12702  1E34  0008               	return
 12703  1E35                     __end_of_ChangeADCtoVoltage:
 12704                           
 12705                           	psect	text60
 12706  1243                     __ptext60:	
 12707 ;; *************** function ___xxtofl *****************
 12708 ;; Defined at:
 12709 ;;		line 10 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/xxtofl.c"
 12710 ;; Parameters:    Size  Location     Type
 12711 ;;  sign            1    wreg     unsigned char 
 12712 ;;  val             4    0[COMMON] long 
 12713 ;; Auto vars:     Size  Location     Type
 12714 ;;  sign            1    8[COMMON] unsigned char 
 12715 ;;  arg             4   10[COMMON] unsigned long 
 12716 ;;  exp             1    9[COMMON] unsigned char 
 12717 ;; Return value:  Size  Location     Type
 12718 ;;                  4    0[COMMON] unsigned char 
 12719 ;; Registers used:
 12720 ;;		wreg, status,2, status,0
 12721 ;; Tracked objects:
 12722 ;;		On entry : 1F/1
 12723 ;;		On exit  : 1F/1
 12724 ;;		Unchanged: 1F/0
 12725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12726 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12727 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12728 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12729 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12730 ;;Total ram usage:       14 bytes
 12731 ;; Hardware stack levels used:    1
 12732 ;; Hardware stack levels required when called:    5
 12733 ;; This function calls:
 12734 ;;		Nothing
 12735 ;; This function is called by:
 12736 ;;		_ChangeADCtoVoltage
 12737 ;; This function uses a non-reentrant model
 12738 ;;
 12739                           
 12740                           
 12741                           ;psect for function ___xxtofl
 12742  1243                     ___xxtofl:
 12743                           
 12744                           ;incstack = 0
 12745                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
 12746                           ;___xxtofl@sign stored from wreg
 12747  1243  00F8               	movwf	___xxtofl@sign
 12748  1244  0878               	movf	___xxtofl@sign,w
 12749  1245  1D03               	btfss	3,2
 12750  1246  1FF3               	btfss	___xxtofl@val+3,7
 12751  1247  2A58               	goto	l5123
 12752  1248  0970               	comf	___xxtofl@val,w
 12753  1249  00FA               	movwf	___xxtofl@arg
 12754  124A  0971               	comf	___xxtofl@val+1,w
 12755  124B  00FB               	movwf	___xxtofl@arg+1
 12756  124C  0972               	comf	___xxtofl@val+2,w
 12757  124D  00FC               	movwf	___xxtofl@arg+2
 12758  124E  0973               	comf	___xxtofl@val+3,w
 12759  124F  00FD               	movwf	___xxtofl@arg+3
 12760  1250  0AFA               	incf	___xxtofl@arg,f
 12761  1251  1903               	skipnz
 12762  1252  0AFB               	incf	___xxtofl@arg+1,f
 12763  1253  1903               	skipnz
 12764  1254  0AFC               	incf	___xxtofl@arg+2,f
 12765  1255  1903               	skipnz
 12766  1256  0AFD               	incf	___xxtofl@arg+3,f
 12767  1257  2A60               	goto	l1626
 12768  1258                     l5123:
 12769  1258  0873               	movf	___xxtofl@val+3,w
 12770  1259  00FD               	movwf	___xxtofl@arg+3
 12771  125A  0872               	movf	___xxtofl@val+2,w
 12772  125B  00FC               	movwf	___xxtofl@arg+2
 12773  125C  0871               	movf	___xxtofl@val+1,w
 12774  125D  00FB               	movwf	___xxtofl@arg+1
 12775  125E  0870               	movf	___xxtofl@val,w
 12776  125F  00FA               	movwf	___xxtofl@arg
 12777  1260                     l1626:
 12778  1260  0873               	movf	___xxtofl@val+3,w
 12779  1261  0472               	iorwf	___xxtofl@val+2,w
 12780  1262  0471               	iorwf	___xxtofl@val+1,w
 12781  1263  0470               	iorwf	___xxtofl@val,w
 12782  1264  1D03               	skipz
 12783  1265  2A6F               	goto	l5129
 12784  1266  3000               	movlw	0
 12785  1267  00F3               	movwf	?___xxtofl+3
 12786  1268  3000               	movlw	0
 12787  1269  00F2               	movwf	?___xxtofl+2
 12788  126A  3000               	movlw	0
 12789  126B  00F1               	movwf	?___xxtofl+1
 12790  126C  3000               	movlw	0
 12791  126D  00F0               	movwf	?___xxtofl
 12792  126E  0008               	return
 12793  126F                     l5129:
 12794  126F  3096               	movlw	150
 12795  1270  00F4               	movwf	??___xxtofl
 12796  1271  0874               	movf	??___xxtofl,w
 12797  1272  00F9               	movwf	___xxtofl@exp
 12798  1273                     l5133:
 12799  1273  30FE               	movlw	254
 12800  1274  057D               	andwf	___xxtofl@arg+3,w
 12801  1275  1903               	btfsc	3,2
 12802  1276  2A96               	goto	l1632
 12803  1277  3001               	movlw	1
 12804  1278  00F4               	movwf	??___xxtofl
 12805  1279  0874               	movf	??___xxtofl,w
 12806  127A  07F9               	addwf	___xxtofl@exp,f
 12807  127B  3001               	movlw	1
 12808  127C                     u5975:
 12809  127C  36FD               	lsrf	___xxtofl@arg+3,f
 12810  127D  0CFC               	rrf	___xxtofl@arg+2,f
 12811  127E  0CFB               	rrf	___xxtofl@arg+1,f
 12812  127F  0CFA               	rrf	___xxtofl@arg,f
 12813  1280  0B89               	decfsz	9,f
 12814  1281  2A7C               	goto	u5975
 12815  1282  2A73               	goto	l5133
 12816  1283                     l5135:
 12817  1283  3001               	movlw	1
 12818  1284  00F4               	movwf	??___xxtofl
 12819  1285  0874               	movf	??___xxtofl,w
 12820  1286  07F9               	addwf	___xxtofl@exp,f
 12821  1287  3001               	movlw	1
 12822  1288  07FA               	addwf	___xxtofl@arg,f
 12823  1289  3000               	movlw	0
 12824  128A  3DFB               	addwfc	___xxtofl@arg+1,f
 12825  128B  3000               	movlw	0
 12826  128C  3DFC               	addwfc	___xxtofl@arg+2,f
 12827  128D  3000               	movlw	0
 12828  128E  3DFD               	addwfc	___xxtofl@arg+3,f
 12829  128F  3001               	movlw	1
 12830  1290                     u5995:
 12831  1290  36FD               	lsrf	___xxtofl@arg+3,f
 12832  1291  0CFC               	rrf	___xxtofl@arg+2,f
 12833  1292  0CFB               	rrf	___xxtofl@arg+1,f
 12834  1293  0CFA               	rrf	___xxtofl@arg,f
 12835  1294  0B89               	decfsz	9,f
 12836  1295  2A90               	goto	u5995
 12837  1296                     l1632:
 12838  1296  30FF               	movlw	255
 12839  1297  057D               	andwf	___xxtofl@arg+3,w
 12840  1298  1903               	btfsc	3,2
 12841  1299  2AA8               	goto	l5143
 12842  129A  2A83               	goto	l5135
 12843  129B                     l5145:
 12844  129B  3002               	movlw	2
 12845  129C  0279               	subwf	___xxtofl@exp,w
 12846  129D  1C03               	btfss	3,0
 12847  129E  2AAA               	goto	l1639
 12848  129F  3001               	movlw	1
 12849  12A0  02F9               	subwf	___xxtofl@exp,f
 12850  12A1  3001               	movlw	1
 12851  12A2                     u6015:
 12852  12A2  35FA               	lslf	___xxtofl@arg,f
 12853  12A3  0DFB               	rlf	___xxtofl@arg+1,f
 12854  12A4  0DFC               	rlf	___xxtofl@arg+2,f
 12855  12A5  0DFD               	rlf	___xxtofl@arg+3,f
 12856  12A6  0B89               	decfsz	9,f
 12857  12A7  2AA2               	goto	u6015
 12858  12A8                     l5143:
 12859  12A8  1FFC               	btfss	___xxtofl@arg+2,7
 12860  12A9  2A9B               	goto	l5145
 12861  12AA                     l1639:
 12862  12AA  1879               	btfsc	___xxtofl@exp,0
 12863  12AB  2AB4               	goto	l1640
 12864  12AC  30FF               	movlw	255
 12865  12AD  05FA               	andwf	___xxtofl@arg,f
 12866  12AE  30FF               	movlw	255
 12867  12AF  05FB               	andwf	___xxtofl@arg+1,f
 12868  12B0  307F               	movlw	127
 12869  12B1  05FC               	andwf	___xxtofl@arg+2,f
 12870  12B2  30FF               	movlw	255
 12871  12B3  05FD               	andwf	___xxtofl@arg+3,f
 12872  12B4                     l1640:
 12873  12B4  1003               	clrc
 12874  12B5  0CF9               	rrf	___xxtofl@exp,f
 12875  12B6  0879               	movf	___xxtofl@exp,w
 12876  12B7  00F4               	movwf	??___xxtofl
 12877  12B8  01F5               	clrf	??___xxtofl+1
 12878  12B9  01F6               	clrf	??___xxtofl+2
 12879  12BA  01F7               	clrf	??___xxtofl+3
 12880  12BB  3018               	movlw	24
 12881  12BC                     u6055:
 12882  12BC  35F4               	lslf	??___xxtofl,f
 12883  12BD  0DF5               	rlf	??___xxtofl+1,f
 12884  12BE  0DF6               	rlf	??___xxtofl+2,f
 12885  12BF  0DF7               	rlf	??___xxtofl+3,f
 12886  12C0  0B89               	decfsz	9,f
 12887  12C1  2ABC               	goto	u6055
 12888  12C2  0874               	movf	??___xxtofl,w
 12889  12C3  04FA               	iorwf	___xxtofl@arg,f
 12890  12C4  0875               	movf	??___xxtofl+1,w
 12891  12C5  04FB               	iorwf	___xxtofl@arg+1,f
 12892  12C6  0876               	movf	??___xxtofl+2,w
 12893  12C7  04FC               	iorwf	___xxtofl@arg+2,f
 12894  12C8  0877               	movf	??___xxtofl+3,w
 12895  12C9  04FD               	iorwf	___xxtofl@arg+3,f
 12896  12CA  0878               	movf	___xxtofl@sign,w
 12897  12CB  1D03               	btfss	3,2
 12898  12CC  1FF3               	btfss	___xxtofl@val+3,7
 12899  12CD  2ACF               	goto	l5157
 12900  12CE  17FD               	bsf	___xxtofl@arg+3,7
 12901  12CF                     l5157:
 12902  12CF  087D               	movf	___xxtofl@arg+3,w
 12903  12D0  00F3               	movwf	?___xxtofl+3
 12904  12D1  087C               	movf	___xxtofl@arg+2,w
 12905  12D2  00F2               	movwf	?___xxtofl+2
 12906  12D3  087B               	movf	___xxtofl@arg+1,w
 12907  12D4  00F1               	movwf	?___xxtofl+1
 12908  12D5  087A               	movf	___xxtofl@arg,w
 12909  12D6  00F0               	movwf	?___xxtofl
 12910  12D7  0008               	return
 12911  12D8                     __end_of___xxtofl:
 12912                           
 12913                           	psect	text61
 12914  1A32                     __ptext61:	
 12915 ;; *************** function _ADC_StartConversion *****************
 12916 ;; Defined at:
 12917 ;;		line 93 in file "mcc_generated_files/adc.c"
 12918 ;; Parameters:    Size  Location     Type
 12919 ;;		None
 12920 ;; Auto vars:     Size  Location     Type
 12921 ;;		None
 12922 ;; Return value:  Size  Location     Type
 12923 ;;                  1    wreg      void 
 12924 ;; Registers used:
 12925 ;;		None
 12926 ;; Tracked objects:
 12927 ;;		On entry : 0/3
 12928 ;;		On exit  : 1F/1
 12929 ;;		Unchanged: 0/0
 12930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12934 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12935 ;;Total ram usage:        0 bytes
 12936 ;; Hardware stack levels used:    1
 12937 ;; Hardware stack levels required when called:    5
 12938 ;; This function calls:
 12939 ;;		Nothing
 12940 ;; This function is called by:
 12941 ;;		_Read_PT100_Temp
 12942 ;; This function uses a non-reentrant model
 12943 ;;
 12944                           
 12945                           
 12946                           ;psect for function _ADC_StartConversion
 12947  1A32                     _ADC_StartConversion:
 12948                           
 12949                           ;mcc_generated_files/adc.c: 96:     ADCON0bits.GO_nDONE = 1;
 12950                           
 12951                           ;incstack = 0
 12952                           ; Regs used in _ADC_StartConversion: []
 12953  1A32  0021               	movlb	1	; select bank1
 12954  1A33  149D               	bsf	29,1	;volatile
 12955  1A34  0008               	return
 12956  1A35                     __end_of_ADC_StartConversion:
 12957                           
 12958                           	psect	text62
 12959  1CCA                     __ptext62:	
 12960 ;; *************** function _Init_Function *****************
 12961 ;; Defined at:
 12962 ;;		line 96 in file "main.c"
 12963 ;; Parameters:    Size  Location     Type
 12964 ;;		None
 12965 ;; Auto vars:     Size  Location     Type
 12966 ;;		None
 12967 ;; Return value:  Size  Location     Type
 12968 ;;                  1    wreg      void 
 12969 ;; Registers used:
 12970 ;;		wreg, status,2, status,0, pclath, cstack
 12971 ;; Tracked objects:
 12972 ;;		On entry : 1F/1
 12973 ;;		On exit  : 1F/3
 12974 ;;		Unchanged: 0/0
 12975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12979 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12980 ;;Total ram usage:        0 bytes
 12981 ;; Hardware stack levels used:    1
 12982 ;; Hardware stack levels required when called:    8
 12983 ;; This function calls:
 12984 ;;		_ADC_SelectChannel
 12985 ;;		_CalcRequiredDelayForTrigTRIAC
 12986 ;;		_StartStop_AlarmLED
 12987 ;;		_StartStop_Buzzer
 12988 ;;		_StartStop_Fan
 12989 ;; This function is called by:
 12990 ;;		_main
 12991 ;; This function uses a non-reentrant model
 12992 ;;
 12993                           
 12994                           
 12995                           ;psect for function _Init_Function
 12996  1CCA                     _Init_Function:
 12997                           
 12998                           ;main.c: 98:     StartStop_AlarmLED(0);
 12999                           
 13000                           ;incstack = 0
 13001                           ; Regs used in _Init_Function: [wreg+status,2+status,0+pclath+cstack]
 13002  1CCA  3000               	movlw	0
 13003  1CCB  3188  2000  319C   	fcall	_StartStop_AlarmLED
 13004                           
 13005                           ;main.c: 99:     StartStop_Fan(0);
 13006  1CCE  3000               	movlw	0
 13007  1CCF  319A  2293  319C   	fcall	_StartStop_Fan
 13008                           
 13009                           ;main.c: 100:     StartStop_Buzzer(0);
 13010  1CD2  3000               	movlw	0
 13011  1CD3  319A  228B  319C   	fcall	_StartStop_Buzzer
 13012  1CD6  128E               	bcf	14,5	;volatile
 13013                           
 13014                           ;main.c: 103:     ADC_SelectChannel(channel_AN10);
 13015  1CD7  300A               	movlw	10
 13016  1CD8  3187  27F3  319C   	fcall	_ADC_SelectChannel
 13017                           
 13018                           ;main.c: 105:     required_delay_for_dim_ms_g = CalcRequiredDelayForTrigTRIAC(25);
 13019  1CDB  3041               	movlw	65
 13020  1CDC  00DC               	movwf	(CalcRequiredDelayForTrigTRIAC@dim_percentage+3)^(0+128)
 13021  1CDD  30C8               	movlw	200
 13022  1CDE  00DB               	movwf	(CalcRequiredDelayForTrigTRIAC@dim_percentage+2)^(0+128)
 13023  1CDF  3000               	movlw	0
 13024  1CE0  00DA               	movwf	(CalcRequiredDelayForTrigTRIAC@dim_percentage+1)^(0+128)
 13025  1CE1  3000               	movlw	0
 13026  1CE2  00D9               	movwf	CalcRequiredDelayForTrigTRIAC@dim_percentage^(0+128)
 13027  1CE3  3192  22D8         	fcall	_CalcRequiredDelayForTrigTRIAC
 13028  1CE5  085A               	movf	(?_CalcRequiredDelayForTrigTRIAC+1)^(0+128),w
 13029  1CE6  0023               	movlb	3	; select bank3
 13030  1CE7  00B7               	movwf	(_required_delay_for_dim_ms_g+1)^(0+384)
 13031  1CE8  0021               	movlb	1	; select bank1
 13032  1CE9  0859               	movf	?_CalcRequiredDelayForTrigTRIAC^(0+128),w
 13033  1CEA  0023               	movlb	3	; select bank3
 13034  1CEB  00B6               	movwf	_required_delay_for_dim_ms_g^(0+384)
 13035  1CEC  0008               	return
 13036  1CED                     __end_of_Init_Function:
 13037                           
 13038                           	psect	text63
 13039  1A93                     __ptext63:	
 13040 ;; *************** function _StartStop_Fan *****************
 13041 ;; Defined at:
 13042 ;;		line 262 in file "main.c"
 13043 ;; Parameters:    Size  Location     Type
 13044 ;;  OnOff           1    wreg     _Bool 
 13045 ;; Auto vars:     Size  Location     Type
 13046 ;;  OnOff           1    0[COMMON] _Bool 
 13047 ;; Return value:  Size  Location     Type
 13048 ;;                  1    wreg      void 
 13049 ;; Registers used:
 13050 ;;		wreg, status,2, status,0
 13051 ;; Tracked objects:
 13052 ;;		On entry : 1F/2
 13053 ;;		On exit  : 1F/2
 13054 ;;		Unchanged: 0/0
 13055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13057 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13059 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13060 ;;Total ram usage:        1 bytes
 13061 ;; Hardware stack levels used:    1
 13062 ;; Hardware stack levels required when called:    5
 13063 ;; This function calls:
 13064 ;;		Nothing
 13065 ;; This function is called by:
 13066 ;;		_Init_Function
 13067 ;; This function uses a non-reentrant model
 13068 ;;
 13069                           
 13070                           
 13071                           ;psect for function _StartStop_Fan
 13072  1A93                     _StartStop_Fan:
 13073                           
 13074                           ;incstack = 0
 13075                           ; Regs used in _StartStop_Fan: [wreg+status,2+status,0]
 13076                           ;StartStop_Fan@OnOff stored from wreg
 13077  1A93  00F0               	movwf	StartStop_Fan@OnOff
 13078                           
 13079                           ;main.c: 264:     if (1 == OnOff){
 13080  1A94  0370               	decf	StartStop_Fan@OnOff,w
 13081  1A95  1D03               	btfss	3,2
 13082  1A96  2A99               	goto	l963
 13083                           
 13084                           ;main.c: 266:         do { LATCbits.LATC3 = 1; } while(0);
 13085  1A97  158E               	bsf	14,3	;volatile
 13086  1A98  0008               	return
 13087  1A99                     l963:	
 13088                           ;main.c: 270:         do { LATCbits.LATC3 = 0; } while(0);
 13089                           
 13090  1A99  118E               	bcf	14,3	;volatile
 13091  1A9A  0008               	return
 13092  1A9B                     __end_of_StartStop_Fan:
 13093                           
 13094                           	psect	text64
 13095  1A8B                     __ptext64:	
 13096 ;; *************** function _StartStop_Buzzer *****************
 13097 ;; Defined at:
 13098 ;;		line 276 in file "main.c"
 13099 ;; Parameters:    Size  Location     Type
 13100 ;;  OnOff           1    wreg     _Bool 
 13101 ;; Auto vars:     Size  Location     Type
 13102 ;;  OnOff           1    0[COMMON] _Bool 
 13103 ;; Return value:  Size  Location     Type
 13104 ;;                  1    wreg      void 
 13105 ;; Registers used:
 13106 ;;		wreg, status,2, status,0
 13107 ;; Tracked objects:
 13108 ;;		On entry : 1F/2
 13109 ;;		On exit  : 1F/2
 13110 ;;		Unchanged: 0/0
 13111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13113 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13115 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13116 ;;Total ram usage:        1 bytes
 13117 ;; Hardware stack levels used:    1
 13118 ;; Hardware stack levels required when called:    5
 13119 ;; This function calls:
 13120 ;;		Nothing
 13121 ;; This function is called by:
 13122 ;;		_Init_Function
 13123 ;; This function uses a non-reentrant model
 13124 ;;
 13125                           
 13126                           
 13127                           ;psect for function _StartStop_Buzzer
 13128  1A8B                     _StartStop_Buzzer:
 13129                           
 13130                           ;incstack = 0
 13131                           ; Regs used in _StartStop_Buzzer: [wreg+status,2+status,0]
 13132                           ;StartStop_Buzzer@OnOff stored from wreg
 13133  1A8B  00F0               	movwf	StartStop_Buzzer@OnOff
 13134                           
 13135                           ;main.c: 278:     if (1 == OnOff){
 13136  1A8C  0370               	decf	StartStop_Buzzer@OnOff,w
 13137  1A8D  1D03               	btfss	3,2
 13138  1A8E  2A91               	goto	l972
 13139                           
 13140                           ;main.c: 280:         do { LATCbits.LATC4 = 1; } while(0);
 13141  1A8F  160E               	bsf	14,4	;volatile
 13142  1A90  0008               	return
 13143  1A91                     l972:	
 13144                           ;main.c: 284:         do { LATCbits.LATC4 = 0; } while(0);
 13145                           
 13146  1A91  120E               	bcf	14,4	;volatile
 13147  1A92  0008               	return
 13148  1A93                     __end_of_StartStop_Buzzer:
 13149                           
 13150                           	psect	text65
 13151  0800                     __ptext65:	
 13152 ;; *************** function _StartStop_AlarmLED *****************
 13153 ;; Defined at:
 13154 ;;		line 248 in file "main.c"
 13155 ;; Parameters:    Size  Location     Type
 13156 ;;  OnOff           1    wreg     _Bool 
 13157 ;; Auto vars:     Size  Location     Type
 13158 ;;  OnOff           1    0[COMMON] _Bool 
 13159 ;; Return value:  Size  Location     Type
 13160 ;;                  1    wreg      void 
 13161 ;; Registers used:
 13162 ;;		wreg, status,2, status,0
 13163 ;; Tracked objects:
 13164 ;;		On entry : 1F/1
 13165 ;;		On exit  : 1F/2
 13166 ;;		Unchanged: 0/0
 13167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13169 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13171 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13172 ;;Total ram usage:        1 bytes
 13173 ;; Hardware stack levels used:    1
 13174 ;; Hardware stack levels required when called:    5
 13175 ;; This function calls:
 13176 ;;		Nothing
 13177 ;; This function is called by:
 13178 ;;		_Init_Function
 13179 ;; This function uses a non-reentrant model
 13180 ;;
 13181                           
 13182                           
 13183                           ;psect for function _StartStop_AlarmLED
 13184  0800                     _StartStop_AlarmLED:
 13185                           
 13186                           ;incstack = 0
 13187                           ; Regs used in _StartStop_AlarmLED: [wreg+status,2+status,0]
 13188                           ;StartStop_AlarmLED@OnOff stored from wreg
 13189  0800  00F0               	movwf	StartStop_AlarmLED@OnOff
 13190                           
 13191                           ;main.c: 250:     if (1 == OnOff){
 13192  0801  0370               	decf	StartStop_AlarmLED@OnOff,w
 13193  0802  1D03               	btfss	3,2
 13194  0803  2807               	goto	l954
 13195                           
 13196                           ;main.c: 252:         do { LATCbits.LATC2 = 1; } while(0);
 13197  0804  0022               	movlb	2	; select bank2
 13198  0805  150E               	bsf	14,2	;volatile
 13199  0806  0008               	return
 13200  0807                     l954:	
 13201                           ;main.c: 256:         do { LATCbits.LATC2 = 0; } while(0);
 13202                           
 13203  0807  0022               	movlb	2	; select bank2
 13204  0808  110E               	bcf	14,2	;volatile
 13205  0809  0008               	return
 13206  080A                     __end_of_StartStop_AlarmLED:
 13207                           
 13208                           	psect	text66
 13209  12D8                     __ptext66:	
 13210 ;; *************** function _CalcRequiredDelayForTrigTRIAC *****************
 13211 ;; Defined at:
 13212 ;;		line 329 in file "main.c"
 13213 ;; Parameters:    Size  Location     Type
 13214 ;;  dim_percenta    4   57[BANK1 ] float 
 13215 ;; Auto vars:     Size  Location     Type
 13216 ;;  delay           4   61[BANK1 ] float 
 13217 ;;  ret             2   65[BANK1 ] unsigned short 
 13218 ;; Return value:  Size  Location     Type
 13219 ;;                  2   57[BANK1 ] unsigned short 
 13220 ;; Registers used:
 13221 ;;		wreg, status,2, status,0, pclath, cstack
 13222 ;; Tracked objects:
 13223 ;;		On entry : 1F/1
 13224 ;;		On exit  : 1F/1
 13225 ;;		Unchanged: 0/0
 13226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13227 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 13228 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
 13229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13230 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0
 13231 ;;Total ram usage:       10 bytes
 13232 ;; Hardware stack levels used:    1
 13233 ;; Hardware stack levels required when called:    7
 13234 ;; This function calls:
 13235 ;;		___fldiv
 13236 ;;		___flmul
 13237 ;;		___flsub
 13238 ;;		___fltol
 13239 ;; This function is called by:
 13240 ;;		_Init_Function
 13241 ;; This function uses a non-reentrant model
 13242 ;;
 13243                           
 13244                           
 13245                           ;psect for function _CalcRequiredDelayForTrigTRIAC
 13246  12D8                     _CalcRequiredDelayForTrigTRIAC:
 13247                           
 13248                           ;main.c: 331:     float delay;;main.c: 332:     uint16_t ret;;main.c: 334:     delay = H
      +                          alfCycleACDuration_const - (5.0 * dim_percentage / 50.0);
 13249                           
 13250                           ;incstack = 0
 13251                           ; Regs used in _CalcRequiredDelayForTrigTRIAC: [wreg+status,2+status,0+pclath+cstack]
 13252  12D8  3042               	movlw	66
 13253  12D9  00CB               	movwf	(___fldiv@a+3)^(0+128)
 13254  12DA  3048               	movlw	72
 13255  12DB  00CA               	movwf	(___fldiv@a+2)^(0+128)
 13256  12DC  3000               	movlw	0
 13257  12DD  00C9               	movwf	(___fldiv@a+1)^(0+128)
 13258  12DE  3000               	movlw	0
 13259  12DF  00C8               	movwf	___fldiv@a^(0+128)
 13260  12E0  3040               	movlw	64
 13261  12E1  0020               	movlb	0	; select bank0
 13262  12E2  00A3               	movwf	___flmul@b+3
 13263  12E3  30A0               	movlw	160
 13264  12E4  00A2               	movwf	___flmul@b+2
 13265  12E5  3000               	movlw	0
 13266  12E6  00A1               	movwf	___flmul@b+1
 13267  12E7  3000               	movlw	0
 13268  12E8  00A0               	movwf	___flmul@b
 13269  12E9  0021               	movlb	1	; select bank1
 13270  12EA  085C               	movf	(CalcRequiredDelayForTrigTRIAC@dim_percentage+3)^(0+128),w
 13271  12EB  0020               	movlb	0	; select bank0
 13272  12EC  00A7               	movwf	___flmul@a+3
 13273  12ED  0021               	movlb	1	; select bank1
 13274  12EE  085B               	movf	(CalcRequiredDelayForTrigTRIAC@dim_percentage+2)^(0+128),w
 13275  12EF  0020               	movlb	0	; select bank0
 13276  12F0  00A6               	movwf	___flmul@a+2
 13277  12F1  0021               	movlb	1	; select bank1
 13278  12F2  085A               	movf	(CalcRequiredDelayForTrigTRIAC@dim_percentage+1)^(0+128),w
 13279  12F3  0020               	movlb	0	; select bank0
 13280  12F4  00A5               	movwf	___flmul@a+1
 13281  12F5  0021               	movlb	1	; select bank1
 13282  12F6  0859               	movf	CalcRequiredDelayForTrigTRIAC@dim_percentage^(0+128),w
 13283  12F7  0020               	movlb	0	; select bank0
 13284  12F8  00A4               	movwf	___flmul@a
 13285  12F9  318A  22F4  3192   	fcall	___flmul
 13286  12FC  0823               	movf	?___flmul+3,w
 13287  12FD  0021               	movlb	1	; select bank1
 13288  12FE  00CF               	movwf	(___fldiv@b+3)^(0+128)
 13289  12FF  0020               	movlb	0	; select bank0
 13290  1300  0822               	movf	?___flmul+2,w
 13291  1301  0021               	movlb	1	; select bank1
 13292  1302  00CE               	movwf	(___fldiv@b+2)^(0+128)
 13293  1303  0020               	movlb	0	; select bank0
 13294  1304  0821               	movf	?___flmul+1,w
 13295  1305  0021               	movlb	1	; select bank1
 13296  1306  00CD               	movwf	(___fldiv@b+1)^(0+128)
 13297  1307  0020               	movlb	0	; select bank0
 13298  1308  0820               	movf	?___flmul,w
 13299  1309  0021               	movlb	1	; select bank1
 13300  130A  00CC               	movwf	___fldiv@b^(0+128)
 13301  130B  3194  244F  3192   	fcall	___fldiv
 13302  130E  084B               	movf	(?___fldiv+3)^(0+128),w
 13303  130F  0020               	movlb	0	; select bank0
 13304  1310  00D1               	movwf	___flsub@a+3
 13305  1311  0021               	movlb	1	; select bank1
 13306  1312  084A               	movf	(?___fldiv+2)^(0+128),w
 13307  1313  0020               	movlb	0	; select bank0
 13308  1314  00D0               	movwf	___flsub@a+2
 13309  1315  0021               	movlb	1	; select bank1
 13310  1316  0849               	movf	(?___fldiv+1)^(0+128),w
 13311  1317  0020               	movlb	0	; select bank0
 13312  1318  00CF               	movwf	___flsub@a+1
 13313  1319  0021               	movlb	1	; select bank1
 13314  131A  0848               	movf	?___fldiv^(0+128),w
 13315  131B  0020               	movlb	0	; select bank0
 13316  131C  00CE               	movwf	___flsub@a
 13317  131D  3041               	movlw	65
 13318  131E  00D5               	movwf	___flsub@b+3
 13319  131F  3020               	movlw	32
 13320  1320  00D4               	movwf	___flsub@b+2
 13321  1321  3000               	movlw	0
 13322  1322  00D3               	movwf	___flsub@b+1
 13323  1323  3000               	movlw	0
 13324  1324  00D2               	movwf	___flsub@b
 13325  1325  319C  244C  3192   	fcall	___flsub
 13326  1328  0851               	movf	?___flsub+3,w
 13327  1329  0021               	movlb	1	; select bank1
 13328  132A  00E0               	movwf	(CalcRequiredDelayForTrigTRIAC@delay+3)^(0+128)
 13329  132B  0020               	movlb	0	; select bank0
 13330  132C  0850               	movf	?___flsub+2,w
 13331  132D  0021               	movlb	1	; select bank1
 13332  132E  00DF               	movwf	(CalcRequiredDelayForTrigTRIAC@delay+2)^(0+128)
 13333  132F  0020               	movlb	0	; select bank0
 13334  1330  084F               	movf	?___flsub+1,w
 13335  1331  0021               	movlb	1	; select bank1
 13336  1332  00DE               	movwf	(CalcRequiredDelayForTrigTRIAC@delay+1)^(0+128)
 13337  1333  0020               	movlb	0	; select bank0
 13338  1334  084E               	movf	?___flsub,w
 13339  1335  0021               	movlb	1	; select bank1
 13340  1336  00DD               	movwf	CalcRequiredDelayForTrigTRIAC@delay^(0+128)
 13341                           
 13342                           ;main.c: 335:     ret = (delay * 1000) / TMR2_Period_const;
 13343  1337  0860               	movf	(CalcRequiredDelayForTrigTRIAC@delay+3)^(0+128),w
 13344  1338  0020               	movlb	0	; select bank0
 13345  1339  00A7               	movwf	___flmul@a+3
 13346  133A  0021               	movlb	1	; select bank1
 13347  133B  085F               	movf	(CalcRequiredDelayForTrigTRIAC@delay+2)^(0+128),w
 13348  133C  0020               	movlb	0	; select bank0
 13349  133D  00A6               	movwf	___flmul@a+2
 13350  133E  0021               	movlb	1	; select bank1
 13351  133F  085E               	movf	(CalcRequiredDelayForTrigTRIAC@delay+1)^(0+128),w
 13352  1340  0020               	movlb	0	; select bank0
 13353  1341  00A5               	movwf	___flmul@a+1
 13354  1342  0021               	movlb	1	; select bank1
 13355  1343  085D               	movf	CalcRequiredDelayForTrigTRIAC@delay^(0+128),w
 13356  1344  0020               	movlb	0	; select bank0
 13357  1345  00A4               	movwf	___flmul@a
 13358  1346  3044               	movlw	68
 13359  1347  00A3               	movwf	___flmul@b+3
 13360  1348  307A               	movlw	122
 13361  1349  00A2               	movwf	___flmul@b+2
 13362  134A  3000               	movlw	0
 13363  134B  00A1               	movwf	___flmul@b+1
 13364  134C  3000               	movlw	0
 13365  134D  00A0               	movwf	___flmul@b
 13366  134E  318A  22F4  3192   	fcall	___flmul
 13367  1351  0823               	movf	?___flmul+3,w
 13368  1352  0021               	movlb	1	; select bank1
 13369  1353  00CF               	movwf	(___fldiv@b+3)^(0+128)
 13370  1354  0020               	movlb	0	; select bank0
 13371  1355  0822               	movf	?___flmul+2,w
 13372  1356  0021               	movlb	1	; select bank1
 13373  1357  00CE               	movwf	(___fldiv@b+2)^(0+128)
 13374  1358  0020               	movlb	0	; select bank0
 13375  1359  0821               	movf	?___flmul+1,w
 13376  135A  0021               	movlb	1	; select bank1
 13377  135B  00CD               	movwf	(___fldiv@b+1)^(0+128)
 13378  135C  0020               	movlb	0	; select bank0
 13379  135D  0820               	movf	?___flmul,w
 13380  135E  0021               	movlb	1	; select bank1
 13381  135F  00CC               	movwf	___fldiv@b^(0+128)
 13382  1360  3042               	movlw	66
 13383  1361  00CB               	movwf	(___fldiv@a+3)^(0+128)
 13384  1362  30C8               	movlw	200
 13385  1363  00CA               	movwf	(___fldiv@a+2)^(0+128)
 13386  1364  3000               	movlw	0
 13387  1365  00C9               	movwf	(___fldiv@a+1)^(0+128)
 13388  1366  3000               	movlw	0
 13389  1367  00C8               	movwf	___fldiv@a^(0+128)
 13390  1368  3194  244F  3192   	fcall	___fldiv
 13391  136B  084B               	movf	(?___fldiv+3)^(0+128),w
 13392  136C  00D3               	movwf	(___fltol@f1+3)^(0+128)
 13393  136D  084A               	movf	(?___fldiv+2)^(0+128),w
 13394  136E  00D2               	movwf	(___fltol@f1+2)^(0+128)
 13395  136F  0849               	movf	(?___fldiv+1)^(0+128),w
 13396  1370  00D1               	movwf	(___fltol@f1+1)^(0+128)
 13397  1371  0848               	movf	?___fldiv^(0+128),w
 13398  1372  00D0               	movwf	___fltol@f1^(0+128)
 13399  1373  3190  2071         	fcall	___fltol
 13400  1375  0021               	movlb	1	; select bank1
 13401  1376  0851               	movf	(?___fltol+1)^(0+128),w
 13402  1377  00E2               	movwf	(CalcRequiredDelayForTrigTRIAC@ret+1)^(0+128)
 13403  1378  0850               	movf	?___fltol^(0+128),w
 13404  1379  00E1               	movwf	CalcRequiredDelayForTrigTRIAC@ret^(0+128)
 13405                           
 13406                           ;main.c: 337:     return ret;
 13407  137A  0862               	movf	(CalcRequiredDelayForTrigTRIAC@ret+1)^(0+128),w
 13408  137B  00DA               	movwf	(?_CalcRequiredDelayForTrigTRIAC+1)^(0+128)
 13409  137C  0861               	movf	CalcRequiredDelayForTrigTRIAC@ret^(0+128),w
 13410  137D  00D9               	movwf	?_CalcRequiredDelayForTrigTRIAC^(0+128)
 13411  137E  0008               	return
 13412  137F                     __end_of_CalcRequiredDelayForTrigTRIAC:
 13413                           
 13414                           	psect	text67
 13415  1071                     __ptext67:	
 13416 ;; *************** function ___fltol *****************
 13417 ;; Defined at:
 13418 ;;		line 43 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/fltol.c"
 13419 ;; Parameters:    Size  Location     Type
 13420 ;;  f1              4   48[BANK1 ] unsigned short 
 13421 ;; Auto vars:     Size  Location     Type
 13422 ;;  exp1            1   77[BANK0 ] unsigned char 
 13423 ;;  sign1           1   76[BANK0 ] unsigned char 
 13424 ;; Return value:  Size  Location     Type
 13425 ;;                  4   48[BANK1 ] long 
 13426 ;; Registers used:
 13427 ;;		wreg, status,2, status,0
 13428 ;; Tracked objects:
 13429 ;;		On entry : 1F/1
 13430 ;;		On exit  : 1E/0
 13431 ;;		Unchanged: 0/0
 13432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13433 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 13434 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13435 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 13436 ;;      Totals:         0       2       9       0       0       0       0       0       0       0       0       0       
      +0       0
 13437 ;;Total ram usage:       11 bytes
 13438 ;; Hardware stack levels used:    1
 13439 ;; Hardware stack levels required when called:    5
 13440 ;; This function calls:
 13441 ;;		Nothing
 13442 ;; This function is called by:
 13443 ;;		_CalcRequiredDelayForTrigTRIAC
 13444 ;;		_efgtoa
 13445 ;; This function uses a non-reentrant model
 13446 ;;
 13447                           
 13448                           
 13449                           ;psect for function ___fltol
 13450  1071                     ___fltol:
 13451                           
 13452                           ;incstack = 0
 13453                           ; Regs used in ___fltol: [wreg+status,2+status,0]
 13454  1071  1003               	clrc
 13455  1072  0D52               	rlf	(___fltol@f1+2)^(0+128),w
 13456  1073  0D53               	rlf	(___fltol@f1+3)^(0+128),w
 13457  1074  00D4               	movwf	??___fltol^(0+128)
 13458  1075  0854               	movf	??___fltol^(0+128),w
 13459  1076  0020               	movlb	0	; select bank0
 13460  1077  00ED               	movwf	___fltol@exp1
 13461  1078  086D               	movf	___fltol@exp1,w
 13462  1079  1D03               	btfss	3,2
 13463  107A  2885               	goto	l4163
 13464  107B                     l4159:
 13465  107B  3000               	movlw	0
 13466  107C  0021               	movlb	1	; select bank1
 13467  107D  00D3               	movwf	(?___fltol+3)^(0+128)
 13468  107E  3000               	movlw	0
 13469  107F  00D2               	movwf	(?___fltol+2)^(0+128)
 13470  1080  3000               	movlw	0
 13471  1081  00D1               	movwf	(?___fltol+1)^(0+128)
 13472  1082  3000               	movlw	0
 13473  1083  00D0               	movwf	?___fltol^(0+128)
 13474  1084  0008               	return
 13475  1085                     l4163:
 13476  1085  0021               	movlb	1	; select bank1
 13477  1086  0850               	movf	___fltol@f1^(0+128),w
 13478  1087  00D4               	movwf	??___fltol^(0+128)
 13479  1088  0851               	movf	(___fltol@f1+1)^(0+128),w
 13480  1089  00D5               	movwf	(??___fltol^(0+128)+1)
 13481  108A  0852               	movf	(___fltol@f1+2)^(0+128),w
 13482  108B  00D6               	movwf	(??___fltol^(0+128)+2)
 13483  108C  0853               	movf	(___fltol@f1+3)^(0+128),w
 13484  108D  00D7               	movwf	(??___fltol^(0+128)+3)
 13485  108E  301F               	movlw	31
 13486  108F                     u4095:
 13487  108F  36D7               	lsrf	(??___fltol^(0+128)+3),f
 13488  1090  0CD6               	rrf	(??___fltol^(0+128)+2),f
 13489  1091  0CD5               	rrf	(??___fltol^(0+128)+1),f
 13490  1092  0CD4               	rrf	??___fltol^(0+128),f
 13491  1093  0B89               	decfsz	9,f
 13492  1094  288F               	goto	u4095
 13493  1095  0854               	movf	??___fltol^(0+128),w
 13494  1096  00D8               	movwf	(??___fltol+4)^(0+128)
 13495  1097  0858               	movf	(??___fltol+4)^(0+128),w
 13496  1098  0020               	movlb	0	; select bank0
 13497  1099  00EC               	movwf	___fltol@sign1
 13498  109A  0021               	movlb	1	; select bank1
 13499  109B  17D2               	bsf	(___fltol@f1^(0+128)+2),7
 13500  109C  30FF               	movlw	255
 13501  109D  05D0               	andwf	___fltol@f1^(0+128),f
 13502  109E  30FF               	movlw	255
 13503  109F  05D1               	andwf	(___fltol@f1+1)^(0+128),f
 13504  10A0  30FF               	movlw	255
 13505  10A1  05D2               	andwf	(___fltol@f1+2)^(0+128),f
 13506  10A2  3000               	movlw	0
 13507  10A3  05D3               	andwf	(___fltol@f1+3)^(0+128),f
 13508  10A4  3096               	movlw	150
 13509  10A5  0020               	movlb	0	; select bank0
 13510  10A6  02ED               	subwf	___fltol@exp1,f
 13511  10A7  1FED               	btfss	___fltol@exp1,7
 13512  10A8  28BE               	goto	l4181
 13513  10A9  086D               	movf	___fltol@exp1,w
 13514  10AA  3A80               	xorlw	128
 13515  10AB  3E97               	addlw	151
 13516  10AC  1C03               	btfss	3,0
 13517  10AD  287B               	goto	l4159
 13518  10AE                     l4179:
 13519  10AE  3001               	movlw	1
 13520  10AF                     u4125:
 13521  10AF  0021               	movlb	1	; select bank1
 13522  10B0  36D3               	lsrf	(___fltol@f1+3)^(0+128),f
 13523  10B1  0CD2               	rrf	(___fltol@f1+2)^(0+128),f
 13524  10B2  0CD1               	rrf	(___fltol@f1+1)^(0+128),f
 13525  10B3  0CD0               	rrf	___fltol@f1^(0+128),f
 13526  10B4  0B89               	decfsz	9,f
 13527  10B5  28AF               	goto	u4125
 13528  10B6  3001               	movlw	1
 13529  10B7  00D4               	movwf	??___fltol^(0+128)
 13530  10B8  0854               	movf	??___fltol^(0+128),w
 13531  10B9  0020               	movlb	0	; select bank0
 13532  10BA  07ED               	addwf	___fltol@exp1,f
 13533  10BB  1903               	btfsc	3,2
 13534  10BC  28D1               	goto	l4189
 13535  10BD  28AE               	goto	l4179
 13536  10BE                     l4181:
 13537  10BE  3020               	movlw	32
 13538  10BF  026D               	subwf	___fltol@exp1,w
 13539  10C0  1803               	btfsc	3,0
 13540  10C1  287B               	goto	l4159
 13541  10C2                     l1386:
 13542  10C2  086D               	movf	___fltol@exp1,w
 13543  10C3  1903               	btfsc	3,2
 13544  10C4  28D1               	goto	l4189
 13545  10C5  3001               	movlw	1
 13546  10C6                     u4155:
 13547  10C6  0021               	movlb	1	; select bank1
 13548  10C7  35D0               	lslf	___fltol@f1^(0+128),f
 13549  10C8  0DD1               	rlf	(___fltol@f1+1)^(0+128),f
 13550  10C9  0DD2               	rlf	(___fltol@f1+2)^(0+128),f
 13551  10CA  0DD3               	rlf	(___fltol@f1+3)^(0+128),f
 13552  10CB  0B89               	decfsz	9,f
 13553  10CC  28C6               	goto	u4155
 13554  10CD  3001               	movlw	1
 13555  10CE  0020               	movlb	0	; select bank0
 13556  10CF  02ED               	subwf	___fltol@exp1,f
 13557  10D0  28C2               	goto	l1386
 13558  10D1                     l4189:
 13559  10D1  086C               	movf	___fltol@sign1,w
 13560  10D2  1903               	btfsc	3,2
 13561  10D3  0008               	return
 13562  10D4  0021               	movlb	1	; select bank1
 13563  10D5  09D0               	comf	___fltol@f1^(0+128),f
 13564  10D6  09D1               	comf	(___fltol@f1+1)^(0+128),f
 13565  10D7  09D2               	comf	(___fltol@f1+2)^(0+128),f
 13566  10D8  09D3               	comf	(___fltol@f1+3)^(0+128),f
 13567  10D9  0AD0               	incf	___fltol@f1^(0+128),f
 13568  10DA  1903               	skipnz
 13569  10DB  0AD1               	incf	(___fltol@f1+1)^(0+128),f
 13570  10DC  1903               	skipnz
 13571  10DD  0AD2               	incf	(___fltol@f1+2)^(0+128),f
 13572  10DE  1903               	skipnz
 13573  10DF  0AD3               	incf	(___fltol@f1+3)^(0+128),f
 13574  10E0  0008               	return
 13575  10E1                     __end_of___fltol:
 13576                           
 13577                           	psect	text68
 13578  1C4C                     __ptext68:	
 13579 ;; *************** function ___flsub *****************
 13580 ;; Defined at:
 13581 ;;		line 242 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/sprcadd.c"
 13582 ;; Parameters:    Size  Location     Type
 13583 ;;  a               4   46[BANK0 ] long 
 13584 ;;  b               4   50[BANK0 ] long 
 13585 ;; Auto vars:     Size  Location     Type
 13586 ;;		None
 13587 ;; Return value:  Size  Location     Type
 13588 ;;                  4   46[BANK0 ] long 
 13589 ;; Registers used:
 13590 ;;		wreg, status,2, status,0, pclath, cstack
 13591 ;; Tracked objects:
 13592 ;;		On entry : 1F/0
 13593 ;;		On exit  : 1F/0
 13594 ;;		Unchanged: 0/0
 13595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13596 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13599 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13600 ;;Total ram usage:        8 bytes
 13601 ;; Hardware stack levels used:    1
 13602 ;; Hardware stack levels required when called:    6
 13603 ;; This function calls:
 13604 ;;		___fladd
 13605 ;; This function is called by:
 13606 ;;		_Measure_R_PT100_2Wire
 13607 ;;		_CalcRequiredDelayForTrigTRIAC
 13608 ;;		_efgtoa
 13609 ;; This function uses a non-reentrant model
 13610 ;;
 13611                           
 13612                           
 13613                           ;psect for function ___flsub
 13614  1C4C                     ___flsub:
 13615                           
 13616                           ;incstack = 0
 13617                           ; Regs used in ___flsub: [wreg+status,2+status,0+pclath+cstack]
 13618  1C4C  3080               	movlw	128
 13619  1C4D  06D1               	xorwf	___flsub@a+3,f
 13620  1C4E  0855               	movf	___flsub@b+3,w
 13621  1C4F  00BD               	movwf	___fladd@b+3
 13622  1C50  0854               	movf	___flsub@b+2,w
 13623  1C51  00BC               	movwf	___fladd@b+2
 13624  1C52  0853               	movf	___flsub@b+1,w
 13625  1C53  00BB               	movwf	___fladd@b+1
 13626  1C54  0852               	movf	___flsub@b,w
 13627  1C55  00BA               	movwf	___fladd@b
 13628  1C56  0851               	movf	___flsub@a+3,w
 13629  1C57  00C1               	movwf	___fladd@a+3
 13630  1C58  0850               	movf	___flsub@a+2,w
 13631  1C59  00C0               	movwf	___fladd@a+2
 13632  1C5A  084F               	movf	___flsub@a+1,w
 13633  1C5B  00BF               	movwf	___fladd@a+1
 13634  1C5C  084E               	movf	___flsub@a,w
 13635  1C5D  00BE               	movwf	___fladd@a
 13636  1C5E  3189  2113         	fcall	___fladd
 13637  1C60  083D               	movf	?___fladd+3,w
 13638  1C61  00D1               	movwf	?___flsub+3
 13639  1C62  083C               	movf	?___fladd+2,w
 13640  1C63  00D0               	movwf	?___flsub+2
 13641  1C64  083B               	movf	?___fladd+1,w
 13642  1C65  00CF               	movwf	?___flsub+1
 13643  1C66  083A               	movf	?___fladd,w
 13644  1C67  00CE               	movwf	?___flsub
 13645  1C68  0008               	return
 13646  1C69                     __end_of___flsub:
 13647                           
 13648                           	psect	text69
 13649  0913                     __ptext69:	
 13650 ;; *************** function ___fladd *****************
 13651 ;; Defined at:
 13652 ;;		line 10 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/sprcadd.c"
 13653 ;; Parameters:    Size  Location     Type
 13654 ;;  b               4   26[BANK0 ] long 
 13655 ;;  a               4   30[BANK0 ] long 
 13656 ;; Auto vars:     Size  Location     Type
 13657 ;;  grs             1   45[BANK0 ] unsigned char 
 13658 ;;  bexp            1   44[BANK0 ] unsigned char 
 13659 ;;  aexp            1   43[BANK0 ] unsigned char 
 13660 ;;  signs           1   42[BANK0 ] unsigned char 
 13661 ;; Return value:  Size  Location     Type
 13662 ;;                  4   26[BANK0 ] unsigned char 
 13663 ;; Registers used:
 13664 ;;		wreg, status,2, status,0
 13665 ;; Tracked objects:
 13666 ;;		On entry : 1F/0
 13667 ;;		On exit  : 1F/0
 13668 ;;		Unchanged: 0/0
 13669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13670 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13671 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13672 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13673 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13674 ;;Total ram usage:       20 bytes
 13675 ;; Hardware stack levels used:    1
 13676 ;; Hardware stack levels required when called:    5
 13677 ;; This function calls:
 13678 ;;		Nothing
 13679 ;; This function is called by:
 13680 ;;		_Measure_Temp_PT100_2Wire
 13681 ;;		___flsub
 13682 ;;		_efgtoa
 13683 ;;		_sqrtf
 13684 ;; This function uses a non-reentrant model
 13685 ;;
 13686                           
 13687                           
 13688                           ;psect for function ___fladd
 13689  0913                     ___fladd:
 13690                           
 13691                           ;incstack = 0
 13692                           ; Regs used in ___fladd: [wreg+status,2+status,0]
 13693  0913  083D               	movf	___fladd@b+3,w
 13694  0914  3980               	andlw	128
 13695  0915  00C2               	movwf	??___fladd
 13696  0916  0842               	movf	??___fladd,w
 13697  0917  00CA               	movwf	___fladd@signs
 13698  0918  353D               	lslf	___fladd@b+3,w
 13699  0919  00C2               	movwf	??___fladd
 13700  091A  0842               	movf	??___fladd,w
 13701  091B  00CC               	movwf	___fladd@bexp
 13702  091C  1BBC               	btfsc	___fladd@b+2,7
 13703  091D  144C               	bsf	___fladd@bexp,0
 13704  091E  084C               	movf	___fladd@bexp,w
 13705  091F  1903               	btfsc	3,2
 13706  0920  292F               	goto	l3813
 13707  0921  0A4C               	incf	___fladd@bexp,w
 13708  0922  1D03               	btfss	3,2
 13709  0923  292C               	goto	l3809
 13710  0924  3000               	movlw	0
 13711  0925  00BD               	movwf	___fladd@b+3
 13712  0926  3000               	movlw	0
 13713  0927  00BC               	movwf	___fladd@b+2
 13714  0928  3000               	movlw	0
 13715  0929  00BB               	movwf	___fladd@b+1
 13716  092A  3000               	movlw	0
 13717  092B  00BA               	movwf	___fladd@b
 13718  092C                     l3809:
 13719  092C  17BC               	bsf	___fladd@b+2,7
 13720  092D  01BD               	clrf	___fladd@b+3
 13721  092E  2937               	goto	l3815
 13722  092F                     l3813:
 13723  092F  3000               	movlw	0
 13724  0930  00BD               	movwf	___fladd@b+3
 13725  0931  3000               	movlw	0
 13726  0932  00BC               	movwf	___fladd@b+2
 13727  0933  3000               	movlw	0
 13728  0934  00BB               	movwf	___fladd@b+1
 13729  0935  3000               	movlw	0
 13730  0936  00BA               	movwf	___fladd@b
 13731  0937                     l3815:
 13732  0937  0841               	movf	___fladd@a+3,w
 13733  0938  3980               	andlw	128
 13734  0939  00C2               	movwf	??___fladd
 13735  093A  0842               	movf	??___fladd,w
 13736  093B  00CB               	movwf	___fladd@aexp
 13737  093C  084B               	movf	___fladd@aexp,w
 13738  093D  064A               	xorwf	___fladd@signs,w
 13739  093E  1D03               	btfss	3,2
 13740  093F  174A               	bsf	___fladd@signs,6
 13741  0940  3541               	lslf	___fladd@a+3,w
 13742  0941  00C2               	movwf	??___fladd
 13743  0942  0842               	movf	??___fladd,w
 13744  0943  00CB               	movwf	___fladd@aexp
 13745  0944  1BC0               	btfsc	___fladd@a+2,7
 13746  0945  144B               	bsf	___fladd@aexp,0
 13747  0946  084B               	movf	___fladd@aexp,w
 13748  0947  1903               	btfsc	3,2
 13749  0948  2957               	goto	l3837
 13750  0949  0A4B               	incf	___fladd@aexp,w
 13751  094A  1D03               	btfss	3,2
 13752  094B  2954               	goto	l3833
 13753  094C  3000               	movlw	0
 13754  094D  00C1               	movwf	___fladd@a+3
 13755  094E  3000               	movlw	0
 13756  094F  00C0               	movwf	___fladd@a+2
 13757  0950  3000               	movlw	0
 13758  0951  00BF               	movwf	___fladd@a+1
 13759  0952  3000               	movlw	0
 13760  0953  00BE               	movwf	___fladd@a
 13761  0954                     l3833:
 13762  0954  17C0               	bsf	___fladd@a+2,7
 13763  0955  01C1               	clrf	___fladd@a+3
 13764  0956  295F               	goto	l1486
 13765  0957                     l3837:
 13766  0957  3000               	movlw	0
 13767  0958  00C1               	movwf	___fladd@a+3
 13768  0959  3000               	movlw	0
 13769  095A  00C0               	movwf	___fladd@a+2
 13770  095B  3000               	movlw	0
 13771  095C  00BF               	movwf	___fladd@a+1
 13772  095D  3000               	movlw	0
 13773  095E  00BE               	movwf	___fladd@a
 13774  095F                     l1486:
 13775  095F  084C               	movf	___fladd@bexp,w
 13776  0960  024B               	subwf	___fladd@aexp,w
 13777  0961  1803               	skipnc
 13778  0962  29A5               	goto	l3873
 13779  0963  1F4A               	btfss	___fladd@signs,6
 13780  0964  2969               	goto	l3843
 13781  0965  3080               	movlw	128
 13782  0966  00C2               	movwf	??___fladd
 13783  0967  0842               	movf	??___fladd,w
 13784  0968  06CA               	xorwf	___fladd@signs,f
 13785  0969                     l3843:
 13786  0969  084C               	movf	___fladd@bexp,w
 13787  096A  00C2               	movwf	??___fladd
 13788  096B  0842               	movf	??___fladd,w
 13789  096C  00CD               	movwf	___fladd@grs
 13790  096D  084B               	movf	___fladd@aexp,w
 13791  096E  00C2               	movwf	??___fladd
 13792  096F  0842               	movf	??___fladd,w
 13793  0970  00CC               	movwf	___fladd@bexp
 13794  0971  084D               	movf	___fladd@grs,w
 13795  0972  00C2               	movwf	??___fladd
 13796  0973  0842               	movf	??___fladd,w
 13797  0974  00CB               	movwf	___fladd@aexp
 13798  0975  083A               	movf	___fladd@b,w
 13799  0976  00C2               	movwf	??___fladd
 13800  0977  0842               	movf	??___fladd,w
 13801  0978  00CD               	movwf	___fladd@grs
 13802  0979  083E               	movf	___fladd@a,w
 13803  097A  00C2               	movwf	??___fladd
 13804  097B  0842               	movf	??___fladd,w
 13805  097C  00BA               	movwf	___fladd@b
 13806  097D  084D               	movf	___fladd@grs,w
 13807  097E  00C2               	movwf	??___fladd
 13808  097F  0842               	movf	??___fladd,w
 13809  0980  00BE               	movwf	___fladd@a
 13810  0981  083B               	movf	___fladd@b+1,w
 13811  0982  00C2               	movwf	??___fladd
 13812  0983  0842               	movf	??___fladd,w
 13813  0984  00CD               	movwf	___fladd@grs
 13814  0985  083F               	movf	___fladd@a+1,w
 13815  0986  00C2               	movwf	??___fladd
 13816  0987  0842               	movf	??___fladd,w
 13817  0988  00BB               	movwf	___fladd@b+1
 13818  0989  084D               	movf	___fladd@grs,w
 13819  098A  00C2               	movwf	??___fladd
 13820  098B  0842               	movf	??___fladd,w
 13821  098C  00BF               	movwf	___fladd@a+1
 13822  098D  083C               	movf	___fladd@b+2,w
 13823  098E  00C2               	movwf	??___fladd
 13824  098F  0842               	movf	??___fladd,w
 13825  0990  00CD               	movwf	___fladd@grs
 13826  0991  0840               	movf	___fladd@a+2,w
 13827  0992  00C2               	movwf	??___fladd
 13828  0993  0842               	movf	??___fladd,w
 13829  0994  00BC               	movwf	___fladd@b+2
 13830  0995  084D               	movf	___fladd@grs,w
 13831  0996  00C2               	movwf	??___fladd
 13832  0997  0842               	movf	??___fladd,w
 13833  0998  00C0               	movwf	___fladd@a+2
 13834  0999  083D               	movf	___fladd@b+3,w
 13835  099A  00C2               	movwf	??___fladd
 13836  099B  0842               	movf	??___fladd,w
 13837  099C  00CD               	movwf	___fladd@grs
 13838  099D  0841               	movf	___fladd@a+3,w
 13839  099E  00C2               	movwf	??___fladd
 13840  099F  0842               	movf	??___fladd,w
 13841  09A0  00BD               	movwf	___fladd@b+3
 13842  09A1  084D               	movf	___fladd@grs,w
 13843  09A2  00C2               	movwf	??___fladd
 13844  09A3  0842               	movf	??___fladd,w
 13845  09A4  00C1               	movwf	___fladd@a+3
 13846  09A5                     l3873:
 13847  09A5  01CD               	clrf	___fladd@grs
 13848  09A6  084B               	movf	___fladd@aexp,w
 13849  09A7  00C2               	movwf	??___fladd
 13850  09A8  01C3               	clrf	??___fladd+1
 13851  09A9  0843               	movf	??___fladd+1,w
 13852  09AA  00C5               	movwf	??___fladd+3
 13853  09AB  084C               	movf	___fladd@bexp,w
 13854  09AC  0242               	subwf	??___fladd,w
 13855  09AD  00C4               	movwf	??___fladd+2
 13856  09AE  1C03               	skipc
 13857  09AF  03C5               	decf	??___fladd+3,f
 13858  09B0  0845               	movf	??___fladd+3,w
 13859  09B1  3A80               	xorlw	128
 13860  09B2  00C6               	movwf	??___fladd+4
 13861  09B3  3080               	movlw	128
 13862  09B4  0246               	subwf	??___fladd+4,w
 13863  09B5  1D03               	skipz
 13864  09B6  29B9               	goto	u3355
 13865  09B7  301A               	movlw	26
 13866  09B8  0244               	subwf	??___fladd+2,w
 13867  09B9                     u3355:
 13868  09B9  1C03               	skipc
 13869  09BA  29ED               	goto	l3891
 13870  09BB  0020               	movlb	0	; select bank0
 13871  09BC  083D               	movf	___fladd@b+3,w
 13872  09BD  043C               	iorwf	___fladd@b+2,w
 13873  09BE  043B               	iorwf	___fladd@b+1,w
 13874  09BF  043A               	iorwf	___fladd@b,w
 13875  09C0  1903               	btfsc	3,2
 13876  09C1  29C4               	goto	u3360
 13877  09C2  3001               	movlw	1
 13878  09C3  29C5               	goto	u3370
 13879  09C4                     u3360:
 13880  09C4  3000               	movlw	0
 13881  09C5                     u3370:
 13882  09C5  00C2               	movwf	??___fladd
 13883  09C6  0842               	movf	??___fladd,w
 13884  09C7  00CD               	movwf	___fladd@grs
 13885  09C8  3000               	movlw	0
 13886  09C9  00BD               	movwf	___fladd@b+3
 13887  09CA  3000               	movlw	0
 13888  09CB  00BC               	movwf	___fladd@b+2
 13889  09CC  3000               	movlw	0
 13890  09CD  00BB               	movwf	___fladd@b+1
 13891  09CE  3000               	movlw	0
 13892  09CF  00BA               	movwf	___fladd@b
 13893  09D0  084B               	movf	___fladd@aexp,w
 13894  09D1  00C2               	movwf	??___fladd
 13895  09D2  0842               	movf	??___fladd,w
 13896  09D3  00CC               	movwf	___fladd@bexp
 13897  09D4  29F2               	goto	l1490
 13898  09D5                     l1492:
 13899  09D5  1C4D               	btfss	___fladd@grs,0
 13900  09D6  29DD               	goto	l3881
 13901  09D7  364D               	lsrf	___fladd@grs,w
 13902  09D8  3801               	iorlw	1
 13903  09D9  00C2               	movwf	??___fladd
 13904  09DA  0842               	movf	??___fladd,w
 13905  09DB  00CD               	movwf	___fladd@grs
 13906  09DC  29DF               	goto	l3883
 13907  09DD                     l3881:
 13908  09DD  1003               	clrc
 13909  09DE  0CCD               	rrf	___fladd@grs,f
 13910  09DF                     l3883:
 13911  09DF  183A               	btfsc	___fladd@b,0
 13912  09E0  17CD               	bsf	___fladd@grs,7
 13913  09E1  3001               	movlw	1
 13914  09E2  00C2               	movwf	??___fladd
 13915  09E3                     u3405:
 13916  09E3  37BD               	asrf	___fladd@b+3,f
 13917  09E4  0CBC               	rrf	___fladd@b+2,f
 13918  09E5  0CBB               	rrf	___fladd@b+1,f
 13919  09E6  0CBA               	rrf	___fladd@b,f
 13920  09E7  0BC2               	decfsz	??___fladd& (0+127),f
 13921  09E8  29E3               	goto	u3405
 13922  09E9  3001               	movlw	1
 13923  09EA  00C2               	movwf	??___fladd
 13924  09EB  0842               	movf	??___fladd,w
 13925  09EC  07CC               	addwf	___fladd@bexp,f
 13926  09ED                     l3891:
 13927  09ED  0020               	movlb	0	; select bank0
 13928  09EE  084B               	movf	___fladd@aexp,w
 13929  09EF  024C               	subwf	___fladd@bexp,w
 13930  09F0  1C03               	skipc
 13931  09F1  29D5               	goto	l1492
 13932  09F2                     l1490:
 13933  09F2  1B4A               	btfsc	___fladd@signs,6
 13934  09F3  2A23               	goto	l3917
 13935  09F4  084C               	movf	___fladd@bexp,w
 13936  09F5  1D03               	btfss	3,2
 13937  09F6  2A00               	goto	l3899
 13938  09F7  3000               	movlw	0
 13939  09F8  00BD               	movwf	?___fladd+3
 13940  09F9  3000               	movlw	0
 13941  09FA  00BC               	movwf	?___fladd+2
 13942  09FB  3000               	movlw	0
 13943  09FC  00BB               	movwf	?___fladd+1
 13944  09FD  3000               	movlw	0
 13945  09FE  00BA               	movwf	?___fladd
 13946  09FF  0008               	return
 13947  0A00                     l3899:
 13948  0A00  083E               	movf	___fladd@a,w
 13949  0A01  07BA               	addwf	___fladd@b,f
 13950  0A02  083F               	movf	___fladd@a+1,w
 13951  0A03  3DBB               	addwfc	___fladd@b+1,f
 13952  0A04  0840               	movf	___fladd@a+2,w
 13953  0A05  3DBC               	addwfc	___fladd@b+2,f
 13954  0A06  0841               	movf	___fladd@a+3,w
 13955  0A07  3DBD               	addwfc	___fladd@b+3,f
 13956  0A08  1C3D               	btfss	___fladd@b+3,0
 13957  0A09  2A9D               	goto	l3951
 13958  0A0A  1C4D               	btfss	___fladd@grs,0
 13959  0A0B  2A12               	goto	l3907
 13960  0A0C  364D               	lsrf	___fladd@grs,w
 13961  0A0D  3801               	iorlw	1
 13962  0A0E  00C2               	movwf	??___fladd
 13963  0A0F  0842               	movf	??___fladd,w
 13964  0A10  00CD               	movwf	___fladd@grs
 13965  0A11  2A14               	goto	l3909
 13966  0A12                     l3907:
 13967  0A12  1003               	clrc
 13968  0A13  0CCD               	rrf	___fladd@grs,f
 13969  0A14                     l3909:
 13970  0A14  183A               	btfsc	___fladd@b,0
 13971  0A15  17CD               	bsf	___fladd@grs,7
 13972  0A16  3001               	movlw	1
 13973  0A17  00C2               	movwf	??___fladd
 13974  0A18                     u3475:
 13975  0A18  37BD               	asrf	___fladd@b+3,f
 13976  0A19  0CBC               	rrf	___fladd@b+2,f
 13977  0A1A  0CBB               	rrf	___fladd@b+1,f
 13978  0A1B  0CBA               	rrf	___fladd@b,f
 13979  0A1C  0BC2               	decfsz	??___fladd& (0+127),f
 13980  0A1D  2A18               	goto	u3475
 13981  0A1E  3001               	movlw	1
 13982  0A1F  00C2               	movwf	??___fladd
 13983  0A20  0842               	movf	??___fladd,w
 13984  0A21  07CC               	addwf	___fladd@bexp,f
 13985  0A22  2A9D               	goto	l3951
 13986  0A23                     l3917:
 13987  0A23  083D               	movf	___fladd@b+3,w
 13988  0A24  3A80               	xorlw	128
 13989  0A25  00C2               	movwf	??___fladd
 13990  0A26  0841               	movf	___fladd@a+3,w
 13991  0A27  3A80               	xorlw	128
 13992  0A28  0242               	subwf	??___fladd,w
 13993  0A29  1D03               	skipz
 13994  0A2A  2A35               	goto	u3483
 13995  0A2B  0840               	movf	___fladd@a+2,w
 13996  0A2C  023C               	subwf	___fladd@b+2,w
 13997  0A2D  1D03               	skipz
 13998  0A2E  2A35               	goto	u3483
 13999  0A2F  083F               	movf	___fladd@a+1,w
 14000  0A30  023B               	subwf	___fladd@b+1,w
 14001  0A31  1D03               	skipz
 14002  0A32  2A35               	goto	u3483
 14003  0A33  083E               	movf	___fladd@a,w
 14004  0A34  023A               	subwf	___fladd@b,w
 14005  0A35                     u3483:
 14006  0A35  1803               	skipnc
 14007  0A36  2A6D               	goto	l3927
 14008  0A37  30FF               	movlw	255
 14009  0A38  00C2               	movwf	??___fladd
 14010  0A39  30FF               	movlw	255
 14011  0A3A  00C3               	movwf	??___fladd+1
 14012  0A3B  30FF               	movlw	255
 14013  0A3C  00C4               	movwf	??___fladd+2
 14014  0A3D  30FF               	movlw	255
 14015  0A3E  00C5               	movwf	??___fladd+3
 14016  0A3F  083A               	movf	___fladd@b,w
 14017  0A40  023E               	subwf	___fladd@a,w
 14018  0A41  00C6               	movwf	??___fladd+4
 14019  0A42  083B               	movf	___fladd@b+1,w
 14020  0A43  3B3F               	subwfb	___fladd@a+1,w
 14021  0A44  00C7               	movwf	??___fladd+5
 14022  0A45  083C               	movf	___fladd@b+2,w
 14023  0A46  3B40               	subwfb	___fladd@a+2,w
 14024  0A47  00C8               	movwf	??___fladd+6
 14025  0A48  083D               	movf	___fladd@b+3,w
 14026  0A49  3B41               	subwfb	___fladd@a+3,w
 14027  0A4A  00C9               	movwf	??___fladd+7
 14028  0A4B  0846               	movf	??___fladd+4,w
 14029  0A4C  07C2               	addwf	??___fladd,f
 14030  0A4D  0847               	movf	??___fladd+5,w
 14031  0A4E  3DC3               	addwfc	??___fladd+1,f
 14032  0A4F  0848               	movf	??___fladd+6,w
 14033  0A50  3DC4               	addwfc	??___fladd+2,f
 14034  0A51  0849               	movf	??___fladd+7,w
 14035  0A52  3DC5               	addwfc	??___fladd+3,f
 14036  0A53  0845               	movf	??___fladd+3,w
 14037  0A54  00BD               	movwf	___fladd@b+3
 14038  0A55  0844               	movf	??___fladd+2,w
 14039  0A56  00BC               	movwf	___fladd@b+2
 14040  0A57  0843               	movf	??___fladd+1,w
 14041  0A58  00BB               	movwf	___fladd@b+1
 14042  0A59  0842               	movf	??___fladd,w
 14043  0A5A  00BA               	movwf	___fladd@b
 14044  0A5B  3080               	movlw	128
 14045  0A5C  00C2               	movwf	??___fladd
 14046  0A5D  0842               	movf	??___fladd,w
 14047  0A5E  06CA               	xorwf	___fladd@signs,f
 14048  0A5F  09CD               	comf	___fladd@grs,f
 14049  0A60  0ACD               	incf	___fladd@grs,f
 14050  0A61  084D               	movf	___fladd@grs,w
 14051  0A62  1D03               	btfss	3,2
 14052  0A63  2A75               	goto	l1507
 14053  0A64  3001               	movlw	1
 14054  0A65  07BA               	addwf	___fladd@b,f
 14055  0A66  3000               	movlw	0
 14056  0A67  3DBB               	addwfc	___fladd@b+1,f
 14057  0A68  3000               	movlw	0
 14058  0A69  3DBC               	addwfc	___fladd@b+2,f
 14059  0A6A  3000               	movlw	0
 14060  0A6B  3DBD               	addwfc	___fladd@b+3,f
 14061  0A6C  2A75               	goto	l1507
 14062  0A6D                     l3927:
 14063  0A6D  083E               	movf	___fladd@a,w
 14064  0A6E  02BA               	subwf	___fladd@b,f
 14065  0A6F  083F               	movf	___fladd@a+1,w
 14066  0A70  3BBB               	subwfb	___fladd@b+1,f
 14067  0A71  0840               	movf	___fladd@a+2,w
 14068  0A72  3BBC               	subwfb	___fladd@b+2,f
 14069  0A73  0841               	movf	___fladd@a+3,w
 14070  0A74  3BBD               	subwfb	___fladd@b+3,f
 14071  0A75                     l1507:
 14072  0A75  083D               	movf	___fladd@b+3,w
 14073  0A76  043C               	iorwf	___fladd@b+2,w
 14074  0A77  043B               	iorwf	___fladd@b+1,w
 14075  0A78  043A               	iorwf	___fladd@b,w
 14076  0A79  1D03               	skipz
 14077  0A7A  2A9B               	goto	l3949
 14078  0A7B  084D               	movf	___fladd@grs,w
 14079  0A7C  1D03               	btfss	3,2
 14080  0A7D  2A9B               	goto	l3949
 14081  0A7E  3000               	movlw	0
 14082  0A7F  00BD               	movwf	?___fladd+3
 14083  0A80  3000               	movlw	0
 14084  0A81  00BC               	movwf	?___fladd+2
 14085  0A82  3000               	movlw	0
 14086  0A83  00BB               	movwf	?___fladd+1
 14087  0A84  3000               	movlw	0
 14088  0A85  00BA               	movwf	?___fladd
 14089  0A86  0008               	return
 14090  0A87                     l3935:
 14091  0A87  3001               	movlw	1
 14092  0A88                     u3525:
 14093  0A88  35BA               	lslf	___fladd@b,f
 14094  0A89  0DBB               	rlf	___fladd@b+1,f
 14095  0A8A  0DBC               	rlf	___fladd@b+2,f
 14096  0A8B  0DBD               	rlf	___fladd@b+3,f
 14097  0A8C  0B89               	decfsz	9,f
 14098  0A8D  2A88               	goto	u3525
 14099  0A8E  1BCD               	btfsc	___fladd@grs,7
 14100  0A8F  143A               	bsf	___fladd@b,0
 14101  0A90  1C4D               	btfss	___fladd@grs,0
 14102  0A91  2A94               	goto	l3943
 14103  0A92  1403               	setc
 14104  0A93  2A95               	goto	L13
 14105  0A94                     l3943:
 14106  0A94  1003               	clrc
 14107  0A95                     L13:
 14108  0A95  0DCD               	rlf	___fladd@grs,f
 14109  0A96  084C               	movf	___fladd@bexp,w
 14110  0A97  1903               	btfsc	3,2
 14111  0A98  2A9B               	goto	l3949
 14112  0A99  3001               	movlw	1
 14113  0A9A  02CC               	subwf	___fladd@bexp,f
 14114  0A9B                     l3949:
 14115  0A9B  1FBC               	btfss	___fladd@b+2,7
 14116  0A9C  2A87               	goto	l3935
 14117  0A9D                     l3951:
 14118  0A9D  01CB               	clrf	___fladd@aexp
 14119  0A9E  1FCD               	btfss	___fladd@grs,7
 14120  0A9F  2AA8               	goto	l3961
 14121  0AA0  084D               	movf	___fladd@grs,w
 14122  0AA1  397F               	andlw	127
 14123  0AA2  1903               	btfsc	3,2
 14124  0AA3  183A               	btfsc	___fladd@b,0
 14125  0AA4  2AA6               	goto	l3957
 14126  0AA5  2AA8               	goto	l3961
 14127  0AA6                     l3957:
 14128  0AA6  01CB               	clrf	___fladd@aexp
 14129  0AA7  0ACB               	incf	___fladd@aexp,f
 14130  0AA8                     l3961:
 14131  0AA8  084B               	movf	___fladd@aexp,w
 14132  0AA9  1903               	btfsc	3,2
 14133  0AAA  2AD4               	goto	l1520
 14134  0AAB  3001               	movlw	1
 14135  0AAC  07BA               	addwf	___fladd@b,f
 14136  0AAD  3000               	movlw	0
 14137  0AAE  3DBB               	addwfc	___fladd@b+1,f
 14138  0AAF  3000               	movlw	0
 14139  0AB0  3DBC               	addwfc	___fladd@b+2,f
 14140  0AB1  3000               	movlw	0
 14141  0AB2  3DBD               	addwfc	___fladd@b+3,f
 14142  0AB3  1C3D               	btfss	___fladd@b+3,0
 14143  0AB4  2AD4               	goto	l1520
 14144  0AB5  083A               	movf	___fladd@b,w
 14145  0AB6  00C2               	movwf	??___fladd
 14146  0AB7  083B               	movf	___fladd@b+1,w
 14147  0AB8  00C3               	movwf	??___fladd+1
 14148  0AB9  083C               	movf	___fladd@b+2,w
 14149  0ABA  00C4               	movwf	??___fladd+2
 14150  0ABB  083D               	movf	___fladd@b+3,w
 14151  0ABC  00C5               	movwf	??___fladd+3
 14152  0ABD  3001               	movlw	1
 14153  0ABE  00C6               	movwf	??___fladd+4
 14154  0ABF                     u3625:
 14155  0ABF  37C5               	asrf	??___fladd+3,f
 14156  0AC0  0CC4               	rrf	??___fladd+2,f
 14157  0AC1  0CC3               	rrf	??___fladd+1,f
 14158  0AC2  0CC2               	rrf	??___fladd,f
 14159  0AC3  0BC6               	decfsz	??___fladd+4,f
 14160  0AC4  2ABF               	goto	u3625
 14161  0AC5  0845               	movf	??___fladd+3,w
 14162  0AC6  00BD               	movwf	___fladd@b+3
 14163  0AC7  0844               	movf	??___fladd+2,w
 14164  0AC8  00BC               	movwf	___fladd@b+2
 14165  0AC9  0843               	movf	??___fladd+1,w
 14166  0ACA  00BB               	movwf	___fladd@b+1
 14167  0ACB  0842               	movf	??___fladd,w
 14168  0ACC  00BA               	movwf	___fladd@b
 14169  0ACD  0A4C               	incf	___fladd@bexp,w
 14170  0ACE  1903               	btfsc	3,2
 14171  0ACF  2AD4               	goto	l1520
 14172  0AD0  3001               	movlw	1
 14173  0AD1  00C2               	movwf	??___fladd
 14174  0AD2  0842               	movf	??___fladd,w
 14175  0AD3  07CC               	addwf	___fladd@bexp,f
 14176  0AD4                     l1520:
 14177  0AD4  0A4C               	incf	___fladd@bexp,w
 14178  0AD5  1D03               	btfss	3,2
 14179  0AD6  084C               	movf	___fladd@bexp,w
 14180  0AD7  1D03               	btfss	3,2
 14181  0AD8  2AE4               	goto	l3979
 14182  0AD9  3000               	movlw	0
 14183  0ADA  00BD               	movwf	___fladd@b+3
 14184  0ADB  3000               	movlw	0
 14185  0ADC  00BC               	movwf	___fladd@b+2
 14186  0ADD  3000               	movlw	0
 14187  0ADE  00BB               	movwf	___fladd@b+1
 14188  0ADF  3000               	movlw	0
 14189  0AE0  00BA               	movwf	___fladd@b
 14190  0AE1  084C               	movf	___fladd@bexp,w
 14191  0AE2  1903               	btfsc	3,2
 14192  0AE3  01CA               	clrf	___fladd@signs
 14193  0AE4                     l3979:
 14194  0AE4  1C4C               	btfss	___fladd@bexp,0
 14195  0AE5  2AE8               	goto	l3983
 14196  0AE6  17BC               	bsf	___fladd@b+2,7
 14197  0AE7  2AEC               	goto	l1528
 14198  0AE8                     l3983:
 14199  0AE8  307F               	movlw	127
 14200  0AE9  00C2               	movwf	??___fladd
 14201  0AEA  0842               	movf	??___fladd,w
 14202  0AEB  05BC               	andwf	___fladd@b+2,f
 14203  0AEC                     l1528:
 14204  0AEC  364C               	lsrf	___fladd@bexp,w
 14205  0AED  00C2               	movwf	??___fladd
 14206  0AEE  0842               	movf	??___fladd,w
 14207  0AEF  00BD               	movwf	___fladd@b+3
 14208  0AF0  1FCA               	btfss	___fladd@signs,7
 14209  0AF1  0008               	return
 14210  0AF2  17BD               	bsf	___fladd@b+3,7
 14211  0AF3  0008               	return
 14212  0AF4                     __end_of___fladd:
 14213                           
 14214                           	psect	text70
 14215  0AF4                     __ptext70:	
 14216 ;; *************** function ___flmul *****************
 14217 ;; Defined at:
 14218 ;;		line 8 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/sprcmul.c"
 14219 ;; Parameters:    Size  Location     Type
 14220 ;;  b               4    0[BANK0 ] unsigned char 
 14221 ;;  a               4    4[BANK0 ] unsigned char 
 14222 ;; Auto vars:     Size  Location     Type
 14223 ;;  prod            4   20[BANK0 ] struct .
 14224 ;;  grs             4   15[BANK0 ] unsigned long 
 14225 ;;  temp            2   24[BANK0 ] struct .
 14226 ;;  bexp            1   19[BANK0 ] unsigned char 
 14227 ;;  aexp            1   14[BANK0 ] unsigned char 
 14228 ;;  sign            1   13[BANK0 ] unsigned char 
 14229 ;; Return value:  Size  Location     Type
 14230 ;;                  4    0[BANK0 ] unsigned char 
 14231 ;; Registers used:
 14232 ;;		wreg, status,2, status,0, pclath, cstack
 14233 ;; Tracked objects:
 14234 ;;		On entry : 1F/0
 14235 ;;		On exit  : 1F/0
 14236 ;;		Unchanged: 0/0
 14237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14238 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14239 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14240 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14241 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14242 ;;Total ram usage:       26 bytes
 14243 ;; Hardware stack levels used:    1
 14244 ;; Hardware stack levels required when called:    6
 14245 ;; This function calls:
 14246 ;;		__Umul8_16
 14247 ;; This function is called by:
 14248 ;;		_ChangeADCtoVoltage
 14249 ;;		_Measure_R_PT100_2Wire
 14250 ;;		_Measure_Temp_PT100_2Wire
 14251 ;;		_CalcRequiredDelayForTrigTRIAC
 14252 ;;		_efgtoa
 14253 ;;		_sqrtf
 14254 ;; This function uses a non-reentrant model
 14255 ;;
 14256                           
 14257                           
 14258                           ;psect for function ___flmul
 14259  0AF4                     ___flmul:
 14260                           
 14261                           ;incstack = 0
 14262                           ; Regs used in ___flmul: [wreg+status,2+status,0+pclath+cstack]
 14263  0AF4  0823               	movf	___flmul@b+3,w
 14264  0AF5  3980               	andlw	128
 14265  0AF6  00A8               	movwf	??___flmul
 14266  0AF7  0828               	movf	??___flmul,w
 14267  0AF8  00AD               	movwf	___flmul@sign
 14268  0AF9  3523               	lslf	___flmul@b+3,w
 14269  0AFA  00A8               	movwf	??___flmul
 14270  0AFB  0828               	movf	??___flmul,w
 14271  0AFC  00B3               	movwf	___flmul@bexp
 14272  0AFD  1BA2               	btfsc	___flmul@b+2,7
 14273  0AFE  1433               	bsf	___flmul@bexp,0
 14274  0AFF  0833               	movf	___flmul@bexp,w
 14275  0B00  1903               	btfsc	3,2
 14276  0B01  2B0F               	goto	l4355
 14277  0B02  0A33               	incf	___flmul@bexp,w
 14278  0B03  1D03               	btfss	3,2
 14279  0B04  2B0D               	goto	l4353
 14280  0B05  3000               	movlw	0
 14281  0B06  00A3               	movwf	___flmul@b+3
 14282  0B07  3000               	movlw	0
 14283  0B08  00A2               	movwf	___flmul@b+2
 14284  0B09  3000               	movlw	0
 14285  0B0A  00A1               	movwf	___flmul@b+1
 14286  0B0B  3000               	movlw	0
 14287  0B0C  00A0               	movwf	___flmul@b
 14288  0B0D                     l4353:
 14289  0B0D  17A2               	bsf	___flmul@b+2,7
 14290  0B0E  2B17               	goto	l4357
 14291  0B0F                     l4355:
 14292  0B0F  3000               	movlw	0
 14293  0B10  00A3               	movwf	___flmul@b+3
 14294  0B11  3000               	movlw	0
 14295  0B12  00A2               	movwf	___flmul@b+2
 14296  0B13  3000               	movlw	0
 14297  0B14  00A1               	movwf	___flmul@b+1
 14298  0B15  3000               	movlw	0
 14299  0B16  00A0               	movwf	___flmul@b
 14300  0B17                     l4357:
 14301  0B17  0827               	movf	___flmul@a+3,w
 14302  0B18  3980               	andlw	128
 14303  0B19  00A8               	movwf	??___flmul
 14304  0B1A  0828               	movf	??___flmul,w
 14305  0B1B  06AD               	xorwf	___flmul@sign,f
 14306  0B1C  3527               	lslf	___flmul@a+3,w
 14307  0B1D  00A8               	movwf	??___flmul
 14308  0B1E  0828               	movf	??___flmul,w
 14309  0B1F  00AE               	movwf	___flmul@aexp
 14310  0B20  1BA6               	btfsc	___flmul@a+2,7
 14311  0B21  142E               	bsf	___flmul@aexp,0
 14312  0B22  082E               	movf	___flmul@aexp,w
 14313  0B23  1903               	btfsc	3,2
 14314  0B24  2B32               	goto	l4373
 14315  0B25  0A2E               	incf	___flmul@aexp,w
 14316  0B26  1D03               	btfss	3,2
 14317  0B27  2B30               	goto	l4371
 14318  0B28  3000               	movlw	0
 14319  0B29  00A7               	movwf	___flmul@a+3
 14320  0B2A  3000               	movlw	0
 14321  0B2B  00A6               	movwf	___flmul@a+2
 14322  0B2C  3000               	movlw	0
 14323  0B2D  00A5               	movwf	___flmul@a+1
 14324  0B2E  3000               	movlw	0
 14325  0B2F  00A4               	movwf	___flmul@a
 14326  0B30                     l4371:
 14327  0B30  17A6               	bsf	___flmul@a+2,7
 14328  0B31  2B3A               	goto	l4375
 14329  0B32                     l4373:
 14330  0B32  3000               	movlw	0
 14331  0B33  00A7               	movwf	___flmul@a+3
 14332  0B34  3000               	movlw	0
 14333  0B35  00A6               	movwf	___flmul@a+2
 14334  0B36  3000               	movlw	0
 14335  0B37  00A5               	movwf	___flmul@a+1
 14336  0B38  3000               	movlw	0
 14337  0B39  00A4               	movwf	___flmul@a
 14338  0B3A                     l4375:
 14339  0B3A  082E               	movf	___flmul@aexp,w
 14340  0B3B  1D03               	btfss	3,2
 14341  0B3C  0833               	movf	___flmul@bexp,w
 14342  0B3D  1D03               	btfss	3,2
 14343  0B3E  2B48               	goto	l4383
 14344  0B3F  3000               	movlw	0
 14345  0B40  00A3               	movwf	?___flmul+3
 14346  0B41  3000               	movlw	0
 14347  0B42  00A2               	movwf	?___flmul+2
 14348  0B43  3000               	movlw	0
 14349  0B44  00A1               	movwf	?___flmul+1
 14350  0B45  3000               	movlw	0
 14351  0B46  00A0               	movwf	?___flmul
 14352  0B47  0008               	return
 14353  0B48                     l4383:
 14354  0B48  0820               	movf	___flmul@b,w
 14355  0B49  00A8               	movwf	??___flmul
 14356  0B4A  0828               	movf	??___flmul,w
 14357  0B4B  00F0               	movwf	__Umul8_16@multiplicand
 14358  0B4C  0826               	movf	___flmul@a+2,w
 14359  0B4D  319C  2469  318A   	fcall	__Umul8_16
 14360  0B50  0871               	movf	?__Umul8_16+1,w
 14361  0B51  00B9               	movwf	___flmul@temp+1
 14362  0B52  0870               	movf	?__Umul8_16,w
 14363  0B53  00B8               	movwf	___flmul@temp
 14364  0B54  0838               	movf	___flmul@temp,w
 14365  0B55  00A8               	movwf	??___flmul
 14366  0B56  01A9               	clrf	??___flmul+1
 14367  0B57  01AA               	clrf	??___flmul+2
 14368  0B58  01AB               	clrf	??___flmul+3
 14369  0B59  082B               	movf	??___flmul+3,w
 14370  0B5A  00B2               	movwf	___flmul@grs+3
 14371  0B5B  082A               	movf	??___flmul+2,w
 14372  0B5C  00B1               	movwf	___flmul@grs+2
 14373  0B5D  0829               	movf	??___flmul+1,w
 14374  0B5E  00B0               	movwf	___flmul@grs+1
 14375  0B5F  0828               	movf	??___flmul,w
 14376  0B60  00AF               	movwf	___flmul@grs
 14377  0B61  0839               	movf	___flmul@temp+1,w
 14378  0B62  00A8               	movwf	??___flmul
 14379  0B63  01A9               	clrf	??___flmul+1
 14380  0B64  01AA               	clrf	??___flmul+2
 14381  0B65  01AB               	clrf	??___flmul+3
 14382  0B66  082B               	movf	??___flmul+3,w
 14383  0B67  00B7               	movwf	___flmul@prod+3
 14384  0B68  082A               	movf	??___flmul+2,w
 14385  0B69  00B6               	movwf	___flmul@prod+2
 14386  0B6A  0829               	movf	??___flmul+1,w
 14387  0B6B  00B5               	movwf	___flmul@prod+1
 14388  0B6C  0828               	movf	??___flmul,w
 14389  0B6D  00B4               	movwf	___flmul@prod
 14390  0B6E  0821               	movf	___flmul@b+1,w
 14391  0B6F  00A8               	movwf	??___flmul
 14392  0B70  0828               	movf	??___flmul,w
 14393  0B71  00F0               	movwf	__Umul8_16@multiplicand
 14394  0B72  0825               	movf	___flmul@a+1,w
 14395  0B73  319C  2469  318A   	fcall	__Umul8_16
 14396  0B76  0871               	movf	?__Umul8_16+1,w
 14397  0B77  00B9               	movwf	___flmul@temp+1
 14398  0B78  0870               	movf	?__Umul8_16,w
 14399  0B79  00B8               	movwf	___flmul@temp
 14400  0B7A  0838               	movf	___flmul@temp,w
 14401  0B7B  00A8               	movwf	??___flmul
 14402  0B7C  01A9               	clrf	??___flmul+1
 14403  0B7D  01AA               	clrf	??___flmul+2
 14404  0B7E  01AB               	clrf	??___flmul+3
 14405  0B7F  0828               	movf	??___flmul,w
 14406  0B80  07AF               	addwf	___flmul@grs,f
 14407  0B81  0829               	movf	??___flmul+1,w
 14408  0B82  3DB0               	addwfc	___flmul@grs+1,f
 14409  0B83  082A               	movf	??___flmul+2,w
 14410  0B84  3DB1               	addwfc	___flmul@grs+2,f
 14411  0B85  082B               	movf	??___flmul+3,w
 14412  0B86  3DB2               	addwfc	___flmul@grs+3,f
 14413  0B87  0839               	movf	___flmul@temp+1,w
 14414  0B88  00A8               	movwf	??___flmul
 14415  0B89  01A9               	clrf	??___flmul+1
 14416  0B8A  01AA               	clrf	??___flmul+2
 14417  0B8B  01AB               	clrf	??___flmul+3
 14418  0B8C  0828               	movf	??___flmul,w
 14419  0B8D  07B4               	addwf	___flmul@prod,f
 14420  0B8E  0829               	movf	??___flmul+1,w
 14421  0B8F  3DB5               	addwfc	___flmul@prod+1,f
 14422  0B90  082A               	movf	??___flmul+2,w
 14423  0B91  3DB6               	addwfc	___flmul@prod+2,f
 14424  0B92  082B               	movf	??___flmul+3,w
 14425  0B93  3DB7               	addwfc	___flmul@prod+3,f
 14426  0B94  0822               	movf	___flmul@b+2,w
 14427  0B95  00A8               	movwf	??___flmul
 14428  0B96  0828               	movf	??___flmul,w
 14429  0B97  00F0               	movwf	__Umul8_16@multiplicand
 14430  0B98  0824               	movf	___flmul@a,w
 14431  0B99  319C  2469  318A   	fcall	__Umul8_16
 14432  0B9C  0871               	movf	?__Umul8_16+1,w
 14433  0B9D  00B9               	movwf	___flmul@temp+1
 14434  0B9E  0870               	movf	?__Umul8_16,w
 14435  0B9F  00B8               	movwf	___flmul@temp
 14436  0BA0  0838               	movf	___flmul@temp,w
 14437  0BA1  00A8               	movwf	??___flmul
 14438  0BA2  01A9               	clrf	??___flmul+1
 14439  0BA3  01AA               	clrf	??___flmul+2
 14440  0BA4  01AB               	clrf	??___flmul+3
 14441  0BA5  0828               	movf	??___flmul,w
 14442  0BA6  07AF               	addwf	___flmul@grs,f
 14443  0BA7  0829               	movf	??___flmul+1,w
 14444  0BA8  3DB0               	addwfc	___flmul@grs+1,f
 14445  0BA9  082A               	movf	??___flmul+2,w
 14446  0BAA  3DB1               	addwfc	___flmul@grs+2,f
 14447  0BAB  082B               	movf	??___flmul+3,w
 14448  0BAC  3DB2               	addwfc	___flmul@grs+3,f
 14449  0BAD  0839               	movf	___flmul@temp+1,w
 14450  0BAE  00A8               	movwf	??___flmul
 14451  0BAF  01A9               	clrf	??___flmul+1
 14452  0BB0  01AA               	clrf	??___flmul+2
 14453  0BB1  01AB               	clrf	??___flmul+3
 14454  0BB2  0828               	movf	??___flmul,w
 14455  0BB3  07B4               	addwf	___flmul@prod,f
 14456  0BB4  0829               	movf	??___flmul+1,w
 14457  0BB5  3DB5               	addwfc	___flmul@prod+1,f
 14458  0BB6  082A               	movf	??___flmul+2,w
 14459  0BB7  3DB6               	addwfc	___flmul@prod+2,f
 14460  0BB8  082B               	movf	??___flmul+3,w
 14461  0BB9  3DB7               	addwfc	___flmul@prod+3,f
 14462  0BBA  3008               	movlw	8
 14463  0BBB                     u4555:
 14464  0BBB  35AF               	lslf	___flmul@grs,f
 14465  0BBC  0DB0               	rlf	___flmul@grs+1,f
 14466  0BBD  0DB1               	rlf	___flmul@grs+2,f
 14467  0BBE  0DB2               	rlf	___flmul@grs+3,f
 14468  0BBF  0B89               	decfsz	9,f
 14469  0BC0  2BBB               	goto	u4555
 14470  0BC1  0821               	movf	___flmul@b+1,w
 14471  0BC2  00A8               	movwf	??___flmul
 14472  0BC3  0828               	movf	??___flmul,w
 14473  0BC4  00F0               	movwf	__Umul8_16@multiplicand
 14474  0BC5  0824               	movf	___flmul@a,w
 14475  0BC6  319C  2469  318A   	fcall	__Umul8_16
 14476  0BC9  0871               	movf	?__Umul8_16+1,w
 14477  0BCA  00B9               	movwf	___flmul@temp+1
 14478  0BCB  0870               	movf	?__Umul8_16,w
 14479  0BCC  00B8               	movwf	___flmul@temp
 14480  0BCD  0838               	movf	___flmul@temp,w
 14481  0BCE  07AF               	addwf	___flmul@grs,f
 14482  0BCF  0839               	movf	___flmul@temp+1,w
 14483  0BD0  3DB0               	addwfc	___flmul@grs+1,f
 14484  0BD1  3000               	movlw	0
 14485  0BD2  3DB1               	addwfc	___flmul@grs+2,f
 14486  0BD3  3DB2               	addwfc	___flmul@grs+3,f
 14487  0BD4  0820               	movf	___flmul@b,w
 14488  0BD5  00A8               	movwf	??___flmul
 14489  0BD6  0828               	movf	??___flmul,w
 14490  0BD7  00F0               	movwf	__Umul8_16@multiplicand
 14491  0BD8  0825               	movf	___flmul@a+1,w
 14492  0BD9  319C  2469  318A   	fcall	__Umul8_16
 14493  0BDC  0871               	movf	?__Umul8_16+1,w
 14494  0BDD  00B9               	movwf	___flmul@temp+1
 14495  0BDE  0870               	movf	?__Umul8_16,w
 14496  0BDF  00B8               	movwf	___flmul@temp
 14497  0BE0  0838               	movf	___flmul@temp,w
 14498  0BE1  07AF               	addwf	___flmul@grs,f
 14499  0BE2  0839               	movf	___flmul@temp+1,w
 14500  0BE3  3DB0               	addwfc	___flmul@grs+1,f
 14501  0BE4  3000               	movlw	0
 14502  0BE5  3DB1               	addwfc	___flmul@grs+2,f
 14503  0BE6  3DB2               	addwfc	___flmul@grs+3,f
 14504  0BE7  3008               	movlw	8
 14505  0BE8                     u4565:
 14506  0BE8  35AF               	lslf	___flmul@grs,f
 14507  0BE9  0DB0               	rlf	___flmul@grs+1,f
 14508  0BEA  0DB1               	rlf	___flmul@grs+2,f
 14509  0BEB  0DB2               	rlf	___flmul@grs+3,f
 14510  0BEC  0B89               	decfsz	9,f
 14511  0BED  2BE8               	goto	u4565
 14512  0BEE  0820               	movf	___flmul@b,w
 14513  0BEF  00A8               	movwf	??___flmul
 14514  0BF0  0828               	movf	??___flmul,w
 14515  0BF1  00F0               	movwf	__Umul8_16@multiplicand
 14516  0BF2  0824               	movf	___flmul@a,w
 14517  0BF3  319C  2469  318A   	fcall	__Umul8_16
 14518  0BF6  0871               	movf	?__Umul8_16+1,w
 14519  0BF7  00B9               	movwf	___flmul@temp+1
 14520  0BF8  0870               	movf	?__Umul8_16,w
 14521  0BF9  00B8               	movwf	___flmul@temp
 14522  0BFA  0838               	movf	___flmul@temp,w
 14523  0BFB  07AF               	addwf	___flmul@grs,f
 14524  0BFC  0839               	movf	___flmul@temp+1,w
 14525  0BFD  3DB0               	addwfc	___flmul@grs+1,f
 14526  0BFE  3000               	movlw	0
 14527  0BFF  3DB1               	addwfc	___flmul@grs+2,f
 14528  0C00  3DB2               	addwfc	___flmul@grs+3,f
 14529  0C01  0821               	movf	___flmul@b+1,w
 14530  0C02  00A8               	movwf	??___flmul
 14531  0C03  0828               	movf	??___flmul,w
 14532  0C04  00F0               	movwf	__Umul8_16@multiplicand
 14533  0C05  0826               	movf	___flmul@a+2,w
 14534  0C06  319C  2469  318A   	fcall	__Umul8_16
 14535  0C09  0871               	movf	?__Umul8_16+1,w
 14536  0C0A  00B9               	movwf	___flmul@temp+1
 14537  0C0B  0870               	movf	?__Umul8_16,w
 14538  0C0C  00B8               	movwf	___flmul@temp
 14539  0C0D  0838               	movf	___flmul@temp,w
 14540  0C0E  07B4               	addwf	___flmul@prod,f
 14541  0C0F  0839               	movf	___flmul@temp+1,w
 14542  0C10  3DB5               	addwfc	___flmul@prod+1,f
 14543  0C11  3000               	movlw	0
 14544  0C12  3DB6               	addwfc	___flmul@prod+2,f
 14545  0C13  3DB7               	addwfc	___flmul@prod+3,f
 14546  0C14  0822               	movf	___flmul@b+2,w
 14547  0C15  00A8               	movwf	??___flmul
 14548  0C16  0828               	movf	??___flmul,w
 14549  0C17  00F0               	movwf	__Umul8_16@multiplicand
 14550  0C18  0825               	movf	___flmul@a+1,w
 14551  0C19  319C  2469  318A   	fcall	__Umul8_16
 14552  0C1C  0871               	movf	?__Umul8_16+1,w
 14553  0C1D  00B9               	movwf	___flmul@temp+1
 14554  0C1E  0870               	movf	?__Umul8_16,w
 14555  0C1F  00B8               	movwf	___flmul@temp
 14556  0C20  0838               	movf	___flmul@temp,w
 14557  0C21  07B4               	addwf	___flmul@prod,f
 14558  0C22  0839               	movf	___flmul@temp+1,w
 14559  0C23  3DB5               	addwfc	___flmul@prod+1,f
 14560  0C24  3000               	movlw	0
 14561  0C25  3DB6               	addwfc	___flmul@prod+2,f
 14562  0C26  3DB7               	addwfc	___flmul@prod+3,f
 14563  0C27  0822               	movf	___flmul@b+2,w
 14564  0C28  00A8               	movwf	??___flmul
 14565  0C29  0828               	movf	??___flmul,w
 14566  0C2A  00F0               	movwf	__Umul8_16@multiplicand
 14567  0C2B  0826               	movf	___flmul@a+2,w
 14568  0C2C  319C  2469  318A   	fcall	__Umul8_16
 14569  0C2F  0871               	movf	?__Umul8_16+1,w
 14570  0C30  00B9               	movwf	___flmul@temp+1
 14571  0C31  0870               	movf	?__Umul8_16,w
 14572  0C32  00B8               	movwf	___flmul@temp
 14573  0C33  0838               	movf	___flmul@temp,w
 14574  0C34  00A8               	movwf	??___flmul
 14575  0C35  0839               	movf	___flmul@temp+1,w
 14576  0C36  00A9               	movwf	??___flmul+1
 14577  0C37  01AA               	clrf	??___flmul+2
 14578  0C38  01AB               	clrf	??___flmul+3
 14579  0C39  3008               	movlw	8
 14580  0C3A                     u4575:
 14581  0C3A  35A8               	lslf	??___flmul,f
 14582  0C3B  0DA9               	rlf	??___flmul+1,f
 14583  0C3C  0DAA               	rlf	??___flmul+2,f
 14584  0C3D  0DAB               	rlf	??___flmul+3,f
 14585  0C3E  0B89               	decfsz	9,f
 14586  0C3F  2C3A               	goto	u4575
 14587  0C40  0828               	movf	??___flmul,w
 14588  0C41  07B4               	addwf	___flmul@prod,f
 14589  0C42  0829               	movf	??___flmul+1,w
 14590  0C43  3DB5               	addwfc	___flmul@prod+1,f
 14591  0C44  082A               	movf	??___flmul+2,w
 14592  0C45  3DB6               	addwfc	___flmul@prod+2,f
 14593  0C46  082B               	movf	??___flmul+3,w
 14594  0C47  3DB7               	addwfc	___flmul@prod+3,f
 14595  0C48  0832               	movf	___flmul@grs+3,w
 14596  0C49  00A8               	movwf	??___flmul
 14597  0C4A  01A9               	clrf	??___flmul+1
 14598  0C4B  01AA               	clrf	??___flmul+2
 14599  0C4C  01AB               	clrf	??___flmul+3
 14600  0C4D  0828               	movf	??___flmul,w
 14601  0C4E  07B4               	addwf	___flmul@prod,f
 14602  0C4F  0829               	movf	??___flmul+1,w
 14603  0C50  3DB5               	addwfc	___flmul@prod+1,f
 14604  0C51  082A               	movf	??___flmul+2,w
 14605  0C52  3DB6               	addwfc	___flmul@prod+2,f
 14606  0C53  082B               	movf	??___flmul+3,w
 14607  0C54  3DB7               	addwfc	___flmul@prod+3,f
 14608  0C55  3008               	movlw	8
 14609  0C56                     u4585:
 14610  0C56  35AF               	lslf	___flmul@grs,f
 14611  0C57  0DB0               	rlf	___flmul@grs+1,f
 14612  0C58  0DB1               	rlf	___flmul@grs+2,f
 14613  0C59  0DB2               	rlf	___flmul@grs+3,f
 14614  0C5A  0B89               	decfsz	9,f
 14615  0C5B  2C56               	goto	u4585
 14616  0C5C  0833               	movf	___flmul@bexp,w
 14617  0C5D  072E               	addwf	___flmul@aexp,w
 14618  0C5E  00A8               	movwf	??___flmul
 14619  0C5F  01A9               	clrf	??___flmul+1
 14620  0C60  0DA9               	rlf	??___flmul+1,f
 14621  0C61  0828               	movf	??___flmul,w
 14622  0C62  3E82               	addlw	130
 14623  0C63  00B8               	movwf	___flmul@temp
 14624  0C64  30FF               	movlw	255
 14625  0C65  3D29               	addwfc	??___flmul+1,w
 14626  0C66  00B9               	movwf	___flmul@temp+1
 14627  0C67                     l4435:
 14628  0C67  1BB6               	btfsc	___flmul@prod+2,7
 14629  0C68  2C7E               	goto	l4437
 14630  0C69  3001               	movlw	1
 14631  0C6A                     u4595:
 14632  0C6A  35B4               	lslf	___flmul@prod,f
 14633  0C6B  0DB5               	rlf	___flmul@prod+1,f
 14634  0C6C  0DB6               	rlf	___flmul@prod+2,f
 14635  0C6D  0DB7               	rlf	___flmul@prod+3,f
 14636  0C6E  0B89               	decfsz	9,f
 14637  0C6F  2C6A               	goto	u4595
 14638  0C70  1BB2               	btfsc	___flmul@grs+3,7
 14639  0C71  1434               	bsf	___flmul@prod,0
 14640  0C72  3001               	movlw	1
 14641  0C73                     u4615:
 14642  0C73  35AF               	lslf	___flmul@grs,f
 14643  0C74  0DB0               	rlf	___flmul@grs+1,f
 14644  0C75  0DB1               	rlf	___flmul@grs+2,f
 14645  0C76  0DB2               	rlf	___flmul@grs+3,f
 14646  0C77  0B89               	decfsz	9,f
 14647  0C78  2C73               	goto	u4615
 14648  0C79  30FF               	movlw	255
 14649  0C7A  07B8               	addwf	___flmul@temp,f
 14650  0C7B  30FF               	movlw	255
 14651  0C7C  3DB9               	addwfc	___flmul@temp+1,f
 14652  0C7D  2C67               	goto	l4435
 14653  0C7E                     l4437:
 14654  0C7E  01AE               	clrf	___flmul@aexp
 14655  0C7F  1FB2               	btfss	___flmul@grs+3,7
 14656  0C80  2C97               	goto	l4447
 14657  0C81  30FF               	movlw	255
 14658  0C82  052F               	andwf	___flmul@grs,w
 14659  0C83  00A8               	movwf	??___flmul
 14660  0C84  30FF               	movlw	255
 14661  0C85  0530               	andwf	___flmul@grs+1,w
 14662  0C86  00A9               	movwf	??___flmul+1
 14663  0C87  30FF               	movlw	255
 14664  0C88  0531               	andwf	___flmul@grs+2,w
 14665  0C89  00AA               	movwf	??___flmul+2
 14666  0C8A  307F               	movlw	127
 14667  0C8B  0532               	andwf	___flmul@grs+3,w
 14668  0C8C  00AB               	movwf	??___flmul+3
 14669  0C8D  082B               	movf	??___flmul+3,w
 14670  0C8E  042A               	iorwf	??___flmul+2,w
 14671  0C8F  0429               	iorwf	??___flmul+1,w
 14672  0C90  0428               	iorwf	??___flmul,w
 14673  0C91  1903               	skipnz
 14674  0C92  1834               	btfsc	___flmul@prod,0
 14675  0C93  2C95               	goto	l4443
 14676  0C94  2C97               	goto	l4447
 14677  0C95                     l4443:
 14678  0C95  01AE               	clrf	___flmul@aexp
 14679  0C96  0AAE               	incf	___flmul@aexp,f
 14680  0C97                     l4447:
 14681  0C97  082E               	movf	___flmul@aexp,w
 14682  0C98  1903               	btfsc	3,2
 14683  0C99  2CC0               	goto	l4457
 14684  0C9A  3001               	movlw	1
 14685  0C9B  07B4               	addwf	___flmul@prod,f
 14686  0C9C  3000               	movlw	0
 14687  0C9D  3DB5               	addwfc	___flmul@prod+1,f
 14688  0C9E  3000               	movlw	0
 14689  0C9F  3DB6               	addwfc	___flmul@prod+2,f
 14690  0CA0  3000               	movlw	0
 14691  0CA1  3DB7               	addwfc	___flmul@prod+3,f
 14692  0CA2  1C37               	btfss	___flmul@prod+3,0
 14693  0CA3  2CC0               	goto	l4457
 14694  0CA4  0834               	movf	___flmul@prod,w
 14695  0CA5  00A8               	movwf	??___flmul
 14696  0CA6  0835               	movf	___flmul@prod+1,w
 14697  0CA7  00A9               	movwf	??___flmul+1
 14698  0CA8  0836               	movf	___flmul@prod+2,w
 14699  0CA9  00AA               	movwf	??___flmul+2
 14700  0CAA  0837               	movf	___flmul@prod+3,w
 14701  0CAB  00AB               	movwf	??___flmul+3
 14702  0CAC  3001               	movlw	1
 14703  0CAD  00AC               	movwf	??___flmul+4
 14704  0CAE                     u4685:
 14705  0CAE  37AB               	asrf	??___flmul+3,f
 14706  0CAF  0CAA               	rrf	??___flmul+2,f
 14707  0CB0  0CA9               	rrf	??___flmul+1,f
 14708  0CB1  0CA8               	rrf	??___flmul,f
 14709  0CB2  0BAC               	decfsz	??___flmul+4,f
 14710  0CB3  2CAE               	goto	u4685
 14711  0CB4  082B               	movf	??___flmul+3,w
 14712  0CB5  00B7               	movwf	___flmul@prod+3
 14713  0CB6  082A               	movf	??___flmul+2,w
 14714  0CB7  00B6               	movwf	___flmul@prod+2
 14715  0CB8  0829               	movf	??___flmul+1,w
 14716  0CB9  00B5               	movwf	___flmul@prod+1
 14717  0CBA  0828               	movf	??___flmul,w
 14718  0CBB  00B4               	movwf	___flmul@prod
 14719  0CBC  3001               	movlw	1
 14720  0CBD  07B8               	addwf	___flmul@temp,f
 14721  0CBE  3000               	movlw	0
 14722  0CBF  3DB9               	addwfc	___flmul@temp+1,f
 14723  0CC0                     l4457:
 14724  0CC0  0839               	movf	___flmul@temp+1,w
 14725  0CC1  3A80               	xorlw	128
 14726  0CC2  00A8               	movwf	??___flmul
 14727  0CC3  3080               	movlw	128
 14728  0CC4  0228               	subwf	??___flmul,w
 14729  0CC5  1D03               	skipz
 14730  0CC6  2CC9               	goto	u4695
 14731  0CC7  30FF               	movlw	255
 14732  0CC8  0238               	subwf	___flmul@temp,w
 14733  0CC9                     u4695:
 14734  0CC9  1C03               	skipc
 14735  0CCA  2CD5               	goto	l4461
 14736  0CCB  307F               	movlw	127
 14737  0CCC  0020               	movlb	0	; select bank0
 14738  0CCD  00B7               	movwf	___flmul@prod+3
 14739  0CCE  3080               	movlw	128
 14740  0CCF  00B6               	movwf	___flmul@prod+2
 14741  0CD0  3000               	movlw	0
 14742  0CD1  00B5               	movwf	___flmul@prod+1
 14743  0CD2  3000               	movlw	0
 14744  0CD3  00B4               	movwf	___flmul@prod
 14745  0CD4  2CFF               	goto	l1594
 14746  0CD5                     l4461:
 14747  0CD5  0020               	movlb	0	; select bank0
 14748  0CD6  0839               	movf	___flmul@temp+1,w
 14749  0CD7  3A80               	xorlw	128
 14750  0CD8  00A8               	movwf	??___flmul
 14751  0CD9  3080               	movlw	128
 14752  0CDA  0228               	subwf	??___flmul,w
 14753  0CDB  1D03               	skipz
 14754  0CDC  2CDF               	goto	u4705
 14755  0CDD  3001               	movlw	1
 14756  0CDE  0238               	subwf	___flmul@temp,w
 14757  0CDF                     u4705:
 14758  0CDF  1803               	skipnc
 14759  0CE0  2CEC               	goto	l4467
 14760  0CE1  3000               	movlw	0
 14761  0CE2  0020               	movlb	0	; select bank0
 14762  0CE3  00B7               	movwf	___flmul@prod+3
 14763  0CE4  3000               	movlw	0
 14764  0CE5  00B6               	movwf	___flmul@prod+2
 14765  0CE6  3000               	movlw	0
 14766  0CE7  00B5               	movwf	___flmul@prod+1
 14767  0CE8  3000               	movlw	0
 14768  0CE9  00B4               	movwf	___flmul@prod
 14769  0CEA  01AD               	clrf	___flmul@sign
 14770  0CEB  2CFF               	goto	l1594
 14771  0CEC                     l4467:
 14772  0CEC  0020               	movlb	0	; select bank0
 14773  0CED  0838               	movf	___flmul@temp,w
 14774  0CEE  00A8               	movwf	??___flmul
 14775  0CEF  0828               	movf	??___flmul,w
 14776  0CF0  00B3               	movwf	___flmul@bexp
 14777  0CF1  30FF               	movlw	255
 14778  0CF2  05B4               	andwf	___flmul@prod,f
 14779  0CF3  30FF               	movlw	255
 14780  0CF4  05B5               	andwf	___flmul@prod+1,f
 14781  0CF5  307F               	movlw	127
 14782  0CF6  05B6               	andwf	___flmul@prod+2,f
 14783  0CF7  3000               	movlw	0
 14784  0CF8  05B7               	andwf	___flmul@prod+3,f
 14785  0CF9  1833               	btfsc	___flmul@bexp,0
 14786  0CFA  17B6               	bsf	___flmul@prod+2,7
 14787  0CFB  3633               	lsrf	___flmul@bexp,w
 14788  0CFC  00A8               	movwf	??___flmul
 14789  0CFD  0828               	movf	??___flmul,w
 14790  0CFE  00B7               	movwf	___flmul@prod+3
 14791  0CFF                     l1594:
 14792  0CFF  082D               	movf	___flmul@sign,w
 14793  0D00  00A8               	movwf	??___flmul
 14794  0D01  0828               	movf	??___flmul,w
 14795  0D02  04B7               	iorwf	___flmul@prod+3,f
 14796  0D03  0837               	movf	___flmul@prod+3,w
 14797  0D04  00A3               	movwf	?___flmul+3
 14798  0D05  0836               	movf	___flmul@prod+2,w
 14799  0D06  00A2               	movwf	?___flmul+2
 14800  0D07  0835               	movf	___flmul@prod+1,w
 14801  0D08  00A1               	movwf	?___flmul+1
 14802  0D09  0834               	movf	___flmul@prod,w
 14803  0D0A  00A0               	movwf	?___flmul
 14804  0D0B  0008               	return
 14805  0D0C                     __end_of___flmul:
 14806                           
 14807                           	psect	text71
 14808  1C69                     __ptext71:	
 14809 ;; *************** function __Umul8_16 *****************
 14810 ;; Defined at:
 14811 ;;		line 4 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/Umul8_16.c"
 14812 ;; Parameters:    Size  Location     Type
 14813 ;;  multiplier      1    wreg     unsigned char 
 14814 ;;  multiplicand    1    0[COMMON] unsigned char 
 14815 ;; Auto vars:     Size  Location     Type
 14816 ;;  multiplier      1    8[COMMON] unsigned char 
 14817 ;;  word_mpld       2    6[COMMON] unsigned int 
 14818 ;;  product         2    4[COMMON] unsigned int 
 14819 ;; Return value:  Size  Location     Type
 14820 ;;                  2    0[COMMON] unsigned int 
 14821 ;; Registers used:
 14822 ;;		wreg, status,2, status,0
 14823 ;; Tracked objects:
 14824 ;;		On entry : 1F/0
 14825 ;;		On exit  : 1F/0
 14826 ;;		Unchanged: 1F/0
 14827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14828 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14829 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14830 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14831 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14832 ;;Total ram usage:        9 bytes
 14833 ;; Hardware stack levels used:    1
 14834 ;; Hardware stack levels required when called:    5
 14835 ;; This function calls:
 14836 ;;		Nothing
 14837 ;; This function is called by:
 14838 ;;		___flmul
 14839 ;; This function uses a non-reentrant model
 14840 ;;
 14841                           
 14842                           
 14843                           ;psect for function __Umul8_16
 14844  1C69                     __Umul8_16:
 14845                           
 14846                           ;incstack = 0
 14847                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
 14848                           ;__Umul8_16@multiplier stored from wreg
 14849  1C69  00F8               	movwf	__Umul8_16@multiplier
 14850  1C6A  01F4               	clrf	__Umul8_16@product
 14851  1C6B  01F5               	clrf	__Umul8_16@product+1
 14852  1C6C  0870               	movf	__Umul8_16@multiplicand,w
 14853  1C6D  00F2               	movwf	??__Umul8_16
 14854  1C6E  01F3               	clrf	??__Umul8_16+1
 14855  1C6F  0872               	movf	??__Umul8_16,w
 14856  1C70  00F6               	movwf	__Umul8_16@word_mpld
 14857  1C71  0873               	movf	??__Umul8_16+1,w
 14858  1C72  00F7               	movwf	__Umul8_16@word_mpld+1
 14859  1C73                     l3993:
 14860  1C73  1C78               	btfss	__Umul8_16@multiplier,0
 14861  1C74  2C79               	goto	l1601
 14862  1C75  0876               	movf	__Umul8_16@word_mpld,w
 14863  1C76  07F4               	addwf	__Umul8_16@product,f
 14864  1C77  0877               	movf	__Umul8_16@word_mpld+1,w
 14865  1C78  3DF5               	addwfc	__Umul8_16@product+1,f
 14866  1C79                     l1601:
 14867  1C79  3001               	movlw	1
 14868  1C7A                     u3705:
 14869  1C7A  35F6               	lslf	__Umul8_16@word_mpld,f
 14870  1C7B  0DF7               	rlf	__Umul8_16@word_mpld+1,f
 14871  1C7C  0B89               	decfsz	9,f
 14872  1C7D  2C7A               	goto	u3705
 14873  1C7E  1003               	clrc
 14874  1C7F  0CF8               	rrf	__Umul8_16@multiplier,f
 14875  1C80  0878               	movf	__Umul8_16@multiplier,w
 14876  1C81  1D03               	btfss	3,2
 14877  1C82  2C73               	goto	l3993
 14878  1C83  0875               	movf	__Umul8_16@product+1,w
 14879  1C84  00F1               	movwf	?__Umul8_16+1
 14880  1C85  0874               	movf	__Umul8_16@product,w
 14881  1C86  00F0               	movwf	?__Umul8_16
 14882  1C87  0008               	return
 14883  1C88                     __end_of__Umul8_16:
 14884                           
 14885                           	psect	text72
 14886  144F                     __ptext72:	
 14887 ;; *************** function ___fldiv *****************
 14888 ;; Defined at:
 14889 ;;		line 8 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/sprcdiv.c"
 14890 ;; Parameters:    Size  Location     Type
 14891 ;;  a               4   40[BANK1 ] unsigned int 
 14892 ;;  b               4   44[BANK1 ] unsigned int 
 14893 ;; Auto vars:     Size  Location     Type
 14894 ;;  grs             4   70[BANK0 ] unsigned long 
 14895 ;;  rem             4   63[BANK0 ] unsigned long 
 14896 ;;  new_exp         2   68[BANK0 ] int 
 14897 ;;  aexp            1   75[BANK0 ] unsigned char 
 14898 ;;  bexp            1   74[BANK0 ] unsigned char 
 14899 ;;  sign            1   67[BANK0 ] unsigned char 
 14900 ;; Return value:  Size  Location     Type
 14901 ;;                  4   40[BANK1 ] unsigned char 
 14902 ;; Registers used:
 14903 ;;		wreg, status,2, status,0
 14904 ;; Tracked objects:
 14905 ;;		On entry : 1F/1
 14906 ;;		On exit  : 1F/1
 14907 ;;		Unchanged: 0/0
 14908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14909 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
 14910 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14911 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14912 ;;      Totals:         0      18       8       0       0       0       0       0       0       0       0       0       
      +0       0
 14913 ;;Total ram usage:       26 bytes
 14914 ;; Hardware stack levels used:    1
 14915 ;; Hardware stack levels required when called:    5
 14916 ;; This function calls:
 14917 ;;		Nothing
 14918 ;; This function is called by:
 14919 ;;		_ChangeADCtoVoltage
 14920 ;;		_Measure_R_PT100_2Wire
 14921 ;;		_Measure_Temp_PT100_2Wire
 14922 ;;		_CalcRequiredDelayForTrigTRIAC
 14923 ;;		_efgtoa
 14924 ;; This function uses a non-reentrant model
 14925 ;;
 14926                           
 14927                           
 14928                           ;psect for function ___fldiv
 14929  144F                     ___fldiv:
 14930                           
 14931                           ;incstack = 0
 14932                           ; Regs used in ___fldiv: [wreg+status,2+status,0]
 14933  144F  084F               	movf	(___fldiv@b^(0+128)+3),w
 14934  1450  3980               	andlw	128
 14935  1451  0020               	movlb	0	; select bank0
 14936  1452  00DA               	movwf	??___fldiv
 14937  1453  085A               	movf	??___fldiv,w
 14938  1454  00E3               	movwf	___fldiv@sign
 14939  1455  0021               	movlb	1	; select bank1
 14940  1456  354F               	lslf	(___fldiv@b^(0+128)+3),w
 14941  1457  0020               	movlb	0	; select bank0
 14942  1458  00DA               	movwf	??___fldiv
 14943  1459  085A               	movf	??___fldiv,w
 14944  145A  00EA               	movwf	___fldiv@bexp
 14945  145B  0021               	movlb	1	; select bank1
 14946  145C  1FCE               	btfss	(___fldiv@b^(0+128)+2),7
 14947  145D  2C60               	goto	l4207
 14948  145E  0020               	movlb	0	; select bank0
 14949  145F  146A               	bsf	___fldiv@bexp,0
 14950  1460                     l4207:
 14951  1460  0020               	movlb	0	; select bank0
 14952  1461  086A               	movf	___fldiv@bexp,w
 14953  1462  1903               	btfsc	3,2
 14954  1463  2C74               	goto	l4217
 14955  1464  0A6A               	incf	___fldiv@bexp,w
 14956  1465  1D03               	btfss	3,2
 14957  1466  2C70               	goto	l4213
 14958  1467  3000               	movlw	0
 14959  1468  0021               	movlb	1	; select bank1
 14960  1469  00CF               	movwf	(___fldiv@b+3)^(0+128)
 14961  146A  3000               	movlw	0
 14962  146B  00CE               	movwf	(___fldiv@b+2)^(0+128)
 14963  146C  3000               	movlw	0
 14964  146D  00CD               	movwf	(___fldiv@b+1)^(0+128)
 14965  146E  3000               	movlw	0
 14966  146F  00CC               	movwf	___fldiv@b^(0+128)
 14967  1470                     l4213:
 14968  1470  0021               	movlb	1	; select bank1
 14969  1471  17CE               	bsf	(___fldiv@b^(0+128)+2),7
 14970  1472  01CF               	clrf	(___fldiv@b^(0+128)+3)
 14971  1473  2C7D               	goto	l4219
 14972  1474                     l4217:
 14973  1474  3000               	movlw	0
 14974  1475  0021               	movlb	1	; select bank1
 14975  1476  00CF               	movwf	(___fldiv@b+3)^(0+128)
 14976  1477  3000               	movlw	0
 14977  1478  00CE               	movwf	(___fldiv@b+2)^(0+128)
 14978  1479  3000               	movlw	0
 14979  147A  00CD               	movwf	(___fldiv@b+1)^(0+128)
 14980  147B  3000               	movlw	0
 14981  147C  00CC               	movwf	___fldiv@b^(0+128)
 14982  147D                     l4219:
 14983  147D  084B               	movf	(___fldiv@a^(0+128)+3),w
 14984  147E  3980               	andlw	128
 14985  147F  0020               	movlb	0	; select bank0
 14986  1480  00DA               	movwf	??___fldiv
 14987  1481  085A               	movf	??___fldiv,w
 14988  1482  06E3               	xorwf	___fldiv@sign,f
 14989  1483  0021               	movlb	1	; select bank1
 14990  1484  354B               	lslf	(___fldiv@a^(0+128)+3),w
 14991  1485  0020               	movlb	0	; select bank0
 14992  1486  00DA               	movwf	??___fldiv
 14993  1487  085A               	movf	??___fldiv,w
 14994  1488  00EB               	movwf	___fldiv@aexp
 14995  1489  0021               	movlb	1	; select bank1
 14996  148A  1FCA               	btfss	(___fldiv@a^(0+128)+2),7
 14997  148B  2C8E               	goto	l4227
 14998  148C  0020               	movlb	0	; select bank0
 14999  148D  146B               	bsf	___fldiv@aexp,0
 15000  148E                     l4227:
 15001  148E  0020               	movlb	0	; select bank0
 15002  148F  086B               	movf	___fldiv@aexp,w
 15003  1490  1903               	btfsc	3,2
 15004  1491  2CA2               	goto	l4237
 15005  1492  0A6B               	incf	___fldiv@aexp,w
 15006  1493  1D03               	btfss	3,2
 15007  1494  2C9E               	goto	l4233
 15008  1495  3000               	movlw	0
 15009  1496  0021               	movlb	1	; select bank1
 15010  1497  00CB               	movwf	(___fldiv@a+3)^(0+128)
 15011  1498  3000               	movlw	0
 15012  1499  00CA               	movwf	(___fldiv@a+2)^(0+128)
 15013  149A  3000               	movlw	0
 15014  149B  00C9               	movwf	(___fldiv@a+1)^(0+128)
 15015  149C  3000               	movlw	0
 15016  149D  00C8               	movwf	___fldiv@a^(0+128)
 15017  149E                     l4233:
 15018  149E  0021               	movlb	1	; select bank1
 15019  149F  17CA               	bsf	(___fldiv@a^(0+128)+2),7
 15020  14A0  01CB               	clrf	(___fldiv@a^(0+128)+3)
 15021  14A1  2CAB               	goto	l1542
 15022  14A2                     l4237:
 15023  14A2  3000               	movlw	0
 15024  14A3  0021               	movlb	1	; select bank1
 15025  14A4  00CB               	movwf	(___fldiv@a+3)^(0+128)
 15026  14A5  3000               	movlw	0
 15027  14A6  00CA               	movwf	(___fldiv@a+2)^(0+128)
 15028  14A7  3000               	movlw	0
 15029  14A8  00C9               	movwf	(___fldiv@a+1)^(0+128)
 15030  14A9  3000               	movlw	0
 15031  14AA  00C8               	movwf	___fldiv@a^(0+128)
 15032  14AB                     l1542:
 15033  14AB  084B               	movf	(___fldiv@a+3)^(0+128),w
 15034  14AC  044A               	iorwf	(___fldiv@a+2)^(0+128),w
 15035  14AD  0449               	iorwf	(___fldiv@a+1)^(0+128),w
 15036  14AE  0448               	iorwf	___fldiv@a^(0+128),w
 15037  14AF  1D03               	skipz
 15038  14B0  2CCC               	goto	l4247
 15039  14B1  3000               	movlw	0
 15040  14B2  00CF               	movwf	(___fldiv@b+3)^(0+128)
 15041  14B3  3000               	movlw	0
 15042  14B4  00CE               	movwf	(___fldiv@b+2)^(0+128)
 15043  14B5  3000               	movlw	0
 15044  14B6  00CD               	movwf	(___fldiv@b+1)^(0+128)
 15045  14B7  3000               	movlw	0
 15046  14B8  00CC               	movwf	___fldiv@b^(0+128)
 15047  14B9  3080               	movlw	128
 15048  14BA  04CE               	iorwf	(___fldiv@b^(0+128)+2),f
 15049  14BB  307F               	movlw	127
 15050  14BC  04CF               	iorwf	((___fldiv@b+1)^(0+128)+2),f
 15051  14BD                     L14:
 15052  14BD  0020               	movlb	0	; select bank0
 15053  14BE  0863               	movf	___fldiv@sign,w
 15054  14BF  00DA               	movwf	??___fldiv
 15055  14C0  085A               	movf	??___fldiv,w
 15056  14C1  0021               	movlb	1	; select bank1
 15057  14C2  04CF               	iorwf	(___fldiv@b^(0+128)+3),f
 15058  14C3  084F               	movf	(___fldiv@b+3)^(0+128),w
 15059  14C4  00CB               	movwf	(?___fldiv+3)^(0+128)
 15060  14C5  084E               	movf	(___fldiv@b+2)^(0+128),w
 15061  14C6  00CA               	movwf	(?___fldiv+2)^(0+128)
 15062  14C7  084D               	movf	(___fldiv@b+1)^(0+128),w
 15063  14C8  00C9               	movwf	(?___fldiv+1)^(0+128)
 15064  14C9  084C               	movf	___fldiv@b^(0+128),w
 15065  14CA  00C8               	movwf	?___fldiv^(0+128)
 15066  14CB  0008               	return
 15067  14CC                     l4247:
 15068  14CC  0020               	movlb	0	; select bank0
 15069  14CD  086A               	movf	___fldiv@bexp,w
 15070  14CE  1D03               	btfss	3,2
 15071  14CF  2CDA               	goto	l4253
 15072  14D0  3000               	movlw	0
 15073  14D1  0021               	movlb	1	; select bank1
 15074  14D2  00CB               	movwf	(?___fldiv+3)^(0+128)
 15075  14D3  3000               	movlw	0
 15076  14D4  00CA               	movwf	(?___fldiv+2)^(0+128)
 15077  14D5  3000               	movlw	0
 15078  14D6  00C9               	movwf	(?___fldiv+1)^(0+128)
 15079  14D7  3000               	movlw	0
 15080  14D8  00C8               	movwf	?___fldiv^(0+128)
 15081  14D9  0008               	return
 15082  14DA                     l4253:
 15083  14DA  086A               	movf	___fldiv@bexp,w
 15084  14DB  00DA               	movwf	??___fldiv
 15085  14DC  01DB               	clrf	??___fldiv+1
 15086  14DD  085B               	movf	??___fldiv+1,w
 15087  14DE  00DD               	movwf	??___fldiv+3
 15088  14DF  086B               	movf	___fldiv@aexp,w
 15089  14E0  025A               	subwf	??___fldiv,w
 15090  14E1  00DC               	movwf	??___fldiv+2
 15091  14E2  1C03               	skipc
 15092  14E3  03DD               	decf	??___fldiv+3,f
 15093  14E4  085C               	movf	??___fldiv+2,w
 15094  14E5  3E7F               	addlw	127
 15095  14E6  00E4               	movwf	___fldiv@new_exp
 15096  14E7  3000               	movlw	0
 15097  14E8  3D5D               	addwfc	??___fldiv+3,w
 15098  14E9  00E5               	movwf	___fldiv@new_exp+1
 15099  14EA  0021               	movlb	1	; select bank1
 15100  14EB  084F               	movf	(___fldiv@b+3)^(0+128),w
 15101  14EC  0020               	movlb	0	; select bank0
 15102  14ED  00E2               	movwf	___fldiv@rem+3
 15103  14EE  0021               	movlb	1	; select bank1
 15104  14EF  084E               	movf	(___fldiv@b+2)^(0+128),w
 15105  14F0  0020               	movlb	0	; select bank0
 15106  14F1  00E1               	movwf	___fldiv@rem+2
 15107  14F2  0021               	movlb	1	; select bank1
 15108  14F3  084D               	movf	(___fldiv@b+1)^(0+128),w
 15109  14F4  0020               	movlb	0	; select bank0
 15110  14F5  00E0               	movwf	___fldiv@rem+1
 15111  14F6  0021               	movlb	1	; select bank1
 15112  14F7  084C               	movf	___fldiv@b^(0+128),w
 15113  14F8  0020               	movlb	0	; select bank0
 15114  14F9  00DF               	movwf	___fldiv@rem
 15115  14FA  3000               	movlw	0
 15116  14FB  0021               	movlb	1	; select bank1
 15117  14FC  00CF               	movwf	(___fldiv@b+3)^(0+128)
 15118  14FD  3000               	movlw	0
 15119  14FE  00CE               	movwf	(___fldiv@b+2)^(0+128)
 15120  14FF  3000               	movlw	0
 15121  1500  00CD               	movwf	(___fldiv@b+1)^(0+128)
 15122  1501  3000               	movlw	0
 15123  1502  00CC               	movwf	___fldiv@b^(0+128)
 15124  1503  3000               	movlw	0
 15125  1504  0020               	movlb	0	; select bank0
 15126  1505  00E9               	movwf	___fldiv@grs+3
 15127  1506  3000               	movlw	0
 15128  1507  00E8               	movwf	___fldiv@grs+2
 15129  1508  3000               	movlw	0
 15130  1509  00E7               	movwf	___fldiv@grs+1
 15131  150A  3000               	movlw	0
 15132  150B  00E6               	movwf	___fldiv@grs
 15133  150C  01EB               	clrf	___fldiv@aexp
 15134  150D                     l4281:
 15135  150D  301A               	movlw	26
 15136  150E  026B               	subwf	___fldiv@aexp,w
 15137  150F  1803               	btfsc	3,0
 15138  1510  2D5E               	goto	l4283
 15139  1511  086B               	movf	___fldiv@aexp,w
 15140  1512  1903               	btfsc	3,2
 15141  1513  2D30               	goto	l4273
 15142  1514  3001               	movlw	1
 15143  1515                     u4275:
 15144  1515  35DF               	lslf	___fldiv@rem,f
 15145  1516  0DE0               	rlf	___fldiv@rem+1,f
 15146  1517  0DE1               	rlf	___fldiv@rem+2,f
 15147  1518  0DE2               	rlf	___fldiv@rem+3,f
 15148  1519  0B89               	decfsz	9,f
 15149  151A  2D15               	goto	u4275
 15150  151B  3001               	movlw	1
 15151  151C                     u4285:
 15152  151C  0021               	movlb	1	; select bank1
 15153  151D  35CC               	lslf	___fldiv@b^(0+128),f
 15154  151E  0DCD               	rlf	(___fldiv@b+1)^(0+128),f
 15155  151F  0DCE               	rlf	(___fldiv@b+2)^(0+128),f
 15156  1520  0DCF               	rlf	(___fldiv@b+3)^(0+128),f
 15157  1521  0B89               	decfsz	9,f
 15158  1522  2D1C               	goto	u4285
 15159  1523  0020               	movlb	0	; select bank0
 15160  1524  1FE9               	btfss	___fldiv@grs+3,7
 15161  1525  2D28               	goto	l4271
 15162  1526  0021               	movlb	1	; select bank1
 15163  1527  144C               	bsf	___fldiv@b^(0+128),0
 15164  1528                     l4271:
 15165  1528  3001               	movlw	1
 15166  1529                     u4305:
 15167  1529  0020               	movlb	0	; select bank0
 15168  152A  35E6               	lslf	___fldiv@grs,f
 15169  152B  0DE7               	rlf	___fldiv@grs+1,f
 15170  152C  0DE8               	rlf	___fldiv@grs+2,f
 15171  152D  0DE9               	rlf	___fldiv@grs+3,f
 15172  152E  0B89               	decfsz	9,f
 15173  152F  2D29               	goto	u4305
 15174  1530                     l4273:
 15175  1530  0021               	movlb	1	; select bank1
 15176  1531  084B               	movf	(___fldiv@a+3)^(0+128),w
 15177  1532  0020               	movlb	0	; select bank0
 15178  1533  0262               	subwf	___fldiv@rem+3,w
 15179  1534  1D03               	skipz
 15180  1535  2D46               	goto	u4315
 15181  1536  0021               	movlb	1	; select bank1
 15182  1537  084A               	movf	(___fldiv@a+2)^(0+128),w
 15183  1538  0020               	movlb	0	; select bank0
 15184  1539  0261               	subwf	___fldiv@rem+2,w
 15185  153A  1D03               	skipz
 15186  153B  2D46               	goto	u4315
 15187  153C  0021               	movlb	1	; select bank1
 15188  153D  0849               	movf	(___fldiv@a+1)^(0+128),w
 15189  153E  0020               	movlb	0	; select bank0
 15190  153F  0260               	subwf	___fldiv@rem+1,w
 15191  1540  1D03               	skipz
 15192  1541  2D46               	goto	u4315
 15193  1542  0021               	movlb	1	; select bank1
 15194  1543  0848               	movf	___fldiv@a^(0+128),w
 15195  1544  0020               	movlb	0	; select bank0
 15196  1545  025F               	subwf	___fldiv@rem,w
 15197  1546                     u4315:
 15198  1546  1C03               	skipc
 15199  1547  2D59               	goto	l4279
 15200  1548  1769               	bsf	___fldiv@grs+3,6
 15201  1549  0021               	movlb	1	; select bank1
 15202  154A  0848               	movf	___fldiv@a^(0+128),w
 15203  154B  0020               	movlb	0	; select bank0
 15204  154C  02DF               	subwf	___fldiv@rem,f
 15205  154D  0021               	movlb	1	; select bank1
 15206  154E  0849               	movf	(___fldiv@a+1)^(0+128),w
 15207  154F  0020               	movlb	0	; select bank0
 15208  1550  3BE0               	subwfb	___fldiv@rem+1,f
 15209  1551  0021               	movlb	1	; select bank1
 15210  1552  084A               	movf	(___fldiv@a+2)^(0+128),w
 15211  1553  0020               	movlb	0	; select bank0
 15212  1554  3BE1               	subwfb	___fldiv@rem+2,f
 15213  1555  0021               	movlb	1	; select bank1
 15214  1556  084B               	movf	(___fldiv@a+3)^(0+128),w
 15215  1557  0020               	movlb	0	; select bank0
 15216  1558  3BE2               	subwfb	___fldiv@rem+3,f
 15217  1559                     l4279:
 15218  1559  3001               	movlw	1
 15219  155A  00DA               	movwf	??___fldiv
 15220  155B  085A               	movf	??___fldiv,w
 15221  155C  07EB               	addwf	___fldiv@aexp,f
 15222  155D  2D0D               	goto	l4281
 15223  155E                     l4283:
 15224  155E  0862               	movf	___fldiv@rem+3,w
 15225  155F  0461               	iorwf	___fldiv@rem+2,w
 15226  1560  0460               	iorwf	___fldiv@rem+1,w
 15227  1561  045F               	iorwf	___fldiv@rem,w
 15228  1562  1D03               	btfss	3,2
 15229  1563  1466               	bsf	___fldiv@grs,0
 15230  1564                     l4297:
 15231  1564  0021               	movlb	1	; select bank1
 15232  1565  1BCE               	btfsc	(___fldiv@b+2)^(0+128),7
 15233  1566  2D80               	goto	l4299
 15234  1567  3001               	movlw	1
 15235  1568                     u4345:
 15236  1568  35CC               	lslf	___fldiv@b^(0+128),f
 15237  1569  0DCD               	rlf	(___fldiv@b+1)^(0+128),f
 15238  156A  0DCE               	rlf	(___fldiv@b+2)^(0+128),f
 15239  156B  0DCF               	rlf	(___fldiv@b+3)^(0+128),f
 15240  156C  0B89               	decfsz	9,f
 15241  156D  2D68               	goto	u4345
 15242  156E  0020               	movlb	0	; select bank0
 15243  156F  1FE9               	btfss	___fldiv@grs+3,7
 15244  1570  2D73               	goto	l4293
 15245  1571  0021               	movlb	1	; select bank1
 15246  1572  144C               	bsf	___fldiv@b^(0+128),0
 15247  1573                     l4293:
 15248  1573  3001               	movlw	1
 15249  1574                     u4365:
 15250  1574  0020               	movlb	0	; select bank0
 15251  1575  35E6               	lslf	___fldiv@grs,f
 15252  1576  0DE7               	rlf	___fldiv@grs+1,f
 15253  1577  0DE8               	rlf	___fldiv@grs+2,f
 15254  1578  0DE9               	rlf	___fldiv@grs+3,f
 15255  1579  0B89               	decfsz	9,f
 15256  157A  2D74               	goto	u4365
 15257  157B  30FF               	movlw	255
 15258  157C  07E4               	addwf	___fldiv@new_exp,f
 15259  157D  30FF               	movlw	255
 15260  157E  3DE5               	addwfc	___fldiv@new_exp+1,f
 15261  157F  2D64               	goto	l4297
 15262  1580                     l4299:
 15263  1580  0020               	movlb	0	; select bank0
 15264  1581  01EB               	clrf	___fldiv@aexp
 15265  1582  1FE9               	btfss	___fldiv@grs+3,7
 15266  1583  2D9C               	goto	l4309
 15267  1584  30FF               	movlw	255
 15268  1585  0566               	andwf	___fldiv@grs,w
 15269  1586  00DA               	movwf	??___fldiv
 15270  1587  30FF               	movlw	255
 15271  1588  0567               	andwf	___fldiv@grs+1,w
 15272  1589  00DB               	movwf	??___fldiv+1
 15273  158A  30FF               	movlw	255
 15274  158B  0568               	andwf	___fldiv@grs+2,w
 15275  158C  00DC               	movwf	??___fldiv+2
 15276  158D  307F               	movlw	127
 15277  158E  0569               	andwf	___fldiv@grs+3,w
 15278  158F  00DD               	movwf	??___fldiv+3
 15279  1590  085D               	movf	??___fldiv+3,w
 15280  1591  045C               	iorwf	??___fldiv+2,w
 15281  1592  045B               	iorwf	??___fldiv+1,w
 15282  1593  045A               	iorwf	??___fldiv,w
 15283  1594  1D03               	btfss	3,2
 15284  1595  2D99               	goto	l4305
 15285  1596  0021               	movlb	1	; select bank1
 15286  1597  1C4C               	btfss	___fldiv@b^(0+128),0
 15287  1598  2D9C               	goto	l4309
 15288  1599                     l4305:
 15289  1599  0020               	movlb	0	; select bank0
 15290  159A  01EB               	clrf	___fldiv@aexp
 15291  159B  0AEB               	incf	___fldiv@aexp,f
 15292  159C                     l4309:
 15293  159C  0020               	movlb	0	; select bank0
 15294  159D  086B               	movf	___fldiv@aexp,w
 15295  159E  1903               	btfsc	3,2
 15296  159F  2DD6               	goto	l4319
 15297  15A0  3001               	movlw	1
 15298  15A1  0021               	movlb	1	; select bank1
 15299  15A2  07CC               	addwf	___fldiv@b^(0+128),f
 15300  15A3  3000               	movlw	0
 15301  15A4  3DCD               	addwfc	(___fldiv@b+1)^(0+128),f
 15302  15A5  3000               	movlw	0
 15303  15A6  3DCE               	addwfc	(___fldiv@b+2)^(0+128),f
 15304  15A7  3000               	movlw	0
 15305  15A8  3DCF               	addwfc	(___fldiv@b+3)^(0+128),f
 15306  15A9  1C4F               	btfss	(___fldiv@b+3)^(0+128),0
 15307  15AA  2DD6               	goto	l4319
 15308  15AB  084C               	movf	___fldiv@b^(0+128),w
 15309  15AC  0020               	movlb	0	; select bank0
 15310  15AD  00DA               	movwf	??___fldiv
 15311  15AE  0021               	movlb	1	; select bank1
 15312  15AF  084D               	movf	(___fldiv@b+1)^(0+128),w
 15313  15B0  0020               	movlb	0	; select bank0
 15314  15B1  00DB               	movwf	??___fldiv+1
 15315  15B2  0021               	movlb	1	; select bank1
 15316  15B3  084E               	movf	(___fldiv@b+2)^(0+128),w
 15317  15B4  0020               	movlb	0	; select bank0
 15318  15B5  00DC               	movwf	??___fldiv+2
 15319  15B6  0021               	movlb	1	; select bank1
 15320  15B7  084F               	movf	(___fldiv@b+3)^(0+128),w
 15321  15B8  0020               	movlb	0	; select bank0
 15322  15B9  00DD               	movwf	??___fldiv+3
 15323  15BA  3001               	movlw	1
 15324  15BB  00DE               	movwf	??___fldiv+4
 15325  15BC                     u4435:
 15326  15BC  37DD               	asrf	??___fldiv+3,f
 15327  15BD  0CDC               	rrf	??___fldiv+2,f
 15328  15BE  0CDB               	rrf	??___fldiv+1,f
 15329  15BF  0CDA               	rrf	??___fldiv,f
 15330  15C0  0BDE               	decfsz	??___fldiv+4,f
 15331  15C1  2DBC               	goto	u4435
 15332  15C2  085D               	movf	??___fldiv+3,w
 15333  15C3  0021               	movlb	1	; select bank1
 15334  15C4  00CF               	movwf	(___fldiv@b+3)^(0+128)
 15335  15C5  0020               	movlb	0	; select bank0
 15336  15C6  085C               	movf	??___fldiv+2,w
 15337  15C7  0021               	movlb	1	; select bank1
 15338  15C8  00CE               	movwf	(___fldiv@b+2)^(0+128)
 15339  15C9  0020               	movlb	0	; select bank0
 15340  15CA  085B               	movf	??___fldiv+1,w
 15341  15CB  0021               	movlb	1	; select bank1
 15342  15CC  00CD               	movwf	(___fldiv@b+1)^(0+128)
 15343  15CD  0020               	movlb	0	; select bank0
 15344  15CE  085A               	movf	??___fldiv,w
 15345  15CF  0021               	movlb	1	; select bank1
 15346  15D0  00CC               	movwf	___fldiv@b^(0+128)
 15347  15D1  3001               	movlw	1
 15348  15D2  0020               	movlb	0	; select bank0
 15349  15D3  07E4               	addwf	___fldiv@new_exp,f
 15350  15D4  3000               	movlw	0
 15351  15D5  3DE5               	addwfc	___fldiv@new_exp+1,f
 15352  15D6                     l4319:
 15353  15D6  0020               	movlb	0	; select bank0
 15354  15D7  0865               	movf	___fldiv@new_exp+1,w
 15355  15D8  3A80               	xorlw	128
 15356  15D9  00DA               	movwf	??___fldiv
 15357  15DA  3080               	movlw	128
 15358  15DB  025A               	subwf	??___fldiv,w
 15359  15DC  1D03               	skipz
 15360  15DD  2DE0               	goto	u4445
 15361  15DE  30FF               	movlw	255
 15362  15DF  0264               	subwf	___fldiv@new_exp,w
 15363  15E0                     u4445:
 15364  15E0  1C03               	skipc
 15365  15E1  2DF0               	goto	l1563
 15366  15E2  30FF               	movlw	255
 15367  15E3  0020               	movlb	0	; select bank0
 15368  15E4  00E4               	movwf	___fldiv@new_exp
 15369  15E5  3000               	movlw	0
 15370  15E6  00E5               	movwf	___fldiv@new_exp+1
 15371  15E7  3000               	movlw	0
 15372  15E8  0021               	movlb	1	; select bank1
 15373  15E9  00CF               	movwf	(___fldiv@b+3)^(0+128)
 15374  15EA  3000               	movlw	0
 15375  15EB  00CE               	movwf	(___fldiv@b+2)^(0+128)
 15376  15EC  3000               	movlw	0
 15377  15ED  00CD               	movwf	(___fldiv@b+1)^(0+128)
 15378  15EE  3000               	movlw	0
 15379  15EF  00CC               	movwf	___fldiv@b^(0+128)
 15380  15F0                     l1563:
 15381  15F0  0020               	movlb	0	; select bank0
 15382  15F1  0865               	movf	___fldiv@new_exp+1,w
 15383  15F2  3A80               	xorlw	128
 15384  15F3  00DA               	movwf	??___fldiv
 15385  15F4  3080               	movlw	128
 15386  15F5  025A               	subwf	??___fldiv,w
 15387  15F6  1D03               	skipz
 15388  15F7  2DFA               	goto	u4455
 15389  15F8  3001               	movlw	1
 15390  15F9  0264               	subwf	___fldiv@new_exp,w
 15391  15FA                     u4455:
 15392  15FA  1803               	skipnc
 15393  15FB  2E0A               	goto	l1564
 15394  15FC  0020               	movlb	0	; select bank0
 15395  15FD  01E4               	clrf	___fldiv@new_exp
 15396  15FE  01E5               	clrf	___fldiv@new_exp+1
 15397  15FF  3000               	movlw	0
 15398  1600  0021               	movlb	1	; select bank1
 15399  1601  00CF               	movwf	(___fldiv@b+3)^(0+128)
 15400  1602  3000               	movlw	0
 15401  1603  00CE               	movwf	(___fldiv@b+2)^(0+128)
 15402  1604  3000               	movlw	0
 15403  1605  00CD               	movwf	(___fldiv@b+1)^(0+128)
 15404  1606  3000               	movlw	0
 15405  1607  00CC               	movwf	___fldiv@b^(0+128)
 15406  1608  0020               	movlb	0	; select bank0
 15407  1609  01E3               	clrf	___fldiv@sign
 15408  160A                     l1564:
 15409  160A  0020               	movlb	0	; select bank0
 15410  160B  0864               	movf	___fldiv@new_exp,w
 15411  160C  00DA               	movwf	??___fldiv
 15412  160D  085A               	movf	??___fldiv,w
 15413  160E  00EA               	movwf	___fldiv@bexp
 15414  160F  1C6A               	btfss	___fldiv@bexp,0
 15415  1610  2E14               	goto	l4333
 15416  1611  0021               	movlb	1	; select bank1
 15417  1612  17CE               	bsf	(___fldiv@b^(0+128)+2),7
 15418  1613  2E19               	goto	l1566
 15419  1614                     l4333:
 15420  1614  307F               	movlw	127
 15421  1615  00DA               	movwf	??___fldiv
 15422  1616  085A               	movf	??___fldiv,w
 15423  1617  0021               	movlb	1	; select bank1
 15424  1618  05CE               	andwf	(___fldiv@b^(0+128)+2),f
 15425  1619                     l1566:
 15426  1619  0020               	movlb	0	; select bank0
 15427  161A  366A               	lsrf	___fldiv@bexp,w
 15428  161B  00DA               	movwf	??___fldiv
 15429  161C  085A               	movf	??___fldiv,w
 15430  161D  0021               	movlb	1	; select bank1
 15431  161E  00CF               	movwf	(___fldiv@b^(0+128)+3)
 15432  161F  2CBD               	goto	L14
 15433  1620                     __end_of___fldiv:
 15434                           
 15435                           	psect	text73
 15436  07F3                     __ptext73:	
 15437 ;; *************** function _ADC_SelectChannel *****************
 15438 ;; Defined at:
 15439 ;;		line 85 in file "mcc_generated_files/adc.c"
 15440 ;; Parameters:    Size  Location     Type
 15441 ;;  channel         1    wreg     enum E2603
 15442 ;; Auto vars:     Size  Location     Type
 15443 ;;  channel         1    1[COMMON] enum E2603
 15444 ;; Return value:  Size  Location     Type
 15445 ;;                  1    wreg      void 
 15446 ;; Registers used:
 15447 ;;		wreg, status,2, status,0
 15448 ;; Tracked objects:
 15449 ;;		On entry : 1F/2
 15450 ;;		On exit  : 1F/1
 15451 ;;		Unchanged: 0/0
 15452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15454 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15455 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15456 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15457 ;;Total ram usage:        2 bytes
 15458 ;; Hardware stack levels used:    1
 15459 ;; Hardware stack levels required when called:    5
 15460 ;; This function calls:
 15461 ;;		Nothing
 15462 ;; This function is called by:
 15463 ;;		_Init_Function
 15464 ;; This function uses a non-reentrant model
 15465 ;;
 15466                           
 15467                           
 15468                           ;psect for function _ADC_SelectChannel
 15469  07F3                     _ADC_SelectChannel:
 15470                           
 15471                           ;incstack = 0
 15472                           ; Regs used in _ADC_SelectChannel: [wreg+status,2+status,0]
 15473                           ;ADC_SelectChannel@channel stored from wreg
 15474  07F3  00F1               	movwf	ADC_SelectChannel@channel
 15475                           
 15476                           ;mcc_generated_files/adc.c: 85: void ADC_SelectChannel(adc_channel_t channel);mcc_genera
      +                          ted_files/adc.c: 86: {;mcc_generated_files/adc.c: 88:     ADCON0bits.CHS = channel;
 15477  07F4  0871               	movf	ADC_SelectChannel@channel,w
 15478  07F5  00F0               	movwf	??_ADC_SelectChannel
 15479  07F6  0DF0               	rlf	??_ADC_SelectChannel,f
 15480  07F7  0DF0               	rlf	??_ADC_SelectChannel,f
 15481  07F8  0021               	movlb	1	; select bank1
 15482  07F9  081D               	movf	29,w	;volatile
 15483  07FA  0670               	xorwf	??_ADC_SelectChannel,w
 15484  07FB  3983               	andlw	-125
 15485  07FC  0670               	xorwf	??_ADC_SelectChannel,w
 15486  07FD  009D               	movwf	29	;volatile
 15487                           
 15488                           ;mcc_generated_files/adc.c: 90:     ADCON0bits.ADON = 1;
 15489  07FE  141D               	bsf	29,0	;volatile
 15490  07FF  0008               	return
 15491  0800                     __end_of_ADC_SelectChannel:
 15492                           
 15493                           	psect	intentry
 15494  0004                     __pintentry:	
 15495 ;; *************** function _INTERRUPT_InterruptManager *****************
 15496 ;; Defined at:
 15497 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 15498 ;; Parameters:    Size  Location     Type
 15499 ;;		None
 15500 ;; Auto vars:     Size  Location     Type
 15501 ;;		None
 15502 ;; Return value:  Size  Location     Type
 15503 ;;                  1    wreg      void 
 15504 ;; Registers used:
 15505 ;;		wreg, status,2, status,0, pclath, cstack
 15506 ;; Tracked objects:
 15507 ;;		On entry : 0/0
 15508 ;;		On exit  : 0/0
 15509 ;;		Unchanged: 0/0
 15510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15514 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15515 ;;Total ram usage:        0 bytes
 15516 ;; Hardware stack levels used:    1
 15517 ;; Hardware stack levels required when called:    4
 15518 ;; This function calls:
 15519 ;;		_PIN_MANAGER_IOC
 15520 ;;		_TMR2_ISR
 15521 ;;		_TMR4_ISR
 15522 ;; This function is called by:
 15523 ;;		Interrupt level 1
 15524 ;; This function uses a non-reentrant model
 15525 ;;
 15526                           
 15527  0004                     _INTERRUPT_InterruptManager:
 15528                           
 15529                           ;incstack = 0
 15530  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 15531                           
 15532                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
 15533  0005  3180               	pagesel	$
 15534                           
 15535                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.IOCIE == 1 && INTCONbits
      +                          .IOCIF == 1)
 15536  0006  198B               	btfsc	11,3	;volatile
 15537  0007  1C0B               	btfss	11,0	;volatile
 15538  0008  280D               	goto	i1l750
 15539                           
 15540                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         PIN_MANAGER_IOC();
 15541  0009  319A  224D  3180   	fcall	_PIN_MANAGER_IOC
 15542                           
 15543                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 15544  000C  2821               	goto	i1l758
 15545  000D                     i1l750:	
 15546                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
 15547                           
 15548  000D  1F0B               	btfss	11,6	;volatile
 15549  000E  2821               	goto	i1l758
 15550                           
 15551                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE3bits.TMR4IE == 1 && PIR3bits.TMR4IF == 1)
 15552  000F  0021               	movlb	1	; select bank1
 15553  0010  1C93               	btfss	19,1	;volatile
 15554  0011  2819               	goto	i1l753
 15555  0012  0020               	movlb	0	; select bank0
 15556  0013  1C93               	btfss	19,1	;volatile
 15557  0014  2819               	goto	i1l753
 15558                           
 15559                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             TMR4_ISR();
 15560  0015  319A  22D6  3180   	fcall	_TMR4_ISR
 15561                           
 15562                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 15563  0018  2821               	goto	i1l758
 15564  0019                     i1l753:	
 15565                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE1bits.TMR2IE == 1 && PI
      +                          R1bits.TMR2IF == 1)
 15566                           
 15567  0019  0021               	movlb	1	; select bank1
 15568  001A  1C91               	btfss	17,1	;volatile
 15569  001B  2821               	goto	i1l758
 15570  001C  0020               	movlb	0	; select bank0
 15571  001D  1C91               	btfss	17,1	;volatile
 15572  001E  2821               	goto	i1l758
 15573                           
 15574                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             TMR2_ISR();
 15575  001F  319A  22CA         	fcall	_TMR2_ISR
 15576  0021                     i1l758:	
 15577                           ;mcc_generated_files/interrupt_manager.c: 75:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 77:     }
 15578                           
 15579                           ;mcc_generated_files/interrupt_manager.c: 68:         }
 15580                           
 15581  0021  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 15582  0022  0009               	retfie
 15583  0023                     __end_of_INTERRUPT_InterruptManager:
 15584                           
 15585                           	psect	text75
 15586  1AD6                     __ptext75:	
 15587 ;; *************** function _TMR4_ISR *****************
 15588 ;; Defined at:
 15589 ;;		line 119 in file "mcc_generated_files/tmr4.c"
 15590 ;; Parameters:    Size  Location     Type
 15591 ;;		None
 15592 ;; Auto vars:     Size  Location     Type
 15593 ;;		None
 15594 ;; Return value:  Size  Location     Type
 15595 ;;                  1    wreg      void 
 15596 ;; Registers used:
 15597 ;;		wreg, status,2, status,0, pclath, cstack
 15598 ;; Tracked objects:
 15599 ;;		On entry : 1F/0
 15600 ;;		On exit  : 0/0
 15601 ;;		Unchanged: 0/0
 15602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15606 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15607 ;;Total ram usage:        0 bytes
 15608 ;; Hardware stack levels used:    1
 15609 ;; Hardware stack levels required when called:    1
 15610 ;; This function calls:
 15611 ;;		Absolute function
 15612 ;;		_TMR4_DefaultInterruptHandler
 15613 ;;		_TMR4_Wroking_Blink_AlarmLED_isr
 15614 ;; This function is called by:
 15615 ;;		_INTERRUPT_InterruptManager
 15616 ;; This function uses a non-reentrant model
 15617 ;;
 15618                           
 15619                           
 15620                           ;psect for function _TMR4_ISR
 15621  1AD6                     _TMR4_ISR:
 15622                           
 15623                           ;mcc_generated_files/tmr4.c: 123:     PIR3bits.TMR4IF = 0;
 15624                           
 15625                           ;incstack = 0
 15626                           ; Regs used in _TMR4_ISR: [wreg+status,2+status,0+pclath+cstack]
 15627  1AD6  1093               	bcf	19,1	;volatile
 15628                           
 15629                           ;mcc_generated_files/tmr4.c: 125:     if(TMR4_InterruptHandler)
 15630  1AD7  0023               	movlb	3	; select bank3
 15631  1AD8  086A               	movf	_TMR4_InterruptHandler^(0+384),w
 15632  1AD9  046B               	iorwf	(_TMR4_InterruptHandler+1)^(0+384),w
 15633  1ADA  1903               	btfsc	3,2
 15634  1ADB  0008               	return
 15635                           
 15636                           ;mcc_generated_files/tmr4.c: 126:     {;mcc_generated_files/tmr4.c: 127:         TMR4_In
      +                          terruptHandler();
 15637  1ADC  086B               	movf	(_TMR4_InterruptHandler+1)^(0+384),w
 15638  1ADD  008A               	movwf	10
 15639  1ADE  086A               	movf	_TMR4_InterruptHandler^(0+384),w
 15640  1ADF  000A               	callw
 15641  1AE0  319A               	pagesel	$
 15642  1AE1  0008               	return
 15643  1AE2                     __end_of_TMR4_ISR:
 15644                           
 15645                           	psect	text76
 15646  1000                     __ptext76:	
 15647 ;; *************** function _TMR4_DefaultInterruptHandler *****************
 15648 ;; Defined at:
 15649 ;;		line 136 in file "mcc_generated_files/tmr4.c"
 15650 ;; Parameters:    Size  Location     Type
 15651 ;;		None
 15652 ;; Auto vars:     Size  Location     Type
 15653 ;;		None
 15654 ;; Return value:  Size  Location     Type
 15655 ;;                  1    wreg      void 
 15656 ;; Registers used:
 15657 ;;		None
 15658 ;; Tracked objects:
 15659 ;;		On entry : 1F/3
 15660 ;;		On exit  : 1F/3
 15661 ;;		Unchanged: 1E/0
 15662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15666 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15667 ;;Total ram usage:        0 bytes
 15668 ;; Hardware stack levels used:    1
 15669 ;; This function calls:
 15670 ;;		Nothing
 15671 ;; This function is called by:
 15672 ;;		_TMR4_Initialize
 15673 ;;		_TMR4_ISR
 15674 ;; This function uses a non-reentrant model
 15675 ;;
 15676                           
 15677                           
 15678                           ;psect for function _TMR4_DefaultInterruptHandler
 15679  1000                     _TMR4_DefaultInterruptHandler:
 15680                           
 15681                           ;incstack = 0
 15682                           ; Regs used in _TMR4_DefaultInterruptHandler: []
 15683  1000  0008               	return
 15684  1001                     __end_of_TMR4_DefaultInterruptHandler:
 15685                           
 15686                           	psect	text77
 15687  1BFD                     __ptext77:	
 15688 ;; *************** function _TMR4_Wroking_Blink_AlarmLED_isr *****************
 15689 ;; Defined at:
 15690 ;;		line 234 in file "main.c"
 15691 ;; Parameters:    Size  Location     Type
 15692 ;;		None
 15693 ;; Auto vars:     Size  Location     Type
 15694 ;;		None
 15695 ;; Return value:  Size  Location     Type
 15696 ;;                  1    wreg      void 
 15697 ;; Registers used:
 15698 ;;		wreg, status,2, status,0
 15699 ;; Tracked objects:
 15700 ;;		On entry : 1F/3
 15701 ;;		On exit  : 1E/2
 15702 ;;		Unchanged: 0/0
 15703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15707 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15708 ;;Total ram usage:        0 bytes
 15709 ;; Hardware stack levels used:    1
 15710 ;; This function calls:
 15711 ;;		Nothing
 15712 ;; This function is called by:
 15713 ;;		_main
 15714 ;;		_TMR4_ISR
 15715 ;; This function uses a non-reentrant model
 15716 ;;
 15717                           
 15718                           
 15719                           ;psect for function _TMR4_Wroking_Blink_AlarmLED_isr
 15720  1BFD                     _TMR4_Wroking_Blink_AlarmLED_isr:
 15721                           
 15722                           ;main.c: 236:     static uint16_t counter_tmr4 = 0;;main.c: 237:     counter_tmr4 ++;
 15723                           
 15724                           ;incstack = 0
 15725                           ; Regs used in _TMR4_Wroking_Blink_AlarmLED_isr: [wreg+status,2+status,0]
 15726  1BFD  3001               	movlw	1
 15727  1BFE  07B2               	addwf	TMR4_Wroking_Blink_AlarmLED_isr@counter_tmr4^(0+384),f
 15728  1BFF  3000               	movlw	0
 15729  1C00  3DB3               	addwfc	(TMR4_Wroking_Blink_AlarmLED_isr@counter_tmr4+1)^(0+384),f
 15730                           
 15731                           ;main.c: 239:     if(counter_tmr4 >= 1000){
 15732  1C01  3003               	movlw	3
 15733  1C02  0233               	subwf	(TMR4_Wroking_Blink_AlarmLED_isr@counter_tmr4+1)^(0+384),w
 15734  1C03  30E8               	movlw	232
 15735  1C04  1903               	skipnz
 15736  1C05  0232               	subwf	TMR4_Wroking_Blink_AlarmLED_isr@counter_tmr4^(0+384),w
 15737  1C06  1C03               	skipc
 15738  1C07  0008               	return
 15739                           
 15740                           ;main.c: 241:         counter_tmr4 = 0;
 15741  1C08  01B2               	clrf	TMR4_Wroking_Blink_AlarmLED_isr@counter_tmr4^(0+384)
 15742  1C09  01B3               	clrf	(TMR4_Wroking_Blink_AlarmLED_isr@counter_tmr4+1)^(0+384)
 15743  1C0A  1003               	clrc
 15744  1C0B  0022               	movlb	2	; select bank2
 15745  1C0C  1D0E               	btfss	14,2	;volatile
 15746  1C0D  1403               	setc
 15747  1C0E  1C03               	btfss	3,0
 15748  1C0F  2C13               	goto	u626_20
 15749  1C10  0022               	movlb	2	; select bank2
 15750  1C11  150E               	bsf	14,2	;volatile
 15751  1C12  0008               	return
 15752  1C13                     u626_20:
 15753  1C13  0022               	movlb	2	; select bank2
 15754  1C14  110E               	bcf	14,2	;volatile
 15755  1C15  0008               	return
 15756  1C16                     __end_of_TMR4_Wroking_Blink_AlarmLED_isr:
 15757                           
 15758                           	psect	text78
 15759  1ACA                     __ptext78:	
 15760 ;; *************** function _TMR2_ISR *****************
 15761 ;; Defined at:
 15762 ;;		line 119 in file "mcc_generated_files/tmr2.c"
 15763 ;; Parameters:    Size  Location     Type
 15764 ;;		None
 15765 ;; Auto vars:     Size  Location     Type
 15766 ;;		None
 15767 ;; Return value:  Size  Location     Type
 15768 ;;                  1    wreg      void 
 15769 ;; Registers used:
 15770 ;;		wreg, status,2, status,0, pclath, cstack
 15771 ;; Tracked objects:
 15772 ;;		On entry : 1F/0
 15773 ;;		On exit  : 0/0
 15774 ;;		Unchanged: 0/0
 15775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15779 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15780 ;;Total ram usage:        0 bytes
 15781 ;; Hardware stack levels used:    1
 15782 ;; Hardware stack levels required when called:    2
 15783 ;; This function calls:
 15784 ;;		Absolute function
 15785 ;;		_TMR2_DefaultInterruptHandler
 15786 ;;		_TMR2_Int_isr
 15787 ;; This function is called by:
 15788 ;;		_INTERRUPT_InterruptManager
 15789 ;; This function uses a non-reentrant model
 15790 ;;
 15791                           
 15792                           
 15793                           ;psect for function _TMR2_ISR
 15794  1ACA                     _TMR2_ISR:
 15795                           
 15796                           ;mcc_generated_files/tmr2.c: 123:     PIR1bits.TMR2IF = 0;
 15797                           
 15798                           ;incstack = 0
 15799                           ; Regs used in _TMR2_ISR: [wreg+status,2+status,0+pclath+cstack]
 15800  1ACA  1091               	bcf	17,1	;volatile
 15801                           
 15802                           ;mcc_generated_files/tmr2.c: 125:     if(TMR2_InterruptHandler)
 15803  1ACB  0023               	movlb	3	; select bank3
 15804  1ACC  086C               	movf	_TMR2_InterruptHandler^(0+384),w
 15805  1ACD  046D               	iorwf	(_TMR2_InterruptHandler+1)^(0+384),w
 15806  1ACE  1903               	btfsc	3,2
 15807  1ACF  0008               	return
 15808                           
 15809                           ;mcc_generated_files/tmr2.c: 126:     {;mcc_generated_files/tmr2.c: 127:         TMR2_In
      +                          terruptHandler();
 15810  1AD0  086D               	movf	(_TMR2_InterruptHandler+1)^(0+384),w
 15811  1AD1  008A               	movwf	10
 15812  1AD2  086C               	movf	_TMR2_InterruptHandler^(0+384),w
 15813  1AD3  000A               	callw
 15814  1AD4  319A               	pagesel	$
 15815  1AD5  0008               	return
 15816  1AD6                     __end_of_TMR2_ISR:
 15817                           
 15818                           	psect	text79
 15819  1A28                     __ptext79:	
 15820 ;; *************** function _TMR2_DefaultInterruptHandler *****************
 15821 ;; Defined at:
 15822 ;;		line 136 in file "mcc_generated_files/tmr2.c"
 15823 ;; Parameters:    Size  Location     Type
 15824 ;;		None
 15825 ;; Auto vars:     Size  Location     Type
 15826 ;;		None
 15827 ;; Return value:  Size  Location     Type
 15828 ;;                  1    wreg      void 
 15829 ;; Registers used:
 15830 ;;		None
 15831 ;; Tracked objects:
 15832 ;;		On entry : 1F/3
 15833 ;;		On exit  : 1F/3
 15834 ;;		Unchanged: 1E/0
 15835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15839 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15840 ;;Total ram usage:        0 bytes
 15841 ;; Hardware stack levels used:    1
 15842 ;; This function calls:
 15843 ;;		Nothing
 15844 ;; This function is called by:
 15845 ;;		_TMR2_Initialize
 15846 ;;		_TMR2_ISR
 15847 ;; This function uses a non-reentrant model
 15848 ;;
 15849                           
 15850                           
 15851                           ;psect for function _TMR2_DefaultInterruptHandler
 15852  1A28                     _TMR2_DefaultInterruptHandler:
 15853                           
 15854                           ;incstack = 0
 15855                           ; Regs used in _TMR2_DefaultInterruptHandler: []
 15856  1A28  0008               	return
 15857  1A29                     __end_of_TMR2_DefaultInterruptHandler:
 15858                           
 15859                           	psect	text80
 15860  1C30                     __ptext80:	
 15861 ;; *************** function _TMR2_Int_isr *****************
 15862 ;; Defined at:
 15863 ;;		line 214 in file "main.c"
 15864 ;; Parameters:    Size  Location     Type
 15865 ;;		None
 15866 ;; Auto vars:     Size  Location     Type
 15867 ;;		None
 15868 ;; Return value:  Size  Location     Type
 15869 ;;                  1    wreg      void 
 15870 ;; Registers used:
 15871 ;;		wreg, status,2, status,0, pclath, cstack
 15872 ;; Tracked objects:
 15873 ;;		On entry : 1F/3
 15874 ;;		On exit  : 1D/0
 15875 ;;		Unchanged: 0/0
 15876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15880 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15881 ;;Total ram usage:        0 bytes
 15882 ;; Hardware stack levels used:    1
 15883 ;; Hardware stack levels required when called:    1
 15884 ;; This function calls:
 15885 ;;		_TMR2_StopTimer
 15886 ;; This function is called by:
 15887 ;;		_main
 15888 ;;		_TMR2_ISR
 15889 ;; This function uses a non-reentrant model
 15890 ;;
 15891                           
 15892                           
 15893                           ;psect for function _TMR2_Int_isr
 15894  1C30                     _TMR2_Int_isr:
 15895                           
 15896                           ;main.c: 216:     static uint16_t counter_tmr2 = 0;;main.c: 217:     counter_tmr2 ++;
 15897                           
 15898                           ;incstack = 0
 15899                           ; Regs used in _TMR2_Int_isr: [wreg+status,2+status,0+pclath+cstack]
 15900  1C30  3001               	movlw	1
 15901  1C31  07B4               	addwf	TMR2_Int_isr@counter_tmr2^(0+384),f
 15902  1C32  3000               	movlw	0
 15903  1C33  3DB5               	addwfc	(TMR2_Int_isr@counter_tmr2+1)^(0+384),f
 15904                           
 15905                           ;main.c: 219:     if(counter_tmr2 >= required_delay_for_dim_ms_g){
 15906  1C34  0837               	movf	(_required_delay_for_dim_ms_g+1)^(0+384),w
 15907  1C35  0235               	subwf	(TMR2_Int_isr@counter_tmr2+1)^(0+384),w
 15908  1C36  1D03               	skipz
 15909  1C37  2C3A               	goto	u623_25
 15910  1C38  0836               	movf	_required_delay_for_dim_ms_g^(0+384),w
 15911  1C39  0234               	subwf	TMR2_Int_isr@counter_tmr2^(0+384),w
 15912  1C3A                     u623_25:
 15913  1C3A  1C03               	skipc
 15914  1C3B  2C41               	goto	i1l932
 15915                           
 15916                           ;main.c: 221:         counter_tmr2 = 0;
 15917  1C3C  01B4               	clrf	TMR2_Int_isr@counter_tmr2^(0+384)
 15918  1C3D  01B5               	clrf	(TMR2_Int_isr@counter_tmr2+1)^(0+384)
 15919  1C3E  0022               	movlb	2	; select bank2
 15920  1C3F  168E               	bsf	14,5	;volatile
 15921  1C40  0008               	return
 15922  1C41                     i1l932:	
 15923                           ;main.c: 225:     else if (1 == PORTCbits.RC5){
 15924                           
 15925  1C41  0020               	movlb	0	; select bank0
 15926  1C42  1E8E               	btfss	14,5	;volatile
 15927  1C43  0008               	return
 15928                           
 15929                           ;main.c: 227:         counter_tmr2 = 0;
 15930  1C44  0023               	movlb	3	; select bank3
 15931  1C45  01B4               	clrf	TMR2_Int_isr@counter_tmr2^(0+384)
 15932  1C46  01B5               	clrf	(TMR2_Int_isr@counter_tmr2+1)^(0+384)
 15933                           
 15934                           ;main.c: 228:         TMR2_StopTimer();
 15935  1C47  319A  222F         	fcall	_TMR2_StopTimer
 15936  1C49  0022               	movlb	2	; select bank2
 15937  1C4A  128E               	bcf	14,5	;volatile
 15938  1C4B  0008               	return
 15939  1C4C                     __end_of_TMR2_Int_isr:
 15940                           
 15941                           	psect	text81
 15942  1A2F                     __ptext81:	
 15943 ;; *************** function _TMR2_StopTimer *****************
 15944 ;; Defined at:
 15945 ;;		line 93 in file "mcc_generated_files/tmr2.c"
 15946 ;; Parameters:    Size  Location     Type
 15947 ;;		None
 15948 ;; Auto vars:     Size  Location     Type
 15949 ;;		None
 15950 ;; Return value:  Size  Location     Type
 15951 ;;                  1    wreg      void 
 15952 ;; Registers used:
 15953 ;;		None
 15954 ;; Tracked objects:
 15955 ;;		On entry : 1F/3
 15956 ;;		On exit  : 1F/0
 15957 ;;		Unchanged: 0/0
 15958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15962 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15963 ;;Total ram usage:        0 bytes
 15964 ;; Hardware stack levels used:    1
 15965 ;; This function calls:
 15966 ;;		Nothing
 15967 ;; This function is called by:
 15968 ;;		_TMR2_Int_isr
 15969 ;; This function uses a non-reentrant model
 15970 ;;
 15971                           
 15972                           
 15973                           ;psect for function _TMR2_StopTimer
 15974  1A2F                     _TMR2_StopTimer:
 15975                           
 15976                           ;mcc_generated_files/tmr2.c: 96:     T2CONbits.TMR2ON = 0;
 15977                           
 15978                           ;incstack = 0
 15979                           ; Regs used in _TMR2_StopTimer: []
 15980  1A2F  0020               	movlb	0	; select bank0
 15981  1A30  111C               	bcf	28,2	;volatile
 15982  1A31  0008               	return
 15983  1A32                     __end_of_TMR2_StopTimer:
 15984                           
 15985                           	psect	text82
 15986  1A4D                     __ptext82:	
 15987 ;; *************** function _PIN_MANAGER_IOC *****************
 15988 ;; Defined at:
 15989 ;;		line 115 in file "mcc_generated_files/pin_manager.c"
 15990 ;; Parameters:    Size  Location     Type
 15991 ;;		None
 15992 ;; Auto vars:     Size  Location     Type
 15993 ;;		None
 15994 ;; Return value:  Size  Location     Type
 15995 ;;                  1    wreg      void 
 15996 ;; Registers used:
 15997 ;;		wreg, status,2, status,0, pclath, cstack
 15998 ;; Tracked objects:
 15999 ;;		On entry : 0/0
 16000 ;;		On exit  : 1F/7
 16001 ;;		Unchanged: 0/0
 16002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16006 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16007 ;;Total ram usage:        0 bytes
 16008 ;; Hardware stack levels used:    1
 16009 ;; Hardware stack levels required when called:    3
 16010 ;; This function calls:
 16011 ;;		_IOCAF2_ISR
 16012 ;; This function is called by:
 16013 ;;		_INTERRUPT_InterruptManager
 16014 ;; This function uses a non-reentrant model
 16015 ;;
 16016                           
 16017                           
 16018                           ;psect for function _PIN_MANAGER_IOC
 16019  1A4D                     _PIN_MANAGER_IOC:
 16020                           
 16021                           ;mcc_generated_files/pin_manager.c: 118:     if(IOCAFbits.IOCAF2 == 1)
 16022                           
 16023                           ;incstack = 0
 16024                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
 16025  1A4D  0027               	movlb	7	; select bank7
 16026  1A4E  1D13               	btfss	19,2	;volatile
 16027  1A4F  0008               	return
 16028                           
 16029                           ;mcc_generated_files/pin_manager.c: 119:     {;mcc_generated_files/pin_manager.c: 120:  
      +                                 IOCAF2_ISR();
 16030  1A50  319A  22EE         	fcall	_IOCAF2_ISR
 16031  1A52  0008               	return
 16032  1A53                     __end_of_PIN_MANAGER_IOC:
 16033                           
 16034                           	psect	text83
 16035  1AEE                     __ptext83:	
 16036 ;; *************** function _IOCAF2_ISR *****************
 16037 ;; Defined at:
 16038 ;;		line 127 in file "mcc_generated_files/pin_manager.c"
 16039 ;; Parameters:    Size  Location     Type
 16040 ;;		None
 16041 ;; Auto vars:     Size  Location     Type
 16042 ;;		None
 16043 ;; Return value:  Size  Location     Type
 16044 ;;                  1    wreg      void 
 16045 ;; Registers used:
 16046 ;;		wreg, status,2, status,0, pclath, cstack
 16047 ;; Tracked objects:
 16048 ;;		On entry : 1F/7
 16049 ;;		On exit  : 1F/7
 16050 ;;		Unchanged: 0/0
 16051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16055 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16056 ;;Total ram usage:        0 bytes
 16057 ;; Hardware stack levels used:    1
 16058 ;; Hardware stack levels required when called:    2
 16059 ;; This function calls:
 16060 ;;		Absolute function
 16061 ;;		_IOCAF2_DefaultInterruptHandler
 16062 ;;		_Zero_Detection_isr
 16063 ;; This function is called by:
 16064 ;;		_PIN_MANAGER_IOC
 16065 ;; This function uses a non-reentrant model
 16066 ;;
 16067                           
 16068                           
 16069                           ;psect for function _IOCAF2_ISR
 16070  1AEE                     _IOCAF2_ISR:
 16071                           
 16072                           ;mcc_generated_files/pin_manager.c: 132:     if(IOCAF2_InterruptHandler)
 16073                           
 16074                           ;incstack = 0
 16075                           ; Regs used in _IOCAF2_ISR: [wreg+status,2+status,0+pclath+cstack]
 16076  1AEE  0023               	movlb	3	; select bank3
 16077  1AEF  086E               	movf	_IOCAF2_InterruptHandler^(0+384),w
 16078  1AF0  046F               	iorwf	(_IOCAF2_InterruptHandler+1)^(0+384),w
 16079  1AF1  1903               	btfsc	3,2
 16080  1AF2  2AF8               	goto	i1l5329
 16081                           
 16082                           ;mcc_generated_files/pin_manager.c: 133:     {;mcc_generated_files/pin_manager.c: 134:  
      +                                 IOCAF2_InterruptHandler();
 16083  1AF3  086F               	movf	(_IOCAF2_InterruptHandler+1)^(0+384),w
 16084  1AF4  008A               	movwf	10
 16085  1AF5  086E               	movf	_IOCAF2_InterruptHandler^(0+384),w
 16086  1AF6  000A               	callw
 16087  1AF7  319A               	pagesel	$
 16088  1AF8                     i1l5329:
 16089                           
 16090                           ;mcc_generated_files/pin_manager.c: 136:     IOCAFbits.IOCAF2 = 0;
 16091  1AF8  0027               	movlb	7	; select bank7
 16092  1AF9  1113               	bcf	19,2	;volatile
 16093  1AFA  0008               	return
 16094  1AFB                     __end_of_IOCAF2_ISR:
 16095                           
 16096                           	psect	text84
 16097  1A27                     __ptext84:	
 16098 ;; *************** function _IOCAF2_DefaultInterruptHandler *****************
 16099 ;; Defined at:
 16100 ;;		line 149 in file "mcc_generated_files/pin_manager.c"
 16101 ;; Parameters:    Size  Location     Type
 16102 ;;		None
 16103 ;; Auto vars:     Size  Location     Type
 16104 ;;		None
 16105 ;; Return value:  Size  Location     Type
 16106 ;;                  1    wreg      void 
 16107 ;; Registers used:
 16108 ;;		None
 16109 ;; Tracked objects:
 16110 ;;		On entry : 1F/3
 16111 ;;		On exit  : 1F/3
 16112 ;;		Unchanged: 1E/0
 16113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16115 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16117 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16118 ;;Total ram usage:        0 bytes
 16119 ;; Hardware stack levels used:    1
 16120 ;; This function calls:
 16121 ;;		Nothing
 16122 ;; This function is called by:
 16123 ;;		_PIN_MANAGER_Initialize
 16124 ;;		_IOCAF2_ISR
 16125 ;; This function uses a non-reentrant model
 16126 ;;
 16127                           
 16128                           
 16129                           ;psect for function _IOCAF2_DefaultInterruptHandler
 16130  1A27                     _IOCAF2_DefaultInterruptHandler:
 16131                           
 16132                           ;incstack = 0
 16133                           ; Regs used in _IOCAF2_DefaultInterruptHandler: []
 16134  1A27  0008               	return
 16135  1A28                     __end_of_IOCAF2_DefaultInterruptHandler:
 16136                           
 16137                           	psect	text85
 16138  1A2C                     __ptext85:	
 16139 ;; *************** function _Zero_Detection_isr *****************
 16140 ;; Defined at:
 16141 ;;		line 206 in file "main.c"
 16142 ;; Parameters:    Size  Location     Type
 16143 ;;		None
 16144 ;; Auto vars:     Size  Location     Type
 16145 ;;		None
 16146 ;; Return value:  Size  Location     Type
 16147 ;;                  1    wreg      void 
 16148 ;; Registers used:
 16149 ;;		status,2, status,0, pclath, cstack
 16150 ;; Tracked objects:
 16151 ;;		On entry : 1F/3
 16152 ;;		On exit  : 1F/0
 16153 ;;		Unchanged: 0/0
 16154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16158 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16159 ;;Total ram usage:        0 bytes
 16160 ;; Hardware stack levels used:    1
 16161 ;; Hardware stack levels required when called:    1
 16162 ;; This function calls:
 16163 ;;		_TMR2_StartTimer
 16164 ;; This function is called by:
 16165 ;;		_main
 16166 ;;		_IOCAF2_ISR
 16167 ;; This function uses a non-reentrant model
 16168 ;;
 16169                           
 16170                           
 16171                           ;psect for function _Zero_Detection_isr
 16172  1A2C                     _Zero_Detection_isr:
 16173                           
 16174                           ;main.c: 209:     TMR2_StartTimer();
 16175                           
 16176                           ;incstack = 0
 16177                           ; Regs used in _Zero_Detection_isr: [status,2+status,0+pclath+cstack]
 16178  1A2C  319A  2229         	fcall	_TMR2_StartTimer
 16179  1A2E  0008               	return
 16180  1A2F                     __end_of_Zero_Detection_isr:
 16181                           
 16182                           	psect	text86
 16183  1A29                     __ptext86:	
 16184 ;; *************** function _TMR2_StartTimer *****************
 16185 ;; Defined at:
 16186 ;;		line 87 in file "mcc_generated_files/tmr2.c"
 16187 ;; Parameters:    Size  Location     Type
 16188 ;;		None
 16189 ;; Auto vars:     Size  Location     Type
 16190 ;;		None
 16191 ;; Return value:  Size  Location     Type
 16192 ;;                  1    wreg      void 
 16193 ;; Registers used:
 16194 ;;		None
 16195 ;; Tracked objects:
 16196 ;;		On entry : 1F/3
 16197 ;;		On exit  : 1F/0
 16198 ;;		Unchanged: 0/0
 16199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16203 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16204 ;;Total ram usage:        0 bytes
 16205 ;; Hardware stack levels used:    1
 16206 ;; This function calls:
 16207 ;;		Nothing
 16208 ;; This function is called by:
 16209 ;;		_Zero_Detection_isr
 16210 ;; This function uses a non-reentrant model
 16211 ;;
 16212                           
 16213                           
 16214                           ;psect for function _TMR2_StartTimer
 16215  1A29                     _TMR2_StartTimer:
 16216                           
 16217                           ;mcc_generated_files/tmr2.c: 90:     T2CONbits.TMR2ON = 1;
 16218                           
 16219                           ;incstack = 0
 16220                           ; Regs used in _TMR2_StartTimer: []
 16221  1A29  0020               	movlb	0	; select bank0
 16222  1A2A  151C               	bsf	28,2	;volatile
 16223  1A2B  0008               	return
 16224  1A2C                     __end_of_TMR2_StartTimer:
 16225  007E                     btemp	set	126	;btemp
 16226  007E                     int$flags	set	126
 16227  007E                     wtemp0	set	126
 16228                           
 16229                           	psect	idloc
 16230                           
 16231                           ;Config register IDLOC0 @ 0x8000
 16232                           ;	unspecified, using default values
 16233  8000                     	org	32768
 16234  8000  3FFF               	dw	16383
 16235                           
 16236                           ;Config register IDLOC1 @ 0x8001
 16237                           ;	unspecified, using default values
 16238  8001                     	org	32769
 16239  8001  3FFF               	dw	16383
 16240                           
 16241                           ;Config register IDLOC2 @ 0x8002
 16242                           ;	unspecified, using default values
 16243  8002                     	org	32770
 16244  8002  3FFF               	dw	16383
 16245                           
 16246                           ;Config register IDLOC3 @ 0x8003
 16247                           ;	unspecified, using default values
 16248  8003                     	org	32771
 16249  8003  3FFF               	dw	16383
 16250                           
 16251                           	psect	config
 16252                           
 16253                           ;Config register CONFIG1 @ 0x8007
 16254                           ;	Oscillator Selection
 16255                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
 16256                           ;	Watchdog Timer Enable
 16257                           ;	WDTE = OFF, WDT disabled
 16258                           ;	Power-up Timer Enable
 16259                           ;	PWRTE = OFF, PWRT disabled
 16260                           ;	MCLR Pin Function Select
 16261                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
 16262                           ;	Flash Program Memory Code Protection
 16263                           ;	CP = OFF, Program memory code protection is disabled
 16264                           ;	Data Memory Code Protection
 16265                           ;	CPD = OFF, Data memory code protection is disabled
 16266                           ;	Brown-out Reset Enable
 16267                           ;	BOREN = NSLEEP, Brown-out Reset enabled while running and disabled in Sleep
 16268                           ;	Clock Out Enable
 16269                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
 16270                           ;	Internal/External Switchover
 16271                           ;	IESO = ON, Internal/External Switchover mode is enabled
 16272                           ;	Fail-Safe Clock Monitor Enable
 16273                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
 16274  8007                     	org	32775
 16275  8007  3DE4               	dw	15844
 16276                           
 16277                           ;Config register CONFIG2 @ 0x8008
 16278                           ;	Flash Memory Self-Write Protection
 16279                           ;	WRT = OFF, Write protection off
 16280                           ;	PLL Enable
 16281                           ;	PLLEN = OFF, 4x PLL disabled
 16282                           ;	Stack Overflow/Underflow Reset Enable
 16283                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
 16284                           ;	Brown-out Reset Voltage Selection
 16285                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
 16286                           ;	Low-Voltage Programming Enable
 16287                           ;	LVP = ON, Low-voltage programming enabled
 16288  8008                     	org	32776
 16289  8008  3EFF               	dw	16127

Data Sizes:
    Strings     31
    Constant    56
    Data        34
    BSS         169
    Persistent  44
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     80      80
    BANK1            80     80      80
    BANK2            80     80      80
    BANK3            80     21      80
    BANK4            80      0      76
    BANK5            80      0      80
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Button_Service$2894$0	PTR struct . size(1) Largest target is 32
		 -> mtouch_button(BANK4[32]), 

    nanf@s	PTR const unsigned char  size(2) Largest target is 1
		 -> STR_15(CODE[1]), 

    Button_StateMachine$0	PTR struct . size(1) Largest target is 32
		 -> mtouch_button(BANK4[32]), 

    ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    strncmp@_r	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_12(CODE[3]), 

    strncmp@r	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_12(CODE[3]), 

    strncmp@_l	PTR const unsigned char  size(1) Largest target is 3
		 -> vfpfcnvrt@ct(BANK2[3]), 

    strncmp@l	PTR const unsigned char  size(1) Largest target is 3
		 -> vfpfcnvrt@ct(BANK2[3]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 80
		 -> dbuf(BANK5[80]), Buff_g(BANK4[20]), 

    strlen@a	PTR const unsigned char  size(1) Largest target is 80
		 -> dbuf(BANK5[80]), Buff_g(BANK4[20]), 

    strcpy@dest	PTR unsigned char  size(1) Largest target is 80
		 -> dbuf(BANK5[80]), 

    strcpy@d	PTR unsigned char  size(1) Largest target is 80
		 -> dbuf(BANK5[80]), 

    strcpy@src	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_7(CODE[4]), STR_6(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), 
		 -> dbuf(BANK5[80]), 

    strcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_7(CODE[4]), STR_6(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), 
		 -> dbuf(BANK5[80]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 80
		 -> dbuf(BANK5[80]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK3[5]), 

    fputc@fp.buffer	PTR unsigned char  size(1) Largest target is 20
		 -> Buff_g(BANK4[20]), 

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK3[5]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK3[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK3[5]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_1(CODE[12]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 12
		 -> STR_1(CODE[12]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK3[5]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK3[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK2[2]), 

    efgtoa@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK3[5]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 80
		 -> dbuf(BANK5[80]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK3[5]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 80
		 -> dbuf(BANK5[80]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_1(CODE[12]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 20
		 -> Buff_g(BANK4[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK3[2]), 

    S2246_IO_FILE$buffer	PTR unsigned char  size(1) Largest target is 20
		 -> Buff_g(BANK4[20]), 

    f.buffer	PTR unsigned char  size(1) Largest target is 20
		 -> Buff_g(BANK4[20]), 

    memcpy@d1	PTR void  size(1) Largest target is 32
		 -> mtouch_button(BANK4[32]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 32
		 -> mtouch_button(BANK4[32]), 

    memcpy@s1	PTR const void  size(2) Largest target is 32
		 -> mtouch_button_init(CODE[32]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 32
		 -> mtouch_button_init(CODE[32]), 

    TMR4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR4_DefaultInterruptHandler(), TMR4_Wroking_Blink_AlarmLED_isr(), 

    TMR4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR4_DefaultInterruptHandler(), TMR4_Wroking_Blink_AlarmLED_isr(), Absolute function(), 

    TX_Whole_String@input_string	PTR unsigned char  size(1) Largest target is 20
		 -> Buff_g(BANK4[20]), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_Int_isr(), TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_Int_isr(), TMR2_DefaultInterruptHandler(), Absolute function(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), Absolute function(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), Absolute function(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), Absolute function(), 

    IOCAF2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Zero_Detection_isr(), IOCAF2_DefaultInterruptHandler(), 

    IOCAF2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Zero_Detection_isr(), Absolute function(), IOCAF2_DefaultInterruptHandler(), 

    sp__memcpy	PTR void  size(1) Largest target is 32
		 -> mtouch_button(BANK4[32]), 

    MTOUCH_Button_Initialize@button	PTR struct . size(1) Largest target is 32
		 -> mtouch_button(BANK4[32]), 

    Button_StateMachine	PTR FTN(PTR struct .,)void [3] size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    callback_notPressed	PTR FTN(enum E2819,)void  size(2) Largest target is 1
		 -> Button_DefaultCallback(), 

    callback_pressed	PTR FTN(enum E2819,)void  size(2) Largest target is 1
		 -> Button_DefaultCallback(), 

    Sensor_setSampled@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_1(), MTOUCH_CVD_ScanB_0(), 

    Sensor_setSampled@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_1(), MTOUCH_CVD_ScanA_0(), 

    Sensor_Sampled_Reset@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_1(), MTOUCH_CVD_ScanB_0(), 

    Sensor_Sampled_Reset@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_1(), MTOUCH_CVD_ScanA_0(), 

    Sensor_Sampled_Reset@sensor	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK4[18]), 

    MTOUCH_Sensor_Sampled_ResetAll@sensor	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK4[18]), 

    Sensor_setInactive@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_1(), MTOUCH_CVD_ScanB_0(), 

    Sensor_setInactive@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_1(), MTOUCH_CVD_ScanA_0(), 

    Sensor_setActive@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_1(), MTOUCH_CVD_ScanB_0(), 

    Sensor_setActive@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_1(), MTOUCH_CVD_ScanA_0(), 

    Sensor_isEnabled@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_1(), MTOUCH_CVD_ScanB_0(), 

    Sensor_isEnabled@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_1(), MTOUCH_CVD_ScanA_0(), 

    Sensor_setScanFunction@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_1(), MTOUCH_CVD_ScanB_0(), 

    Sensor_setScanFunction@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_1(), MTOUCH_CVD_ScanA_0(), 

    Sensor_RawSample_Update@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_1(), MTOUCH_CVD_ScanB_0(), 

    Sensor_RawSample_Update@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_1(), MTOUCH_CVD_ScanA_0(), 

    Sensor_Acq_ExecutePacket@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_1(), MTOUCH_CVD_ScanB_0(), 

    Sensor_Acq_ExecutePacket@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_1(), MTOUCH_CVD_ScanA_0(), 

    Sensor_Acquisition@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_1(), MTOUCH_CVD_ScanB_0(), 

    Sensor_Acquisition@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_1(), MTOUCH_CVD_ScanA_0(), 

    S50$scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_1(), MTOUCH_CVD_ScanB_0(), 

    mtouch_sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_1(), MTOUCH_CVD_ScanB_0(), 

    S50$scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_1(), MTOUCH_CVD_ScanA_0(), 

    mtouch_sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_1(), MTOUCH_CVD_ScanA_0(), 

    Sensor_scanB	PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_1(), MTOUCH_CVD_ScanB_0(), 

    Sensor_scanA	PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_1(), MTOUCH_CVD_ScanA_0(), 

    callback_sampled	PTR FTN(enum E2661,)void  size(2) Largest target is 1
		 -> Sensor_DefaultCallback(), 


Critical Paths under _main in COMMON

    _vfpfcnvrt->_tolower
    _efgtoa->_tolower
    _tolower->_isupper
    _pad->_fputs
    _fputs->_fputc
    _TX_Whole_String->_strlen
    _TX_Command->_EUSART_Write
    _TX_Command->_EUSART_is_tx_ready
    _TMR4_Initialize->_TMR4_SetInterruptHandler
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF2_SetInterruptHandler
    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Sensor_Sampled_ResetAll->_Sensor_Sampled_Reset
    _MTOUCH_Sensor_InitializeAll->_MTOUCH_Sensor_Initialize
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Enable
    _MTOUCH_Sensor_Enable->___bmul
    _MTOUCH_Button_InitializeAll->_memcpy
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _Read_ADC_Num->_ADC_GetConversionResult
    _ChangeADCtoVoltage->___xxtofl
    ___flmul->___xxtofl
    ___fldiv->___xxtofl

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _vfprintf->_vfpfcnvrt
    _efgtoa->___fltol
    _pad->_fputs
    _floorf->___fldiv
    _Read_PT100_Temp->_Measure_R_PT100_2Wire
    _Measure_Temp_PT100_2Wire->___fldiv
    _sqrtf->___fladd
    ___flge->___flmul
    _Measure_R_PT100_2Wire->___fldiv
    _ChangeADCtoVoltage->___fldiv
    _CalcRequiredDelayForTrigTRIAC->___fltol
    ___fltol->___fldiv
    ___flsub->___fladd
    ___fladd->___flmul
    ___fldiv->_sqrtf

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _sprintf->_vfprintf
    _vfpfcnvrt->_efgtoa
    _efgtoa->_floorf
    _floorf->___fldiv
    _Read_PT100_Temp->_Measure_Temp_PT100_2Wire
    _Measure_Temp_PT100_2Wire->___fldiv
    _Measure_R_PT100_2Wire->___fldiv
    _ChangeADCtoVoltage->___fldiv
    _Init_Function->_CalcRequiredDelayForTrigTRIAC
    _CalcRequiredDelayForTrigTRIAC->___fltol
    ___fltol->___fldiv
    ___fldiv->_sqrtf

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_efgtoa

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_sprintf

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   84386
                                             15 BANK3      6     6      0
         _IOCAF2_SetInterruptHandler
                      _Init_Function
                    _Read_PT100_Temp
                  _SYSTEM_Initialize
           _TMR2_SetInterruptHandler
           _TMR4_SetInterruptHandler
                    _TX_Whole_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6   30255
                                             79 BANK2      1     1      0
                                              0 BANK3     15     9      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     5      3   29943
                                             77 BANK1      3     0      3
                                             74 BANK2      5     5      0
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           43    41      2   29625
                                             78 BANK0      2     0      2
                                             57 BANK2     17    17      0
                             _efgtoa
                              _fputc
                            _isupper
                            _strncmp
                            _tolower
 ---------------------------------------------------------------------------------
 (4) _strncmp                                              9     5      4     410
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (4) _efgtoa                                              66    61      5   26023
                                             68 BANK1      9     4      5
                                              0 BANK2     57    57      0
                            ___awdiv
                            ___awmod
                            ___fladd
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                      ___fpclassifyf
                             _floorf
                            _isupper
                                _pad
                             _strcpy
                            _tolower
 ---------------------------------------------------------------------------------
 (4) _tolower                                              8     6      2     944
                                              6 COMMON     8     6      2
                            _isupper
 ---------------------------------------------------------------------------------
 (5) _isupper                                              6     4      2     465
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (5) _strcpy                                               8     6      2     641
                                              0 COMMON     8     6      2
 ---------------------------------------------------------------------------------
 (5) _pad                                                  9     6      3    2940
                                             12 COMMON     1     1      0
                                              4 BANK0      8     5      3
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _fputs                                                8     7      1    1149
                                              8 COMMON     4     3      1
                                              0 BANK0      4     4      0
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     834
                                              0 COMMON     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _floorf                                              20    16      4     490
                                             48 BANK1     20    16      4
                            ___fldiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fpclassifyf                                       16    12      4     287
                                              0 COMMON    10     6      4
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (5) ___flneg                                              4     0      4     121
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (5) ___fleq                                              12     4      8     394
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              7     3      4     448
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              9     5      4     452
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (1) _TX_Whole_String                                      6     6      0     370
                                              5 COMMON     6     6      0
                         _TX_Command
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               5     3      2     156
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (2) _TX_Command                                           1     1      0      68
                                              1 COMMON     1     1      0
                       _EUSART_Write
                 _EUSART_is_tx_ready
 ---------------------------------------------------------------------------------
 (3) _EUSART_is_tx_ready                                   1     1      0      24
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _EUSART_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    2295
                     _ADC_Initialize
                  _EUSART_Initialize
                  _MTOUCH_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0     174
           _TMR4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR4_SetInterruptHandler                             2     0      2     174
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     174
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR2_SetInterruptHandler                             2     0      2     174
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     174
         _IOCAF2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCAF2_SetInterruptHandler                           2     0      2     174
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Initialize                                    0     0      0    1479
        _MTOUCH_Button_InitializeAll
        _MTOUCH_Sensor_InitializeAll
     _MTOUCH_Sensor_Sampled_ResetAll
      _MTOUCH_Sensor_Scan_Initialize
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Scan_Initialize                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Sampled_ResetAll                       2     2      0     156
                                              1 COMMON     2     2      0
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_InitializeAll                          2     2      0     794
                                              8 COMMON     2     2      0
           _MTOUCH_Sensor_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_Initialize                             2     2      0     726
                                              6 COMMON     2     2      0
               _MTOUCH_Sensor_Enable
               _Sensor_Sampled_Reset
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Sensor_Sampled_Reset                                 1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Enable                                 2     2      0     319
                                              4 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     275
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_InitializeAll                          2     2      0     529
                                             10 COMMON     2     2      0
           _MTOUCH_Button_Initialize
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              10     6      4     328
                                              0 COMMON    10     6      4
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_Initialize                             4     4      0     133
                                              0 COMMON     4     4      0
            _MTOUCH_Sensor_Calibrate
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Calibrate                              1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     294
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Read_PT100_Temp                                     18    14      4   39232
                                             68 BANK1      4     0      4
                                              0 BANK2     14    14      0
                _ADC_StartConversion
                 _ChangeADCtoVoltage
              _Measure_R_PT100_2Wire
           _Measure_Temp_PT100_2Wire
                       _Read_ADC_Num
 ---------------------------------------------------------------------------------
 (2) _Read_ADC_Num                                         4     2      2      23
                                              2 COMMON     4     2      2
            _ADC_GetConversionResult
               _ADC_IsConversionDone
 ---------------------------------------------------------------------------------
 (3) _ADC_IsConversionDone                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_GetConversionResult                              2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _Measure_Temp_PT100_2Wire                            20    16      4   20339
                                             48 BANK1     20    16      4
                            ___fladd
                            ___fldiv
                            ___flmul
                              _sqrtf
 ---------------------------------------------------------------------------------
 (3) _sqrtf                                               52    48      4    9866
                                             46 BANK0     12     8      4
                                              0 BANK1     40    40      0
                            ___fladd
                             ___flge
                            ___flmul
                               _nanf
 ---------------------------------------------------------------------------------
 (4) _nanf                                                 8     4      4      99
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (5) ___flge                                              12     4      8    1246
                                             26 BANK0     12     4      8
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _Measure_R_PT100_2Wire                                8     4      4   11080
                                             76 BANK0      4     4      0
                                             48 BANK1      4     0      4
                            ___fldiv
                            ___flmul
                            ___flsub
 ---------------------------------------------------------------------------------
 (2) _ChangeADCtoVoltage                                   4     0      4    7694
                                             48 BANK1      4     0      4
                            ___fldiv
                            ___flmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     461
                                              0 COMMON    14    10      4
 ---------------------------------------------------------------------------------
 (2) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_Function                                        0     0      0   11688
                  _ADC_SelectChannel
      _CalcRequiredDelayForTrigTRIAC
                 _StartStop_AlarmLED
                   _StartStop_Buzzer
                      _StartStop_Fan
 ---------------------------------------------------------------------------------
 (2) _StartStop_Fan                                        1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _StartStop_Buzzer                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _StartStop_AlarmLED                                   1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CalcRequiredDelayForTrigTRIAC                       10     6      4   11600
                                             57 BANK1     10     6      4
                            ___fldiv
                            ___flmul
                            ___flsub
                            ___fltol
 ---------------------------------------------------------------------------------
 (5) ___fltol                                             11     7      4     520
                                             76 BANK0      2     2      0
                                             48 BANK1      9     5      4
                            ___fldiv (ARG)
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flsub                                              8     0      8    3801
                                             46 BANK0      8     0      8
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___fladd                                             20    12      8    3148
                                             26 BANK0     20    12      8
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flmul                                             26    18      8    4368
                                              0 BANK0     26    18      8
                          __Umul8_16
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (6) __Umul8_16                                            9     7      2     799
                                              0 COMMON     9     7      2
 ---------------------------------------------------------------------------------
 (5) ___fldiv                                             26    18      8    2767
                                             58 BANK0     18    18      0
                                             40 BANK1      8     0      8
                            ___fladd (ARG)
                            ___flmul (ARG)
                            ___flsub (ARG)
                           ___xxtofl (ARG)
                              _sqrtf (ARG)
 ---------------------------------------------------------------------------------
 (2) _ADC_SelectChannel                                    2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                           0     0      0       0
                    _PIN_MANAGER_IOC
                           _TMR2_ISR
                           _TMR4_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR4_ISR                                            0     0      0       0
                   Absolute function *
       _TMR4_DefaultInterruptHandler *
    _TMR4_Wroking_Blink_AlarmLED_isr *
 ---------------------------------------------------------------------------------
 (11) _TMR4_Wroking_Blink_AlarmLED_isr                     0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _TMR4_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _TMR2_ISR                                            0     0      0       0
                   Absolute function *
       _TMR2_DefaultInterruptHandler *
                       _TMR2_Int_isr *
 ---------------------------------------------------------------------------------
 (11) _TMR2_Int_isr                                        0     0      0       0
                     _TMR2_StopTimer
 ---------------------------------------------------------------------------------
 (12) _TMR2_StopTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _TMR2_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PIN_MANAGER_IOC                                     0     0      0       0
                         _IOCAF2_ISR
 ---------------------------------------------------------------------------------
 (11) _IOCAF2_ISR                                          0     0      0       0
                   Absolute function *
     _IOCAF2_DefaultInterruptHandler *
                 _Zero_Detection_isr *
 ---------------------------------------------------------------------------------
 (12) _Zero_Detection_isr                                  0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (13) _TMR2_StartTimer                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _IOCAF2_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _IOCAF2_SetInterruptHandler
   _Init_Function
     _ADC_SelectChannel
     _CalcRequiredDelayForTrigTRIAC
       ___fldiv
         ___fladd (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
         ___flsub (ARG)
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         ___xxtofl (ARG)
         _sqrtf (ARG)
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
           ___flge
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
           ___flmul
             __Umul8_16
             ___xxtofl (ARG)
           _nanf
       ___flmul
         __Umul8_16
         ___xxtofl (ARG)
       ___flsub
         ___fladd
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
       ___fltol
         ___fldiv (ARG)
           ___fladd (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
           ___flsub (ARG)
             ___fladd
               ___flmul (ARG)
                 __Umul8_16
                 ___xxtofl (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
           ___xxtofl (ARG)
           _sqrtf (ARG)
             ___fladd
               ___flmul (ARG)
                 __Umul8_16
                 ___xxtofl (ARG)
             ___flge
               ___flmul (ARG)
                 __Umul8_16
                 ___xxtofl (ARG)
             ___flmul
               __Umul8_16
               ___xxtofl (ARG)
             _nanf
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
     _StartStop_AlarmLED
     _StartStop_Buzzer
     _StartStop_Fan
   _Read_PT100_Temp
     _ADC_StartConversion
     _ChangeADCtoVoltage
       ___fldiv
         ___fladd (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
         ___flsub (ARG)
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         ___xxtofl (ARG)
         _sqrtf (ARG)
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
           ___flge
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
           ___flmul
             __Umul8_16
             ___xxtofl (ARG)
           _nanf
       ___flmul
         __Umul8_16
         ___xxtofl (ARG)
       ___xxtofl
     _Measure_R_PT100_2Wire
       ___fldiv
         ___fladd (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
         ___flsub (ARG)
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         ___xxtofl (ARG)
         _sqrtf (ARG)
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
           ___flge
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
           ___flmul
             __Umul8_16
             ___xxtofl (ARG)
           _nanf
       ___flmul
         __Umul8_16
         ___xxtofl (ARG)
       ___flsub
         ___fladd
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
     _Measure_Temp_PT100_2Wire
       ___fladd
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
       ___fldiv
         ___fladd (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
         ___flsub (ARG)
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         ___xxtofl (ARG)
         _sqrtf (ARG)
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
           ___flge
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
           ___flmul
             __Umul8_16
             ___xxtofl (ARG)
           _nanf
       ___flmul
         __Umul8_16
         ___xxtofl (ARG)
       _sqrtf
         ___fladd
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         ___flge
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
         _nanf
     _Read_ADC_Num
       _ADC_GetConversionResult
       _ADC_IsConversionDone
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
           _MTOUCH_Sensor_Calibrate
         _memcpy
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Enable
             ___bmul
           _Sensor_Sampled_Reset
           ___bmul
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCAF2_SetInterruptHandler
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
     _TMR4_Initialize
       _TMR4_SetInterruptHandler
     _WDT_Initialize
   _TMR2_SetInterruptHandler
   _TMR4_SetInterruptHandler
   _TX_Whole_String
     _TX_Command
       _EUSART_Write
       _EUSART_is_tx_ready
     _strlen
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _efgtoa
           ___awdiv
           ___awmod
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
           ___fldiv
             ___fladd (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___xxtofl (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___xxtofl (ARG)
             ___xxtofl (ARG)
             _sqrtf (ARG)
               ___fladd
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___flge
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___flmul
                 __Umul8_16
                 ___xxtofl (ARG)
               _nanf
           ___fleq
           ___flge
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
           ___flmul
             __Umul8_16
             ___xxtofl (ARG)
           ___flneg
           ___flsub
             ___fladd
               ___flmul (ARG)
                 __Umul8_16
                 ___xxtofl (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
           ___fltol
             ___fldiv (ARG)
               ___fladd (ARG)
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___xxtofl (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___xxtofl (ARG)
               _sqrtf (ARG)
                 ___fladd
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                 ___flge
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                 ___flmul
                   __Umul8_16
                   ___xxtofl (ARG)
                 _nanf
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
           ___fpclassifyf
           _floorf
             ___fldiv (ARG)
               ___fladd (ARG)
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___xxtofl (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___xxtofl (ARG)
               _sqrtf (ARG)
                 ___fladd
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                 ___flge
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                 ___flmul
                   __Umul8_16
                   ___xxtofl (ARG)
                 _nanf
           _isupper
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
           _strcpy
           _tolower
             _isupper
         _fputc
           _putch
         _isupper
         _strncmp
         _tolower
           _isupper

 _INTERRUPT_InterruptManager (ROOT)
   _PIN_MANAGER_IOC
     _IOCAF2_ISR
       Absolute function(Fake) *
       _IOCAF2_DefaultInterruptHandler *
       _Zero_Detection_isr *
         _TMR2_StartTimer
   _TMR2_ISR
     Absolute function(Fake) *
     _TMR2_DefaultInterruptHandler *
     _TMR2_Int_isr *
       _TMR2_StopTimer
   _TMR4_ISR
     Absolute function(Fake) *
     _TMR4_DefaultInterruptHandler *
     _TMR4_Wroking_Blink_AlarmLED_isr *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     50      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50     15      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      4C      13       95.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      50      15      100.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     1EA      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     1EA      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Fri Jul 21 14:02:00 2023

                  _required_delay_for_dim_ms_g 01B6               __end_of_TMR2_SetInterruptHandler 1A6B  
                                 ___fldiv@aexp 006B                                   ___fldiv@bexp 006A  
                                 ___fldiv@sign 0063                                 ___bmul@product 0072  
                                 ___awdiv@sign 0076                            __Umul8_16@word_mpld 0076  
                        _Measure_R_PT100_2Wire 10E1                                            l670 1AA4  
                                          l954 0807                                            l963 1A99  
                                          l972 1A91                                            _GIE 005F  
                                          _PR2 001B                                            _PR4 0416  
                                          _pad 1F0E                 ?_EUSART_SetFramingErrorHandler 0070  
                                 ___awmod@sign 0076                                _TMR2_Initialize 1B09  
                                          wreg 0009             __end_of_IOCAF2_SetInterruptHandler 1A65  
                   _IOCAF2_SetInterruptHandler 1A5F               ??_MTOUCH_Sensor_Sampled_ResetAll 0071  
              ?_MTOUCH_Sensor_Sampled_ResetAll 0070                                   ___flmul@aexp 002E  
                                 ___flmul@bexp 0033                                   ___flmul@sign 002D  
                                 ___flmul@temp 0038                                   ___flmul@prod 0034  
            __size_of_MTOUCH_Sensor_Initialize 0011                      ?_MTOUCH_Sensor_Initialize 0070  
                           _MTOUCH_CVD_ScanA_0 0000                             _MTOUCH_CVD_ScanA_1 0000  
                           _MTOUCH_CVD_ScanB_0 0000                             _MTOUCH_CVD_ScanB_1 0000  
                                 ___fltol@exp1 006D                                  ?_Read_ADC_Num 0072  
                                         l1520 0AD4                                           l1601 1C79  
                                         l1354 1E94                                           l1507 0A75  
                                         l1363 0792                                           l1355 1EAE  
                                         l4101 1E58                                           l1701 1F46  
                                         l1542 14AB                                           l1366 07E0  
                                         l1528 0AEC                                           l1640 12B4  
                                         l1632 1296                                           l4113 1E75  
                                         l4105 1E64                                           l4009 1CF0  
                                         l1490 09F2                                           l1386 10C2  
                                         l1626 1260                                           l1563 15F0  
                                         l4043 1F68                                           l1564 160A  
                                         l1492 09D5                                           l4213 1470  
                                         l5005 1C23                                           l4061 1F87  
                                         l4109 1E6D                                           l4125 1EC0  
                                         l1566 1619                                           l1486 095F  
                                         l4207 1460                                           l1639 12AA  
                                         l4135 07AC                                           l4071 1FA2  
                                         l1736 0291                                           l4305 1599  
                                         l4233 149E                                           l4217 1474  
                                         l4049 1F73                                           l1737 027E  
                                         l5201 175F                                           l1594 0CFF  
                                         l1762 04FF                                           l4227 148E  
                                         l4219 147D                                           l4163 1085  
                                         l5123 1258                                           l4139 07C6  
                                         l5107 0F6D                                           l5027 1ABD  
                                         l4075 1FAA                                           l4067 1F99  
                                         l4059 1F7B                                           l4091 1E46  
                                         l1747 02CF                                           l4333 1614  
                                         l4309 159C                                           l4253 14DA  
                                         l4237 14A2                                           l4181 10BE  
                                         l5133 1273                                           l5109 0F90  
                                         l1838 090A                                           l4319 15D6  
                                         l4271 1528                                           l4247 14CC  
                                         l4159 107B                                           l5143 12A8  
                                         l5135 1283                                           l4087 1E3F  
                                         l4511 1216                                           l1767 0513  
                                         l5215 17C6                                           l4273 1530  
                                         l4281 150D                                           l4353 0B0D  
                                         l5145 129B                                           l5129 126F  
                                         l5081 0DF7                                           l5057 0D6E  
                                         l4521 123E                                           l5209 179F  
                                         l5225 17D9                                           l1890 0E65  
                                         l1698 1F26                                           l4283 155E  
                                         l4443 0C95                                           l4435 0C67  
                                         l4371 0B30                                           l4355 0B0F  
                                         l4179 10AE                                           l5059 0D7E  
                                         l4099 1E4C                                           l4515 121B  
                                         l5219 17CC                                           l4293 1573  
                                         l4461 0CD5                                           l4437 0C7E  
                                         l4373 0B32                                           l4357 0B17  
                                         l3813 092F                                           l4189 10D1  
                                         l5157 12CF                                           l1893 0F03  
                                         l5093 0E91                                           l5069 0DB0  
                                         l3741 1EF1                                           l5405 0817  
                                         l1886 0E1F                                           ?_pad 0024  
                                         l4279 1559                                           l4447 0C97  
                                         l4383 0B48                                           l4375 0B3A  
                                         l3815 0937                                           l5095 0F13  
                                         l5079 0DE5                                           l4527 100A  
                                         l5191 16FD                                           l5407 0838  
                                         l5511 103D                                           l4297 1564  
                                         l4457 0CC0                                           l3833 0954  
                                         l3809 092C                                           l3737 1ECB  
                                         l4721 0206                                           l4299 1580  
                                         l4467 0CEC                                           l3907 0A12  
                                         l3843 0969                                           l5355 1B3A  
                                         l4563 08ED                                           l4483 1F1C  
                                         l4715 01A0                                           l4707 017F  
                                         l4651 009F                                           l5179 16A9  
                                         l3909 0A14                                           l3917 0A23  
                                         l3837 0957                                           l4557 08C6  
                                         l4493 1F28                                           l4813 0511  
                                         l4725 0235                                           l3943 0A94  
                                         l3935 0A87                                           l3927 0A6D  
                                         l3951 0A9D                                           l3783 1B4D  
                                         l3775 1BEA                                           l4559 08D7  
                                         l4487 1F24                                           l4903 06B3  
                                         l4815 051A                                           l4719 01CE  
                                         l4727 025A                                           l4663 00B8  
                                         l4671 00CB                                           l3961 0AA8  
                                         l3881 09DD                                           l3873 09A5  
                                         l3777 1BF6                                           l4497 1F52  
                                         l4913 0705                                           l4905 06ED  
                                         l4761 02DC                                           l4753 02C9  
                                         l4745 029C                                           l4737 028B  
                                         l4681 00FE                                           l3883 09DF  
                                         l3891 09ED                                           l4595 1D43  
                                         l3787 1B53                                           l4827 0584  
                                         l4771 02F0                                           l4763 02E0  
                                         l4739 0294                                           l4659 00B1  
                                         l3957 0AA6                                           l3949 0A9B  
                                         l5477 1D6F                                           l3983 0AE8  
                                         l4847 05A3                                           l4855 05D7  
                                         l4863 0656                                           l4791 0440  
                                         l4775 02F8                                           l3993 1C73  
                                         l4929 073F                                           l4937 075E  
                                         l4849 05C1                                           l4785 030A  
                                         l4689 0125                                           l3979 0AE4  
                                         l3899 0A00                                           l4891 06AF  
                                         l4875 068D                                           l4867 0674  
                                         l4787 03EE                                           l4699 0158  
                                         l4963 1FF1                                           l4955 1FEA  
                                         l4893 06B7                                           l4797 045F  
                                         l4957 1FC5                                           l4977 1AFC  
                                         STR_1 1820                                           STR_2 1844  
                                         STR_3 184C                                           STR_6 1848  
                                         STR_7 1850                                           _LATA 010C  
                                         _LATB 010D                                           _LATC 010E  
                                         u4015 1EBC                                           u3215 1EEF  
                                         u3405 09E3                                           u4125 10AF  
                                         u3360 09C4                                           u5200 0147  
                                         u4305 1529                                           u3370 09C5  
                                         u4315 1546                                           u3355 09B9  
                                         u4155 10C6                                           u3525 0A88  
                                         u5150 00EC                                           u4095 108F  
                                         u6015 12A2                                           u5160 00ED  
                                         u4345 1568                                           u3705 1C7A  
                                         u3625 0ABF                                           u5305 02AB  
                                         u3730 1BC5                                           u6130 1740  
                                         u4435 15BC                                           u4275 1515  
                                         u3483 0A35                                           u3475 0A18  
                                         u5315 02C5                                           u3740 1BC6  
                                         u6140 1741                                           u4445 15E0  
                                         u4365 1574                                           u4285 151C  
                                         u5190 0146                                           u4455 15FA  
                                         u4615 0C73                                           u6055 12BC  
                                         u4705 0CDF                                           u5610 072F  
                                         u4555 0BBB                                           u3835 1F7E  
                                         u5275 0289                                           u4820 1236  
                                         u5620 0730                                           u4565 0BE8  
                                         u6325 1D78                                           u5525 0664  
                                         u4830 1237                                           u4910 0890  
                                         u4575 0C3A                                           u3855 1F88  
                                         u3935 1E4F                                           u4815 1228  
                                         u5535 0672                                           u6407 1069  
                                         u4585 0C56                                           u6417 1D88  
                                         u3865 1F92                                           u4745 1F32  
                                         u5385 0318                                           u4850 1CB8  
                                         u4595 0C6A                                           u3875 1F9A  
                                         u3955 1E5E                                           u4915 088C  
                                         u4860 1CB9                                           u4685 0CAE  
                                         u5805 0DC2                                           u3965 1E65  
                                         u4765 11EC                                           u4695 0CC9  
                                         u4935 08B5                                           u5825 0DE8  
                                         u4785 1205                                           u4955 08E0  
                                         u5595 06F8                                           u5925 0FA2  
                                         u4885 0862                                           u5935 0FCB  
                                         u5863 0ECF                                           u5855 0E68  
                                         u4975 08F6                                           u4895 087D  
                                         u5875 0F0C                                           u4995 1DC1  
                                         u5975 127C                                           u5995 1290  
                                         _TMR2 001A                                           _TMR4 0415  
                                         _WPUA 020C                                           _WPUB 020D  
                                         _WPUC 020E                                           _dbuf 02A0  
                                         _main 1020                                           _nanf 1B29  
         __size_of_MTOUCH_Button_InitializeAll 001A    TMR4_Wroking_Blink_AlarmLED_isr@counter_tmr4 01B2  
                                         _prec 01AE                                           _nout 01AA  
                                         pad@i 0027                                           pad@p 0025  
                                         fsr0h 0005                                           _tiny 182C  
                                         fsr1h 0007                                           indf0 0000  
                                         fsr0l 0004                                           indf1 0001  
                                         fsr1l 0006                                           pad@w 0029  
                TX_Whole_String@size_of_string 0077           __size_of_MTOUCH_Sensor_InitializeAll 000E  
                                         btemp 007E                                  ___fpclassifyf 11CB  
                                         start 0023                                ___fldiv@new_exp 0064  
                                 _tolower$2518 007C                              ___bmul@multiplier 0073  
                   ??_TMR4_SetInterruptHandler 0072                                __end_of_R_const 1844  
                                        ??_pad 007C                                     _TX_Command 1ABF  
                                _Init_Function 1CCA                                _TX_Whole_String 1D65  
                                ?_EUSART_Write 0070                 __size_of_OSCILLATOR_Initialize 0007  
                          __size_of_IOCAF2_ISR 000D                  __end_of_OSCILLATOR_Initialize 1A8B  
                                ___fltol@sign1 006C                                __end_of___fladd 0AF4  
                                        ?_main 0070                                          ?_nanf 0070  
                              __end_of___fldiv 1620                                __end_of___awdiv 1FAF  
                              __end_of___flneg 1AB4                                          STR_10 1854  
                                        STR_12 1854                                          STR_15 182B  
                              __end_of___awmod 1E7A                                __end_of___flmul 0D0C  
                              __end_of___flsub 1C69                                __end_of___fltol 10E1  
                              ___awdiv@divisor 0070                                          _T2CON 001C  
                                        _T4CON 0417                                          i1l750 000D  
                                        i1l753 0019                                          i1l932 1C41  
                                        i1l758 0021                                ___awdiv@counter 0075  
                   ??_Measure_Temp_PT100_2Wire 007E                                          _RCSTA 019D  
                                 vfpfcnvrt@fmt 006E                                          _TRISA 008C  
                                        _TRISB 008D                                          _TRISC 008E  
                                        _TXREG 019A                                          _TXSTA 019E  
              ??_CalcRequiredDelayForTrigTRIAC 007E               __size_of_ADC_GetConversionResult 0005  
                              _TMR4_Initialize 1B7F                               __end_of_TMR2_ISR 1AD6  
                             __end_of_TMR4_ISR 1AE2                        __end_of_PIN_MANAGER_IOC 1A53  
                                        _flags 01B0                                 ??_Read_ADC_Num 0074  
        __end_of_MTOUCH_Sensor_Scan_Initialize 1A4D         __size_of_MTOUCH_Sensor_Scan_Initialize 0005  
                _MTOUCH_Sensor_Scan_Initialize 1A48                                 _WDT_Initialize 1A35  
                                        _errno 01A8                                          _fputc 1EC2  
                                        _fputs 1CED                                          pad@fp 002B  
                              ??_StartStop_Fan 0070                                          _width 01AC  
                                        _putch 0003                                          _sqrtf 0D0C  
                                        nanf@s 0070                                          nanf@u 0074  
                              __end_of_isupper 1BCD                                          pclath 000A  
                         _Sensor_Sampled_Reset 1A9B                                          status 0003  
                                        wtemp0 007E                                __end_of_sprintf 1DBD  
                               ?___fpclassifyf 0070                                __end_of_tolower 1CCA  
                              _TMR2_StartTimer 1A29                                __end_of_strncmp 2000  
                              __initialization 0025                    TX_Whole_String@input_string 0079  
                                 __end_of_main 1071                                   __end_of_nanf 1B3A  
                                 __end_of_tiny 1830                                 ?_Init_Function 0070  
                      _EUSART_is_tx_ready$1170 0070                                 ??_EUSART_Write 0070  
                      __end_of_TMR2_Initialize 1B19                    ?_INTERRUPT_InterruptManager 0070  
                       ?_Measure_R_PT100_2Wire 00D0             CalcRequiredDelayForTrigTRIAC@delay 00DD  
                               main@Temp_PT100 01D6               __end_of_MTOUCH_Button_Initialize 1DF3  
                     _TMR2_SetInterruptHandler 1A65                                         ??_main 01D4  
                                       ??_nanf 0074                     __end_of_StartStop_AlarmLED 080A  
                      _MTOUCH_Sensor_Calibrate 0002                                     _V_cc_const 1834  
         MTOUCH_Sensor_Sampled_ResetAll@sensor 0072                         __end_of_WDT_Initialize 1A39  
                __size_of_ADC_IsConversionDone 0006                                _Read_PT100_Temp 1156  
                    __size_of_StartStop_Buzzer 0008              _EUSART_DefaultFramingErrorHandler 0000  
                                       _ADCON0 009D                                         _ADCON1 009E  
                   _EUSART_OverrunErrorHandler 0268                                         ?_fputc 0070  
                                       ?_fputs 0078                                         _ADRESH 009C  
                                       _ADRESL 009B                               ___awdiv@dividend 0072  
                                       _ANSELA 018C                                         ?_putch 0070  
                                       _ANSELB 018D                                         _ANSELC 018E  
                                       ?_sqrtf 004E                                         _BORCON 0116  
                                       i1l5329 1AF8                          ?_Sensor_Sampled_Reset 0070  
                   __end_of_EUSART_is_tx_ready 1ABF                                         u623_25 1C3A  
                                       u626_20 1C13                                         _OSCCON 0099  
                                       _SPBRGH 019C                                         _SPBRGL 019B  
                                       _WDTCON 0097              MTOUCH_Button_InitializeAll@button 007B  
                             __end_of___xxtofl 12D8                                         _Buff_g 0240  
                       _Button_DefaultCallback 0000        __end_of_TMR4_Wroking_Blink_AlarmLED_isr 1C16  
     __size_of_TMR4_Wroking_Blink_AlarmLED_isr 0019              ??_TMR4_Wroking_Blink_AlarmLED_isr 0070  
             ?_TMR4_Wroking_Blink_AlarmLED_isr 0070                _TMR4_Wroking_Blink_AlarmLED_isr 1BFD  
                      __end_of_TX_Whole_String 1D91                     __end_of_ChangeADCtoVoltage 1E35  
                       _Sensor_DefaultCallback 0000                                   vfprintf@cfmt 016D  
                                _packet_sample 01BA                                         ___flge 0778  
                                       ___bmul 1B4B                                         ___fleq 1E7A  
                                    ??___fladd 0042                               TX_Command@txData 0071  
                                    ??___fldiv 005A                                      ??___awdiv 0074  
                                    ??___flneg 0074                                      ??___awmod 0074  
                                    ??___flmul 0028                                      ??___flsub 007E  
                                    ??___fltol 00D4                                         _efgtoa 0058  
                                  ?_TX_Command 0070                                         _floorf 0841  
                                       _memcpy 1D3A                        __end_of_TMR4_Initialize 1B91  
                             ___awdiv@quotient 0077                                ___awmod@divisor 0070  
                              ___awmod@counter 0075                                         pad@buf 0024  
                                       _strcpy 1001                                         _strlen 1BE5  
                   __end_of_Zero_Detection_isr 1A2F           __end_of_TMR4_DefaultInterruptHandler 1001  
        __size_of_TMR4_DefaultInterruptHandler 0001                   _TMR4_DefaultInterruptHandler 1000  
                                       fputc@c 0070                                         fputs@c 0020  
                                       fputs@i 0021                                         fputs@s 0023  
                           __size_of__Umul8_16 001F                                ___fpclassifyf@e 0020  
                              ___fpclassifyf@u 0022                                ___fpclassifyf@x 0070  
                              ?_WDT_Initialize 0070                     Read_ADC_Num@convertedValue 0074  
                                    ??_isupper 0072                                         putch@c 0070  
                             __end_of_vfprintf 0841                              _TMR2_Period_const 1830  
                      __end_of_TMR2_StartTimer 1A2C                                         sqrtf@i 00A8  
                                       sqrtf@m 00BC       TMR4_SetInterruptHandler@InterruptHandler 0070  
     TMR2_SetInterruptHandler@InterruptHandler 0070     IOCAF2_SetInterruptHandler@InterruptHandler 0070  
                                       sqrtf@q 00B0                                         sqrtf@r 00C0  
                                       sqrtf@s 00A4                                         sqrtf@t 00B4  
                                       sqrtf@x 004E                                         sqrtf@z 00B8  
                             ?_PIN_MANAGER_IOC 0070                                      ??_sprintf 016F  
                                    ??_tolower 0078                                      ??_strncmp 0074  
                                 ??_IOCAF2_ISR 0070          __end_of_CalcRequiredDelayForTrigTRIAC 137F  
       __size_of_CalcRequiredDelayForTrigTRIAC 00A7                  _CalcRequiredDelayForTrigTRIAC 12D8  
             CalcRequiredDelayForTrigTRIAC@ret 00E1                                     ___flge@ff1 003A  
                                   ___flge@ff2 003E                                ??___fpclassifyf 0074  
                                 ___xxtofl@arg 007A                                   ___xxtofl@exp 0079  
                            _SYSTEM_Initialize 1BCD                                   ___xxtofl@val 0070  
                                   ___fleq@ff1 0070                                     ___fleq@ff2 0074  
                 __end_of_Tolerance_Temp_const 1840                        __end_of__initialization 0054  
                                   ___flneg@f1 0070                 ?_MTOUCH_Sensor_Scan_Initialize 0070  
                           ?_SYSTEM_Initialize 0070                            _Button_StateMachine 01DA  
                                   ___fltol@f1 00D0                  MTOUCH_Sensor_Calibrate@sensor 0070  
                          ___bmul@multiplicand 0070                                ??_Init_Function 007E  
                 __size_of_ADC_StartConversion 0003                                 __pcstackCOMMON 0070  
                                 __pidataBANK3 1B19                                   __pidataBANK4 1B91  
                          ??_SYSTEM_Initialize 007C                                      ?_TMR2_ISR 0070  
                                    ?_TMR4_ISR 0070                           __end_of_Read_ADC_Num 1B4B  
                                __end_of_fputc 1F0E                                  __end_of_fputs 1D12  
             __end_of_MTOUCH_Sensor_Initialize 1B6D                                  __end_of_putch 0004  
                    ??_MTOUCH_Sensor_Calibrate 0070                                  __end_of_sqrtf 1000  
                             ?_TMR2_Initialize 0070                             __end_of_IOCAF2_ISR 1AFB  
                      __end_of_Read_PT100_Temp 11CB                        _ADC_GetConversionResult 1A39  
                               _OPTION_REGbits 0095                      __end_of_TMR2_Period_const 1834  
                ?_TMR4_DefaultInterruptHandler 0070                        StartStop_AlarmLED@OnOff 0070  
                  ?_IOCAF2_SetInterruptHandler 0070                       _MTOUCH_Button_Initialize 1DBD  
             ??_IOCAF2_DefaultInterruptHandler 0070                ?_IOCAF2_DefaultInterruptHandler 0070  
              ??_EUSART_SetOverrunErrorHandler 0072                        _Button_State_NotPressed 0000  
                __size_of_MTOUCH_Sensor_Enable 0012                                        ??_fputc 0073  
                    __end_of_SYSTEM_Initialize 1BE5                              _lowpowerActivated 01BF  
                                      ??_fputs 0079                         ??_Sensor_Sampled_Reset 0070  
                                      ??_putch 0070                                        ??_sqrtf 0052  
                                   __pbssBANK3 01A0                                     __pbssBANK4 0220  
                                   __pbssBANK5 02A0                           __end_of_EUSART_Write 1AAB  
                          __size_of_TX_Command 000B                          _TMR4_InterruptHandler 01EA  
                   __end_of_mtouch_button_init 1820                              __end_of__Umul8_16 1C88  
                             ?_TX_Whole_String 0070                                     __pmaintext 1020  
                                      ?___flge 003A                                        ?___bmul 0070  
                                      ?___fleq 0070                                     ??_TMR2_ISR 0070  
                                   ??_TMR4_ISR 0070                                     __pintentry 0004  
                                      ?_efgtoa 00E4                                        ?_floorf 00D0  
                                      ?_memcpy 0070                                        _BAUDCON 019F  
          __end_of_MTOUCH_Button_InitializeAll 1C30                    _MTOUCH_Button_InitializeAll 1C16  
                             ?_TMR4_Initialize 0070                                        _APFCON0 011D  
                                      _APFCON1 011E            __end_of_MTOUCH_Sensor_InitializeAll 1B09  
                  _MTOUCH_Sensor_InitializeAll 1AFB                        __size_of_ADC_Initialize 0007  
                                      ?_strcpy 0070                                        ?_strlen 0070  
                                    ?___xxtofl 0070                             __size_of_vfpfcnvrt 01E0  
                                      _OSCTUNE 0098                               _StartStop_Buzzer 1A8B  
                      __size_of_TMR2_StopTimer 0003                       ??_EUSART_SetErrorHandler 0072  
                             ?_TMR2_StartTimer 0070                 ?_CalcRequiredDelayForTrigTRIAC 00D9  
                                      _R_const 1840                           _ADC_InterruptHandler 01B8  
                               _packet_counter 01C1                     ??_TMR2_SetInterruptHandler 0072  
                      ??_Measure_R_PT100_2Wire 007E                                __size_of___flge 007B  
                              __size_of___bmul 0011                                __size_of___fleq 0048  
                                      ___fladd 0913                                        ___fldiv 144F  
                                      ___awdiv 1F5E                                        ___flneg 1AAB  
                                      ___awmod 1E35                                        ___flmul 0AF4  
                                      ___flsub 1C4C                                        ___fltol 1071  
               MTOUCH_Button_Initialize@button 0073                                      ?_vfprintf 00ED  
                                ?_TMR2_Int_isr 0070                                __size_of_efgtoa 0720  
                    ??_ADC_GetConversionResult 0072                                __size_of_floorf 00D2  
                              __size_of_memcpy 002B                                        __ptext1 1D91  
                                      __ptext2 080A                                        __ptext3 1620  
                                      __ptext4 1FAF                                        __ptext5 0058  
                                      __ptext6 1CA9                                        __ptext7 1BB6  
                                      __ptext8 1001                                        __ptext9 1F0E  
                         _Tolerance_Temp_const 183C                               ?_Read_PT100_Temp 00E4  
                              __size_of_strcpy 001F                                __size_of_strlen 0018  
                     _MTOUCH_Sensor_Initialize 1B5C                          _OSCILLATOR_Initialize 1A84  
                                    _T2CONbits 001C                                   __size_of_pad 0050  
  CalcRequiredDelayForTrigTRIAC@dim_percentage 00D9                                     ??___xxtofl 0074  
                             ___awmod@dividend 0072                       ??_PIN_MANAGER_Initialize 0072  
            __size_of_TMR4_SetInterruptHandler 0006                                      _IOCAFbits 0393  
                    ?_TMR4_SetInterruptHandler 0070                                        _isupper 1BB6  
                                      efgtoa@c 00E8                                        efgtoa@d 0138  
                                      efgtoa@e 0151                                        efgtoa@f 00E4  
                                    _IOCANbits 0392                                        efgtoa@g 014D  
                                      efgtoa@h 0143                                        efgtoa@i 014B  
                                      efgtoa@l 0147                                        efgtoa@m 0132  
                                      efgtoa@n 0153                                        efgtoa@p 013D  
                                      efgtoa@t 012C                                        efgtoa@u 0155  
                                      efgtoa@w 013F                                      _IOCAPbits 0391  
            MTOUCH_Sensor_InitializeAll@sensor 0079                               _callback_sampled 01E8  
                   __size_of_SYSTEM_Initialize 0018                                        _sprintf 1D91  
                                      _tolower 1CA9                                        clrloop0 1A72  
                                      _strncmp 1FAF                               _callback_pressed 01E2  
               MTOUCH_Sensor_Initialize@sensor 0077                           end_of_initialization 0054  
                                      floorf@e 00DE                                        floorf@m 00DA  
                                      floorf@u 00E0                                        floorf@x 00D0  
               ??_TMR4_DefaultInterruptHandler 0070          __end_of_EUSART_SetOverrunErrorHandler 1A48  
       __size_of_EUSART_SetOverrunErrorHandler 0005                  _EUSART_SetOverrunErrorHandler 1A43  
                           _StartStop_AlarmLED 0800                                        memcpy@d 0079  
                        __end_of_StartStop_Fan 1A9B                                        memcpy@n 0072  
                                      memcpy@s 0075                                        fputc@fp 0072  
                                      init_ram 1A77                                        fputs@fp 0078  
                                      initloop 1A78              __size_of_Measure_Temp_PT100_2Wire 00D0  
                    ?_Measure_Temp_PT100_2Wire 00D0                              _EUSART_Initialize 1C88  
                        __size_of_Read_ADC_Num 0011                   __end_of_ADC_IsConversionDone 1A59  
                          ?_StartStop_AlarmLED 0070                             ?_EUSART_Initialize 0070  
                            __end_of_vfpfcnvrt 1800                                     efgtoa@mode 0142  
                                   efgtoa@sign 013A                                 ??_TMR2_Int_isr 0070  
                           _EUSART_is_tx_ready 1AB4                            _mtouch_request_init 01BD  
              Measure_Temp_PT100_2Wire@R_PT100 00D0                                     ??_vfprintf 016A  
                                 ??_TX_Command 0071                                        sqrtf@ix 00C4  
                             TX_Whole_String@i 007A                                        strcpy@d 0076  
                                      strlen@a 0073                                        strcpy@s 0074  
                                      strlen@s 0074                        Read_PT100_Temp@ADC_volt 0120  
                          ??_EUSART_Initialize 0072                               ??_WDT_Initialize 0070  
                                    _PORTCbits 000E                            ?_EUSART_is_tx_ready 0070  
                                  ___fladd@grs 004D                             _ChangeADCtoVoltage 1DF3  
                         ??_StartStop_AlarmLED 0070                                  ___xxtofl@sign 0078  
                     TMR2_Int_isr@counter_tmr2 01B4                          __size_of_EUSART_Write 0008  
                   MTOUCH_Sensor_Enable@sensor 0075                            _ADC_StartConversion 1A32  
                                  ___fldiv@grs 0066                                    ___fldiv@rem 005F  
                          _callback_notPressed 01E0                __size_of_EUSART_SetErrorHandler 0005  
                          ?_ChangeADCtoVoltage 00D0              __end_of_HalfCycleACDuration_const 183C  
                                 _Read_ADC_Num 1B3A                             _sensor_globalFlags 01C3  
                           _Zero_Detection_isr 1A2C                                    ___flmul@grs 002F  
                    __end_of_EUSART_Initialize 1CA9                             __end_of_TX_Command 1ACA  
                         ??_EUSART_is_tx_ready 0070                                      _TXSTAbits 019E  
                           StartStop_Fan@OnOff 0070                            ?_Zero_Detection_isr 0070  
                         ?_ADC_StartConversion 0070                           ??_ChangeADCtoVoltage 007E  
         __end_of_TMR2_DefaultInterruptHandler 1A29          __size_of_TMR2_DefaultInterruptHandler 0001  
                 _TMR2_DefaultInterruptHandler 1A28                           _Button_State_Pressed 0000  
                               __end_of___flge 07F3                                 __end_of___bmul 1B5C  
                               __end_of___fleq 1EC2                     _EUSART_DefaultErrorHandler 0000  
                                  vfpfcnvrt@ap 006F                                    vfpfcnvrt@ct 0165  
                                  vfpfcnvrt@fp 0169                     ??_MTOUCH_Button_Initialize 0070  
              ??_MTOUCH_Sensor_Scan_Initialize 0070                                 __end_of_efgtoa 0778  
                                 _EUSART_Write 1AA3                              __size_of_TMR2_ISR 000C  
                            __size_of_TMR4_ISR 000C                                 _ADC_Initialize 1A7D  
                               __end_of_floorf 0913                                 __end_of_memcpy 1D65  
                       ?_OSCILLATOR_Initialize 0070                                     floorf@F527 01A0  
                               __end_of_strcpy 1020                                 __end_of_strlen 1BFD  
                          start_initialization 0025                           ??_Zero_Detection_isr 0070  
              __size_of_PIN_MANAGER_Initialize 0028                                    __end_of_pad 1F5E  
                               _TMR2_StopTimer 1A2F                          __end_of___fpclassifyf 1243  
                     __size_of_PIN_MANAGER_IOC 0006         __end_of_IOCAF2_DefaultInterruptHandler 1A28  
      __size_of_IOCAF2_DefaultInterruptHandler 0001                 _IOCAF2_DefaultInterruptHandler 1A27  
                _Measure_Temp_PT100_2Wire$2891 00D8                  _Measure_Temp_PT100_2Wire$2892 00DC  
                _Measure_Temp_PT100_2Wire$2893 00E0                 ?_EUSART_SetOverrunErrorHandler 0070  
                        ??_ADC_StartConversion 0070                             __end_of_V_cc_const 1838  
                 __end_of_MTOUCH_Sensor_Enable 1B7F                                    vfprintf@fmt 00ED  
                   _EUSART_FramingErrorHandler 026A                                       ??___flge 0042  
                                     ??___bmul 0071                                       ??___fleq 0078  
                     __end_of_StartStop_Buzzer 1A93                         _EUSART_SetErrorHandler 1A3E  
                        __end_of_Init_Function 1CED                                       ??_efgtoa 00E9  
                       __end_of_ADC_Initialize 1A84                                      __Umul8_16 1C69  
                                  __pdataBANK3 01DA                                    __pdataBANK4 0254  
                                     ??_floorf 00D4                                       ??_memcpy 0074  
                ?_TMR2_DefaultInterruptHandler 0070                             _mtouch_button_init 1800  
                   Sensor_Sampled_Reset@sensor 0070                                       ??_strcpy 0072  
                                     ??_strlen 0072                                      ___fladd@a 003E  
                                    ___fladd@b 003A                                      ___fldiv@a 00C8  
                                    ___fldiv@b 00CC                         __end_of_TMR2_StopTimer 1A32  
                                    ___flmul@a 0024                                      ___flmul@b 0020  
                                    ___flsub@a 004E                                      ___flsub@b 0052  
                                    ___latbits 0002                                  __pcstackBANK0 0020  
                                __pcstackBANK1 00A0                                  __pcstackBANK2 0120  
                                __pcstackBANK3 01C5                           _ADC_IsConversionDone 1A53  
                     __size_of_TMR2_Initialize 0010                              __size_of___xxtofl 0095  
                         __end_of_TMR2_Int_isr 1C4C                  __size_of_Sensor_Sampled_Reset 0008  
                   __size_of_EUSART_Initialize 0021                      _Button_State_Initializing 0000  
                                    __pnvBANK3 01EA                                      __pnvBANK4 0266  
                                  _efgtoa$2363 0124                                    _efgtoa$2357 0120  
                                  _efgtoa$2358 0122                                    _efgtoa$2367 0126  
                                  _efgtoa$2368 0128                                    _efgtoa$2369 012A  
                       _PIN_MANAGER_Initialize 1D12                       ?_MTOUCH_Sensor_Calibrate 0070  
                            _ADC_SelectChannel 07F3                     ??_MTOUCH_Sensor_Initialize 0076  
                                     ?___fladd 003A               __end_of_TMR4_SetInterruptHandler 1A71  
                                     ?___fldiv 00C8                                       ?___awdiv 0070  
                                     ?___flneg 0070                                       ?___awmod 0070  
                                     ?___flmul 0020                                       ?___flsub 004E  
                                     ?___fltol 00D0                                     ?__Umul8_16 0070  
                              ?_ADC_Initialize 0070                 __size_of_Measure_R_PT100_2Wire 0075  
                           ?_ADC_SelectChannel 0070                  __end_of_Measure_R_PT100_2Wire 1156  
                 ??_INTERRUPT_InterruptManager 0070                       __size_of_TX_Whole_String 002C  
                            __size_of_vfprintf 0037                            ??_ADC_SelectChannel 0070  
                              ?_TMR2_StopTimer 0070                          ?_ADC_IsConversionDone 0070  
             __end_of_Measure_Temp_PT100_2Wire 144F                                       ?_isupper 0070  
                     __size_of_TMR4_Initialize 0012                                       ?_sprintf 01C5  
                                     ?_tolower 0076                                 __size_of_fputc 004C  
                               __size_of_fputs 0025                                       ?_strncmp 0070  
                               __size_of_putch 0001                                 __size_of_sqrtf 02F4  
       EUSART_SetErrorHandler@interruptHandler 0070                                       _LATCbits 010E  
                           _currentScannSensor 01C2                                      clear_ram0 1A71  
                                     _PIE1bits 0091                                       _PIE3bits 0093  
                            _eusartRxLastError 01BC                       __size_of_TMR2_StartTimer 0003  
                    __end_of_ADC_SelectChannel 0800            __size_of_INTERRUPT_InterruptManager 001F  
                                     _PIR1bits 0011                ??_EUSART_SetFramingErrorHandler 0072  
                                     _PIR3bits 0013         __end_of_MTOUCH_Sensor_Sampled_ResetAll 1BB6  
      __size_of_MTOUCH_Sensor_Sampled_ResetAll 0013                 _MTOUCH_Sensor_Sampled_ResetAll 1BA3  
                       Read_PT100_Temp@ADC_num 012C              _EUSART_DefaultOverrunErrorHandler 0000  
                                     _TMR2_ISR 1ACA                                       _TMR4_ISR 1AD6  
                            ??_PIN_MANAGER_IOC 0070                             _mtouch_time_toScan 01BE  
                                    _vfpfcnvrt 1620                                     _ADCON0bits 009D  
                     ADC_SelectChannel@channel 0071                 ??_TMR2_DefaultInterruptHandler 0070  
            __size_of_TMR2_SetInterruptHandler 0006                      ?_TMR2_SetInterruptHandler 0070  
                       Read_PT100_Temp@R_PT100 0124                           _MTOUCH_Sensor_Enable 1B6D  
                                   vfpfcnvrt@c 0168                                     vfpfcnvrt@f 0161  
                     __size_of_Read_PT100_Temp 0075                              ??_TMR2_Initialize 0072  
                        StartStop_Buzzer@OnOff 0070                              _MTOUCH_Initialize 1AE2  
              __end_of_MTOUCH_Sensor_Calibrate 0003                   ChangeADCtoVoltage@ADC_number 00D0  
                           ?_MTOUCH_Initialize 0070                                      memcpy@tmp 0077  
                                   vfprintf@ap 00EF                                     vfprintf@fp 016C  
                     ?_ADC_GetConversionResult 0070                                   _sample_delay 01C0  
                    _HalfCycleACDuration_const 1838                        ??_OSCILLATOR_Initialize 0070  
                                  ??__Umul8_16 0072                            _EUSART_ErrorHandler 0266  
                             __size_of___fladd 01E1                            ??_MTOUCH_Initialize 007C  
                             __size_of___fldiv 01D1                               __size_of___awdiv 0051  
                             __size_of___flneg 0009                               __size_of___awmod 0045  
                             __size_of___flmul 0218                               __size_of___flsub 001D  
                             __size_of___fltol 0070                                     ?_vfpfcnvrt 006E  
                     _TMR4_SetInterruptHandler 1A6B                         __size_of_StartStop_Fan 0008  
                           ___fpclassifyf@F465 01A4                         ??_ADC_IsConversionDone 0070  
                                   sprintf@fmt 01C5                        _IOCAF2_InterruptHandler 01EE  
                                     ___xxtofl 1243                          __size_of_TMR2_Int_isr 001C  
                Measure_R_PT100_2Wire@ADC_volt 00D0                                   _Sensor_scanA 01E6  
                                 _Sensor_scanB 01E4                    __size_of_StartStop_AlarmLED 000A  
                        ?_MTOUCH_Sensor_Enable 0070                              ??_TX_Whole_String 0075  
                 ??_IOCAF2_SetInterruptHandler 0072                                       __ptext10 1CED  
                                     __ptext11 1EC2                                       __ptext20 1BE5  
                                     __ptext12 0003                                       __ptext21 1ABF  
                                     __ptext13 0841                                       __ptext30 1D12  
                                     __ptext22 1AB4                                       __ptext14 11CB  
                                     __ptext31 1A5F                                       __ptext23 1AA3  
                                     __ptext15 1AAB                                       __ptext40 1B4B  
                                     __ptext32 1A84                                       __ptext24 1BCD  
                                     __ptext16 1E7A                                       __ptext41 1C16  
                                     __ptext33 1AE2                                       __ptext25 1A35  
                                     __ptext17 1E35                                       __ptext50 1156  
                                     __ptext42 1D3A                                       __ptext34 1A48  
                                     __ptext26 1B7F                                       __ptext18 1F5E  
                                     __ptext51 1B3A                                       __ptext43 1DBD  
                                     __ptext35 1BA3                                       __ptext27 1A6B  
                                     __ptext19 1D65                                       __ptext60 1243  
                                     __ptext52 1A53                                       __ptext44 0002  
                                     __ptext36 1AFB                                       __ptext28 1B09  
                                     __ptext61 1A32                                       __ptext53 1A39  
                                     __ptext45 1C88                                       __ptext37 1B5C  
                                     __ptext29 1A65                                       __ptext70 0AF4  
                                     __ptext62 1CCA                                       __ptext54 137F  
                                     __ptext46 1A43                                       __ptext38 1A9B  
                                     __ptext71 1C69                                       __ptext63 1A93  
                                     __ptext55 0D0C                                       __ptext47 1A59  
                                     __ptext39 1B6D                                       __ptext80 1C30  
                                     __ptext72 144F                                       __ptext64 1A8B  
                                     __ptext56 1B29                                       __ptext48 1A3E  
                                     __ptext81 1A2F                                       __ptext73 07F3  
                                     __ptext65 0800                                       __ptext57 0778  
                                     __ptext49 1A7D                                       __ptext82 1A4D  
                                     __ptext66 12D8                                       __ptext58 10E1  
                                     __ptext83 1AEE                                       __ptext75 1AD6  
                                     __ptext67 1071                                       __ptext59 1DF3  
                                     __ptext84 1A27                                       __ptext76 1000  
                                     __ptext68 1C4C                                       __ptext85 1A2C  
                                     __ptext77 1BFD                                       __ptext69 0913  
                                     __ptext86 1A29                                       __ptext78 1ACA  
                                     __ptext79 1A28                               __size_of_isupper 0017  
                                   _IOCAF2_ISR 1AEE                               __size_of_sprintf 002C  
                             __size_of_tolower 0021                       _Measure_Temp_PT100_2Wire 137F  
                    __end_of_MTOUCH_Initialize 1AEE                                     strcpy@dest 0077  
                             __size_of_strncmp 0051                              ??_TMR4_Initialize 0072  
                                __size_of_main 0051                                  __size_of_nanf 0011  
                  __size_of_EUSART_is_tx_ready 000B                        ?_EUSART_SetErrorHandler 0070  
                   __size_of_ADC_SelectChannel 000D                                       efgtoa@fp 013C  
                                     efgtoa@ne 0130                                       efgtoa@pp 012E  
                                     efgtoa@ou 0134  EUSART_SetOverrunErrorHandler@interruptHandler 0070  
                                     int$flags 007E                              ?_StartStop_Buzzer 0070  
                  __size_of_ChangeADCtoVoltage 0042                                       _vfprintf 080A  
                            ??_TMR2_StartTimer 0070             __end_of_INTERRUPT_InterruptManager 0023  
                   _INTERRUPT_InterruptManager 0004                                   _TMR2_Int_isr 1C30  
        __end_of_EUSART_SetFramingErrorHandler 1A5F         __size_of_EUSART_SetFramingErrorHandler 0006  
                _EUSART_SetFramingErrorHandler 1A59                             ??_StartStop_Buzzer 0070  
          __size_of_IOCAF2_SetInterruptHandler 0006                   ?_MTOUCH_Button_InitializeAll 0070  
                 ?_MTOUCH_Sensor_InitializeAll 0070                      Read_PT100_Temp@Temp_PT100 0128  
                               _vfpfcnvrt$2386 015F                                  _mtouch_button 0220  
                                   _INTCONbits 000B                                  _mtouch_sensor 0254  
                                     memcpy@d1 0078                                       memcpy@s1 0070  
                  __size_of_Zero_Detection_isr 0003                                 __pstringtext10 1848  
                               __pstringtext11 184C                                 __pstringtext12 1850  
                               __pstringtext13 1854                                 __pstringtext14 0000  
                      __size_of_WDT_Initialize 0004                   MTOUCH_Button_Initialize@name 0072  
            __size_of_MTOUCH_Button_Initialize 0036                                       intlevel1 0000  
                    ?_MTOUCH_Button_Initialize 0070                                      sprintf@ap 01CE  
                  __end_of_ADC_StartConversion 1A35                        ?_PIN_MANAGER_Initialize 0070  
                                _StartStop_Fan 1A93                __end_of_ADC_GetConversionResult 1A3E  
               __end_of_EUSART_SetErrorHandler 1A43                                      strcpy@src 0070  
                            ??_Read_PT100_Temp 007E                              MTOUCH_Random@seed 01C4  
                                     isupper@c 0070                                      strncmp@_l 0075  
                                    strncmp@_r 0070                               ??_ADC_Initialize 0070  
                                  efgtoa@nmode 0141  EUSART_SetFramingErrorHandler@interruptHandler 0070  
                 Measure_R_PT100_2Wire@R_PT100 006C                   __end_of_Sensor_Sampled_Reset 1AA3  
                                  ??_vfpfcnvrt 0159                               ??_TMR2_StopTimer 0070  
                                __pstringtext1 182C                                  __pstringtext2 1830  
                                __pstringtext3 1834                                  __pstringtext4 1800  
                                __pstringtext5 1838                                  __pstringtext6 183C  
                                __pstringtext7 1840                                  __pstringtext8 1820  
                                __pstringtext9 1844                         __Umul8_16@multiplicand 0070  
                                     sprintf@f 01CF                                       tolower@c 0076  
                                     sprintf@s 01CD                         __size_of___fpclassifyf 0078  
                ??_MTOUCH_Button_InitializeAll 007A                  ??_MTOUCH_Sensor_InitializeAll 0078  
             __size_of_MTOUCH_Sensor_Calibrate 0001                         ??_MTOUCH_Sensor_Enable 0074  
                                     strncmp@l 0078                                       strncmp@n 0072  
                                     strncmp@r 0076                                  ___fladd@signs 004A  
                                  ?_IOCAF2_ISR 0070                             EUSART_Write@txData 0070  
                   __size_of_MTOUCH_Initialize 000C             Measure_Temp_PT100_2Wire@Temp_PT100 00D4  
                       __size_of_Init_Function 0023                 __end_of_PIN_MANAGER_Initialize 1D3A  
                        sqrtf@__xc8_float_word 00AC                                 ?_StartStop_Fan 0070  
                                 ___fladd@aexp 004B                                   ___fladd@bexp 004C  
                              _PIN_MANAGER_IOC 1A4D                           __Umul8_16@multiplier 0078  
                        _TMR2_InterruptHandler 01EC                              __Umul8_16@product 0074  
