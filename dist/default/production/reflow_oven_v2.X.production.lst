

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Wed Jul 19 20:07:24 2023

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og9 
     1                           	processor	16F1829
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK3,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK4,global,class=CODE,delta=2,noexec
     6                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     7                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     8                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
     9                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
    10                           	psect	stringtext5,global,class=STRCODE,delta=2,noexec
    11                           	psect	stringtext6,global,class=STRCODE,delta=2,noexec
    12                           	psect	stringtext7,global,class=STRCODE,delta=2,noexec
    13                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1,noexec
    14                           	psect	nvBANK4,global,class=BANK4,space=1,delta=1,noexec
    15                           	psect	stringtext8,global,class=STRCODE,delta=2,noexec
    16                           	psect	stringtext9,global,class=STRCODE,delta=2,noexec
    17                           	psect	stringtext10,global,class=STRCODE,delta=2,noexec
    18                           	psect	stringtext11,global,class=STRCODE,delta=2,noexec
    19                           	psect	stringtext12,global,class=STRCODE,delta=2,noexec
    20                           	psect	stringtext13,global,class=STRCODE,delta=2,noexec
    21                           	psect	stringtext14,global,class=STRCODE,delta=2,noexec
    22                           	psect	cinit,global,class=CODE,merge=1,delta=2
    23                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    24                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,noexec
    25                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,noexec
    26                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1,noexec
    27                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1,noexec
    28                           	psect	inittext,global,class=CODE,delta=2
    29                           	psect	clrtext,global,class=CODE,delta=2
    30                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    31                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    32                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    33                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    34                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    35                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    36                           	psect	text1,local,class=CODE,merge=1,delta=2,group=3
    37                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text4,local,class=CODE,merge=1,delta=2,group=3
    40                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	text6,local,class=CODE,merge=1,delta=2,group=3
    42                           	psect	text7,local,class=CODE,merge=1,delta=2,group=3
    43                           	psect	text8,local,class=CODE,merge=1,delta=2,group=3
    44                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text10,local,class=CODE,merge=1,delta=2,group=3
    46                           	psect	text11,local,class=CODE,merge=1,delta=2,group=3
    47                           	psect	text12,local,class=CODE,merge=1,delta=2,group=3
    48                           	psect	text13,local,class=CODE,merge=1,delta=2,group=3
    49                           	psect	text14,local,class=CODE,merge=1,delta=2,group=3
    50                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    51                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    52                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    53                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text20,local,class=CODE,merge=1,delta=2,group=3
    56                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text22,local,class=CODE,merge=1,delta=2
    58                           	psect	text23,local,class=CODE,merge=1,delta=2
    59                           	psect	text24,local,class=CODE,merge=1,delta=2
    60                           	psect	text25,local,class=CODE,merge=1,delta=2
    61                           	psect	text26,local,class=CODE,merge=1,delta=2
    62                           	psect	text27,local,class=CODE,merge=1,delta=2
    63                           	psect	text28,local,class=CODE,merge=1,delta=2
    64                           	psect	text29,local,class=CODE,merge=1,delta=2
    65                           	psect	text30,local,class=CODE,merge=1,delta=2
    66                           	psect	text31,local,class=CODE,merge=1,delta=2
    67                           	psect	text32,local,class=CODE,merge=1,delta=2
    68                           	psect	text33,local,class=CODE,merge=1,delta=2
    69                           	psect	text34,local,class=CODE,merge=1,delta=2
    70                           	psect	text35,local,class=CODE,merge=1,delta=2
    71                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text37,local,class=CODE,merge=1,delta=2
    73                           	psect	text38,local,class=CODE,merge=1,delta=2,group=2
    74                           	psect	text39,local,class=CODE,merge=1,delta=2
    75                           	psect	text40,local,class=CODE,merge=1,delta=2,group=3
    76                           	psect	text41,local,class=CODE,merge=1,delta=2
    77                           	psect	text42,local,class=CODE,merge=1,delta=2
    78                           	psect	text43,local,class=CODE,merge=1,delta=2
    79                           	psect	text44,local,class=CODE,merge=1,delta=2
    80                           	psect	text45,local,class=CODE,merge=1,delta=2
    81                           	psect	text46,local,class=CODE,merge=1,delta=2
    82                           	psect	text47,local,class=CODE,merge=1,delta=2
    83                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text49,local,class=CODE,merge=1,delta=2
    85                           	psect	text50,local,class=CODE,merge=1,delta=2
    86                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    87                           	psect	text52,local,class=CODE,merge=1,delta=2,group=3
    88                           	psect	text53,local,class=CODE,merge=1,delta=2,group=3
    89                           	psect	text54,local,class=CODE,merge=1,delta=2,group=2
    90                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    93                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    95                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    96                           	psect	text61,local,class=CODE,merge=1,delta=2,group=2
    97                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    98                           	psect	text63,local,class=CODE,merge=1,delta=2,group=2
    99                           	psect	text64,local,class=CODE,merge=1,delta=2,group=2
   100                           	psect	text65,local,class=CODE,merge=1,delta=2,group=2
   101                           	psect	text66,local,class=CODE,merge=1,delta=2,group=2
   102                           	psect	text67,local,class=CODE,merge=1,delta=2,group=2
   103                           	psect	text68,local,class=CODE,merge=1,delta=2,group=2
   104                           	psect	text69,local,class=CODE,merge=1,delta=2
   105                           	psect	text70,local,class=CODE,merge=1,delta=2
   106                           	psect	intentry,global,class=CODE,delta=2
   107                           	psect	text72,local,class=CODE,merge=1,delta=2
   108                           	psect	text73,local,class=CODE,merge=1,delta=2
   109                           	psect	text74,local,class=CODE,merge=1,delta=2
   110                           	psect	text75,local,class=CODE,merge=1,delta=2
   111                           	psect	text76,local,class=CODE,merge=1,delta=2
   112                           	psect	text77,local,class=CODE,merge=1,delta=2
   113                           	psect	text78,local,class=CODE,merge=1,delta=2
   114                           	psect	text79,local,class=CODE,merge=1,delta=2
   115                           	psect	text80,local,class=CODE,merge=1,delta=2
   116                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
   117                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
   118                           	dabs	1,0x7E,2
   119  0000                     
   120                           ; Version 2.40
   121                           ; Generated 17/11/2021 GMT
   122                           ; 
   123                           ; Copyright © 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
   124                           ; All rights reserved.
   125                           ; 
   126                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   127                           ; 
   128                           ; Redistribution and use in source and binary forms, with or without modification, are
   129                           ; permitted provided that the following conditions are met:
   130                           ; 
   131                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   132                           ;        conditions and the following disclaimer.
   133                           ; 
   134                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   135                           ;        of conditions and the following disclaimer in the documentation and/or other
   136                           ;        materials provided with the distribution. Publication is not required when
   137                           ;        this file is used in an embedded application.
   138                           ; 
   139                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   140                           ;        software without specific prior written permission.
   141                           ; 
   142                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   143                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   144                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   145                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   146                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   147                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   148                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   149                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   150                           ; 
   151                           ; 
   152                           ; Code-generator required, PIC16F1829 Definitions
   153                           ; 
   154                           ; SFR Addresses
   155  0000                     	;# 
   156  0001                     	;# 
   157  0002                     	;# 
   158  0003                     	;# 
   159  0004                     	;# 
   160  0005                     	;# 
   161  0006                     	;# 
   162  0007                     	;# 
   163  0008                     	;# 
   164  0009                     	;# 
   165  000A                     	;# 
   166  000B                     	;# 
   167  000C                     	;# 
   168  000D                     	;# 
   169  000E                     	;# 
   170  0011                     	;# 
   171  0012                     	;# 
   172  0013                     	;# 
   173  0014                     	;# 
   174  0015                     	;# 
   175  0016                     	;# 
   176  0016                     	;# 
   177  0017                     	;# 
   178  0018                     	;# 
   179  0019                     	;# 
   180  001A                     	;# 
   181  001B                     	;# 
   182  001C                     	;# 
   183  001E                     	;# 
   184  001F                     	;# 
   185  008C                     	;# 
   186  008D                     	;# 
   187  008E                     	;# 
   188  0091                     	;# 
   189  0092                     	;# 
   190  0093                     	;# 
   191  0094                     	;# 
   192  0095                     	;# 
   193  0096                     	;# 
   194  0097                     	;# 
   195  0098                     	;# 
   196  0099                     	;# 
   197  009A                     	;# 
   198  009B                     	;# 
   199  009B                     	;# 
   200  009C                     	;# 
   201  009D                     	;# 
   202  009E                     	;# 
   203  010C                     	;# 
   204  010D                     	;# 
   205  010E                     	;# 
   206  0111                     	;# 
   207  0112                     	;# 
   208  0113                     	;# 
   209  0114                     	;# 
   210  0115                     	;# 
   211  0116                     	;# 
   212  0117                     	;# 
   213  0118                     	;# 
   214  0119                     	;# 
   215  011A                     	;# 
   216  011B                     	;# 
   217  011D                     	;# 
   218  011E                     	;# 
   219  018C                     	;# 
   220  018D                     	;# 
   221  018E                     	;# 
   222  0191                     	;# 
   223  0191                     	;# 
   224  0192                     	;# 
   225  0193                     	;# 
   226  0193                     	;# 
   227  0193                     	;# 
   228  0194                     	;# 
   229  0195                     	;# 
   230  0196                     	;# 
   231  0199                     	;# 
   232  019A                     	;# 
   233  019B                     	;# 
   234  019B                     	;# 
   235  019C                     	;# 
   236  019D                     	;# 
   237  019E                     	;# 
   238  019F                     	;# 
   239  020C                     	;# 
   240  020D                     	;# 
   241  020E                     	;# 
   242  0211                     	;# 
   243  0211                     	;# 
   244  0212                     	;# 
   245  0212                     	;# 
   246  0213                     	;# 
   247  0213                     	;# 
   248  0214                     	;# 
   249  0214                     	;# 
   250  0215                     	;# 
   251  0215                     	;# 
   252  0215                     	;# 
   253  0216                     	;# 
   254  0216                     	;# 
   255  0217                     	;# 
   256  0217                     	;# 
   257  0219                     	;# 
   258  021A                     	;# 
   259  021B                     	;# 
   260  021C                     	;# 
   261  021D                     	;# 
   262  021E                     	;# 
   263  021F                     	;# 
   264  0291                     	;# 
   265  0291                     	;# 
   266  0292                     	;# 
   267  0293                     	;# 
   268  0294                     	;# 
   269  0295                     	;# 
   270  0295                     	;# 
   271  0296                     	;# 
   272  0298                     	;# 
   273  0298                     	;# 
   274  0299                     	;# 
   275  029A                     	;# 
   276  029B                     	;# 
   277  029C                     	;# 
   278  029D                     	;# 
   279  029E                     	;# 
   280  0311                     	;# 
   281  0311                     	;# 
   282  0312                     	;# 
   283  0313                     	;# 
   284  0318                     	;# 
   285  0318                     	;# 
   286  0319                     	;# 
   287  031A                     	;# 
   288  038C                     	;# 
   289  038D                     	;# 
   290  038E                     	;# 
   291  0391                     	;# 
   292  0392                     	;# 
   293  0393                     	;# 
   294  0394                     	;# 
   295  0395                     	;# 
   296  0396                     	;# 
   297  039A                     	;# 
   298  039C                     	;# 
   299  039D                     	;# 
   300  039E                     	;# 
   301  039F                     	;# 
   302  0415                     	;# 
   303  0416                     	;# 
   304  0417                     	;# 
   305  041C                     	;# 
   306  041D                     	;# 
   307  041E                     	;# 
   308  0FE4                     	;# 
   309  0FE5                     	;# 
   310  0FE6                     	;# 
   311  0FE7                     	;# 
   312  0FE8                     	;# 
   313  0FE9                     	;# 
   314  0FEA                     	;# 
   315  0FEB                     	;# 
   316  0FED                     	;# 
   317  0FEE                     	;# 
   318  0FEF                     	;# 
   319  0000                     	;# 
   320  0001                     	;# 
   321  0002                     	;# 
   322  0003                     	;# 
   323  0004                     	;# 
   324  0005                     	;# 
   325  0006                     	;# 
   326  0007                     	;# 
   327  0008                     	;# 
   328  0009                     	;# 
   329  000A                     	;# 
   330  000B                     	;# 
   331  000C                     	;# 
   332  000D                     	;# 
   333  000E                     	;# 
   334  0011                     	;# 
   335  0012                     	;# 
   336  0013                     	;# 
   337  0014                     	;# 
   338  0015                     	;# 
   339  0016                     	;# 
   340  0016                     	;# 
   341  0017                     	;# 
   342  0018                     	;# 
   343  0019                     	;# 
   344  001A                     	;# 
   345  001B                     	;# 
   346  001C                     	;# 
   347  001E                     	;# 
   348  001F                     	;# 
   349  008C                     	;# 
   350  008D                     	;# 
   351  008E                     	;# 
   352  0091                     	;# 
   353  0092                     	;# 
   354  0093                     	;# 
   355  0094                     	;# 
   356  0095                     	;# 
   357  0096                     	;# 
   358  0097                     	;# 
   359  0098                     	;# 
   360  0099                     	;# 
   361  009A                     	;# 
   362  009B                     	;# 
   363  009B                     	;# 
   364  009C                     	;# 
   365  009D                     	;# 
   366  009E                     	;# 
   367  010C                     	;# 
   368  010D                     	;# 
   369  010E                     	;# 
   370  0111                     	;# 
   371  0112                     	;# 
   372  0113                     	;# 
   373  0114                     	;# 
   374  0115                     	;# 
   375  0116                     	;# 
   376  0117                     	;# 
   377  0118                     	;# 
   378  0119                     	;# 
   379  011A                     	;# 
   380  011B                     	;# 
   381  011D                     	;# 
   382  011E                     	;# 
   383  018C                     	;# 
   384  018D                     	;# 
   385  018E                     	;# 
   386  0191                     	;# 
   387  0191                     	;# 
   388  0192                     	;# 
   389  0193                     	;# 
   390  0193                     	;# 
   391  0193                     	;# 
   392  0194                     	;# 
   393  0195                     	;# 
   394  0196                     	;# 
   395  0199                     	;# 
   396  019A                     	;# 
   397  019B                     	;# 
   398  019B                     	;# 
   399  019C                     	;# 
   400  019D                     	;# 
   401  019E                     	;# 
   402  019F                     	;# 
   403  020C                     	;# 
   404  020D                     	;# 
   405  020E                     	;# 
   406  0211                     	;# 
   407  0211                     	;# 
   408  0212                     	;# 
   409  0212                     	;# 
   410  0213                     	;# 
   411  0213                     	;# 
   412  0214                     	;# 
   413  0214                     	;# 
   414  0215                     	;# 
   415  0215                     	;# 
   416  0215                     	;# 
   417  0216                     	;# 
   418  0216                     	;# 
   419  0217                     	;# 
   420  0217                     	;# 
   421  0219                     	;# 
   422  021A                     	;# 
   423  021B                     	;# 
   424  021C                     	;# 
   425  021D                     	;# 
   426  021E                     	;# 
   427  021F                     	;# 
   428  0291                     	;# 
   429  0291                     	;# 
   430  0292                     	;# 
   431  0293                     	;# 
   432  0294                     	;# 
   433  0295                     	;# 
   434  0295                     	;# 
   435  0296                     	;# 
   436  0298                     	;# 
   437  0298                     	;# 
   438  0299                     	;# 
   439  029A                     	;# 
   440  029B                     	;# 
   441  029C                     	;# 
   442  029D                     	;# 
   443  029E                     	;# 
   444  0311                     	;# 
   445  0311                     	;# 
   446  0312                     	;# 
   447  0313                     	;# 
   448  0318                     	;# 
   449  0318                     	;# 
   450  0319                     	;# 
   451  031A                     	;# 
   452  038C                     	;# 
   453  038D                     	;# 
   454  038E                     	;# 
   455  0391                     	;# 
   456  0392                     	;# 
   457  0393                     	;# 
   458  0394                     	;# 
   459  0395                     	;# 
   460  0396                     	;# 
   461  039A                     	;# 
   462  039C                     	;# 
   463  039D                     	;# 
   464  039E                     	;# 
   465  039F                     	;# 
   466  0415                     	;# 
   467  0416                     	;# 
   468  0417                     	;# 
   469  041C                     	;# 
   470  041D                     	;# 
   471  041E                     	;# 
   472  0FE4                     	;# 
   473  0FE5                     	;# 
   474  0FE6                     	;# 
   475  0FE7                     	;# 
   476  0FE8                     	;# 
   477  0FE9                     	;# 
   478  0FEA                     	;# 
   479  0FEB                     	;# 
   480  0FED                     	;# 
   481  0FEE                     	;# 
   482  0FEF                     	;# 
   483  0000                     	;# 
   484  0001                     	;# 
   485  0002                     	;# 
   486  0003                     	;# 
   487  0004                     	;# 
   488  0005                     	;# 
   489  0006                     	;# 
   490  0007                     	;# 
   491  0008                     	;# 
   492  0009                     	;# 
   493  000A                     	;# 
   494  000B                     	;# 
   495  000C                     	;# 
   496  000D                     	;# 
   497  000E                     	;# 
   498  0011                     	;# 
   499  0012                     	;# 
   500  0013                     	;# 
   501  0014                     	;# 
   502  0015                     	;# 
   503  0016                     	;# 
   504  0016                     	;# 
   505  0017                     	;# 
   506  0018                     	;# 
   507  0019                     	;# 
   508  001A                     	;# 
   509  001B                     	;# 
   510  001C                     	;# 
   511  001E                     	;# 
   512  001F                     	;# 
   513  008C                     	;# 
   514  008D                     	;# 
   515  008E                     	;# 
   516  0091                     	;# 
   517  0092                     	;# 
   518  0093                     	;# 
   519  0094                     	;# 
   520  0095                     	;# 
   521  0096                     	;# 
   522  0097                     	;# 
   523  0098                     	;# 
   524  0099                     	;# 
   525  009A                     	;# 
   526  009B                     	;# 
   527  009B                     	;# 
   528  009C                     	;# 
   529  009D                     	;# 
   530  009E                     	;# 
   531  010C                     	;# 
   532  010D                     	;# 
   533  010E                     	;# 
   534  0111                     	;# 
   535  0112                     	;# 
   536  0113                     	;# 
   537  0114                     	;# 
   538  0115                     	;# 
   539  0116                     	;# 
   540  0117                     	;# 
   541  0118                     	;# 
   542  0119                     	;# 
   543  011A                     	;# 
   544  011B                     	;# 
   545  011D                     	;# 
   546  011E                     	;# 
   547  018C                     	;# 
   548  018D                     	;# 
   549  018E                     	;# 
   550  0191                     	;# 
   551  0191                     	;# 
   552  0192                     	;# 
   553  0193                     	;# 
   554  0193                     	;# 
   555  0193                     	;# 
   556  0194                     	;# 
   557  0195                     	;# 
   558  0196                     	;# 
   559  0199                     	;# 
   560  019A                     	;# 
   561  019B                     	;# 
   562  019B                     	;# 
   563  019C                     	;# 
   564  019D                     	;# 
   565  019E                     	;# 
   566  019F                     	;# 
   567  020C                     	;# 
   568  020D                     	;# 
   569  020E                     	;# 
   570  0211                     	;# 
   571  0211                     	;# 
   572  0212                     	;# 
   573  0212                     	;# 
   574  0213                     	;# 
   575  0213                     	;# 
   576  0214                     	;# 
   577  0214                     	;# 
   578  0215                     	;# 
   579  0215                     	;# 
   580  0215                     	;# 
   581  0216                     	;# 
   582  0216                     	;# 
   583  0217                     	;# 
   584  0217                     	;# 
   585  0219                     	;# 
   586  021A                     	;# 
   587  021B                     	;# 
   588  021C                     	;# 
   589  021D                     	;# 
   590  021E                     	;# 
   591  021F                     	;# 
   592  0291                     	;# 
   593  0291                     	;# 
   594  0292                     	;# 
   595  0293                     	;# 
   596  0294                     	;# 
   597  0295                     	;# 
   598  0295                     	;# 
   599  0296                     	;# 
   600  0298                     	;# 
   601  0298                     	;# 
   602  0299                     	;# 
   603  029A                     	;# 
   604  029B                     	;# 
   605  029C                     	;# 
   606  029D                     	;# 
   607  029E                     	;# 
   608  0311                     	;# 
   609  0311                     	;# 
   610  0312                     	;# 
   611  0313                     	;# 
   612  0318                     	;# 
   613  0318                     	;# 
   614  0319                     	;# 
   615  031A                     	;# 
   616  038C                     	;# 
   617  038D                     	;# 
   618  038E                     	;# 
   619  0391                     	;# 
   620  0392                     	;# 
   621  0393                     	;# 
   622  0394                     	;# 
   623  0395                     	;# 
   624  0396                     	;# 
   625  039A                     	;# 
   626  039C                     	;# 
   627  039D                     	;# 
   628  039E                     	;# 
   629  039F                     	;# 
   630  0415                     	;# 
   631  0416                     	;# 
   632  0417                     	;# 
   633  041C                     	;# 
   634  041D                     	;# 
   635  041E                     	;# 
   636  0FE4                     	;# 
   637  0FE5                     	;# 
   638  0FE6                     	;# 
   639  0FE7                     	;# 
   640  0FE8                     	;# 
   641  0FE9                     	;# 
   642  0FEA                     	;# 
   643  0FEB                     	;# 
   644  0FED                     	;# 
   645  0FEE                     	;# 
   646  0FEF                     	;# 
   647  0000                     	;# 
   648  0001                     	;# 
   649  0002                     	;# 
   650  0003                     	;# 
   651  0004                     	;# 
   652  0005                     	;# 
   653  0006                     	;# 
   654  0007                     	;# 
   655  0008                     	;# 
   656  0009                     	;# 
   657  000A                     	;# 
   658  000B                     	;# 
   659  000C                     	;# 
   660  000D                     	;# 
   661  000E                     	;# 
   662  0011                     	;# 
   663  0012                     	;# 
   664  0013                     	;# 
   665  0014                     	;# 
   666  0015                     	;# 
   667  0016                     	;# 
   668  0016                     	;# 
   669  0017                     	;# 
   670  0018                     	;# 
   671  0019                     	;# 
   672  001A                     	;# 
   673  001B                     	;# 
   674  001C                     	;# 
   675  001E                     	;# 
   676  001F                     	;# 
   677  008C                     	;# 
   678  008D                     	;# 
   679  008E                     	;# 
   680  0091                     	;# 
   681  0092                     	;# 
   682  0093                     	;# 
   683  0094                     	;# 
   684  0095                     	;# 
   685  0096                     	;# 
   686  0097                     	;# 
   687  0098                     	;# 
   688  0099                     	;# 
   689  009A                     	;# 
   690  009B                     	;# 
   691  009B                     	;# 
   692  009C                     	;# 
   693  009D                     	;# 
   694  009E                     	;# 
   695  010C                     	;# 
   696  010D                     	;# 
   697  010E                     	;# 
   698  0111                     	;# 
   699  0112                     	;# 
   700  0113                     	;# 
   701  0114                     	;# 
   702  0115                     	;# 
   703  0116                     	;# 
   704  0117                     	;# 
   705  0118                     	;# 
   706  0119                     	;# 
   707  011A                     	;# 
   708  011B                     	;# 
   709  011D                     	;# 
   710  011E                     	;# 
   711  018C                     	;# 
   712  018D                     	;# 
   713  018E                     	;# 
   714  0191                     	;# 
   715  0191                     	;# 
   716  0192                     	;# 
   717  0193                     	;# 
   718  0193                     	;# 
   719  0193                     	;# 
   720  0194                     	;# 
   721  0195                     	;# 
   722  0196                     	;# 
   723  0199                     	;# 
   724  019A                     	;# 
   725  019B                     	;# 
   726  019B                     	;# 
   727  019C                     	;# 
   728  019D                     	;# 
   729  019E                     	;# 
   730  019F                     	;# 
   731  020C                     	;# 
   732  020D                     	;# 
   733  020E                     	;# 
   734  0211                     	;# 
   735  0211                     	;# 
   736  0212                     	;# 
   737  0212                     	;# 
   738  0213                     	;# 
   739  0213                     	;# 
   740  0214                     	;# 
   741  0214                     	;# 
   742  0215                     	;# 
   743  0215                     	;# 
   744  0215                     	;# 
   745  0216                     	;# 
   746  0216                     	;# 
   747  0217                     	;# 
   748  0217                     	;# 
   749  0219                     	;# 
   750  021A                     	;# 
   751  021B                     	;# 
   752  021C                     	;# 
   753  021D                     	;# 
   754  021E                     	;# 
   755  021F                     	;# 
   756  0291                     	;# 
   757  0291                     	;# 
   758  0292                     	;# 
   759  0293                     	;# 
   760  0294                     	;# 
   761  0295                     	;# 
   762  0295                     	;# 
   763  0296                     	;# 
   764  0298                     	;# 
   765  0298                     	;# 
   766  0299                     	;# 
   767  029A                     	;# 
   768  029B                     	;# 
   769  029C                     	;# 
   770  029D                     	;# 
   771  029E                     	;# 
   772  0311                     	;# 
   773  0311                     	;# 
   774  0312                     	;# 
   775  0313                     	;# 
   776  0318                     	;# 
   777  0318                     	;# 
   778  0319                     	;# 
   779  031A                     	;# 
   780  038C                     	;# 
   781  038D                     	;# 
   782  038E                     	;# 
   783  0391                     	;# 
   784  0392                     	;# 
   785  0393                     	;# 
   786  0394                     	;# 
   787  0395                     	;# 
   788  0396                     	;# 
   789  039A                     	;# 
   790  039C                     	;# 
   791  039D                     	;# 
   792  039E                     	;# 
   793  039F                     	;# 
   794  0415                     	;# 
   795  0416                     	;# 
   796  0417                     	;# 
   797  041C                     	;# 
   798  041D                     	;# 
   799  041E                     	;# 
   800  0FE4                     	;# 
   801  0FE5                     	;# 
   802  0FE6                     	;# 
   803  0FE7                     	;# 
   804  0FE8                     	;# 
   805  0FE9                     	;# 
   806  0FEA                     	;# 
   807  0FEB                     	;# 
   808  0FED                     	;# 
   809  0FEE                     	;# 
   810  0FEF                     	;# 
   811  0000                     	;# 
   812  0001                     	;# 
   813  0002                     	;# 
   814  0003                     	;# 
   815  0004                     	;# 
   816  0005                     	;# 
   817  0006                     	;# 
   818  0007                     	;# 
   819  0008                     	;# 
   820  0009                     	;# 
   821  000A                     	;# 
   822  000B                     	;# 
   823  000C                     	;# 
   824  000D                     	;# 
   825  000E                     	;# 
   826  0011                     	;# 
   827  0012                     	;# 
   828  0013                     	;# 
   829  0014                     	;# 
   830  0015                     	;# 
   831  0016                     	;# 
   832  0016                     	;# 
   833  0017                     	;# 
   834  0018                     	;# 
   835  0019                     	;# 
   836  001A                     	;# 
   837  001B                     	;# 
   838  001C                     	;# 
   839  001E                     	;# 
   840  001F                     	;# 
   841  008C                     	;# 
   842  008D                     	;# 
   843  008E                     	;# 
   844  0091                     	;# 
   845  0092                     	;# 
   846  0093                     	;# 
   847  0094                     	;# 
   848  0095                     	;# 
   849  0096                     	;# 
   850  0097                     	;# 
   851  0098                     	;# 
   852  0099                     	;# 
   853  009A                     	;# 
   854  009B                     	;# 
   855  009B                     	;# 
   856  009C                     	;# 
   857  009D                     	;# 
   858  009E                     	;# 
   859  010C                     	;# 
   860  010D                     	;# 
   861  010E                     	;# 
   862  0111                     	;# 
   863  0112                     	;# 
   864  0113                     	;# 
   865  0114                     	;# 
   866  0115                     	;# 
   867  0116                     	;# 
   868  0117                     	;# 
   869  0118                     	;# 
   870  0119                     	;# 
   871  011A                     	;# 
   872  011B                     	;# 
   873  011D                     	;# 
   874  011E                     	;# 
   875  018C                     	;# 
   876  018D                     	;# 
   877  018E                     	;# 
   878  0191                     	;# 
   879  0191                     	;# 
   880  0192                     	;# 
   881  0193                     	;# 
   882  0193                     	;# 
   883  0193                     	;# 
   884  0194                     	;# 
   885  0195                     	;# 
   886  0196                     	;# 
   887  0199                     	;# 
   888  019A                     	;# 
   889  019B                     	;# 
   890  019B                     	;# 
   891  019C                     	;# 
   892  019D                     	;# 
   893  019E                     	;# 
   894  019F                     	;# 
   895  020C                     	;# 
   896  020D                     	;# 
   897  020E                     	;# 
   898  0211                     	;# 
   899  0211                     	;# 
   900  0212                     	;# 
   901  0212                     	;# 
   902  0213                     	;# 
   903  0213                     	;# 
   904  0214                     	;# 
   905  0214                     	;# 
   906  0215                     	;# 
   907  0215                     	;# 
   908  0215                     	;# 
   909  0216                     	;# 
   910  0216                     	;# 
   911  0217                     	;# 
   912  0217                     	;# 
   913  0219                     	;# 
   914  021A                     	;# 
   915  021B                     	;# 
   916  021C                     	;# 
   917  021D                     	;# 
   918  021E                     	;# 
   919  021F                     	;# 
   920  0291                     	;# 
   921  0291                     	;# 
   922  0292                     	;# 
   923  0293                     	;# 
   924  0294                     	;# 
   925  0295                     	;# 
   926  0295                     	;# 
   927  0296                     	;# 
   928  0298                     	;# 
   929  0298                     	;# 
   930  0299                     	;# 
   931  029A                     	;# 
   932  029B                     	;# 
   933  029C                     	;# 
   934  029D                     	;# 
   935  029E                     	;# 
   936  0311                     	;# 
   937  0311                     	;# 
   938  0312                     	;# 
   939  0313                     	;# 
   940  0318                     	;# 
   941  0318                     	;# 
   942  0319                     	;# 
   943  031A                     	;# 
   944  038C                     	;# 
   945  038D                     	;# 
   946  038E                     	;# 
   947  0391                     	;# 
   948  0392                     	;# 
   949  0393                     	;# 
   950  0394                     	;# 
   951  0395                     	;# 
   952  0396                     	;# 
   953  039A                     	;# 
   954  039C                     	;# 
   955  039D                     	;# 
   956  039E                     	;# 
   957  039F                     	;# 
   958  0415                     	;# 
   959  0416                     	;# 
   960  0417                     	;# 
   961  041C                     	;# 
   962  041D                     	;# 
   963  041E                     	;# 
   964  0FE4                     	;# 
   965  0FE5                     	;# 
   966  0FE6                     	;# 
   967  0FE7                     	;# 
   968  0FE8                     	;# 
   969  0FE9                     	;# 
   970  0FEA                     	;# 
   971  0FEB                     	;# 
   972  0FED                     	;# 
   973  0FEE                     	;# 
   974  0FEF                     	;# 
   975  0000                     	;# 
   976  0001                     	;# 
   977  0002                     	;# 
   978  0003                     	;# 
   979  0004                     	;# 
   980  0005                     	;# 
   981  0006                     	;# 
   982  0007                     	;# 
   983  0008                     	;# 
   984  0009                     	;# 
   985  000A                     	;# 
   986  000B                     	;# 
   987  000C                     	;# 
   988  000D                     	;# 
   989  000E                     	;# 
   990  0011                     	;# 
   991  0012                     	;# 
   992  0013                     	;# 
   993  0014                     	;# 
   994  0015                     	;# 
   995  0016                     	;# 
   996  0016                     	;# 
   997  0017                     	;# 
   998  0018                     	;# 
   999  0019                     	;# 
  1000  001A                     	;# 
  1001  001B                     	;# 
  1002  001C                     	;# 
  1003  001E                     	;# 
  1004  001F                     	;# 
  1005  008C                     	;# 
  1006  008D                     	;# 
  1007  008E                     	;# 
  1008  0091                     	;# 
  1009  0092                     	;# 
  1010  0093                     	;# 
  1011  0094                     	;# 
  1012  0095                     	;# 
  1013  0096                     	;# 
  1014  0097                     	;# 
  1015  0098                     	;# 
  1016  0099                     	;# 
  1017  009A                     	;# 
  1018  009B                     	;# 
  1019  009B                     	;# 
  1020  009C                     	;# 
  1021  009D                     	;# 
  1022  009E                     	;# 
  1023  010C                     	;# 
  1024  010D                     	;# 
  1025  010E                     	;# 
  1026  0111                     	;# 
  1027  0112                     	;# 
  1028  0113                     	;# 
  1029  0114                     	;# 
  1030  0115                     	;# 
  1031  0116                     	;# 
  1032  0117                     	;# 
  1033  0118                     	;# 
  1034  0119                     	;# 
  1035  011A                     	;# 
  1036  011B                     	;# 
  1037  011D                     	;# 
  1038  011E                     	;# 
  1039  018C                     	;# 
  1040  018D                     	;# 
  1041  018E                     	;# 
  1042  0191                     	;# 
  1043  0191                     	;# 
  1044  0192                     	;# 
  1045  0193                     	;# 
  1046  0193                     	;# 
  1047  0193                     	;# 
  1048  0194                     	;# 
  1049  0195                     	;# 
  1050  0196                     	;# 
  1051  0199                     	;# 
  1052  019A                     	;# 
  1053  019B                     	;# 
  1054  019B                     	;# 
  1055  019C                     	;# 
  1056  019D                     	;# 
  1057  019E                     	;# 
  1058  019F                     	;# 
  1059  020C                     	;# 
  1060  020D                     	;# 
  1061  020E                     	;# 
  1062  0211                     	;# 
  1063  0211                     	;# 
  1064  0212                     	;# 
  1065  0212                     	;# 
  1066  0213                     	;# 
  1067  0213                     	;# 
  1068  0214                     	;# 
  1069  0214                     	;# 
  1070  0215                     	;# 
  1071  0215                     	;# 
  1072  0215                     	;# 
  1073  0216                     	;# 
  1074  0216                     	;# 
  1075  0217                     	;# 
  1076  0217                     	;# 
  1077  0219                     	;# 
  1078  021A                     	;# 
  1079  021B                     	;# 
  1080  021C                     	;# 
  1081  021D                     	;# 
  1082  021E                     	;# 
  1083  021F                     	;# 
  1084  0291                     	;# 
  1085  0291                     	;# 
  1086  0292                     	;# 
  1087  0293                     	;# 
  1088  0294                     	;# 
  1089  0295                     	;# 
  1090  0295                     	;# 
  1091  0296                     	;# 
  1092  0298                     	;# 
  1093  0298                     	;# 
  1094  0299                     	;# 
  1095  029A                     	;# 
  1096  029B                     	;# 
  1097  029C                     	;# 
  1098  029D                     	;# 
  1099  029E                     	;# 
  1100  0311                     	;# 
  1101  0311                     	;# 
  1102  0312                     	;# 
  1103  0313                     	;# 
  1104  0318                     	;# 
  1105  0318                     	;# 
  1106  0319                     	;# 
  1107  031A                     	;# 
  1108  038C                     	;# 
  1109  038D                     	;# 
  1110  038E                     	;# 
  1111  0391                     	;# 
  1112  0392                     	;# 
  1113  0393                     	;# 
  1114  0394                     	;# 
  1115  0395                     	;# 
  1116  0396                     	;# 
  1117  039A                     	;# 
  1118  039C                     	;# 
  1119  039D                     	;# 
  1120  039E                     	;# 
  1121  039F                     	;# 
  1122  0415                     	;# 
  1123  0416                     	;# 
  1124  0417                     	;# 
  1125  041C                     	;# 
  1126  041D                     	;# 
  1127  041E                     	;# 
  1128  0FE4                     	;# 
  1129  0FE5                     	;# 
  1130  0FE6                     	;# 
  1131  0FE7                     	;# 
  1132  0FE8                     	;# 
  1133  0FE9                     	;# 
  1134  0FEA                     	;# 
  1135  0FEB                     	;# 
  1136  0FED                     	;# 
  1137  0FEE                     	;# 
  1138  0FEF                     	;# 
  1139  0000                     	;# 
  1140  0001                     	;# 
  1141  0002                     	;# 
  1142  0003                     	;# 
  1143  0004                     	;# 
  1144  0005                     	;# 
  1145  0006                     	;# 
  1146  0007                     	;# 
  1147  0008                     	;# 
  1148  0009                     	;# 
  1149  000A                     	;# 
  1150  000B                     	;# 
  1151  000C                     	;# 
  1152  000D                     	;# 
  1153  000E                     	;# 
  1154  0011                     	;# 
  1155  0012                     	;# 
  1156  0013                     	;# 
  1157  0014                     	;# 
  1158  0015                     	;# 
  1159  0016                     	;# 
  1160  0016                     	;# 
  1161  0017                     	;# 
  1162  0018                     	;# 
  1163  0019                     	;# 
  1164  001A                     	;# 
  1165  001B                     	;# 
  1166  001C                     	;# 
  1167  001E                     	;# 
  1168  001F                     	;# 
  1169  008C                     	;# 
  1170  008D                     	;# 
  1171  008E                     	;# 
  1172  0091                     	;# 
  1173  0092                     	;# 
  1174  0093                     	;# 
  1175  0094                     	;# 
  1176  0095                     	;# 
  1177  0096                     	;# 
  1178  0097                     	;# 
  1179  0098                     	;# 
  1180  0099                     	;# 
  1181  009A                     	;# 
  1182  009B                     	;# 
  1183  009B                     	;# 
  1184  009C                     	;# 
  1185  009D                     	;# 
  1186  009E                     	;# 
  1187  010C                     	;# 
  1188  010D                     	;# 
  1189  010E                     	;# 
  1190  0111                     	;# 
  1191  0112                     	;# 
  1192  0113                     	;# 
  1193  0114                     	;# 
  1194  0115                     	;# 
  1195  0116                     	;# 
  1196  0117                     	;# 
  1197  0118                     	;# 
  1198  0119                     	;# 
  1199  011A                     	;# 
  1200  011B                     	;# 
  1201  011D                     	;# 
  1202  011E                     	;# 
  1203  018C                     	;# 
  1204  018D                     	;# 
  1205  018E                     	;# 
  1206  0191                     	;# 
  1207  0191                     	;# 
  1208  0192                     	;# 
  1209  0193                     	;# 
  1210  0193                     	;# 
  1211  0193                     	;# 
  1212  0194                     	;# 
  1213  0195                     	;# 
  1214  0196                     	;# 
  1215  0199                     	;# 
  1216  019A                     	;# 
  1217  019B                     	;# 
  1218  019B                     	;# 
  1219  019C                     	;# 
  1220  019D                     	;# 
  1221  019E                     	;# 
  1222  019F                     	;# 
  1223  020C                     	;# 
  1224  020D                     	;# 
  1225  020E                     	;# 
  1226  0211                     	;# 
  1227  0211                     	;# 
  1228  0212                     	;# 
  1229  0212                     	;# 
  1230  0213                     	;# 
  1231  0213                     	;# 
  1232  0214                     	;# 
  1233  0214                     	;# 
  1234  0215                     	;# 
  1235  0215                     	;# 
  1236  0215                     	;# 
  1237  0216                     	;# 
  1238  0216                     	;# 
  1239  0217                     	;# 
  1240  0217                     	;# 
  1241  0219                     	;# 
  1242  021A                     	;# 
  1243  021B                     	;# 
  1244  021C                     	;# 
  1245  021D                     	;# 
  1246  021E                     	;# 
  1247  021F                     	;# 
  1248  0291                     	;# 
  1249  0291                     	;# 
  1250  0292                     	;# 
  1251  0293                     	;# 
  1252  0294                     	;# 
  1253  0295                     	;# 
  1254  0295                     	;# 
  1255  0296                     	;# 
  1256  0298                     	;# 
  1257  0298                     	;# 
  1258  0299                     	;# 
  1259  029A                     	;# 
  1260  029B                     	;# 
  1261  029C                     	;# 
  1262  029D                     	;# 
  1263  029E                     	;# 
  1264  0311                     	;# 
  1265  0311                     	;# 
  1266  0312                     	;# 
  1267  0313                     	;# 
  1268  0318                     	;# 
  1269  0318                     	;# 
  1270  0319                     	;# 
  1271  031A                     	;# 
  1272  038C                     	;# 
  1273  038D                     	;# 
  1274  038E                     	;# 
  1275  0391                     	;# 
  1276  0392                     	;# 
  1277  0393                     	;# 
  1278  0394                     	;# 
  1279  0395                     	;# 
  1280  0396                     	;# 
  1281  039A                     	;# 
  1282  039C                     	;# 
  1283  039D                     	;# 
  1284  039E                     	;# 
  1285  039F                     	;# 
  1286  0415                     	;# 
  1287  0416                     	;# 
  1288  0417                     	;# 
  1289  041C                     	;# 
  1290  041D                     	;# 
  1291  041E                     	;# 
  1292  0FE4                     	;# 
  1293  0FE5                     	;# 
  1294  0FE6                     	;# 
  1295  0FE7                     	;# 
  1296  0FE8                     	;# 
  1297  0FE9                     	;# 
  1298  0FEA                     	;# 
  1299  0FEB                     	;# 
  1300  0FED                     	;# 
  1301  0FEE                     	;# 
  1302  0FEF                     	;# 
  1303  0000                     	;# 
  1304  0001                     	;# 
  1305  0002                     	;# 
  1306  0003                     	;# 
  1307  0004                     	;# 
  1308  0005                     	;# 
  1309  0006                     	;# 
  1310  0007                     	;# 
  1311  0008                     	;# 
  1312  0009                     	;# 
  1313  000A                     	;# 
  1314  000B                     	;# 
  1315  000C                     	;# 
  1316  000D                     	;# 
  1317  000E                     	;# 
  1318  0011                     	;# 
  1319  0012                     	;# 
  1320  0013                     	;# 
  1321  0014                     	;# 
  1322  0015                     	;# 
  1323  0016                     	;# 
  1324  0016                     	;# 
  1325  0017                     	;# 
  1326  0018                     	;# 
  1327  0019                     	;# 
  1328  001A                     	;# 
  1329  001B                     	;# 
  1330  001C                     	;# 
  1331  001E                     	;# 
  1332  001F                     	;# 
  1333  008C                     	;# 
  1334  008D                     	;# 
  1335  008E                     	;# 
  1336  0091                     	;# 
  1337  0092                     	;# 
  1338  0093                     	;# 
  1339  0094                     	;# 
  1340  0095                     	;# 
  1341  0096                     	;# 
  1342  0097                     	;# 
  1343  0098                     	;# 
  1344  0099                     	;# 
  1345  009A                     	;# 
  1346  009B                     	;# 
  1347  009B                     	;# 
  1348  009C                     	;# 
  1349  009D                     	;# 
  1350  009E                     	;# 
  1351  010C                     	;# 
  1352  010D                     	;# 
  1353  010E                     	;# 
  1354  0111                     	;# 
  1355  0112                     	;# 
  1356  0113                     	;# 
  1357  0114                     	;# 
  1358  0115                     	;# 
  1359  0116                     	;# 
  1360  0117                     	;# 
  1361  0118                     	;# 
  1362  0119                     	;# 
  1363  011A                     	;# 
  1364  011B                     	;# 
  1365  011D                     	;# 
  1366  011E                     	;# 
  1367  018C                     	;# 
  1368  018D                     	;# 
  1369  018E                     	;# 
  1370  0191                     	;# 
  1371  0191                     	;# 
  1372  0192                     	;# 
  1373  0193                     	;# 
  1374  0193                     	;# 
  1375  0193                     	;# 
  1376  0194                     	;# 
  1377  0195                     	;# 
  1378  0196                     	;# 
  1379  0199                     	;# 
  1380  019A                     	;# 
  1381  019B                     	;# 
  1382  019B                     	;# 
  1383  019C                     	;# 
  1384  019D                     	;# 
  1385  019E                     	;# 
  1386  019F                     	;# 
  1387  020C                     	;# 
  1388  020D                     	;# 
  1389  020E                     	;# 
  1390  0211                     	;# 
  1391  0211                     	;# 
  1392  0212                     	;# 
  1393  0212                     	;# 
  1394  0213                     	;# 
  1395  0213                     	;# 
  1396  0214                     	;# 
  1397  0214                     	;# 
  1398  0215                     	;# 
  1399  0215                     	;# 
  1400  0215                     	;# 
  1401  0216                     	;# 
  1402  0216                     	;# 
  1403  0217                     	;# 
  1404  0217                     	;# 
  1405  0219                     	;# 
  1406  021A                     	;# 
  1407  021B                     	;# 
  1408  021C                     	;# 
  1409  021D                     	;# 
  1410  021E                     	;# 
  1411  021F                     	;# 
  1412  0291                     	;# 
  1413  0291                     	;# 
  1414  0292                     	;# 
  1415  0293                     	;# 
  1416  0294                     	;# 
  1417  0295                     	;# 
  1418  0295                     	;# 
  1419  0296                     	;# 
  1420  0298                     	;# 
  1421  0298                     	;# 
  1422  0299                     	;# 
  1423  029A                     	;# 
  1424  029B                     	;# 
  1425  029C                     	;# 
  1426  029D                     	;# 
  1427  029E                     	;# 
  1428  0311                     	;# 
  1429  0311                     	;# 
  1430  0312                     	;# 
  1431  0313                     	;# 
  1432  0318                     	;# 
  1433  0318                     	;# 
  1434  0319                     	;# 
  1435  031A                     	;# 
  1436  038C                     	;# 
  1437  038D                     	;# 
  1438  038E                     	;# 
  1439  0391                     	;# 
  1440  0392                     	;# 
  1441  0393                     	;# 
  1442  0394                     	;# 
  1443  0395                     	;# 
  1444  0396                     	;# 
  1445  039A                     	;# 
  1446  039C                     	;# 
  1447  039D                     	;# 
  1448  039E                     	;# 
  1449  039F                     	;# 
  1450  0415                     	;# 
  1451  0416                     	;# 
  1452  0417                     	;# 
  1453  041C                     	;# 
  1454  041D                     	;# 
  1455  041E                     	;# 
  1456  0FE4                     	;# 
  1457  0FE5                     	;# 
  1458  0FE6                     	;# 
  1459  0FE7                     	;# 
  1460  0FE8                     	;# 
  1461  0FE9                     	;# 
  1462  0FEA                     	;# 
  1463  0FEB                     	;# 
  1464  0FED                     	;# 
  1465  0FEE                     	;# 
  1466  0FEF                     	;# 
  1467  0000                     	;# 
  1468  0001                     	;# 
  1469  0002                     	;# 
  1470  0003                     	;# 
  1471  0004                     	;# 
  1472  0005                     	;# 
  1473  0006                     	;# 
  1474  0007                     	;# 
  1475  0008                     	;# 
  1476  0009                     	;# 
  1477  000A                     	;# 
  1478  000B                     	;# 
  1479  000C                     	;# 
  1480  000D                     	;# 
  1481  000E                     	;# 
  1482  0011                     	;# 
  1483  0012                     	;# 
  1484  0013                     	;# 
  1485  0014                     	;# 
  1486  0015                     	;# 
  1487  0016                     	;# 
  1488  0016                     	;# 
  1489  0017                     	;# 
  1490  0018                     	;# 
  1491  0019                     	;# 
  1492  001A                     	;# 
  1493  001B                     	;# 
  1494  001C                     	;# 
  1495  001E                     	;# 
  1496  001F                     	;# 
  1497  008C                     	;# 
  1498  008D                     	;# 
  1499  008E                     	;# 
  1500  0091                     	;# 
  1501  0092                     	;# 
  1502  0093                     	;# 
  1503  0094                     	;# 
  1504  0095                     	;# 
  1505  0096                     	;# 
  1506  0097                     	;# 
  1507  0098                     	;# 
  1508  0099                     	;# 
  1509  009A                     	;# 
  1510  009B                     	;# 
  1511  009B                     	;# 
  1512  009C                     	;# 
  1513  009D                     	;# 
  1514  009E                     	;# 
  1515  010C                     	;# 
  1516  010D                     	;# 
  1517  010E                     	;# 
  1518  0111                     	;# 
  1519  0112                     	;# 
  1520  0113                     	;# 
  1521  0114                     	;# 
  1522  0115                     	;# 
  1523  0116                     	;# 
  1524  0117                     	;# 
  1525  0118                     	;# 
  1526  0119                     	;# 
  1527  011A                     	;# 
  1528  011B                     	;# 
  1529  011D                     	;# 
  1530  011E                     	;# 
  1531  018C                     	;# 
  1532  018D                     	;# 
  1533  018E                     	;# 
  1534  0191                     	;# 
  1535  0191                     	;# 
  1536  0192                     	;# 
  1537  0193                     	;# 
  1538  0193                     	;# 
  1539  0193                     	;# 
  1540  0194                     	;# 
  1541  0195                     	;# 
  1542  0196                     	;# 
  1543  0199                     	;# 
  1544  019A                     	;# 
  1545  019B                     	;# 
  1546  019B                     	;# 
  1547  019C                     	;# 
  1548  019D                     	;# 
  1549  019E                     	;# 
  1550  019F                     	;# 
  1551  020C                     	;# 
  1552  020D                     	;# 
  1553  020E                     	;# 
  1554  0211                     	;# 
  1555  0211                     	;# 
  1556  0212                     	;# 
  1557  0212                     	;# 
  1558  0213                     	;# 
  1559  0213                     	;# 
  1560  0214                     	;# 
  1561  0214                     	;# 
  1562  0215                     	;# 
  1563  0215                     	;# 
  1564  0215                     	;# 
  1565  0216                     	;# 
  1566  0216                     	;# 
  1567  0217                     	;# 
  1568  0217                     	;# 
  1569  0219                     	;# 
  1570  021A                     	;# 
  1571  021B                     	;# 
  1572  021C                     	;# 
  1573  021D                     	;# 
  1574  021E                     	;# 
  1575  021F                     	;# 
  1576  0291                     	;# 
  1577  0291                     	;# 
  1578  0292                     	;# 
  1579  0293                     	;# 
  1580  0294                     	;# 
  1581  0295                     	;# 
  1582  0295                     	;# 
  1583  0296                     	;# 
  1584  0298                     	;# 
  1585  0298                     	;# 
  1586  0299                     	;# 
  1587  029A                     	;# 
  1588  029B                     	;# 
  1589  029C                     	;# 
  1590  029D                     	;# 
  1591  029E                     	;# 
  1592  0311                     	;# 
  1593  0311                     	;# 
  1594  0312                     	;# 
  1595  0313                     	;# 
  1596  0318                     	;# 
  1597  0318                     	;# 
  1598  0319                     	;# 
  1599  031A                     	;# 
  1600  038C                     	;# 
  1601  038D                     	;# 
  1602  038E                     	;# 
  1603  0391                     	;# 
  1604  0392                     	;# 
  1605  0393                     	;# 
  1606  0394                     	;# 
  1607  0395                     	;# 
  1608  0396                     	;# 
  1609  039A                     	;# 
  1610  039C                     	;# 
  1611  039D                     	;# 
  1612  039E                     	;# 
  1613  039F                     	;# 
  1614  0415                     	;# 
  1615  0416                     	;# 
  1616  0417                     	;# 
  1617  041C                     	;# 
  1618  041D                     	;# 
  1619  041E                     	;# 
  1620  0FE4                     	;# 
  1621  0FE5                     	;# 
  1622  0FE6                     	;# 
  1623  0FE7                     	;# 
  1624  0FE8                     	;# 
  1625  0FE9                     	;# 
  1626  0FEA                     	;# 
  1627  0FEB                     	;# 
  1628  0FED                     	;# 
  1629  0FEE                     	;# 
  1630  0FEF                     	;# 
  1631  0000                     	;# 
  1632  0001                     	;# 
  1633  0002                     	;# 
  1634  0003                     	;# 
  1635  0004                     	;# 
  1636  0005                     	;# 
  1637  0006                     	;# 
  1638  0007                     	;# 
  1639  0008                     	;# 
  1640  0009                     	;# 
  1641  000A                     	;# 
  1642  000B                     	;# 
  1643  000C                     	;# 
  1644  000D                     	;# 
  1645  000E                     	;# 
  1646  0011                     	;# 
  1647  0012                     	;# 
  1648  0013                     	;# 
  1649  0014                     	;# 
  1650  0015                     	;# 
  1651  0016                     	;# 
  1652  0016                     	;# 
  1653  0017                     	;# 
  1654  0018                     	;# 
  1655  0019                     	;# 
  1656  001A                     	;# 
  1657  001B                     	;# 
  1658  001C                     	;# 
  1659  001E                     	;# 
  1660  001F                     	;# 
  1661  008C                     	;# 
  1662  008D                     	;# 
  1663  008E                     	;# 
  1664  0091                     	;# 
  1665  0092                     	;# 
  1666  0093                     	;# 
  1667  0094                     	;# 
  1668  0095                     	;# 
  1669  0096                     	;# 
  1670  0097                     	;# 
  1671  0098                     	;# 
  1672  0099                     	;# 
  1673  009A                     	;# 
  1674  009B                     	;# 
  1675  009B                     	;# 
  1676  009C                     	;# 
  1677  009D                     	;# 
  1678  009E                     	;# 
  1679  010C                     	;# 
  1680  010D                     	;# 
  1681  010E                     	;# 
  1682  0111                     	;# 
  1683  0112                     	;# 
  1684  0113                     	;# 
  1685  0114                     	;# 
  1686  0115                     	;# 
  1687  0116                     	;# 
  1688  0117                     	;# 
  1689  0118                     	;# 
  1690  0119                     	;# 
  1691  011A                     	;# 
  1692  011B                     	;# 
  1693  011D                     	;# 
  1694  011E                     	;# 
  1695  018C                     	;# 
  1696  018D                     	;# 
  1697  018E                     	;# 
  1698  0191                     	;# 
  1699  0191                     	;# 
  1700  0192                     	;# 
  1701  0193                     	;# 
  1702  0193                     	;# 
  1703  0193                     	;# 
  1704  0194                     	;# 
  1705  0195                     	;# 
  1706  0196                     	;# 
  1707  0199                     	;# 
  1708  019A                     	;# 
  1709  019B                     	;# 
  1710  019B                     	;# 
  1711  019C                     	;# 
  1712  019D                     	;# 
  1713  019E                     	;# 
  1714  019F                     	;# 
  1715  020C                     	;# 
  1716  020D                     	;# 
  1717  020E                     	;# 
  1718  0211                     	;# 
  1719  0211                     	;# 
  1720  0212                     	;# 
  1721  0212                     	;# 
  1722  0213                     	;# 
  1723  0213                     	;# 
  1724  0214                     	;# 
  1725  0214                     	;# 
  1726  0215                     	;# 
  1727  0215                     	;# 
  1728  0215                     	;# 
  1729  0216                     	;# 
  1730  0216                     	;# 
  1731  0217                     	;# 
  1732  0217                     	;# 
  1733  0219                     	;# 
  1734  021A                     	;# 
  1735  021B                     	;# 
  1736  021C                     	;# 
  1737  021D                     	;# 
  1738  021E                     	;# 
  1739  021F                     	;# 
  1740  0291                     	;# 
  1741  0291                     	;# 
  1742  0292                     	;# 
  1743  0293                     	;# 
  1744  0294                     	;# 
  1745  0295                     	;# 
  1746  0295                     	;# 
  1747  0296                     	;# 
  1748  0298                     	;# 
  1749  0298                     	;# 
  1750  0299                     	;# 
  1751  029A                     	;# 
  1752  029B                     	;# 
  1753  029C                     	;# 
  1754  029D                     	;# 
  1755  029E                     	;# 
  1756  0311                     	;# 
  1757  0311                     	;# 
  1758  0312                     	;# 
  1759  0313                     	;# 
  1760  0318                     	;# 
  1761  0318                     	;# 
  1762  0319                     	;# 
  1763  031A                     	;# 
  1764  038C                     	;# 
  1765  038D                     	;# 
  1766  038E                     	;# 
  1767  0391                     	;# 
  1768  0392                     	;# 
  1769  0393                     	;# 
  1770  0394                     	;# 
  1771  0395                     	;# 
  1772  0396                     	;# 
  1773  039A                     	;# 
  1774  039C                     	;# 
  1775  039D                     	;# 
  1776  039E                     	;# 
  1777  039F                     	;# 
  1778  0415                     	;# 
  1779  0416                     	;# 
  1780  0417                     	;# 
  1781  041C                     	;# 
  1782  041D                     	;# 
  1783  041E                     	;# 
  1784  0FE4                     	;# 
  1785  0FE5                     	;# 
  1786  0FE6                     	;# 
  1787  0FE7                     	;# 
  1788  0FE8                     	;# 
  1789  0FE9                     	;# 
  1790  0FEA                     	;# 
  1791  0FEB                     	;# 
  1792  0FED                     	;# 
  1793  0FEE                     	;# 
  1794  0FEF                     	;# 
  1795  0000                     	;# 
  1796  0001                     	;# 
  1797  0002                     	;# 
  1798  0003                     	;# 
  1799  0004                     	;# 
  1800  0005                     	;# 
  1801  0006                     	;# 
  1802  0007                     	;# 
  1803  0008                     	;# 
  1804  0009                     	;# 
  1805  000A                     	;# 
  1806  000B                     	;# 
  1807  000C                     	;# 
  1808  000D                     	;# 
  1809  000E                     	;# 
  1810  0011                     	;# 
  1811  0012                     	;# 
  1812  0013                     	;# 
  1813  0014                     	;# 
  1814  0015                     	;# 
  1815  0016                     	;# 
  1816  0016                     	;# 
  1817  0017                     	;# 
  1818  0018                     	;# 
  1819  0019                     	;# 
  1820  001A                     	;# 
  1821  001B                     	;# 
  1822  001C                     	;# 
  1823  001E                     	;# 
  1824  001F                     	;# 
  1825  008C                     	;# 
  1826  008D                     	;# 
  1827  008E                     	;# 
  1828  0091                     	;# 
  1829  0092                     	;# 
  1830  0093                     	;# 
  1831  0094                     	;# 
  1832  0095                     	;# 
  1833  0096                     	;# 
  1834  0097                     	;# 
  1835  0098                     	;# 
  1836  0099                     	;# 
  1837  009A                     	;# 
  1838  009B                     	;# 
  1839  009B                     	;# 
  1840  009C                     	;# 
  1841  009D                     	;# 
  1842  009E                     	;# 
  1843  010C                     	;# 
  1844  010D                     	;# 
  1845  010E                     	;# 
  1846  0111                     	;# 
  1847  0112                     	;# 
  1848  0113                     	;# 
  1849  0114                     	;# 
  1850  0115                     	;# 
  1851  0116                     	;# 
  1852  0117                     	;# 
  1853  0118                     	;# 
  1854  0119                     	;# 
  1855  011A                     	;# 
  1856  011B                     	;# 
  1857  011D                     	;# 
  1858  011E                     	;# 
  1859  018C                     	;# 
  1860  018D                     	;# 
  1861  018E                     	;# 
  1862  0191                     	;# 
  1863  0191                     	;# 
  1864  0192                     	;# 
  1865  0193                     	;# 
  1866  0193                     	;# 
  1867  0193                     	;# 
  1868  0194                     	;# 
  1869  0195                     	;# 
  1870  0196                     	;# 
  1871  0199                     	;# 
  1872  019A                     	;# 
  1873  019B                     	;# 
  1874  019B                     	;# 
  1875  019C                     	;# 
  1876  019D                     	;# 
  1877  019E                     	;# 
  1878  019F                     	;# 
  1879  020C                     	;# 
  1880  020D                     	;# 
  1881  020E                     	;# 
  1882  0211                     	;# 
  1883  0211                     	;# 
  1884  0212                     	;# 
  1885  0212                     	;# 
  1886  0213                     	;# 
  1887  0213                     	;# 
  1888  0214                     	;# 
  1889  0214                     	;# 
  1890  0215                     	;# 
  1891  0215                     	;# 
  1892  0215                     	;# 
  1893  0216                     	;# 
  1894  0216                     	;# 
  1895  0217                     	;# 
  1896  0217                     	;# 
  1897  0219                     	;# 
  1898  021A                     	;# 
  1899  021B                     	;# 
  1900  021C                     	;# 
  1901  021D                     	;# 
  1902  021E                     	;# 
  1903  021F                     	;# 
  1904  0291                     	;# 
  1905  0291                     	;# 
  1906  0292                     	;# 
  1907  0293                     	;# 
  1908  0294                     	;# 
  1909  0295                     	;# 
  1910  0295                     	;# 
  1911  0296                     	;# 
  1912  0298                     	;# 
  1913  0298                     	;# 
  1914  0299                     	;# 
  1915  029A                     	;# 
  1916  029B                     	;# 
  1917  029C                     	;# 
  1918  029D                     	;# 
  1919  029E                     	;# 
  1920  0311                     	;# 
  1921  0311                     	;# 
  1922  0312                     	;# 
  1923  0313                     	;# 
  1924  0318                     	;# 
  1925  0318                     	;# 
  1926  0319                     	;# 
  1927  031A                     	;# 
  1928  038C                     	;# 
  1929  038D                     	;# 
  1930  038E                     	;# 
  1931  0391                     	;# 
  1932  0392                     	;# 
  1933  0393                     	;# 
  1934  0394                     	;# 
  1935  0395                     	;# 
  1936  0396                     	;# 
  1937  039A                     	;# 
  1938  039C                     	;# 
  1939  039D                     	;# 
  1940  039E                     	;# 
  1941  039F                     	;# 
  1942  0415                     	;# 
  1943  0416                     	;# 
  1944  0417                     	;# 
  1945  041C                     	;# 
  1946  041D                     	;# 
  1947  041E                     	;# 
  1948  0FE4                     	;# 
  1949  0FE5                     	;# 
  1950  0FE6                     	;# 
  1951  0FE7                     	;# 
  1952  0FE8                     	;# 
  1953  0FE9                     	;# 
  1954  0FEA                     	;# 
  1955  0FEB                     	;# 
  1956  0FED                     	;# 
  1957  0FEE                     	;# 
  1958  0FEF                     	;# 
  1959  0000                     	;# 
  1960  0001                     	;# 
  1961  0002                     	;# 
  1962  0003                     	;# 
  1963  0004                     	;# 
  1964  0005                     	;# 
  1965  0006                     	;# 
  1966  0007                     	;# 
  1967  0008                     	;# 
  1968  0009                     	;# 
  1969  000A                     	;# 
  1970  000B                     	;# 
  1971  000C                     	;# 
  1972  000D                     	;# 
  1973  000E                     	;# 
  1974  0011                     	;# 
  1975  0012                     	;# 
  1976  0013                     	;# 
  1977  0014                     	;# 
  1978  0015                     	;# 
  1979  0016                     	;# 
  1980  0016                     	;# 
  1981  0017                     	;# 
  1982  0018                     	;# 
  1983  0019                     	;# 
  1984  001A                     	;# 
  1985  001B                     	;# 
  1986  001C                     	;# 
  1987  001E                     	;# 
  1988  001F                     	;# 
  1989  008C                     	;# 
  1990  008D                     	;# 
  1991  008E                     	;# 
  1992  0091                     	;# 
  1993  0092                     	;# 
  1994  0093                     	;# 
  1995  0094                     	;# 
  1996  0095                     	;# 
  1997  0096                     	;# 
  1998  0097                     	;# 
  1999  0098                     	;# 
  2000  0099                     	;# 
  2001  009A                     	;# 
  2002  009B                     	;# 
  2003  009B                     	;# 
  2004  009C                     	;# 
  2005  009D                     	;# 
  2006  009E                     	;# 
  2007  010C                     	;# 
  2008  010D                     	;# 
  2009  010E                     	;# 
  2010  0111                     	;# 
  2011  0112                     	;# 
  2012  0113                     	;# 
  2013  0114                     	;# 
  2014  0115                     	;# 
  2015  0116                     	;# 
  2016  0117                     	;# 
  2017  0118                     	;# 
  2018  0119                     	;# 
  2019  011A                     	;# 
  2020  011B                     	;# 
  2021  011D                     	;# 
  2022  011E                     	;# 
  2023  018C                     	;# 
  2024  018D                     	;# 
  2025  018E                     	;# 
  2026  0191                     	;# 
  2027  0191                     	;# 
  2028  0192                     	;# 
  2029  0193                     	;# 
  2030  0193                     	;# 
  2031  0193                     	;# 
  2032  0194                     	;# 
  2033  0195                     	;# 
  2034  0196                     	;# 
  2035  0199                     	;# 
  2036  019A                     	;# 
  2037  019B                     	;# 
  2038  019B                     	;# 
  2039  019C                     	;# 
  2040  019D                     	;# 
  2041  019E                     	;# 
  2042  019F                     	;# 
  2043  020C                     	;# 
  2044  020D                     	;# 
  2045  020E                     	;# 
  2046  0211                     	;# 
  2047  0211                     	;# 
  2048  0212                     	;# 
  2049  0212                     	;# 
  2050  0213                     	;# 
  2051  0213                     	;# 
  2052  0214                     	;# 
  2053  0214                     	;# 
  2054  0215                     	;# 
  2055  0215                     	;# 
  2056  0215                     	;# 
  2057  0216                     	;# 
  2058  0216                     	;# 
  2059  0217                     	;# 
  2060  0217                     	;# 
  2061  0219                     	;# 
  2062  021A                     	;# 
  2063  021B                     	;# 
  2064  021C                     	;# 
  2065  021D                     	;# 
  2066  021E                     	;# 
  2067  021F                     	;# 
  2068  0291                     	;# 
  2069  0291                     	;# 
  2070  0292                     	;# 
  2071  0293                     	;# 
  2072  0294                     	;# 
  2073  0295                     	;# 
  2074  0295                     	;# 
  2075  0296                     	;# 
  2076  0298                     	;# 
  2077  0298                     	;# 
  2078  0299                     	;# 
  2079  029A                     	;# 
  2080  029B                     	;# 
  2081  029C                     	;# 
  2082  029D                     	;# 
  2083  029E                     	;# 
  2084  0311                     	;# 
  2085  0311                     	;# 
  2086  0312                     	;# 
  2087  0313                     	;# 
  2088  0318                     	;# 
  2089  0318                     	;# 
  2090  0319                     	;# 
  2091  031A                     	;# 
  2092  038C                     	;# 
  2093  038D                     	;# 
  2094  038E                     	;# 
  2095  0391                     	;# 
  2096  0392                     	;# 
  2097  0393                     	;# 
  2098  0394                     	;# 
  2099  0395                     	;# 
  2100  0396                     	;# 
  2101  039A                     	;# 
  2102  039C                     	;# 
  2103  039D                     	;# 
  2104  039E                     	;# 
  2105  039F                     	;# 
  2106  0415                     	;# 
  2107  0416                     	;# 
  2108  0417                     	;# 
  2109  041C                     	;# 
  2110  041D                     	;# 
  2111  041E                     	;# 
  2112  0FE4                     	;# 
  2113  0FE5                     	;# 
  2114  0FE6                     	;# 
  2115  0FE7                     	;# 
  2116  0FE8                     	;# 
  2117  0FE9                     	;# 
  2118  0FEA                     	;# 
  2119  0FEB                     	;# 
  2120  0FED                     	;# 
  2121  0FEE                     	;# 
  2122  0FEF                     	;# 
  2123  0000                     	;# 
  2124  0001                     	;# 
  2125  0002                     	;# 
  2126  0003                     	;# 
  2127  0004                     	;# 
  2128  0005                     	;# 
  2129  0006                     	;# 
  2130  0007                     	;# 
  2131  0008                     	;# 
  2132  0009                     	;# 
  2133  000A                     	;# 
  2134  000B                     	;# 
  2135  000C                     	;# 
  2136  000D                     	;# 
  2137  000E                     	;# 
  2138  0011                     	;# 
  2139  0012                     	;# 
  2140  0013                     	;# 
  2141  0014                     	;# 
  2142  0015                     	;# 
  2143  0016                     	;# 
  2144  0016                     	;# 
  2145  0017                     	;# 
  2146  0018                     	;# 
  2147  0019                     	;# 
  2148  001A                     	;# 
  2149  001B                     	;# 
  2150  001C                     	;# 
  2151  001E                     	;# 
  2152  001F                     	;# 
  2153  008C                     	;# 
  2154  008D                     	;# 
  2155  008E                     	;# 
  2156  0091                     	;# 
  2157  0092                     	;# 
  2158  0093                     	;# 
  2159  0094                     	;# 
  2160  0095                     	;# 
  2161  0096                     	;# 
  2162  0097                     	;# 
  2163  0098                     	;# 
  2164  0099                     	;# 
  2165  009A                     	;# 
  2166  009B                     	;# 
  2167  009B                     	;# 
  2168  009C                     	;# 
  2169  009D                     	;# 
  2170  009E                     	;# 
  2171  010C                     	;# 
  2172  010D                     	;# 
  2173  010E                     	;# 
  2174  0111                     	;# 
  2175  0112                     	;# 
  2176  0113                     	;# 
  2177  0114                     	;# 
  2178  0115                     	;# 
  2179  0116                     	;# 
  2180  0117                     	;# 
  2181  0118                     	;# 
  2182  0119                     	;# 
  2183  011A                     	;# 
  2184  011B                     	;# 
  2185  011D                     	;# 
  2186  011E                     	;# 
  2187  018C                     	;# 
  2188  018D                     	;# 
  2189  018E                     	;# 
  2190  0191                     	;# 
  2191  0191                     	;# 
  2192  0192                     	;# 
  2193  0193                     	;# 
  2194  0193                     	;# 
  2195  0193                     	;# 
  2196  0194                     	;# 
  2197  0195                     	;# 
  2198  0196                     	;# 
  2199  0199                     	;# 
  2200  019A                     	;# 
  2201  019B                     	;# 
  2202  019B                     	;# 
  2203  019C                     	;# 
  2204  019D                     	;# 
  2205  019E                     	;# 
  2206  019F                     	;# 
  2207  020C                     	;# 
  2208  020D                     	;# 
  2209  020E                     	;# 
  2210  0211                     	;# 
  2211  0211                     	;# 
  2212  0212                     	;# 
  2213  0212                     	;# 
  2214  0213                     	;# 
  2215  0213                     	;# 
  2216  0214                     	;# 
  2217  0214                     	;# 
  2218  0215                     	;# 
  2219  0215                     	;# 
  2220  0215                     	;# 
  2221  0216                     	;# 
  2222  0216                     	;# 
  2223  0217                     	;# 
  2224  0217                     	;# 
  2225  0219                     	;# 
  2226  021A                     	;# 
  2227  021B                     	;# 
  2228  021C                     	;# 
  2229  021D                     	;# 
  2230  021E                     	;# 
  2231  021F                     	;# 
  2232  0291                     	;# 
  2233  0291                     	;# 
  2234  0292                     	;# 
  2235  0293                     	;# 
  2236  0294                     	;# 
  2237  0295                     	;# 
  2238  0295                     	;# 
  2239  0296                     	;# 
  2240  0298                     	;# 
  2241  0298                     	;# 
  2242  0299                     	;# 
  2243  029A                     	;# 
  2244  029B                     	;# 
  2245  029C                     	;# 
  2246  029D                     	;# 
  2247  029E                     	;# 
  2248  0311                     	;# 
  2249  0311                     	;# 
  2250  0312                     	;# 
  2251  0313                     	;# 
  2252  0318                     	;# 
  2253  0318                     	;# 
  2254  0319                     	;# 
  2255  031A                     	;# 
  2256  038C                     	;# 
  2257  038D                     	;# 
  2258  038E                     	;# 
  2259  0391                     	;# 
  2260  0392                     	;# 
  2261  0393                     	;# 
  2262  0394                     	;# 
  2263  0395                     	;# 
  2264  0396                     	;# 
  2265  039A                     	;# 
  2266  039C                     	;# 
  2267  039D                     	;# 
  2268  039E                     	;# 
  2269  039F                     	;# 
  2270  0415                     	;# 
  2271  0416                     	;# 
  2272  0417                     	;# 
  2273  041C                     	;# 
  2274  041D                     	;# 
  2275  041E                     	;# 
  2276  0FE4                     	;# 
  2277  0FE5                     	;# 
  2278  0FE6                     	;# 
  2279  0FE7                     	;# 
  2280  0FE8                     	;# 
  2281  0FE9                     	;# 
  2282  0FEA                     	;# 
  2283  0FEB                     	;# 
  2284  0FED                     	;# 
  2285  0FEE                     	;# 
  2286  0FEF                     	;# 
  2287                           
  2288 ;; Function _Sensor_DefaultCallback is unused but had its address taken
  2289  0000                     
  2290 ;; Function _MTOUCH_CVD_ScanA_0 is unused but had its address taken
  2291  0000                     
  2292 ;; Function _MTOUCH_CVD_ScanB_0 is unused but had its address taken
  2293  0000                     
  2294 ;; Function _Button_State_Initializing is unused but had its address taken
  2295  0000                     
  2296 ;; Function _Button_State_NotPressed is unused but had its address taken
  2297  0000                     
  2298 ;; Function _Button_State_Pressed is unused but had its address taken
  2299  0000                     
  2300 ;; Function _Button_DefaultCallback is unused but had its address taken
  2301  0000                     
  2302 ;; Function _EUSART_DefaultFramingErrorHandler is unused but had its address taken
  2303  0000                     
  2304 ;; Function _EUSART_DefaultOverrunErrorHandler is unused but had its address taken
  2305  0000                     
  2306 ;; Function _EUSART_DefaultErrorHandler is unused but had its address taken
  2307  0000                     
  2308                           	psect	idataBANK3
  2309  0800                     __pidataBANK3:
  2310                           
  2311                           ;initializer for _callback_notPressed
  2312  0800  3400               	retlw	0
  2313  0801  3400               	retlw	0
  2314                           
  2315                           ;initializer for _callback_pressed
  2316  0802  3400               	retlw	0
  2317  0803  3400               	retlw	0
  2318                           
  2319                           ;initializer for _Sensor_scanB
  2320  0804  3400               	retlw	0
  2321  0805  3400               	retlw	0
  2322                           
  2323                           ;initializer for _Sensor_scanA
  2324  0806  3400               	retlw	0
  2325  0807  3400               	retlw	0
  2326                           
  2327                           ;initializer for _callback_sampled
  2328  0808  3400               	retlw	0
  2329  0809  3400               	retlw	0
  2330                           
  2331                           	psect	idataBANK4
  2332  1B93                     __pidataBANK4:
  2333                           
  2334                           ;initializer for _Button_StateMachine
  2335  1B93  3400               	retlw	0
  2336  1B94  3400               	retlw	0
  2337  1B95  3400               	retlw	0
  2338  1B96  3400               	retlw	0
  2339  1B97  3400               	retlw	0
  2340  1B98  3400               	retlw	0
  2341                           
  2342                           ;initializer for _mtouch_sensor
  2343  1B99  3400               	retlw	0
  2344  1B9A  3400               	retlw	0
  2345  1B9B  3400               	retlw	0
  2346  1B9C  3400               	retlw	0
  2347  1B9D  3400               	retlw	0
  2348  1B9E  3420               	retlw	32
  2349  1B9F  3400               	retlw	0
  2350  1BA0  3400               	retlw	0
  2351  1BA1  3400               	retlw	0
  2352                           
  2353                           	psect	stringtext1
  2354  181C                     __pstringtext1:
  2355  181C                     _tiny:
  2356  181C  3460               	retlw	96
  2357  181D  3442               	retlw	66
  2358  181E  34A2               	retlw	162
  2359  181F  340D               	retlw	13
  2360  1820                     __end_of_tiny:
  2361                           
  2362                           	psect	stringtext2
  2363  1820                     __pstringtext2:
  2364  1820                     _TMR2_Period_const:
  2365  1820  3400               	retlw	0
  2366  1821  3400               	retlw	0
  2367  1822  34C8               	retlw	200
  2368  1823  3442               	retlw	66
  2369  1824                     __end_of_TMR2_Period_const:
  2370                           
  2371                           	psect	stringtext3
  2372  1824                     __pstringtext3:
  2373  1824                     _V_cc_const:
  2374  1824  3400               	retlw	0
  2375  1825  3400               	retlw	0
  2376  1826  34A0               	retlw	160
  2377  1827  3440               	retlw	64
  2378  1828                     __end_of_V_cc_const:
  2379                           
  2380                           	psect	stringtext4
  2381  1800                     __pstringtext4:
  2382  1800                     _mtouch_button_init:
  2383  1800  3400               	retlw	0
  2384  1801  3400               	retlw	0
  2385  1802  3400               	retlw	0
  2386  1803  3400               	retlw	0
  2387  1804  3400               	retlw	0
  2388  1805  3400               	retlw	0
  2389  1806  3400               	retlw	0
  2390  1807  3400               	retlw	0
  2391  1808  3400               	retlw	0
  2392  1809  3400               	retlw	0
  2393  180A  3400               	retlw	0
  2394  180B  3400               	retlw	0
  2395  180C  3400               	retlw	0
  2396  180D  3400               	retlw	0
  2397  180E  3464               	retlw	100
  2398  180F  3401               	retlw	1
  2399  1810                     __end_of_mtouch_button_init:
  2400                           
  2401                           	psect	stringtext5
  2402  1828                     __pstringtext5:
  2403  1828                     _HalfCycleACDuration_const:
  2404  1828  3400               	retlw	0
  2405  1829  3400               	retlw	0
  2406  182A  3420               	retlw	32
  2407  182B  3441               	retlw	65
  2408  182C                     __end_of_HalfCycleACDuration_const:
  2409                           
  2410                           	psect	stringtext6
  2411  182C                     __pstringtext6:
  2412  182C                     _Tolerance_Temp_const:
  2413  182C  34CD               	retlw	205
  2414  182D  34CC               	retlw	204
  2415  182E  3414               	retlw	20
  2416  182F  3442               	retlw	66
  2417  1830                     __end_of_Tolerance_Temp_const:
  2418                           
  2419                           	psect	stringtext7
  2420  1830                     __pstringtext7:
  2421  1830                     _R_const:
  2422  1830  3400               	retlw	0
  2423  1831  3400               	retlw	0
  2424  1832  34C8               	retlw	200
  2425  1833  3442               	retlw	66
  2426  1834                     __end_of_R_const:
  2427                           
  2428                           	psect	nvBANK3
  2429  01EC                     __pnvBANK3:
  2430  01EC                     _TMR2_InterruptHandler:
  2431  01EC                     	ds	2
  2432  01EE                     _IOCAF2_InterruptHandler:
  2433  01EE                     	ds	2
  2434                           
  2435                           	psect	nvBANK4
  2436  0253                     __pnvBANK4:
  2437  0253                     _EUSART_ErrorHandler:
  2438  0253                     	ds	2
  2439  0255                     _EUSART_OverrunErrorHandler:
  2440  0255                     	ds	2
  2441  0257                     _EUSART_FramingErrorHandler:
  2442  0257                     	ds	2
  2443  001C                     _T2CONbits	set	28
  2444  001C                     _T2CON	set	28
  2445  001A                     _TMR2	set	26
  2446  001B                     _PR2	set	27
  2447  000E                     _PORTCbits	set	14
  2448  0011                     _PIR1bits	set	17
  2449  000B                     _INTCONbits	set	11
  2450  005F                     _GIE	set	95
  2451  0091                     _PIE1bits	set	145
  2452  009C                     _ADRESH	set	156
  2453  009B                     _ADRESL	set	155
  2454  0095                     _OPTION_REGbits	set	149
  2455  008E                     _TRISC	set	142
  2456  008D                     _TRISB	set	141
  2457  008C                     _TRISA	set	140
  2458  0097                     _WDTCON	set	151
  2459  0098                     _OSCTUNE	set	152
  2460  0099                     _OSCCON	set	153
  2461  009D                     _ADCON0bits	set	157
  2462  009E                     _ADCON1	set	158
  2463  009D                     _ADCON0	set	157
  2464  010E                     _LATCbits	set	270
  2465  011E                     _APFCON1	set	286
  2466  011D                     _APFCON0	set	285
  2467  010E                     _LATC	set	270
  2468  010D                     _LATB	set	269
  2469  010C                     _LATA	set	268
  2470  0116                     _BORCON	set	278
  2471  019A                     _TXREG	set	410
  2472  019E                     _TXSTAbits	set	414
  2473  019C                     _SPBRGH	set	412
  2474  019B                     _SPBRGL	set	411
  2475  019E                     _TXSTA	set	414
  2476  019D                     _RCSTA	set	413
  2477  019F                     _BAUDCON	set	415
  2478  018C                     _ANSELA	set	396
  2479  018D                     _ANSELB	set	397
  2480  018E                     _ANSELC	set	398
  2481  020E                     _WPUC	set	526
  2482  020C                     _WPUA	set	524
  2483  020D                     _WPUB	set	525
  2484  0391                     _IOCAPbits	set	913
  2485  0392                     _IOCANbits	set	914
  2486  0393                     _IOCAFbits	set	915
  2487                           
  2488                           	psect	stringtext8
  2489  1810                     __pstringtext8:
  2490  1810                     STR_1:
  2491  1810  3425               	retlw	37	;'%'
  2492  1811  3466               	retlw	102	;'f'
  2493  1812  3420               	retlw	32	;' '
  2494  1813  3443               	retlw	67	;'C'
  2495  1814  3465               	retlw	101	;'e'
  2496  1815  346C               	retlw	108	;'l'
  2497  1816  3473               	retlw	115	;'s'
  2498  1817  3469               	retlw	105	;'i'
  2499  1818  3475               	retlw	117	;'u'
  2500  1819  3473               	retlw	115	;'s'
  2501  181A  340A               	retlw	10
  2502  181B  3400               	retlw	0
  2503                           
  2504                           	psect	stringtext9
  2505  1834                     __pstringtext9:
  2506  1834                     STR_2:
  2507  1834  3449               	retlw	73	;'I'
  2508  1835  344E               	retlw	78	;'N'
  2509  1836  3446               	retlw	70	;'F'
  2510  1837  3400               	retlw	0
  2511                           
  2512                           	psect	stringtext10
  2513  1838                     __pstringtext10:
  2514  1838                     STR_6:
  2515  1838  344E               	retlw	78	;'N'
  2516  1839  3441               	retlw	65	;'A'
  2517  183A  344E               	retlw	78	;'N'
  2518  183B  3400               	retlw	0
  2519                           
  2520                           	psect	stringtext11
  2521  183C                     __pstringtext11:
  2522  183C                     STR_3:
  2523  183C  3469               	retlw	105	;'i'
  2524  183D  346E               	retlw	110	;'n'
  2525  183E  3466               	retlw	102	;'f'
  2526  183F  3400               	retlw	0
  2527                           
  2528                           	psect	stringtext12
  2529  1840                     __pstringtext12:
  2530  1840                     STR_7:
  2531  1840  346E               	retlw	110	;'n'
  2532  1841  3461               	retlw	97	;'a'
  2533  1842  346E               	retlw	110	;'n'
  2534  1843  3400               	retlw	0
  2535                           
  2536                           	psect	stringtext13
  2537  1844                     __pstringtext13:
  2538  1844                     STR_10:
  2539  1844  346C               	retlw	108	;'l'
  2540  1845  3466               	retlw	102	;'f'
  2541  1846  3400               	retlw	0
  2542                           
  2543                           	psect	stringtext14
  2544  0000                     __pstringtext14:
  2545  181B                     
  2546                           	psect	cinit
  2547  001B                     start_initialization:	
  2548                           ; #config settings
  2549                           
  2550  001B                     __initialization:
  2551                           
  2552                           ; Initialize objects allocated to BANK3
  2553  001B  3000               	movlw	low __pidataBANK3
  2554  001C  0084               	movwf	4
  2555  001D  3088               	movlw	(high __pidataBANK3)| (0+128)
  2556  001E  0085               	movwf	5
  2557  001F  30E2               	movlw	low __pdataBANK3
  2558  0020  0086               	movwf	6
  2559  0021  3001               	movlw	high __pdataBANK3
  2560  0022  0087               	movwf	7
  2561  0023  300A               	movlw	10
  2562  0024  319A  22EA  3180   	fcall	init_ram
  2563                           
  2564                           ; Initialize objects allocated to BANK4
  2565  0027  3093               	movlw	low __pidataBANK4
  2566  0028  0084               	movwf	4
  2567  0029  309B               	movlw	(high __pidataBANK4)| (0+128)
  2568  002A  0085               	movwf	5
  2569  002B  3044               	movlw	low __pdataBANK4
  2570  002C  0086               	movwf	6
  2571  002D  3002               	movlw	high __pdataBANK4
  2572  002E  0087               	movwf	7
  2573  002F  300F               	movlw	15
  2574  0030  319A  22EA  3180   	fcall	init_ram
  2575                           
  2576                           ; Clear objects allocated to BANK3
  2577  0033  30A0               	movlw	low __pbssBANK3
  2578  0034  0084               	movwf	4
  2579  0035  3001               	movlw	high __pbssBANK3
  2580  0036  0085               	movwf	5
  2581  0037  3023               	movlw	35
  2582  0038  319A  22E4  3180   	fcall	clear_ram0
  2583                           
  2584                           ; Clear objects allocated to BANK4
  2585  003B  3020               	movlw	low __pbssBANK4
  2586  003C  0084               	movwf	4
  2587  003D  3002               	movlw	high __pbssBANK4
  2588  003E  0085               	movwf	5
  2589  003F  3024               	movlw	36
  2590  0040  319A  22E4  3180   	fcall	clear_ram0
  2591                           
  2592                           ; Clear objects allocated to BANK5
  2593  0043  30A0               	movlw	low __pbssBANK5
  2594  0044  0084               	movwf	4
  2595  0045  3002               	movlw	high __pbssBANK5
  2596  0046  0085               	movwf	5
  2597  0047  3050               	movlw	80
  2598  0048  319A  22E4         	fcall	clear_ram0
  2599  004A                     end_of_initialization:	
  2600                           ;End of C runtime variable initialization code
  2601                           
  2602  004A                     __end_of__initialization:
  2603  004A  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2604  004B  0020               	movlb	0
  2605  004C  3192  2AC6         	ljmp	_main	;jump to C main() function
  2606                           
  2607                           	psect	bssBANK3
  2608  01A0                     __pbssBANK3:
  2609  01A0                     floorf@F527:
  2610  01A0                     	ds	4
  2611  01A4                     ___fpclassifyf@F465:
  2612  01A4                     	ds	4
  2613  01A8                     _errno:
  2614  01A8                     	ds	2
  2615  01AA                     _nout:
  2616  01AA                     	ds	2
  2617  01AC                     _width:
  2618  01AC                     	ds	2
  2619  01AE                     _prec:
  2620  01AE                     	ds	2
  2621  01B0                     _flags:
  2622  01B0                     	ds	2
  2623  01B2                     TMR2_Int_isr@counter:
  2624  01B2                     	ds	2
  2625  01B4                     _required_delay_for_dim_ms_g:
  2626  01B4                     	ds	2
  2627  01B6                     _ADC_InterruptHandler:
  2628  01B6                     	ds	2
  2629  01B8                     _packet_sample:
  2630  01B8                     	ds	2
  2631  01BA                     _eusartRxLastError:
  2632  01BA                     	ds	1
  2633  01BB                     _mtouch_request_init:
  2634  01BB                     	ds	1
  2635  01BC                     _mtouch_time_toScan:
  2636  01BC                     	ds	1
  2637  01BD                     _lowpowerActivated:
  2638  01BD                     	ds	1
  2639  01BE                     _sample_delay:
  2640  01BE                     	ds	1
  2641  01BF                     _packet_counter:
  2642  01BF                     	ds	1
  2643  01C0                     _currentScannSensor:
  2644  01C0                     	ds	1
  2645  01C1                     _sensor_globalFlags:
  2646  01C1                     	ds	1
  2647  01C2                     MTOUCH_Random@seed:
  2648  01C2                     	ds	1
  2649                           
  2650                           	psect	dataBANK3
  2651  01E2                     __pdataBANK3:
  2652  01E2                     _callback_notPressed:
  2653  01E2                     	ds	2
  2654  01E4                     _callback_pressed:
  2655  01E4                     	ds	2
  2656  01E6                     _Sensor_scanB:
  2657  01E6                     	ds	2
  2658  01E8                     _Sensor_scanA:
  2659  01E8                     	ds	2
  2660  01EA                     _callback_sampled:
  2661  01EA                     	ds	2
  2662                           
  2663                           	psect	bssBANK4
  2664  0220                     __pbssBANK4:
  2665  0220                     _Buff_g:
  2666  0220                     	ds	20
  2667  0234                     _mtouch_button:
  2668  0234                     	ds	16
  2669                           
  2670                           	psect	dataBANK4
  2671  0244                     __pdataBANK4:
  2672  0244                     _Button_StateMachine:
  2673  0244                     	ds	6
  2674  024A                     _mtouch_sensor:
  2675  024A                     	ds	9
  2676                           
  2677                           	psect	bssBANK5
  2678  02A0                     __pbssBANK5:
  2679  02A0                     _dbuf:
  2680  02A0                     	ds	80
  2681                           
  2682                           	psect	inittext
  2683  1AEA                     init_ram:
  2684  1AEA  00FE               	movwf	126
  2685  1AEB                     initloop:
  2686  1AEB  0012               	moviw fsr0++
  2687  1AEC  001E               	movwi fsr1++
  2688  1AED  0BFE               	decfsz	126,f
  2689  1AEE  2AEB               	goto	initloop
  2690  1AEF  3400               	retlw	0
  2691                           
  2692                           	psect	clrtext
  2693  1AE4                     clear_ram0:	
  2694                           ;	Called with FSR0 containing the base address, and
  2695                           ;	WREG with the size to clear
  2696                           
  2697  1AE4  0064               	clrwdt	;clear the watchdog before getting into this loop
  2698  1AE5                     clrloop0:
  2699  1AE5  0180               	clrf	0	;clear RAM location pointed to by FSR
  2700  1AE6  3101               	addfsr 0,1
  2701  1AE7  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2702  1AE8  2AE5               	goto	clrloop0	;have we reached the end yet?
  2703  1AE9  3400               	retlw	0	;all done for this memory range, return
  2704                           
  2705                           	psect	cstackBANK3
  2706  01C3                     __pcstackBANK3:
  2707  01C3                     ?_sprintf:
  2708  01C3                     sprintf@fmt:	
  2709                           ; 2 bytes @ 0x0
  2710                           
  2711                           
  2712                           ; 2 bytes @ 0x0
  2713  01C3                     	ds	8
  2714  01CB                     sprintf@s:
  2715                           
  2716                           ; 1 bytes @ 0x8
  2717  01CB                     	ds	1
  2718  01CC                     sprintf@ap:
  2719                           
  2720                           ; 1 bytes @ 0x9
  2721  01CC                     	ds	1
  2722  01CD                     sprintf@f:
  2723                           
  2724                           ; 5 bytes @ 0xA
  2725  01CD                     	ds	5
  2726  01D2                     ??_main:
  2727                           
  2728                           ; 1 bytes @ 0xF
  2729  01D2                     	ds	2
  2730  01D4                     main@ADC_volt:
  2731                           
  2732                           ; 4 bytes @ 0x11
  2733  01D4                     	ds	4
  2734  01D8                     main@R_PT100:
  2735                           
  2736                           ; 4 bytes @ 0x15
  2737  01D8                     	ds	4
  2738  01DC                     main@Temp_PT100:
  2739                           
  2740                           ; 4 bytes @ 0x19
  2741  01DC                     	ds	4
  2742  01E0                     main@ADC_num:
  2743                           
  2744                           ; 2 bytes @ 0x1D
  2745  01E0                     	ds	2
  2746                           
  2747                           	psect	cstackBANK2
  2748  0120                     __pcstackBANK2:
  2749  0120                     _efgtoa$2205:
  2750                           
  2751                           ; 2 bytes @ 0x0
  2752  0120                     	ds	2
  2753  0122                     _efgtoa$2206:
  2754                           
  2755                           ; 2 bytes @ 0x2
  2756  0122                     	ds	2
  2757  0124                     _efgtoa$2211:
  2758                           
  2759                           ; 2 bytes @ 0x4
  2760  0124                     	ds	2
  2761  0126                     _efgtoa$2215:
  2762                           
  2763                           ; 2 bytes @ 0x6
  2764  0126                     	ds	2
  2765  0128                     _efgtoa$2216:
  2766                           
  2767                           ; 2 bytes @ 0x8
  2768  0128                     	ds	2
  2769  012A                     _efgtoa$2217:
  2770                           
  2771                           ; 2 bytes @ 0xA
  2772  012A                     	ds	2
  2773  012C                     efgtoa@t:
  2774                           
  2775                           ; 2 bytes @ 0xC
  2776  012C                     	ds	2
  2777  012E                     efgtoa@pp:
  2778                           
  2779                           ; 2 bytes @ 0xE
  2780  012E                     	ds	2
  2781  0130                     efgtoa@ne:
  2782                           
  2783                           ; 2 bytes @ 0x10
  2784  0130                     	ds	2
  2785  0132                     efgtoa@m:
  2786                           
  2787                           ; 2 bytes @ 0x12
  2788  0132                     	ds	2
  2789  0134                     efgtoa@ou:
  2790                           
  2791                           ; 4 bytes @ 0x14
  2792  0134                     	ds	4
  2793  0138                     efgtoa@d:
  2794                           
  2795                           ; 2 bytes @ 0x18
  2796  0138                     	ds	2
  2797  013A                     efgtoa@sign:
  2798                           
  2799                           ; 2 bytes @ 0x1A
  2800  013A                     	ds	2
  2801  013C                     efgtoa@fp:
  2802                           
  2803                           ; 1 bytes @ 0x1C
  2804  013C                     	ds	1
  2805  013D                     efgtoa@p:
  2806                           
  2807                           ; 2 bytes @ 0x1D
  2808  013D                     	ds	2
  2809  013F                     efgtoa@w:
  2810                           
  2811                           ; 2 bytes @ 0x1F
  2812  013F                     	ds	2
  2813  0141                     efgtoa@nmode:
  2814                           
  2815                           ; 1 bytes @ 0x21
  2816  0141                     	ds	1
  2817  0142                     efgtoa@mode:
  2818                           
  2819                           ; 1 bytes @ 0x22
  2820  0142                     	ds	1
  2821  0143                     efgtoa@h:
  2822                           
  2823                           ; 4 bytes @ 0x23
  2824  0143                     	ds	4
  2825  0147                     efgtoa@l:
  2826                           
  2827                           ; 4 bytes @ 0x27
  2828  0147                     	ds	4
  2829  014B                     efgtoa@i:
  2830                           
  2831                           ; 2 bytes @ 0x2B
  2832  014B                     	ds	2
  2833  014D                     efgtoa@g:
  2834                           
  2835                           ; 4 bytes @ 0x2D
  2836  014D                     	ds	4
  2837  0151                     efgtoa@e:
  2838                           
  2839                           ; 2 bytes @ 0x31
  2840  0151                     	ds	2
  2841  0153                     efgtoa@n:
  2842                           
  2843                           ; 2 bytes @ 0x33
  2844  0153                     	ds	2
  2845  0155                     efgtoa@u:
  2846                           
  2847                           ; 4 bytes @ 0x35
  2848  0155                     	ds	4
  2849  0159                     ??_vfpfcnvrt:
  2850                           
  2851                           ; 1 bytes @ 0x39
  2852  0159                     	ds	6
  2853  015F                     _vfpfcnvrt$2234:
  2854                           
  2855                           ; 2 bytes @ 0x3F
  2856  015F                     	ds	2
  2857  0161                     vfpfcnvrt@f:
  2858                           
  2859                           ; 4 bytes @ 0x41
  2860  0161                     	ds	4
  2861  0165                     vfpfcnvrt@ct:
  2862                           
  2863                           ; 3 bytes @ 0x45
  2864  0165                     	ds	3
  2865  0168                     vfpfcnvrt@c:
  2866                           
  2867                           ; 1 bytes @ 0x48
  2868  0168                     	ds	1
  2869  0169                     vfpfcnvrt@fp:
  2870                           
  2871                           ; 1 bytes @ 0x49
  2872  0169                     	ds	1
  2873  016A                     ??_vfprintf:
  2874                           
  2875                           ; 1 bytes @ 0x4A
  2876  016A                     	ds	2
  2877  016C                     vfprintf@fp:
  2878                           
  2879                           ; 1 bytes @ 0x4C
  2880  016C                     	ds	1
  2881  016D                     vfprintf@cfmt:
  2882                           
  2883                           ; 2 bytes @ 0x4D
  2884  016D                     	ds	2
  2885  016F                     ??_sprintf:
  2886                           
  2887                           ; 1 bytes @ 0x4F
  2888  016F                     	ds	1
  2889                           
  2890                           	psect	cstackBANK1
  2891  00A0                     __pcstackBANK1:
  2892  00A0                     	ds	4
  2893  00A4                     sqrtf@s:
  2894                           
  2895                           ; 4 bytes @ 0x4
  2896  00A4                     	ds	4
  2897  00A8                     sqrtf@i:
  2898                           
  2899                           ; 4 bytes @ 0x8
  2900  00A8                     	ds	4
  2901  00AC                     sqrtf@__xc8_float_word:
  2902                           
  2903                           ; 4 bytes @ 0xC
  2904  00AC                     	ds	4
  2905  00B0                     sqrtf@q:
  2906                           
  2907                           ; 4 bytes @ 0x10
  2908  00B0                     	ds	4
  2909  00B4                     sqrtf@t:
  2910                           
  2911                           ; 4 bytes @ 0x14
  2912  00B4                     	ds	4
  2913  00B8                     sqrtf@z:
  2914                           
  2915                           ; 4 bytes @ 0x18
  2916  00B8                     	ds	4
  2917  00BC                     sqrtf@m:
  2918                           
  2919                           ; 4 bytes @ 0x1C
  2920  00BC                     	ds	4
  2921  00C0                     sqrtf@r:
  2922                           
  2923                           ; 4 bytes @ 0x20
  2924  00C0                     	ds	4
  2925  00C4                     sqrtf@ix:
  2926                           
  2927                           ; 4 bytes @ 0x24
  2928  00C4                     	ds	4
  2929  00C8                     ?___fldiv:
  2930  00C8                     ___fldiv@a:	
  2931                           ; 4 bytes @ 0x28
  2932                           
  2933                           
  2934                           ; 4 bytes @ 0x28
  2935  00C8                     	ds	4
  2936  00CC                     ___fldiv@b:
  2937                           
  2938                           ; 4 bytes @ 0x2C
  2939  00CC                     	ds	4
  2940  00D0                     ?_ChangeADCtoVoltage:
  2941  00D0                     ?_Measure_R_PT100_2Wire:	
  2942                           ; 4 bytes @ 0x30
  2943                           
  2944  00D0                     ?_Measure_Temp_PT100_2Wire:	
  2945                           ; 4 bytes @ 0x30
  2946                           
  2947  00D0                     ?_floorf:	
  2948                           ; 4 bytes @ 0x30
  2949                           
  2950  00D0                     ?___fltol:	
  2951                           ; 4 bytes @ 0x30
  2952                           
  2953  00D0                     ChangeADCtoVoltage@ADC_number:	
  2954                           ; 4 bytes @ 0x30
  2955                           
  2956  00D0                     Measure_R_PT100_2Wire@ADC_volt:	
  2957                           ; 2 bytes @ 0x30
  2958                           
  2959  00D0                     Measure_Temp_PT100_2Wire@R_PT100:	
  2960                           ; 4 bytes @ 0x30
  2961                           
  2962  00D0                     ___fltol@f1:	
  2963                           ; 4 bytes @ 0x30
  2964                           
  2965  00D0                     floorf@x:	
  2966                           ; 4 bytes @ 0x30
  2967                           
  2968                           
  2969                           ; 4 bytes @ 0x30
  2970  00D0                     	ds	4
  2971  00D4                     ??_floorf:
  2972  00D4                     ??___fltol:	
  2973                           ; 1 bytes @ 0x34
  2974                           
  2975  00D4                     Measure_Temp_PT100_2Wire@Temp_PT100:	
  2976                           ; 1 bytes @ 0x34
  2977                           
  2978                           
  2979                           ; 4 bytes @ 0x34
  2980  00D4                     	ds	4
  2981  00D8                     _Measure_Temp_PT100_2Wire$2709:
  2982                           
  2983                           ; 4 bytes @ 0x38
  2984  00D8                     	ds	1
  2985  00D9                     ?_CalcRequiredDelayForTrigTRIAC:
  2986  00D9                     CalcRequiredDelayForTrigTRIAC@dim_percentage:	
  2987                           ; 2 bytes @ 0x39
  2988                           
  2989                           
  2990                           ; 4 bytes @ 0x39
  2991  00D9                     	ds	1
  2992  00DA                     floorf@m:
  2993                           
  2994                           ; 4 bytes @ 0x3A
  2995  00DA                     	ds	2
  2996  00DC                     _Measure_Temp_PT100_2Wire$2710:
  2997                           
  2998                           ; 4 bytes @ 0x3C
  2999  00DC                     	ds	1
  3000  00DD                     CalcRequiredDelayForTrigTRIAC@delay:
  3001                           
  3002                           ; 4 bytes @ 0x3D
  3003  00DD                     	ds	1
  3004  00DE                     floorf@e:
  3005                           
  3006                           ; 2 bytes @ 0x3E
  3007  00DE                     	ds	2
  3008  00E0                     floorf@u:
  3009  00E0                     _Measure_Temp_PT100_2Wire$2711:	
  3010                           ; 4 bytes @ 0x40
  3011                           
  3012                           
  3013                           ; 4 bytes @ 0x40
  3014  00E0                     	ds	1
  3015  00E1                     CalcRequiredDelayForTrigTRIAC@ret:
  3016                           
  3017                           ; 2 bytes @ 0x41
  3018  00E1                     	ds	3
  3019  00E4                     ?_efgtoa:
  3020  00E4                     efgtoa@f:	
  3021                           ; 2 bytes @ 0x44
  3022                           
  3023                           
  3024                           ; 4 bytes @ 0x44
  3025  00E4                     	ds	4
  3026  00E8                     efgtoa@c:
  3027                           
  3028                           ; 1 bytes @ 0x48
  3029  00E8                     	ds	1
  3030  00E9                     ??_efgtoa:
  3031                           
  3032                           ; 1 bytes @ 0x49
  3033  00E9                     	ds	4
  3034  00ED                     ?_vfprintf:
  3035  00ED                     vfprintf@fmt:	
  3036                           ; 2 bytes @ 0x4D
  3037                           
  3038                           
  3039                           ; 2 bytes @ 0x4D
  3040  00ED                     	ds	2
  3041  00EF                     vfprintf@ap:
  3042                           
  3043                           ; 1 bytes @ 0x4F
  3044  00EF                     	ds	1
  3045                           
  3046                           	psect	cstackCOMMON
  3047  0070                     __pcstackCOMMON:
  3048  0070                     ?___fleq:
  3049  0070                     ?_MTOUCH_Sensor_Enable:	
  3050                           ; 1 bit 
  3051                           
  3052  0070                     ?_Sensor_Sampled_Reset:	
  3053                           ; 1 bytes @ 0x0
  3054                           
  3055  0070                     ??_Sensor_Sampled_Reset:	
  3056                           ; 1 bytes @ 0x0
  3057                           
  3058  0070                     ?_memcpy:	
  3059                           ; 1 bytes @ 0x0
  3060                           
  3061  0070                     ?_PIN_MANAGER_Initialize:	
  3062                           ; 1 bytes @ 0x0
  3063                           
  3064  0070                     ?_OSCILLATOR_Initialize:	
  3065                           ; 1 bytes @ 0x0
  3066                           
  3067  0070                     ??_OSCILLATOR_Initialize:	
  3068                           ; 1 bytes @ 0x0
  3069                           
  3070  0070                     ?_WDT_Initialize:	
  3071                           ; 1 bytes @ 0x0
  3072                           
  3073  0070                     ??_WDT_Initialize:	
  3074                           ; 1 bytes @ 0x0
  3075                           
  3076  0070                     ?_ADC_Initialize:	
  3077                           ; 1 bytes @ 0x0
  3078                           
  3079  0070                     ??_ADC_Initialize:	
  3080                           ; 1 bytes @ 0x0
  3081                           
  3082  0070                     ?_TMR2_Initialize:	
  3083                           ; 1 bytes @ 0x0
  3084                           
  3085  0070                     ?_EUSART_Initialize:	
  3086                           ; 1 bytes @ 0x0
  3087                           
  3088  0070                     ?_IOCAF2_SetInterruptHandler:	
  3089                           ; 1 bytes @ 0x0
  3090                           
  3091  0070                     ?_IOCAF2_DefaultInterruptHandler:	
  3092                           ; 1 bytes @ 0x0
  3093                           
  3094  0070                     ??_IOCAF2_DefaultInterruptHandler:	
  3095                           ; 1 bytes @ 0x0
  3096                           
  3097  0070                     ?_IOCAF2_ISR:	
  3098                           ; 1 bytes @ 0x0
  3099                           
  3100  0070                     ??_IOCAF2_ISR:	
  3101                           ; 1 bytes @ 0x0
  3102                           
  3103  0070                     ?_EUSART_SetFramingErrorHandler:	
  3104                           ; 1 bytes @ 0x0
  3105                           
  3106  0070                     ?_EUSART_SetOverrunErrorHandler:	
  3107                           ; 1 bytes @ 0x0
  3108                           
  3109  0070                     ?_EUSART_SetErrorHandler:	
  3110                           ; 1 bytes @ 0x0
  3111                           
  3112  0070                     ?_TMR2_ISR:	
  3113                           ; 1 bytes @ 0x0
  3114                           
  3115  0070                     ??_TMR2_ISR:	
  3116                           ; 1 bytes @ 0x0
  3117                           
  3118  0070                     ?_Init_Function:	
  3119                           ; 1 bytes @ 0x0
  3120                           
  3121  0070                     ?_StartStop_AlarmLED:	
  3122                           ; 1 bytes @ 0x0
  3123                           
  3124  0070                     ??_StartStop_AlarmLED:	
  3125                           ; 1 bytes @ 0x0
  3126                           
  3127  0070                     ?_Zero_Detection_isr:	
  3128                           ; 1 bytes @ 0x0
  3129                           
  3130  0070                     ??_Zero_Detection_isr:	
  3131                           ; 1 bytes @ 0x0
  3132                           
  3133  0070                     ?_TMR2_SetInterruptHandler:	
  3134                           ; 1 bytes @ 0x0
  3135                           
  3136  0070                     ?_TMR2_Int_isr:	
  3137                           ; 1 bytes @ 0x0
  3138                           
  3139  0070                     ??_TMR2_Int_isr:	
  3140                           ; 1 bytes @ 0x0
  3141                           
  3142  0070                     ?_TX_Whole_String:	
  3143                           ; 1 bytes @ 0x0
  3144                           
  3145  0070                     ?_StartStop_Fan:	
  3146                           ; 1 bytes @ 0x0
  3147                           
  3148  0070                     ??_StartStop_Fan:	
  3149                           ; 1 bytes @ 0x0
  3150                           
  3151  0070                     ?_StartStop_Buzzer:	
  3152                           ; 1 bytes @ 0x0
  3153                           
  3154  0070                     ??_StartStop_Buzzer:	
  3155                           ; 1 bytes @ 0x0
  3156                           
  3157  0070                     ?_TMR2_StartTimer:	
  3158                           ; 1 bytes @ 0x0
  3159                           
  3160  0070                     ??_TMR2_StartTimer:	
  3161                           ; 1 bytes @ 0x0
  3162                           
  3163  0070                     ?_TMR2_StopTimer:	
  3164                           ; 1 bytes @ 0x0
  3165                           
  3166  0070                     ??_TMR2_StopTimer:	
  3167                           ; 1 bytes @ 0x0
  3168                           
  3169  0070                     ?_TMR2_DefaultInterruptHandler:	
  3170                           ; 1 bytes @ 0x0
  3171                           
  3172  0070                     ??_TMR2_DefaultInterruptHandler:	
  3173                           ; 1 bytes @ 0x0
  3174                           
  3175  0070                     ?_strcpy:	
  3176                           ; 1 bytes @ 0x0
  3177                           
  3178  0070                     ?_putch:	
  3179                           ; 1 bytes @ 0x0
  3180                           
  3181  0070                     ??_putch:	
  3182                           ; 1 bytes @ 0x0
  3183                           
  3184  0070                     ?_MTOUCH_Sensor_Initialize:	
  3185                           ; 1 bytes @ 0x0
  3186                           
  3187  0070                     ?_MTOUCH_Sensor_InitializeAll:	
  3188                           ; 1 bytes @ 0x0
  3189                           
  3190  0070                     ?_MTOUCH_Sensor_Scan_Initialize:	
  3191                           ; 1 bytes @ 0x0
  3192                           
  3193  0070                     ??_MTOUCH_Sensor_Scan_Initialize:	
  3194                           ; 1 bytes @ 0x0
  3195                           
  3196  0070                     ?_MTOUCH_Sensor_Calibrate:	
  3197                           ; 1 bytes @ 0x0
  3198                           
  3199  0070                     ??_MTOUCH_Sensor_Calibrate:	
  3200                           ; 1 bytes @ 0x0
  3201                           
  3202  0070                     ?_MTOUCH_Sensor_Sampled_ResetAll:	
  3203                           ; 1 bytes @ 0x0
  3204                           
  3205  0070                     ?_MTOUCH_Button_Initialize:	
  3206                           ; 1 bytes @ 0x0
  3207                           
  3208  0070                     ??_MTOUCH_Button_Initialize:	
  3209                           ; 1 bytes @ 0x0
  3210                           
  3211  0070                     ?_MTOUCH_Button_InitializeAll:	
  3212                           ; 1 bytes @ 0x0
  3213                           
  3214  0070                     ?_MTOUCH_Initialize:	
  3215                           ; 1 bytes @ 0x0
  3216                           
  3217  0070                     ?_SYSTEM_Initialize:	
  3218                           ; 1 bytes @ 0x0
  3219                           
  3220  0070                     ?_PIN_MANAGER_IOC:	
  3221                           ; 1 bytes @ 0x0
  3222                           
  3223  0070                     ??_PIN_MANAGER_IOC:	
  3224                           ; 1 bytes @ 0x0
  3225                           
  3226  0070                     ?_EUSART_is_tx_ready:	
  3227                           ; 1 bytes @ 0x0
  3228                           
  3229  0070                     ??_EUSART_is_tx_ready:	
  3230                           ; 1 bytes @ 0x0
  3231                           
  3232  0070                     ?_EUSART_Write:	
  3233                           ; 1 bytes @ 0x0
  3234                           
  3235  0070                     ??_EUSART_Write:	
  3236                           ; 1 bytes @ 0x0
  3237                           
  3238  0070                     ?_ADC_SelectChannel:	
  3239                           ; 1 bytes @ 0x0
  3240                           
  3241  0070                     ??_ADC_SelectChannel:	
  3242                           ; 1 bytes @ 0x0
  3243                           
  3244  0070                     ?_ADC_StartConversion:	
  3245                           ; 1 bytes @ 0x0
  3246                           
  3247  0070                     ??_ADC_StartConversion:	
  3248                           ; 1 bytes @ 0x0
  3249                           
  3250  0070                     ?_ADC_IsConversionDone:	
  3251                           ; 1 bytes @ 0x0
  3252                           
  3253  0070                     ??_ADC_IsConversionDone:	
  3254                           ; 1 bytes @ 0x0
  3255                           
  3256  0070                     ?_INTERRUPT_InterruptManager:	
  3257                           ; 1 bytes @ 0x0
  3258                           
  3259  0070                     ??_INTERRUPT_InterruptManager:	
  3260                           ; 1 bytes @ 0x0
  3261                           
  3262  0070                     ?_main:	
  3263                           ; 1 bytes @ 0x0
  3264                           
  3265  0070                     ?_TX_Command:	
  3266                           ; 1 bytes @ 0x0
  3267                           
  3268  0070                     ?___bmul:	
  3269                           ; 1 bytes @ 0x0
  3270                           
  3271  0070                     ?_strlen:	
  3272                           ; 1 bytes @ 0x0
  3273                           
  3274  0070                     ?__Umul8_16:	
  3275                           ; 2 bytes @ 0x0
  3276                           
  3277  0070                     ?_fputc:	
  3278                           ; 2 bytes @ 0x0
  3279                           
  3280  0070                     ?___fpclassifyf:	
  3281                           ; 2 bytes @ 0x0
  3282                           
  3283  0070                     ?_isupper:	
  3284                           ; 2 bytes @ 0x0
  3285                           
  3286  0070                     ?_strncmp:	
  3287                           ; 2 bytes @ 0x0
  3288                           
  3289  0070                     ?_ADC_GetConversionResult:	
  3290                           ; 2 bytes @ 0x0
  3291                           
  3292  0070                     ?___awdiv:	
  3293                           ; 2 bytes @ 0x0
  3294                           
  3295  0070                     ?___awmod:	
  3296                           ; 2 bytes @ 0x0
  3297                           
  3298  0070                     ?_nanf:	
  3299                           ; 2 bytes @ 0x0
  3300                           
  3301  0070                     ?___flneg:	
  3302                           ; 4 bytes @ 0x0
  3303                           
  3304  0070                     ?___xxtofl:	
  3305                           ; 4 bytes @ 0x0
  3306                           
  3307  0070                     MTOUCH_Sensor_Calibrate@sensor:	
  3308                           ; 4 bytes @ 0x0
  3309                           
  3310  0070                     Sensor_Sampled_Reset@sensor:	
  3311                           ; 1 bytes @ 0x0
  3312                           
  3313  0070                     _EUSART_is_tx_ready$1151:	
  3314                           ; 1 bytes @ 0x0
  3315                           
  3316  0070                     EUSART_Write@txData:	
  3317                           ; 1 bytes @ 0x0
  3318                           
  3319  0070                     StartStop_AlarmLED@OnOff:	
  3320                           ; 1 bytes @ 0x0
  3321                           
  3322  0070                     StartStop_Fan@OnOff:	
  3323                           ; 1 bytes @ 0x0
  3324                           
  3325  0070                     StartStop_Buzzer@OnOff:	
  3326                           ; 1 bytes @ 0x0
  3327                           
  3328  0070                     ___bmul@multiplicand:	
  3329                           ; 1 bytes @ 0x0
  3330                           
  3331  0070                     __Umul8_16@multiplicand:	
  3332                           ; 1 bytes @ 0x0
  3333                           
  3334  0070                     putch@c:	
  3335                           ; 1 bytes @ 0x0
  3336                           
  3337  0070                     IOCAF2_SetInterruptHandler@InterruptHandler:	
  3338                           ; 1 bytes @ 0x0
  3339                           
  3340  0070                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3341                           ; 2 bytes @ 0x0
  3342                           
  3343  0070                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3344                           ; 2 bytes @ 0x0
  3345                           
  3346  0070                     EUSART_SetErrorHandler@interruptHandler:	
  3347                           ; 2 bytes @ 0x0
  3348                           
  3349  0070                     TMR2_SetInterruptHandler@InterruptHandler:	
  3350                           ; 2 bytes @ 0x0
  3351                           
  3352  0070                     ___awdiv@divisor:	
  3353                           ; 2 bytes @ 0x0
  3354                           
  3355  0070                     ___awmod@divisor:	
  3356                           ; 2 bytes @ 0x0
  3357                           
  3358  0070                     memcpy@s1:	
  3359                           ; 2 bytes @ 0x0
  3360                           
  3361  0070                     isupper@c:	
  3362                           ; 2 bytes @ 0x0
  3363                           
  3364  0070                     fputc@c:	
  3365                           ; 2 bytes @ 0x0
  3366                           
  3367  0070                     nanf@s:	
  3368                           ; 2 bytes @ 0x0
  3369                           
  3370  0070                     strcpy@src:	
  3371                           ; 2 bytes @ 0x0
  3372                           
  3373  0070                     strncmp@_r:	
  3374                           ; 2 bytes @ 0x0
  3375                           
  3376  0070                     ___fleq@ff1:	
  3377                           ; 2 bytes @ 0x0
  3378                           
  3379  0070                     ___flneg@f1:	
  3380                           ; 4 bytes @ 0x0
  3381                           
  3382  0070                     ___xxtofl@val:	
  3383                           ; 4 bytes @ 0x0
  3384                           
  3385  0070                     ___fpclassifyf@x:	
  3386                           ; 4 bytes @ 0x0
  3387                           
  3388                           
  3389                           ; 4 bytes @ 0x0
  3390  0070                     	ds	1
  3391  0071                     ??_Init_Function:
  3392  0071                     ??_MTOUCH_Sensor_Sampled_ResetAll:	
  3393                           ; 1 bytes @ 0x1
  3394                           
  3395  0071                     ??_TX_Command:	
  3396                           ; 1 bytes @ 0x1
  3397                           
  3398  0071                     ??___bmul:	
  3399                           ; 1 bytes @ 0x1
  3400                           
  3401  0071                     ADC_SelectChannel@channel:	
  3402                           ; 1 bytes @ 0x1
  3403                           
  3404  0071                     TX_Command@txData:	
  3405                           ; 1 bytes @ 0x1
  3406                           
  3407                           
  3408                           ; 1 bytes @ 0x1
  3409  0071                     	ds	1
  3410  0072                     ??_PIN_MANAGER_Initialize:
  3411  0072                     ??_TMR2_Initialize:	
  3412                           ; 1 bytes @ 0x2
  3413                           
  3414  0072                     ??_EUSART_Initialize:	
  3415                           ; 1 bytes @ 0x2
  3416                           
  3417  0072                     ??_IOCAF2_SetInterruptHandler:	
  3418                           ; 1 bytes @ 0x2
  3419                           
  3420  0072                     ??_EUSART_SetFramingErrorHandler:	
  3421                           ; 1 bytes @ 0x2
  3422                           
  3423  0072                     ??_EUSART_SetOverrunErrorHandler:	
  3424                           ; 1 bytes @ 0x2
  3425                           
  3426  0072                     ??_EUSART_SetErrorHandler:	
  3427                           ; 1 bytes @ 0x2
  3428                           
  3429  0072                     ??_TMR2_SetInterruptHandler:	
  3430                           ; 1 bytes @ 0x2
  3431                           
  3432  0072                     ??_strlen:	
  3433                           ; 1 bytes @ 0x2
  3434                           
  3435  0072                     ??__Umul8_16:	
  3436                           ; 1 bytes @ 0x2
  3437                           
  3438  0072                     ??_isupper:	
  3439                           ; 1 bytes @ 0x2
  3440                           
  3441  0072                     ??_strcpy:	
  3442                           ; 1 bytes @ 0x2
  3443                           
  3444  0072                     ??_ADC_GetConversionResult:	
  3445                           ; 1 bytes @ 0x2
  3446                           
  3447  0072                     ?_Read_ADC_Num:	
  3448                           ; 1 bytes @ 0x2
  3449                           
  3450  0072                     MTOUCH_Sensor_Sampled_ResetAll@sensor:	
  3451                           ; 2 bytes @ 0x2
  3452                           
  3453  0072                     MTOUCH_Button_Initialize@name:	
  3454                           ; 1 bytes @ 0x2
  3455                           
  3456  0072                     ___bmul@product:	
  3457                           ; 1 bytes @ 0x2
  3458                           
  3459  0072                     fputc@fp:	
  3460                           ; 1 bytes @ 0x2
  3461                           
  3462  0072                     ___awdiv@dividend:	
  3463                           ; 1 bytes @ 0x2
  3464                           
  3465  0072                     ___awmod@dividend:	
  3466                           ; 2 bytes @ 0x2
  3467                           
  3468  0072                     memcpy@n:	
  3469                           ; 2 bytes @ 0x2
  3470                           
  3471  0072                     strncmp@n:	
  3472                           ; 2 bytes @ 0x2
  3473                           
  3474                           
  3475                           ; 2 bytes @ 0x2
  3476  0072                     	ds	1
  3477  0073                     ??_fputc:
  3478  0073                     MTOUCH_Button_Initialize@button:	
  3479                           ; 1 bytes @ 0x3
  3480                           
  3481  0073                     ___bmul@multiplier:	
  3482                           ; 1 bytes @ 0x3
  3483                           
  3484  0073                     strlen@a:	
  3485                           ; 1 bytes @ 0x3
  3486                           
  3487                           
  3488                           ; 1 bytes @ 0x3
  3489  0073                     	ds	1
  3490  0074                     ??_MTOUCH_Sensor_Enable:
  3491  0074                     ??_memcpy:	
  3492                           ; 1 bytes @ 0x4
  3493                           
  3494  0074                     ??_Read_ADC_Num:	
  3495                           ; 1 bytes @ 0x4
  3496                           
  3497  0074                     ??___fpclassifyf:	
  3498                           ; 1 bytes @ 0x4
  3499                           
  3500  0074                     ??_strncmp:	
  3501                           ; 1 bytes @ 0x4
  3502                           
  3503  0074                     ??_nanf:	
  3504                           ; 1 bytes @ 0x4
  3505                           
  3506  0074                     ??___awdiv:	
  3507                           ; 1 bytes @ 0x4
  3508                           
  3509  0074                     ??___awmod:	
  3510                           ; 1 bytes @ 0x4
  3511                           
  3512  0074                     ??___flneg:	
  3513                           ; 1 bytes @ 0x4
  3514                           
  3515  0074                     ??___xxtofl:	
  3516                           ; 1 bytes @ 0x4
  3517                           
  3518  0074                     strlen@s:	
  3519                           ; 1 bytes @ 0x4
  3520                           
  3521  0074                     Read_ADC_Num@convertedValue:	
  3522                           ; 1 bytes @ 0x4
  3523                           
  3524  0074                     __Umul8_16@product:	
  3525                           ; 2 bytes @ 0x4
  3526                           
  3527  0074                     strcpy@s:	
  3528                           ; 2 bytes @ 0x4
  3529                           
  3530  0074                     ___fleq@ff2:	
  3531                           ; 2 bytes @ 0x4
  3532                           
  3533  0074                     nanf@u:	
  3534                           ; 4 bytes @ 0x4
  3535                           
  3536                           
  3537                           ; 4 bytes @ 0x4
  3538  0074                     	ds	1
  3539  0075                     ??_TX_Whole_String:
  3540  0075                     MTOUCH_Sensor_Enable@sensor:	
  3541                           ; 1 bytes @ 0x5
  3542                           
  3543  0075                     ___awdiv@counter:	
  3544                           ; 1 bytes @ 0x5
  3545                           
  3546  0075                     ___awmod@counter:	
  3547                           ; 1 bytes @ 0x5
  3548                           
  3549  0075                     strncmp@_l:	
  3550                           ; 1 bytes @ 0x5
  3551                           
  3552  0075                     memcpy@s:	
  3553                           ; 1 bytes @ 0x5
  3554                           
  3555                           
  3556                           ; 2 bytes @ 0x5
  3557  0075                     	ds	1
  3558  0076                     ??_MTOUCH_Sensor_Initialize:
  3559  0076                     ?_tolower:	
  3560                           ; 1 bytes @ 0x6
  3561                           
  3562  0076                     ___awdiv@sign:	
  3563                           ; 2 bytes @ 0x6
  3564                           
  3565  0076                     ___awmod@sign:	
  3566                           ; 1 bytes @ 0x6
  3567                           
  3568  0076                     strcpy@d:	
  3569                           ; 1 bytes @ 0x6
  3570                           
  3571  0076                     __Umul8_16@word_mpld:	
  3572                           ; 1 bytes @ 0x6
  3573                           
  3574  0076                     strncmp@r:	
  3575                           ; 2 bytes @ 0x6
  3576                           
  3577  0076                     tolower@c:	
  3578                           ; 2 bytes @ 0x6
  3579                           
  3580                           
  3581                           ; 2 bytes @ 0x6
  3582  0076                     	ds	1
  3583  0077                     MTOUCH_Sensor_Initialize@sensor:
  3584  0077                     memcpy@tmp:	
  3585                           ; 1 bytes @ 0x7
  3586                           
  3587  0077                     strcpy@dest:	
  3588                           ; 1 bytes @ 0x7
  3589                           
  3590  0077                     TX_Whole_String@size_of_string:	
  3591                           ; 1 bytes @ 0x7
  3592                           
  3593  0077                     ___awdiv@quotient:	
  3594                           ; 2 bytes @ 0x7
  3595                           
  3596                           
  3597                           ; 2 bytes @ 0x7
  3598  0077                     	ds	1
  3599  0078                     ??_tolower:
  3600  0078                     ??_MTOUCH_Sensor_InitializeAll:	
  3601                           ; 1 bytes @ 0x8
  3602                           
  3603  0078                     ??___fleq:	
  3604                           ; 1 bytes @ 0x8
  3605                           
  3606  0078                     ?_fputs:	
  3607                           ; 1 bytes @ 0x8
  3608                           
  3609  0078                     __Umul8_16@multiplier:	
  3610                           ; 2 bytes @ 0x8
  3611                           
  3612  0078                     ___xxtofl@sign:	
  3613                           ; 1 bytes @ 0x8
  3614                           
  3615  0078                     memcpy@d1:	
  3616                           ; 1 bytes @ 0x8
  3617                           
  3618  0078                     fputs@fp:	
  3619                           ; 1 bytes @ 0x8
  3620                           
  3621  0078                     strncmp@l:	
  3622                           ; 1 bytes @ 0x8
  3623                           
  3624                           
  3625                           ; 1 bytes @ 0x8
  3626  0078                     	ds	1
  3627  0079                     ??_fputs:
  3628  0079                     MTOUCH_Sensor_InitializeAll@sensor:	
  3629                           ; 1 bytes @ 0x9
  3630                           
  3631  0079                     TX_Whole_String@input_string:	
  3632                           ; 1 bytes @ 0x9
  3633                           
  3634  0079                     ___xxtofl@exp:	
  3635                           ; 1 bytes @ 0x9
  3636                           
  3637  0079                     memcpy@d:	
  3638                           ; 1 bytes @ 0x9
  3639                           
  3640                           
  3641                           ; 1 bytes @ 0x9
  3642  0079                     	ds	1
  3643  007A                     ??_MTOUCH_Button_InitializeAll:
  3644  007A                     TX_Whole_String@i:	
  3645                           ; 1 bytes @ 0xA
  3646                           
  3647  007A                     ___xxtofl@arg:	
  3648                           ; 1 bytes @ 0xA
  3649                           
  3650                           
  3651                           ; 4 bytes @ 0xA
  3652  007A                     	ds	1
  3653  007B                     MTOUCH_Button_InitializeAll@button:
  3654                           
  3655                           ; 1 bytes @ 0xB
  3656  007B                     	ds	1
  3657  007C                     ??_MTOUCH_Initialize:
  3658  007C                     ??_SYSTEM_Initialize:	
  3659                           ; 1 bytes @ 0xC
  3660                           
  3661  007C                     ??_pad:	
  3662                           ; 1 bytes @ 0xC
  3663                           
  3664  007C                     _tolower$2366:	
  3665                           ; 1 bytes @ 0xC
  3666                           
  3667                           
  3668                           ; 2 bytes @ 0xC
  3669  007C                     	ds	2
  3670  007E                     ??_CalcRequiredDelayForTrigTRIAC:
  3671  007E                     ??_ChangeADCtoVoltage:	
  3672                           ; 1 bytes @ 0xE
  3673                           
  3674  007E                     ??_Measure_R_PT100_2Wire:	
  3675                           ; 1 bytes @ 0xE
  3676                           
  3677  007E                     ??_Measure_Temp_PT100_2Wire:	
  3678                           ; 1 bytes @ 0xE
  3679                           
  3680  007E                     ??___flsub:	
  3681                           ; 1 bytes @ 0xE
  3682                           
  3683                           
  3684                           	psect	cstackBANK0
  3685  0020                     __pcstackBANK0:	
  3686                           ; 1 bytes @ 0xE
  3687                           
  3688  0020                     ?___flmul:
  3689  0020                     fputs@c:	
  3690                           ; 4 bytes @ 0x0
  3691                           
  3692  0020                     ___fpclassifyf@e:	
  3693                           ; 1 bytes @ 0x0
  3694                           
  3695  0020                     ___flmul@b:	
  3696                           ; 2 bytes @ 0x0
  3697                           
  3698                           
  3699                           ; 4 bytes @ 0x0
  3700  0020                     	ds	1
  3701  0021                     fputs@i:
  3702                           
  3703                           ; 2 bytes @ 0x1
  3704  0021                     	ds	1
  3705  0022                     ___fpclassifyf@u:
  3706                           
  3707                           ; 4 bytes @ 0x2
  3708  0022                     	ds	1
  3709  0023                     fputs@s:
  3710                           
  3711                           ; 1 bytes @ 0x3
  3712  0023                     	ds	1
  3713  0024                     ?_pad:
  3714  0024                     pad@buf:	
  3715                           ; 2 bytes @ 0x4
  3716                           
  3717  0024                     ___flmul@a:	
  3718                           ; 1 bytes @ 0x4
  3719                           
  3720                           
  3721                           ; 4 bytes @ 0x4
  3722  0024                     	ds	1
  3723  0025                     pad@p:
  3724                           
  3725                           ; 2 bytes @ 0x5
  3726  0025                     	ds	2
  3727  0027                     pad@i:
  3728                           
  3729                           ; 2 bytes @ 0x7
  3730  0027                     	ds	1
  3731  0028                     ??___flmul:
  3732                           
  3733                           ; 1 bytes @ 0x8
  3734  0028                     	ds	1
  3735  0029                     pad@w:
  3736                           
  3737                           ; 2 bytes @ 0x9
  3738  0029                     	ds	2
  3739  002B                     pad@fp:
  3740                           
  3741                           ; 1 bytes @ 0xB
  3742  002B                     	ds	2
  3743  002D                     ___flmul@sign:
  3744                           
  3745                           ; 1 bytes @ 0xD
  3746  002D                     	ds	1
  3747  002E                     ___flmul@aexp:
  3748                           
  3749                           ; 1 bytes @ 0xE
  3750  002E                     	ds	1
  3751  002F                     ___flmul@grs:
  3752                           
  3753                           ; 4 bytes @ 0xF
  3754  002F                     	ds	4
  3755  0033                     ___flmul@bexp:
  3756                           
  3757                           ; 1 bytes @ 0x13
  3758  0033                     	ds	1
  3759  0034                     ___flmul@prod:
  3760                           
  3761                           ; 4 bytes @ 0x14
  3762  0034                     	ds	4
  3763  0038                     ___flmul@temp:
  3764                           
  3765                           ; 2 bytes @ 0x18
  3766  0038                     	ds	2
  3767  003A                     ?___flge:
  3768  003A                     ?___fladd:	
  3769                           ; 1 bit 
  3770                           
  3771  003A                     ___flge@ff1:	
  3772                           ; 4 bytes @ 0x1A
  3773                           
  3774  003A                     ___fladd@b:	
  3775                           ; 4 bytes @ 0x1A
  3776                           
  3777                           
  3778                           ; 4 bytes @ 0x1A
  3779  003A                     	ds	4
  3780  003E                     ___flge@ff2:
  3781  003E                     ___fladd@a:	
  3782                           ; 4 bytes @ 0x1E
  3783                           
  3784                           
  3785                           ; 4 bytes @ 0x1E
  3786  003E                     	ds	4
  3787  0042                     ??___flge:
  3788  0042                     ??___fladd:	
  3789                           ; 1 bytes @ 0x22
  3790                           
  3791                           
  3792                           ; 1 bytes @ 0x22
  3793  0042                     	ds	8
  3794  004A                     ___fladd@signs:
  3795                           
  3796                           ; 1 bytes @ 0x2A
  3797  004A                     	ds	1
  3798  004B                     ___fladd@aexp:
  3799                           
  3800                           ; 1 bytes @ 0x2B
  3801  004B                     	ds	1
  3802  004C                     ___fladd@bexp:
  3803                           
  3804                           ; 1 bytes @ 0x2C
  3805  004C                     	ds	1
  3806  004D                     ___fladd@grs:
  3807                           
  3808                           ; 1 bytes @ 0x2D
  3809  004D                     	ds	1
  3810  004E                     ?_sqrtf:
  3811  004E                     ?___flsub:	
  3812                           ; 4 bytes @ 0x2E
  3813                           
  3814  004E                     ___flsub@a:	
  3815                           ; 4 bytes @ 0x2E
  3816                           
  3817  004E                     sqrtf@x:	
  3818                           ; 4 bytes @ 0x2E
  3819                           
  3820                           
  3821                           ; 4 bytes @ 0x2E
  3822  004E                     	ds	4
  3823  0052                     ??_sqrtf:
  3824  0052                     ___flsub@b:	
  3825                           ; 1 bytes @ 0x32
  3826                           
  3827                           
  3828                           ; 4 bytes @ 0x32
  3829  0052                     	ds	8
  3830  005A                     ??___fldiv:
  3831                           
  3832                           ; 1 bytes @ 0x3A
  3833  005A                     	ds	5
  3834  005F                     ___fldiv@rem:
  3835                           
  3836                           ; 4 bytes @ 0x3F
  3837  005F                     	ds	4
  3838  0063                     ___fldiv@sign:
  3839                           
  3840                           ; 1 bytes @ 0x43
  3841  0063                     	ds	1
  3842  0064                     ___fldiv@new_exp:
  3843                           
  3844                           ; 2 bytes @ 0x44
  3845  0064                     	ds	2
  3846  0066                     ___fldiv@grs:
  3847                           
  3848                           ; 4 bytes @ 0x46
  3849  0066                     	ds	4
  3850  006A                     ___fldiv@bexp:
  3851                           
  3852                           ; 1 bytes @ 0x4A
  3853  006A                     	ds	1
  3854  006B                     ___fldiv@aexp:
  3855                           
  3856                           ; 1 bytes @ 0x4B
  3857  006B                     	ds	1
  3858  006C                     ___fltol@sign1:
  3859  006C                     Measure_R_PT100_2Wire@R_PT100:	
  3860                           ; 1 bytes @ 0x4C
  3861                           
  3862                           
  3863                           ; 4 bytes @ 0x4C
  3864  006C                     	ds	1
  3865  006D                     ___fltol@exp1:
  3866                           
  3867                           ; 1 bytes @ 0x4D
  3868  006D                     	ds	1
  3869  006E                     ?_vfpfcnvrt:
  3870  006E                     vfpfcnvrt@fmt:	
  3871                           ; 2 bytes @ 0x4E
  3872                           
  3873                           
  3874                           ; 1 bytes @ 0x4E
  3875  006E                     	ds	1
  3876  006F                     vfpfcnvrt@ap:
  3877                           
  3878                           ; 1 bytes @ 0x4F
  3879  006F                     	ds	1
  3880                           
  3881                           	psect	maintext
  3882  12C6                     __pmaintext:	
  3883 ;;
  3884 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3885 ;;
  3886 ;; *************** function _main *****************
  3887 ;; Defined at:
  3888 ;;		line 98 in file "main.c"
  3889 ;; Parameters:    Size  Location     Type
  3890 ;;		None
  3891 ;; Auto vars:     Size  Location     Type
  3892 ;;  Temp_PT100      4   25[BANK3 ] float 
  3893 ;;  R_PT100         4   21[BANK3 ] float 
  3894 ;;  ADC_volt        4   17[BANK3 ] float 
  3895 ;;  ADC_num         2   29[BANK3 ] unsigned short 
  3896 ;; Return value:  Size  Location     Type
  3897 ;;                  1    wreg      void 
  3898 ;; Registers used:
  3899 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3900 ;; Tracked objects:
  3901 ;;		On entry : B1F/0
  3902 ;;		On exit  : 0/0
  3903 ;;		Unchanged: 0/0
  3904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3906 ;;      Locals:         0       0       0       0      14       0       0       0       0       0       0       0       
      +0       0
  3907 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  3908 ;;      Totals:         0       0       0       0      16       0       0       0       0       0       0       0       
      +0       0
  3909 ;;Total ram usage:       16 bytes
  3910 ;; Hardware stack levels required when called:   13
  3911 ;; This function calls:
  3912 ;;		_ADC_SelectChannel
  3913 ;;		_ADC_StartConversion
  3914 ;;		_CalcRequiredDelayForTrigTRIAC
  3915 ;;		_ChangeADCtoVoltage
  3916 ;;		_IOCAF2_SetInterruptHandler
  3917 ;;		_Init_Function
  3918 ;;		_Measure_R_PT100_2Wire
  3919 ;;		_Measure_Temp_PT100_2Wire
  3920 ;;		_Read_ADC_Num
  3921 ;;		_SYSTEM_Initialize
  3922 ;;		_StartStop_AlarmLED
  3923 ;;		_TMR2_SetInterruptHandler
  3924 ;;		_TX_Whole_String
  3925 ;;		_sprintf
  3926 ;; This function is called by:
  3927 ;;		Startup code after reset
  3928 ;; This function uses a non-reentrant model
  3929 ;;
  3930                           
  3931                           
  3932                           ;psect for function _main
  3933  12C6                     _main:
  3934                           
  3935                           ;main.c: 100:     SYSTEM_Initialize();
  3936                           
  3937                           ;incstack = 0
  3938                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3939  12C6  319C  241A  3192   	fcall	_SYSTEM_Initialize
  3940                           
  3941                           ;main.c: 101:     Init_Function();
  3942  12C9  319B  2379  3192   	fcall	_Init_Function
  3943                           
  3944                           ;main.c: 102:     StartStop_AlarmLED(1);
  3945  12CC  3001               	movlw	1
  3946  12CD  319B  2327  3192   	fcall	_StartStop_AlarmLED
  3947                           
  3948                           ;main.c: 104:     required_delay_for_dim_ms_g = CalcRequiredDelayForTrigTRIAC(25);
  3949  12D0  3041               	movlw	65
  3950  12D1  0021               	movlb	1	; select bank1
  3951  12D2  00DC               	movwf	(CalcRequiredDelayForTrigTRIAC@dim_percentage+3)^(0+128)
  3952  12D3  30C8               	movlw	200
  3953  12D4  00DB               	movwf	(CalcRequiredDelayForTrigTRIAC@dim_percentage+2)^(0+128)
  3954  12D5  3000               	movlw	0
  3955  12D6  00DA               	movwf	(CalcRequiredDelayForTrigTRIAC@dim_percentage+1)^(0+128)
  3956  12D7  3000               	movlw	0
  3957  12D8  00D9               	movwf	CalcRequiredDelayForTrigTRIAC@dim_percentage^(0+128)
  3958  12D9  3192  221F  3192   	fcall	_CalcRequiredDelayForTrigTRIAC
  3959  12DC  085A               	movf	(?_CalcRequiredDelayForTrigTRIAC+1)^(0+128),w
  3960  12DD  0023               	movlb	3	; select bank3
  3961  12DE  00B5               	movwf	(_required_delay_for_dim_ms_g+1)^(0+384)
  3962  12DF  0021               	movlb	1	; select bank1
  3963  12E0  0859               	movf	?_CalcRequiredDelayForTrigTRIAC^(0+128),w
  3964  12E1  0023               	movlb	3	; select bank3
  3965  12E2  00B4               	movwf	_required_delay_for_dim_ms_g^(0+384)
  3966                           
  3967                           ;main.c: 106:     (INTCONbits.GIE = 1);
  3968  12E3  178B               	bsf	11,7	;volatile
  3969                           
  3970                           ;main.c: 107:     (INTCONbits.PEIE = 1);
  3971  12E4  170B               	bsf	11,6	;volatile
  3972                           
  3973                           ;main.c: 109:     IOCAF2_SetInterruptHandler(Zero_Detection_isr);
  3974  12E5  30A5               	movlw	low _Zero_Detection_isr
  3975  12E6  00F0               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler
  3976  12E7  301A               	movlw	high _Zero_Detection_isr
  3977  12E8  00F1               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler+1
  3978  12E9  319A  22D8  3192   	fcall	_IOCAF2_SetInterruptHandler
  3979                           
  3980                           ;main.c: 110:     TMR2_SetInterruptHandler(TMR2_Int_isr);
  3981  12EC  3060               	movlw	low _TMR2_Int_isr
  3982  12ED  00F0               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  3983  12EE  301C               	movlw	high _TMR2_Int_isr
  3984  12EF  00F1               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  3985  12F0  319A  22DE  3192   	fcall	_TMR2_SetInterruptHandler
  3986                           
  3987                           ;main.c: 117:     ADC_SelectChannel(channel_AN10);
  3988  12F3  300A               	movlw	10
  3989  12F4  319B  236C  3192   	fcall	_ADC_SelectChannel
  3990  12F7                     l5336:
  3991                           
  3992                           ;main.c: 122:         ADC_StartConversion();
  3993  12F7  319A  22AB  3192   	fcall	_ADC_StartConversion
  3994                           
  3995                           ;main.c: 124:         ADC_num = Read_ADC_Num();
  3996  12FA  319B  23C3  3192   	fcall	_Read_ADC_Num
  3997  12FD  0873               	movf	?_Read_ADC_Num+1,w
  3998  12FE  0023               	movlb	3	; select bank3
  3999  12FF  00E1               	movwf	(main@ADC_num+1)^(0+384)
  4000  1300  0872               	movf	?_Read_ADC_Num,w
  4001  1301  00E0               	movwf	main@ADC_num^(0+384)
  4002                           
  4003                           ;main.c: 126:         ADC_volt = ChangeADCtoVoltage(ADC_num);
  4004  1302  0861               	movf	(main@ADC_num+1)^(0+384),w
  4005  1303  0021               	movlb	1	; select bank1
  4006  1304  00D1               	movwf	(ChangeADCtoVoltage@ADC_number+1)^(0+128)
  4007  1305  0023               	movlb	3	; select bank3
  4008  1306  0860               	movf	main@ADC_num^(0+384),w
  4009  1307  0021               	movlb	1	; select bank1
  4010  1308  00D0               	movwf	ChangeADCtoVoltage@ADC_number^(0+128)
  4011  1309  319D  25F3  3192   	fcall	_ChangeADCtoVoltage
  4012  130C  0853               	movf	(?_ChangeADCtoVoltage+3)^(0+128),w
  4013  130D  0023               	movlb	3	; select bank3
  4014  130E  00D7               	movwf	(main@ADC_volt+3)^(0+384)
  4015  130F  0021               	movlb	1	; select bank1
  4016  1310  0852               	movf	(?_ChangeADCtoVoltage+2)^(0+128),w
  4017  1311  0023               	movlb	3	; select bank3
  4018  1312  00D6               	movwf	(main@ADC_volt+2)^(0+384)
  4019  1313  0021               	movlb	1	; select bank1
  4020  1314  0851               	movf	(?_ChangeADCtoVoltage+1)^(0+128),w
  4021  1315  0023               	movlb	3	; select bank3
  4022  1316  00D5               	movwf	(main@ADC_volt+1)^(0+384)
  4023  1317  0021               	movlb	1	; select bank1
  4024  1318  0850               	movf	?_ChangeADCtoVoltage^(0+128),w
  4025  1319  0023               	movlb	3	; select bank3
  4026  131A  00D4               	movwf	main@ADC_volt^(0+384)
  4027                           
  4028                           ;main.c: 128:         R_PT100 = Measure_R_PT100_2Wire(ADC_volt);
  4029  131B  0857               	movf	(main@ADC_volt+3)^(0+384),w
  4030  131C  0021               	movlb	1	; select bank1
  4031  131D  00D3               	movwf	(Measure_R_PT100_2Wire@ADC_volt+3)^(0+128)
  4032  131E  0023               	movlb	3	; select bank3
  4033  131F  0856               	movf	(main@ADC_volt+2)^(0+384),w
  4034  1320  0021               	movlb	1	; select bank1
  4035  1321  00D2               	movwf	(Measure_R_PT100_2Wire@ADC_volt+2)^(0+128)
  4036  1322  0023               	movlb	3	; select bank3
  4037  1323  0855               	movf	(main@ADC_volt+1)^(0+384),w
  4038  1324  0021               	movlb	1	; select bank1
  4039  1325  00D1               	movwf	(Measure_R_PT100_2Wire@ADC_volt+1)^(0+128)
  4040  1326  0023               	movlb	3	; select bank3
  4041  1327  0854               	movf	main@ADC_volt^(0+384),w
  4042  1328  0021               	movlb	1	; select bank1
  4043  1329  00D0               	movwf	Measure_R_PT100_2Wire@ADC_volt^(0+128)
  4044  132A  3190  209D  3192   	fcall	_Measure_R_PT100_2Wire
  4045  132D  0853               	movf	(?_Measure_R_PT100_2Wire+3)^(0+128),w
  4046  132E  0023               	movlb	3	; select bank3
  4047  132F  00DB               	movwf	(main@R_PT100+3)^(0+384)
  4048  1330  0021               	movlb	1	; select bank1
  4049  1331  0852               	movf	(?_Measure_R_PT100_2Wire+2)^(0+128),w
  4050  1332  0023               	movlb	3	; select bank3
  4051  1333  00DA               	movwf	(main@R_PT100+2)^(0+384)
  4052  1334  0021               	movlb	1	; select bank1
  4053  1335  0851               	movf	(?_Measure_R_PT100_2Wire+1)^(0+128),w
  4054  1336  0023               	movlb	3	; select bank3
  4055  1337  00D9               	movwf	(main@R_PT100+1)^(0+384)
  4056  1338  0021               	movlb	1	; select bank1
  4057  1339  0850               	movf	?_Measure_R_PT100_2Wire^(0+128),w
  4058  133A  0023               	movlb	3	; select bank3
  4059  133B  00D8               	movwf	main@R_PT100^(0+384)
  4060                           
  4061                           ;main.c: 130:         Temp_PT100 = Measure_Temp_PT100_2Wire(R_PT100);
  4062  133C  085B               	movf	(main@R_PT100+3)^(0+384),w
  4063  133D  0021               	movlb	1	; select bank1
  4064  133E  00D3               	movwf	(Measure_Temp_PT100_2Wire@R_PT100+3)^(0+128)
  4065  133F  0023               	movlb	3	; select bank3
  4066  1340  085A               	movf	(main@R_PT100+2)^(0+384),w
  4067  1341  0021               	movlb	1	; select bank1
  4068  1342  00D2               	movwf	(Measure_Temp_PT100_2Wire@R_PT100+2)^(0+128)
  4069  1343  0023               	movlb	3	; select bank3
  4070  1344  0859               	movf	(main@R_PT100+1)^(0+384),w
  4071  1345  0021               	movlb	1	; select bank1
  4072  1346  00D1               	movwf	(Measure_Temp_PT100_2Wire@R_PT100+1)^(0+128)
  4073  1347  0023               	movlb	3	; select bank3
  4074  1348  0858               	movf	main@R_PT100^(0+384),w
  4075  1349  0021               	movlb	1	; select bank1
  4076  134A  00D0               	movwf	Measure_Temp_PT100_2Wire@R_PT100^(0+128)
  4077  134B  3193  237F  3192   	fcall	_Measure_Temp_PT100_2Wire
  4078  134E  0853               	movf	(?_Measure_Temp_PT100_2Wire+3)^(0+128),w
  4079  134F  0023               	movlb	3	; select bank3
  4080  1350  00DF               	movwf	(main@Temp_PT100+3)^(0+384)
  4081  1351  0021               	movlb	1	; select bank1
  4082  1352  0852               	movf	(?_Measure_Temp_PT100_2Wire+2)^(0+128),w
  4083  1353  0023               	movlb	3	; select bank3
  4084  1354  00DE               	movwf	(main@Temp_PT100+2)^(0+384)
  4085  1355  0021               	movlb	1	; select bank1
  4086  1356  0851               	movf	(?_Measure_Temp_PT100_2Wire+1)^(0+128),w
  4087  1357  0023               	movlb	3	; select bank3
  4088  1358  00DD               	movwf	(main@Temp_PT100+1)^(0+384)
  4089  1359  0021               	movlb	1	; select bank1
  4090  135A  0850               	movf	?_Measure_Temp_PT100_2Wire^(0+128),w
  4091  135B  0023               	movlb	3	; select bank3
  4092  135C  00DC               	movwf	main@Temp_PT100^(0+384)
  4093                           
  4094                           ;main.c: 131:         sprintf(Buff_g, "%f Celsius\n", Temp_PT100);
  4095  135D  3010               	movlw	low (STR_1| (0+32768))
  4096  135E  00C3               	movwf	sprintf@fmt^(0+384)
  4097  135F  3098               	movlw	high (STR_1| (0+32768))
  4098  1360  00C4               	movwf	(sprintf@fmt^(0+384)+1)
  4099  1361  085F               	movf	(main@Temp_PT100+3)^(0+384),w
  4100  1362  00C8               	movwf	((?_sprintf+3)^(0+384)+2)
  4101  1363  085E               	movf	(main@Temp_PT100+2)^(0+384),w
  4102  1364  00C7               	movwf	((?_sprintf+2)^(0+384)+2)
  4103  1365  085D               	movf	(main@Temp_PT100+1)^(0+384),w
  4104  1366  00C6               	movwf	((?_sprintf+1)^(0+384)+2)
  4105  1367  085C               	movf	main@Temp_PT100^(0+384),w
  4106  1368  00C5               	movwf	(?_sprintf^(0+384)+2)
  4107  1369  3020               	movlw	(low (_Buff_g| (0+512)))& (0+255)
  4108  136A  3190  2001  3192   	fcall	_sprintf
  4109                           
  4110                           ;main.c: 132:         TX_Whole_String(Buff_g);
  4111  136D  3020               	movlw	(low (_Buff_g| (0+512)))& (0+255)
  4112  136E  319D  2591  3192   	fcall	_TX_Whole_String
  4113                           
  4114                           ;main.c: 133:         _delay((unsigned long)((500)*(8000000/4000.0)));
  4115  1371  3006               	movlw	6
  4116  1372  0023               	movlb	3	; select bank3
  4117  1373  00D3               	movwf	(??_main^(0+384)+1)
  4118  1374  3013               	movlw	19
  4119  1375  00D2               	movwf	??_main^(0+384)
  4120  1376  30AD               	movlw	173
  4121  1377                     u6287:
  4122  1377  0B89               	decfsz	9,f
  4123  1378  2B77               	goto	u6287
  4124  1379  0BD2               	decfsz	??_main^(0+384),f
  4125  137A  2B77               	goto	u6287
  4126  137B  0BD3               	decfsz	(??_main^(0+384)+1),f
  4127  137C  2B77               	goto	u6287
  4128  137D  3200               	nop2
  4129  137E  2AF7               	goto	l5336
  4130  137F                     __end_of_main:
  4131                           
  4132                           	psect	text1
  4133  1001                     __ptext1:	
  4134 ;; *************** function _sprintf *****************
  4135 ;; Defined at:
  4136 ;;		line 9 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/nf_sprintf.c"
  4137 ;; Parameters:    Size  Location     Type
  4138 ;;  s               1    wreg     PTR unsigned char 
  4139 ;;		 -> Buff_g(20), 
  4140 ;;  fmt             2    0[BANK3 ] PTR const unsigned char 
  4141 ;;		 -> STR_1(12), 
  4142 ;; Auto vars:     Size  Location     Type
  4143 ;;  s               1    8[BANK3 ] PTR unsigned char 
  4144 ;;		 -> Buff_g(20), 
  4145 ;;  f               5   10[BANK3 ] struct _IO_FILE
  4146 ;;  ret             2    0        int 
  4147 ;;  ap              1    9[BANK3 ] PTR void [1]
  4148 ;;		 -> ?_sprintf(2), 
  4149 ;; Return value:  Size  Location     Type
  4150 ;;                  2    0[BANK3 ] int 
  4151 ;; Registers used:
  4152 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4153 ;; Tracked objects:
  4154 ;;		On entry : 1F/3
  4155 ;;		On exit  : 1F/2
  4156 ;;		Unchanged: 0/0
  4157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4158 ;;      Params:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0
  4159 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0
  4160 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0
  4161 ;;      Totals:         0       0       0       1      15       0       0       0       0       0       0       0       
      +0       0
  4162 ;;Total ram usage:       16 bytes
  4163 ;; Hardware stack levels used:    1
  4164 ;; Hardware stack levels required when called:   12
  4165 ;; This function calls:
  4166 ;;		_vfprintf
  4167 ;; This function is called by:
  4168 ;;		_main
  4169 ;; This function uses a non-reentrant model
  4170 ;;
  4171                           
  4172                           
  4173                           ;psect for function _sprintf
  4174  1001                     _sprintf:
  4175                           
  4176                           ;incstack = 0
  4177                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4178                           ;sprintf@s stored from wreg
  4179  1001  00CB               	movwf	sprintf@s^(0+384)
  4180  1002  30C5               	movlw	(low ((?_sprintf| (0+256)+2)))& (0+255)
  4181  1003  0022               	movlb	2	; select bank2
  4182  1004  00EF               	movwf	??_sprintf^(0+256)
  4183  1005  086F               	movf	??_sprintf^(0+256),w
  4184  1006  0023               	movlb	3	; select bank3
  4185  1007  00CC               	movwf	sprintf@ap^(0+384)
  4186  1008  084B               	movf	sprintf@s^(0+384),w
  4187  1009  0022               	movlb	2	; select bank2
  4188  100A  00EF               	movwf	??_sprintf^(0+256)
  4189  100B  086F               	movf	??_sprintf^(0+256),w
  4190  100C  0023               	movlb	3	; select bank3
  4191  100D  00CD               	movwf	sprintf@f^(0+384)
  4192  100E  01CE               	clrf	(sprintf@f^(0+384)+1)
  4193  100F  01CF               	clrf	((sprintf@f+1)^(0+384)+1)
  4194  1010  01D0               	clrf	(sprintf@f^(0+384)+3)
  4195  1011  01D1               	clrf	((sprintf@f+1)^(0+384)+3)
  4196  1012  0844               	movf	(sprintf@fmt+1)^(0+384),w
  4197  1013  0021               	movlb	1	; select bank1
  4198  1014  00EE               	movwf	(vfprintf@fmt+1)^(0+128)
  4199  1015  0023               	movlb	3	; select bank3
  4200  1016  0843               	movf	sprintf@fmt^(0+384),w
  4201  1017  0021               	movlb	1	; select bank1
  4202  1018  00ED               	movwf	vfprintf@fmt^(0+128)
  4203  1019  30CC               	movlw	(low (sprintf@ap| (0+256)))& (0+255)
  4204  101A  0022               	movlb	2	; select bank2
  4205  101B  00EF               	movwf	??_sprintf^(0+256)
  4206  101C  086F               	movf	??_sprintf^(0+256),w
  4207  101D  0021               	movlb	1	; select bank1
  4208  101E  00EF               	movwf	vfprintf@ap^(0+128)
  4209  101F  30CD               	movlw	(low (sprintf@f| (0+256)))& (0+255)
  4210  1020  3188  200A         	fcall	_vfprintf
  4211  1022  0023               	movlb	3	; select bank3
  4212  1023  084E               	movf	(sprintf@f^(0+384)+1),w
  4213  1024  074B               	addwf	sprintf@s^(0+384),w
  4214  1025  0022               	movlb	2	; select bank2
  4215  1026  00EF               	movwf	??_sprintf^(0+256)
  4216  1027  086F               	movf	??_sprintf^(0+256),w
  4217  1028  0086               	movwf	6
  4218  1029  3002               	movlw	2	; select bank4/5
  4219  102A  0087               	movwf	7
  4220  102B  0181               	clrf	1
  4221  102C  0008               	return
  4222  102D                     __end_of_sprintf:
  4223                           
  4224                           	psect	text2
  4225  080A                     __ptext2:	
  4226 ;; *************** function _vfprintf *****************
  4227 ;; Defined at:
  4228 ;;		line 1390 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c"
  4229 ;; Parameters:    Size  Location     Type
  4230 ;;  fp              1    wreg     PTR struct _IO_FILE
  4231 ;;		 -> sprintf@f(5), 
  4232 ;;  fmt             2   77[BANK1 ] PTR const unsigned char 
  4233 ;;		 -> STR_1(12), 
  4234 ;;  ap              1   79[BANK1 ] PTR PTR void 
  4235 ;;		 -> sprintf@ap(1), 
  4236 ;; Auto vars:     Size  Location     Type
  4237 ;;  fp              1   76[BANK2 ] PTR struct _IO_FILE
  4238 ;;		 -> sprintf@f(5), 
  4239 ;;  cfmt            2   77[BANK2 ] PTR unsigned char 
  4240 ;;		 -> STR_1(12), 
  4241 ;; Return value:  Size  Location     Type
  4242 ;;                  2   77[BANK1 ] int 
  4243 ;; Registers used:
  4244 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4245 ;; Tracked objects:
  4246 ;;		On entry : 1F/1
  4247 ;;		On exit  : 1F/1
  4248 ;;		Unchanged: 0/0
  4249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4250 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  4251 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0
  4252 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0
  4253 ;;      Totals:         0       0       3       5       0       0       0       0       0       0       0       0       
      +0       0
  4254 ;;Total ram usage:        8 bytes
  4255 ;; Hardware stack levels used:    1
  4256 ;; Hardware stack levels required when called:   11
  4257 ;; This function calls:
  4258 ;;		_vfpfcnvrt
  4259 ;; This function is called by:
  4260 ;;		_sprintf
  4261 ;; This function uses a non-reentrant model
  4262 ;;
  4263                           
  4264                           
  4265                           ;psect for function _vfprintf
  4266  080A                     _vfprintf:
  4267                           
  4268                           ;incstack = 0
  4269                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4270                           ;vfprintf@fp stored from wreg
  4271  080A  0022               	movlb	2	; select bank2
  4272  080B  00EC               	movwf	vfprintf@fp^(0+256)
  4273                           
  4274                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 1390: int vfprintf(FILE *fp, 
      +                          const char *fmt, va_list ap);/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 1
      +                          391: {;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 1393:     char *cfmt;;/
      +                          opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 1395:     cfmt = (char *)fmt;
  4275  080C  0021               	movlb	1	; select bank1
  4276  080D  086E               	movf	(vfprintf@fmt+1)^(0+128),w
  4277  080E  0022               	movlb	2	; select bank2
  4278  080F  00EE               	movwf	(vfprintf@cfmt+1)^(0+256)
  4279  0810  0021               	movlb	1	; select bank1
  4280  0811  086D               	movf	vfprintf@fmt^(0+128),w
  4281  0812  0022               	movlb	2	; select bank2
  4282  0813  00ED               	movwf	vfprintf@cfmt^(0+256)
  4283                           
  4284                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 1396:     nout = 0;
  4285  0814  0023               	movlb	3	; select bank3
  4286  0815  01AA               	clrf	_nout^(0+384)
  4287  0816  01AB               	clrf	(_nout+1)^(0+384)
  4288  0817                     l5210:	
  4289                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 1397:     while (*cfmt) {
  4290                           
  4291                           
  4292                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 1397:     while (*cfmt) {
  4293  0817  0022               	movlb	2	; select bank2
  4294  0818  086D               	movf	vfprintf@cfmt^(0+256),w
  4295  0819  0084               	movwf	4
  4296  081A  086E               	movf	(vfprintf@cfmt+1)^(0+256),w
  4297  081B  0085               	movwf	5
  4298  081C  0012               	moviw fsr0++
  4299  081D  1903               	btfsc	3,2
  4300  081E  2838               	goto	l5212
  4301                           
  4302                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 1398:         nout += vfpfcnv
      +                          rt(fp, &cfmt, ap);
  4303  081F  306D               	movlw	(low (vfprintf@cfmt| (0+256)))& (0+255)
  4304  0820  00EA               	movwf	??_vfprintf^(0+256)
  4305  0821  086A               	movf	??_vfprintf^(0+256),w
  4306  0822  0020               	movlb	0	; select bank0
  4307  0823  00EE               	movwf	vfpfcnvrt@fmt
  4308  0824  0021               	movlb	1	; select bank1
  4309  0825  086F               	movf	vfprintf@ap^(0+128),w
  4310  0826  0022               	movlb	2	; select bank2
  4311  0827  00EB               	movwf	(??_vfprintf+1)^(0+256)
  4312  0828  086B               	movf	(??_vfprintf+1)^(0+256),w
  4313  0829  0020               	movlb	0	; select bank0
  4314  082A  00EF               	movwf	vfpfcnvrt@ap
  4315  082B  0022               	movlb	2	; select bank2
  4316  082C  086C               	movf	vfprintf@fp^(0+256),w
  4317  082D  3196  2620  3188   	fcall	_vfpfcnvrt
  4318  0830  086E               	movf	?_vfpfcnvrt,w
  4319  0831  0023               	movlb	3	; select bank3
  4320  0832  07AA               	addwf	_nout^(0+384),f
  4321  0833  0020               	movlb	0	; select bank0
  4322  0834  086F               	movf	?_vfpfcnvrt+1,w
  4323  0835  0023               	movlb	3	; select bank3
  4324  0836  3DAB               	addwfc	(_nout+1)^(0+384),f
  4325  0837  2817               	goto	l5210
  4326  0838                     l5212:
  4327                           
  4328                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 1400:     return nout;
  4329  0838  0023               	movlb	3	; select bank3
  4330  0839  082B               	movf	(_nout+1)^(0+384),w
  4331  083A  0021               	movlb	1	; select bank1
  4332  083B  00EE               	movwf	(?_vfprintf+1)^(0+128)
  4333  083C  0023               	movlb	3	; select bank3
  4334  083D  082A               	movf	_nout^(0+384),w
  4335  083E  0021               	movlb	1	; select bank1
  4336  083F  00ED               	movwf	?_vfprintf^(0+128)
  4337  0840  0008               	return
  4338  0841                     __end_of_vfprintf:
  4339                           
  4340                           	psect	text3
  4341  1620                     __ptext3:	
  4342 ;; *************** function _vfpfcnvrt *****************
  4343 ;; Defined at:
  4344 ;;		line 692 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c"
  4345 ;; Parameters:    Size  Location     Type
  4346 ;;  fp              1    wreg     PTR struct _IO_FILE
  4347 ;;		 -> sprintf@f(5), 
  4348 ;;  fmt             1   78[BANK0 ] PTR PTR unsigned char 
  4349 ;;		 -> vfprintf@cfmt(2), 
  4350 ;;  ap              1   79[BANK0 ] PTR PTR void 
  4351 ;;		 -> sprintf@ap(1), 
  4352 ;; Auto vars:     Size  Location     Type
  4353 ;;  fp              1   73[BANK2 ] PTR struct _IO_FILE
  4354 ;;		 -> sprintf@f(5), 
  4355 ;;  llu             8    0        unsigned long long 
  4356 ;;  ll              8    0        long long 
  4357 ;;  f               4   65[BANK2 ] long long 
  4358 ;;  ct              3   69[BANK2 ] unsigned char [3]
  4359 ;;  vp              2    0        PTR void 
  4360 ;;  i               2    0        int 
  4361 ;;  done            2    0        int 
  4362 ;;  cp              2    0        PTR unsigned char 
  4363 ;;  c               1   72[BANK2 ] unsigned char 
  4364 ;; Return value:  Size  Location     Type
  4365 ;;                  2   78[BANK0 ] int 
  4366 ;; Registers used:
  4367 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4368 ;; Tracked objects:
  4369 ;;		On entry : 1F/2
  4370 ;;		On exit  : 1F/0
  4371 ;;		Unchanged: 0/0
  4372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4373 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4374 ;;      Locals:         0       0       0      11       0       0       0       0       0       0       0       0       
      +0       0
  4375 ;;      Temps:          0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0
  4376 ;;      Totals:         0       2       0      17       0       0       0       0       0       0       0       0       
      +0       0
  4377 ;;Total ram usage:       19 bytes
  4378 ;; Hardware stack levels used:    1
  4379 ;; Hardware stack levels required when called:   10
  4380 ;; This function calls:
  4381 ;;		_efgtoa
  4382 ;;		_fputc
  4383 ;;		_isupper
  4384 ;;		_strncmp
  4385 ;;		_tolower
  4386 ;; This function is called by:
  4387 ;;		_vfprintf
  4388 ;; This function uses a non-reentrant model
  4389 ;;
  4390                           
  4391                           
  4392                           ;psect for function _vfpfcnvrt
  4393  1620                     _vfpfcnvrt:
  4394                           
  4395                           ;incstack = 0
  4396                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4397                           ;vfpfcnvrt@fp stored from wreg
  4398  1620  00E9               	movwf	vfpfcnvrt@fp^(0+256)
  4399                           
  4400                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 692: static int vfpfcnvrt(FIL
      +                          E *fp, char *fmt[], va_list ap);/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c
      +                          : 693: {;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 694:     char c, *cp,
      +                           ct[3];;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 695:     int done, i;;
      +                          /opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 696:     long long ll;;/opt/mi
      +                          crochip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 697:     unsigned long long llu;
  4401  1621  0020               	movlb	0	; select bank0
  4402  1622  086E               	movf	vfpfcnvrt@fmt,w
  4403  1623  0086               	movwf	6
  4404  1624  3001               	movlw	1	; select bank2/3
  4405  1625  0087               	movwf	7
  4406  1626  3F40               	moviw [0]fsr1
  4407  1627  0022               	movlb	2	; select bank2
  4408  1628  00D9               	movwf	??_vfpfcnvrt^(0+256)
  4409  1629  3F41               	moviw [1]fsr1
  4410  162A  00DA               	movwf	(??_vfpfcnvrt^(0+256)+1)
  4411  162B  0859               	movf	??_vfpfcnvrt^(0+256),w
  4412  162C  0084               	movwf	4
  4413  162D  085A               	movf	(??_vfpfcnvrt+1)^(0+256),w
  4414  162E  0085               	movwf	5
  4415  162F  0012               	moviw fsr0++
  4416  1630  3A25               	xorlw	37
  4417  1631  1D03               	btfss	3,2
  4418  1632  2FD9               	goto	l4966
  4419                           
  4420                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 703:         ++*fmt;
  4421  1633  0020               	movlb	0	; select bank0
  4422  1634  086E               	movf	vfpfcnvrt@fmt,w
  4423  1635  0086               	movwf	6
  4424  1636  3001               	movlw	1	; select bank2/3
  4425  1637  0087               	movwf	7
  4426  1638  3001               	movlw	1
  4427  1639  0781               	addwf	1,f
  4428  163A  3141               	addfsr 1,1
  4429  163B  1803               	skipnc
  4430  163C  0A81               	incf	1,f
  4431                           
  4432                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 705:         flags = width = 
      +                          0;
  4433  163D  0023               	movlb	3	; select bank3
  4434  163E  01AC               	clrf	_width^(0+384)
  4435  163F  01AD               	clrf	(_width+1)^(0+384)
  4436  1640  01B0               	clrf	_flags^(0+384)
  4437  1641  01B1               	clrf	(_flags+1)^(0+384)
  4438                           
  4439                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 706:         prec = -1;
  4440  1642  30FF               	movlw	255
  4441  1643  00AE               	movwf	_prec^(0+384)
  4442  1644  30FF               	movlw	255
  4443  1645  00AF               	movwf	(_prec^(0+384)+1)
  4444                           
  4445                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 779:         ct[0] = (char)to
      +                          lower((int)(*fmt)[0]);
  4446  1646  0020               	movlb	0	; select bank0
  4447  1647  086E               	movf	vfpfcnvrt@fmt,w
  4448  1648  0086               	movwf	6
  4449  1649  3001               	movlw	1	; select bank2/3
  4450  164A  0087               	movwf	7
  4451  164B  3F40               	moviw [0]fsr1
  4452  164C  0022               	movlb	2	; select bank2
  4453  164D  00D9               	movwf	??_vfpfcnvrt^(0+256)
  4454  164E  3F41               	moviw [1]fsr1
  4455  164F  00DA               	movwf	(??_vfpfcnvrt^(0+256)+1)
  4456  1650  0859               	movf	??_vfpfcnvrt^(0+256),w
  4457  1651  0084               	movwf	4
  4458  1652  085A               	movf	(??_vfpfcnvrt+1)^(0+256),w
  4459  1653  0085               	movwf	5
  4460  1654  0800               	movf	0,w	;code access
  4461  1655  00DB               	movwf	(??_vfpfcnvrt+2)^(0+256)
  4462  1656  01DC               	clrf	((??_vfpfcnvrt+2)^(0+256)+1)
  4463  1657  085B               	movf	(??_vfpfcnvrt+2)^(0+256),w
  4464  1658  00F6               	movwf	tolower@c
  4465  1659  085C               	movf	(??_vfpfcnvrt+3)^(0+256),w
  4466  165A  00F7               	movwf	tolower@c+1
  4467  165B  319C  24F8  3196   	fcall	_tolower
  4468  165E  0876               	movf	?_tolower,w
  4469  165F  0022               	movlb	2	; select bank2
  4470  1660  00DD               	movwf	(??_vfpfcnvrt+4)^(0+256)
  4471  1661  085D               	movf	(??_vfpfcnvrt+4)^(0+256),w
  4472  1662  00E5               	movwf	vfpfcnvrt@ct^(0+256)
  4473                           
  4474                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 780:         if (ct[0]) {
  4475  1663  0865               	movf	vfpfcnvrt@ct^(0+256),w
  4476  1664  1903               	btfsc	3,2
  4477  1665  2EA9               	goto	l4920
  4478                           
  4479                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 781:             ct[1] = (cha
      +                          r)tolower((int)(*fmt)[1]);
  4480  1666  0020               	movlb	0	; select bank0
  4481  1667  086E               	movf	vfpfcnvrt@fmt,w
  4482  1668  0086               	movwf	6
  4483  1669  3001               	movlw	1	; select bank2/3
  4484  166A  0087               	movwf	7
  4485  166B  3F40               	moviw [0]fsr1
  4486  166C  0022               	movlb	2	; select bank2
  4487  166D  00D9               	movwf	??_vfpfcnvrt^(0+256)
  4488  166E  3F41               	moviw [1]fsr1
  4489  166F  00DA               	movwf	(??_vfpfcnvrt^(0+256)+1)
  4490  1670  3001               	movlw	1
  4491  1671  0759               	addwf	??_vfpfcnvrt^(0+256),w
  4492  1672  0084               	movwf	4
  4493  1673  085A               	movf	(??_vfpfcnvrt^(0+256)+1),w
  4494  1674  1803               	skipnc
  4495  1675  0A5A               	incf	(??_vfpfcnvrt^(0+256)+1),w
  4496  1676  0085               	movwf	5
  4497  1677  0800               	movf	0,w	;code access
  4498  1678  00DB               	movwf	(??_vfpfcnvrt+2)^(0+256)
  4499  1679  01DC               	clrf	((??_vfpfcnvrt+2)^(0+256)+1)
  4500  167A  085B               	movf	(??_vfpfcnvrt+2)^(0+256),w
  4501  167B  00F6               	movwf	tolower@c
  4502  167C  085C               	movf	(??_vfpfcnvrt+3)^(0+256),w
  4503  167D  00F7               	movwf	tolower@c+1
  4504  167E  319C  24F8  3196   	fcall	_tolower
  4505  1681  0876               	movf	?_tolower,w
  4506  1682  0022               	movlb	2	; select bank2
  4507  1683  00DD               	movwf	(??_vfpfcnvrt+4)^(0+256)
  4508  1684  085D               	movf	(??_vfpfcnvrt+4)^(0+256),w
  4509  1685  00E6               	movwf	(vfpfcnvrt@ct^(0+256)+1)
  4510                           
  4511                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 782:             if (ct[1]) {
  4512  1686  0866               	movf	(vfpfcnvrt@ct^(0+256)+1),w
  4513  1687  1903               	btfsc	3,2
  4514  1688  2EA9               	goto	l4920
  4515                           
  4516                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 783:                 ct[2] = 
      +                          (char)tolower((int)(*fmt)[2]);
  4517  1689  0020               	movlb	0	; select bank0
  4518  168A  086E               	movf	vfpfcnvrt@fmt,w
  4519  168B  0086               	movwf	6
  4520  168C  3001               	movlw	1	; select bank2/3
  4521  168D  0087               	movwf	7
  4522  168E  3F40               	moviw [0]fsr1
  4523  168F  0022               	movlb	2	; select bank2
  4524  1690  00D9               	movwf	??_vfpfcnvrt^(0+256)
  4525  1691  3F41               	moviw [1]fsr1
  4526  1692  00DA               	movwf	(??_vfpfcnvrt^(0+256)+1)
  4527  1693  3002               	movlw	2
  4528  1694  0759               	addwf	??_vfpfcnvrt^(0+256),w
  4529  1695  0084               	movwf	4
  4530  1696  085A               	movf	(??_vfpfcnvrt^(0+256)+1),w
  4531  1697  1803               	skipnc
  4532  1698  0A5A               	incf	(??_vfpfcnvrt^(0+256)+1),w
  4533  1699  0085               	movwf	5
  4534  169A  0800               	movf	0,w	;code access
  4535  169B  00DB               	movwf	(??_vfpfcnvrt+2)^(0+256)
  4536  169C  01DC               	clrf	((??_vfpfcnvrt+2)^(0+256)+1)
  4537  169D  085B               	movf	(??_vfpfcnvrt+2)^(0+256),w
  4538  169E  00F6               	movwf	tolower@c
  4539  169F  085C               	movf	(??_vfpfcnvrt+3)^(0+256),w
  4540  16A0  00F7               	movwf	tolower@c+1
  4541  16A1  319C  24F8  3196   	fcall	_tolower
  4542  16A4  0876               	movf	?_tolower,w
  4543  16A5  0022               	movlb	2	; select bank2
  4544  16A6  00DD               	movwf	(??_vfpfcnvrt+4)^(0+256)
  4545  16A7  085D               	movf	(??_vfpfcnvrt+4)^(0+256),w
  4546  16A8  00E7               	movwf	(vfpfcnvrt@ct^(0+256)+2)
  4547  16A9                     l4920:
  4548                           
  4549                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 942:         if (ct[0] == 'f'
      +                          ) {
  4550  16A9  3066               	movlw	102
  4551  16AA  0665               	xorwf	vfpfcnvrt@ct^(0+256),w
  4552  16AB  1D03               	btfss	3,2
  4553  16AC  2EFD               	goto	l4932
  4554                           
  4555                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 944:             c = (*fmt)[0
      +                          ];
  4556  16AD  0020               	movlb	0	; select bank0
  4557  16AE  086E               	movf	vfpfcnvrt@fmt,w
  4558  16AF  0086               	movwf	6
  4559  16B0  3001               	movlw	1	; select bank2/3
  4560  16B1  0087               	movwf	7
  4561  16B2  3F40               	moviw [0]fsr1
  4562  16B3  0022               	movlb	2	; select bank2
  4563  16B4  00D9               	movwf	??_vfpfcnvrt^(0+256)
  4564  16B5  3F41               	moviw [1]fsr1
  4565  16B6  00DA               	movwf	(??_vfpfcnvrt^(0+256)+1)
  4566  16B7  0859               	movf	??_vfpfcnvrt^(0+256),w
  4567  16B8  0084               	movwf	4
  4568  16B9  085A               	movf	(??_vfpfcnvrt+1)^(0+256),w
  4569  16BA  0085               	movwf	5
  4570  16BB  0800               	movf	0,w	;code access
  4571  16BC  00DB               	movwf	(??_vfpfcnvrt+2)^(0+256)
  4572  16BD  085B               	movf	(??_vfpfcnvrt+2)^(0+256),w
  4573  16BE  00E8               	movwf	vfpfcnvrt@c^(0+256)
  4574                           
  4575                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 945:             ++*fmt;
  4576  16BF  0020               	movlb	0	; select bank0
  4577  16C0  086E               	movf	vfpfcnvrt@fmt,w
  4578  16C1  0086               	movwf	6
  4579  16C2  3001               	movlw	1	; select bank2/3
  4580  16C3  0087               	movwf	7
  4581  16C4  3001               	movlw	1
  4582  16C5  0781               	addwf	1,f
  4583  16C6  3141               	addfsr 1,1
  4584  16C7  1803               	skipnc
  4585  16C8  0A81               	incf	1,f
  4586                           
  4587                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 946:             f = (long do
      +                          uble)(*(double *)__va_arg(*(double **)ap, (double)0));
  4588  16C9  086F               	movf	vfpfcnvrt@ap,w
  4589  16CA  0086               	movwf	6
  4590  16CB  3001               	movlw	1	; select bank2/3
  4591  16CC  0087               	movwf	7
  4592  16CD  0801               	movf	1,w
  4593  16CE  0084               	movwf	4
  4594  16CF  3001               	movlw	1	; select bank2/3
  4595  16D0  0085               	movwf	5
  4596  16D1  3004               	movlw	4
  4597  16D2  0781               	addwf	1,f
  4598  16D3  3F00               	moviw [0]fsr0
  4599  16D4  0022               	movlb	2	; select bank2
  4600  16D5  00E1               	movwf	vfpfcnvrt@f^(0+256)
  4601  16D6  3F01               	moviw [1]fsr0
  4602  16D7  00E2               	movwf	(vfpfcnvrt@f+1)^(0+256)
  4603  16D8  3F02               	moviw [2]fsr0
  4604  16D9  00E3               	movwf	(vfpfcnvrt@f+2)^(0+256)
  4605  16DA  3F03               	moviw [3]fsr0
  4606  16DB  00E4               	movwf	(vfpfcnvrt@f+3)^(0+256)
  4607                           
  4608                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 948:             return efgto
      +                          a(fp, f, c);
  4609  16DC  0864               	movf	(vfpfcnvrt@f+3)^(0+256),w
  4610  16DD  0021               	movlb	1	; select bank1
  4611  16DE  00E7               	movwf	(efgtoa@f+3)^(0+128)
  4612  16DF  0022               	movlb	2	; select bank2
  4613  16E0  0863               	movf	(vfpfcnvrt@f+2)^(0+256),w
  4614  16E1  0021               	movlb	1	; select bank1
  4615  16E2  00E6               	movwf	(efgtoa@f+2)^(0+128)
  4616  16E3  0022               	movlb	2	; select bank2
  4617  16E4  0862               	movf	(vfpfcnvrt@f+1)^(0+256),w
  4618  16E5  0021               	movlb	1	; select bank1
  4619  16E6  00E5               	movwf	(efgtoa@f+1)^(0+128)
  4620  16E7  0022               	movlb	2	; select bank2
  4621  16E8  0861               	movf	vfpfcnvrt@f^(0+256),w
  4622  16E9  0021               	movlb	1	; select bank1
  4623  16EA  00E4               	movwf	efgtoa@f^(0+128)
  4624  16EB  0022               	movlb	2	; select bank2
  4625  16EC  0868               	movf	vfpfcnvrt@c^(0+256),w
  4626  16ED  00D9               	movwf	??_vfpfcnvrt^(0+256)
  4627  16EE  0859               	movf	??_vfpfcnvrt^(0+256),w
  4628  16EF  0021               	movlb	1	; select bank1
  4629  16F0  00E8               	movwf	efgtoa@c^(0+128)
  4630  16F1  0022               	movlb	2	; select bank2
  4631  16F2  0869               	movf	vfpfcnvrt@fp^(0+256),w
  4632  16F3  3180  204E         	fcall	_efgtoa
  4633  16F5  0865               	movf	(?_efgtoa+1)^(0+128),w
  4634  16F6  0020               	movlb	0	; select bank0
  4635  16F7  00EF               	movwf	?_vfpfcnvrt+1
  4636  16F8  0021               	movlb	1	; select bank1
  4637  16F9  0864               	movf	?_efgtoa^(0+128),w
  4638  16FA  0020               	movlb	0	; select bank0
  4639  16FB  00EE               	movwf	?_vfpfcnvrt
  4640  16FC  0008               	return
  4641  16FD                     l4932:
  4642                           
  4643                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 950:         if (!strncmp(ct,
      +                           "lf", ((sizeof("lf")/sizeof("lf"[0]))-1))) {
  4644  16FD  3044               	movlw	low (STR_10| (0+32768))
  4645  16FE  00F0               	movwf	strncmp@_r
  4646  16FF  3098               	movlw	high (STR_10| (0+32768))
  4647  1700  00F1               	movwf	strncmp@_r+1
  4648  1701  3002               	movlw	2
  4649  1702  00F2               	movwf	strncmp@n
  4650  1703  3000               	movlw	0
  4651  1704  00F3               	movwf	strncmp@n+1
  4652  1705  3065               	movlw	(low (vfpfcnvrt@ct| (0+256)))& (0+255)
  4653  1706  319F  27AF  3196   	fcall	_strncmp
  4654  1709  0870               	movf	?_strncmp,w
  4655  170A  0471               	iorwf	?_strncmp+1,w
  4656  170B  1D03               	btfss	3,2
  4657  170C  2F9F               	goto	l4950
  4658                           
  4659                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 953:             if ((0 ? isu
      +                          pper((int)(*fmt)[0]) : ((unsigned)((int)(*fmt)[0])-'A') < 26)) {
  4660  170D  0020               	movlb	0	; select bank0
  4661  170E  086E               	movf	vfpfcnvrt@fmt,w
  4662  170F  0086               	movwf	6
  4663  1710  3001               	movlw	1	; select bank2/3
  4664  1711  0087               	movwf	7
  4665  1712  3F40               	moviw [0]fsr1
  4666  1713  0022               	movlb	2	; select bank2
  4667  1714  00D9               	movwf	??_vfpfcnvrt^(0+256)
  4668  1715  3F41               	moviw [1]fsr1
  4669  1716  00DA               	movwf	(??_vfpfcnvrt^(0+256)+1)
  4670  1717  3001               	movlw	1
  4671  1718  0759               	addwf	??_vfpfcnvrt^(0+256),w
  4672  1719  0084               	movwf	4
  4673  171A  085A               	movf	(??_vfpfcnvrt^(0+256)+1),w
  4674  171B  1803               	skipnc
  4675  171C  0A5A               	incf	(??_vfpfcnvrt^(0+256)+1),w
  4676  171D  0085               	movwf	5
  4677  171E  0800               	movf	0,w	;code access
  4678  171F  00DB               	movwf	(??_vfpfcnvrt+2)^(0+256)
  4679  1720  085B               	movf	(??_vfpfcnvrt+2)^(0+256),w
  4680  1721  00E8               	movwf	vfpfcnvrt@c^(0+256)
  4681  1722  0020               	movlb	0	; select bank0
  4682  1723  086E               	movf	vfpfcnvrt@fmt,w
  4683  1724  0086               	movwf	6
  4684  1725  3001               	movlw	1	; select bank2/3
  4685  1726  0087               	movwf	7
  4686  1727  3F40               	moviw [0]fsr1
  4687  1728  0022               	movlb	2	; select bank2
  4688  1729  00D9               	movwf	??_vfpfcnvrt^(0+256)
  4689  172A  3F41               	moviw [1]fsr1
  4690  172B  00DA               	movwf	(??_vfpfcnvrt^(0+256)+1)
  4691  172C  0859               	movf	??_vfpfcnvrt^(0+256),w
  4692  172D  0084               	movwf	4
  4693  172E  085A               	movf	(??_vfpfcnvrt+1)^(0+256),w
  4694  172F  0085               	movwf	5
  4695  1730  0800               	movf	0,w	;code access
  4696  1731  3EBF               	addlw	191
  4697  1732  00DB               	movwf	(??_vfpfcnvrt+2)^(0+256)
  4698  1733  30FF               	movlw	255
  4699  1734  1803               	skipnc
  4700  1735  3000               	movlw	0
  4701  1736  00DC               	movwf	((??_vfpfcnvrt+2)^(0+256)+1)
  4702  1737  3000               	movlw	0
  4703  1738  025C               	subwf	(??_vfpfcnvrt+3)^(0+256),w
  4704  1739  301A               	movlw	26
  4705  173A  1903               	skipnz
  4706  173B  025B               	subwf	(??_vfpfcnvrt+2)^(0+256),w
  4707  173C  1803               	btfsc	3,0
  4708  173D  2F40               	goto	u5750
  4709  173E  3001               	movlw	1
  4710  173F  2F41               	goto	u5760
  4711  1740                     u5750:
  4712  1740  3000               	movlw	0
  4713  1741                     u5760:
  4714  1741  00DD               	movwf	(??_vfpfcnvrt+4)^(0+256)
  4715  1742  01DE               	clrf	((??_vfpfcnvrt+4)^(0+256)+1)
  4716  1743  085D               	movf	(??_vfpfcnvrt+4)^(0+256),w
  4717  1744  00DF               	movwf	_vfpfcnvrt$2234^(0+256)
  4718  1745  085E               	movf	(??_vfpfcnvrt+5)^(0+256),w
  4719  1746  00E0               	movwf	(_vfpfcnvrt$2234+1)^(0+256)
  4720  1747  085F               	movf	_vfpfcnvrt$2234^(0+256),w
  4721  1748  0460               	iorwf	(_vfpfcnvrt$2234+1)^(0+256),w
  4722  1749  1903               	btfsc	3,2
  4723  174A  2F5F               	goto	l4942
  4724                           
  4725                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 954:                 f = (*(l
      +                          ong double *)__va_arg(*(long double **)ap, (long double)0));
  4726  174B  0020               	movlb	0	; select bank0
  4727  174C  086F               	movf	vfpfcnvrt@ap,w
  4728  174D  0086               	movwf	6
  4729  174E  3001               	movlw	1	; select bank2/3
  4730  174F  0087               	movwf	7
  4731  1750  0801               	movf	1,w
  4732  1751  0084               	movwf	4
  4733  1752  3001               	movlw	1	; select bank2/3
  4734  1753  0085               	movwf	5
  4735  1754  3004               	movlw	4
  4736  1755  0781               	addwf	1,f
  4737  1756  3F00               	moviw [0]fsr0
  4738  1757  0022               	movlb	2	; select bank2
  4739  1758  00E1               	movwf	vfpfcnvrt@f^(0+256)
  4740  1759  3F01               	moviw [1]fsr0
  4741  175A  00E2               	movwf	(vfpfcnvrt@f+1)^(0+256)
  4742  175B  3F02               	moviw [2]fsr0
  4743  175C  00E3               	movwf	(vfpfcnvrt@f+2)^(0+256)
  4744  175D  3F03               	moviw [3]fsr0
  4745  175E  2F72               	goto	L1
  4746  175F                     l4942:	
  4747                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 955:             } else {
  4748                           
  4749                           
  4750                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 956:                 f = (lon
      +                          g double)(*(double *)__va_arg(*(double **)ap, (double)0));
  4751  175F  0020               	movlb	0	; select bank0
  4752  1760  086F               	movf	vfpfcnvrt@ap,w
  4753  1761  0086               	movwf	6
  4754  1762  3001               	movlw	1	; select bank2/3
  4755  1763  0087               	movwf	7
  4756  1764  0801               	movf	1,w
  4757  1765  0084               	movwf	4
  4758  1766  3001               	movlw	1	; select bank2/3
  4759  1767  0085               	movwf	5
  4760  1768  3004               	movlw	4
  4761  1769  0781               	addwf	1,f
  4762  176A  3F00               	moviw [0]fsr0
  4763  176B  0022               	movlb	2	; select bank2
  4764  176C  00E1               	movwf	vfpfcnvrt@f^(0+256)
  4765  176D  3F01               	moviw [1]fsr0
  4766  176E  00E2               	movwf	(vfpfcnvrt@f+1)^(0+256)
  4767  176F  3F02               	moviw [2]fsr0
  4768  1770  00E3               	movwf	(vfpfcnvrt@f+2)^(0+256)
  4769  1771  3F03               	moviw [3]fsr0
  4770  1772                     L1:
  4771  1772  00E4               	movwf	(vfpfcnvrt@f+3)^(0+256)
  4772                           
  4773                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 958:             *fmt += ((si
      +                          zeof("lf")/sizeof("lf"[0]))-1);
  4774  1773  0020               	movlb	0	; select bank0
  4775  1774  086E               	movf	vfpfcnvrt@fmt,w
  4776  1775  0086               	movwf	6
  4777  1776  3001               	movlw	1	; select bank2/3
  4778  1777  0087               	movwf	7
  4779  1778  3002               	movlw	2
  4780  1779  0781               	addwf	1,f
  4781  177A  3141               	addfsr 1,1
  4782  177B  1803               	skipnc
  4783  177C  0A81               	incf	1,f
  4784                           
  4785                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 960:             return efgto
      +                          a(fp, f, c);
  4786  177D  0022               	movlb	2	; select bank2
  4787  177E  0864               	movf	(vfpfcnvrt@f+3)^(0+256),w
  4788  177F  0021               	movlb	1	; select bank1
  4789  1780  00E7               	movwf	(efgtoa@f+3)^(0+128)
  4790  1781  0022               	movlb	2	; select bank2
  4791  1782  0863               	movf	(vfpfcnvrt@f+2)^(0+256),w
  4792  1783  0021               	movlb	1	; select bank1
  4793  1784  00E6               	movwf	(efgtoa@f+2)^(0+128)
  4794  1785  0022               	movlb	2	; select bank2
  4795  1786  0862               	movf	(vfpfcnvrt@f+1)^(0+256),w
  4796  1787  0021               	movlb	1	; select bank1
  4797  1788  00E5               	movwf	(efgtoa@f+1)^(0+128)
  4798  1789  0022               	movlb	2	; select bank2
  4799  178A  0861               	movf	vfpfcnvrt@f^(0+256),w
  4800  178B  0021               	movlb	1	; select bank1
  4801  178C  00E4               	movwf	efgtoa@f^(0+128)
  4802  178D  0022               	movlb	2	; select bank2
  4803  178E  0868               	movf	vfpfcnvrt@c^(0+256),w
  4804  178F  00D9               	movwf	??_vfpfcnvrt^(0+256)
  4805  1790  0859               	movf	??_vfpfcnvrt^(0+256),w
  4806  1791  0021               	movlb	1	; select bank1
  4807  1792  00E8               	movwf	efgtoa@c^(0+128)
  4808  1793  0022               	movlb	2	; select bank2
  4809  1794  0869               	movf	vfpfcnvrt@fp^(0+256),w
  4810  1795  3180  204E         	fcall	_efgtoa
  4811  1797  0865               	movf	(?_efgtoa+1)^(0+128),w
  4812  1798  0020               	movlb	0	; select bank0
  4813  1799  00EF               	movwf	?_vfpfcnvrt+1
  4814  179A  0021               	movlb	1	; select bank1
  4815  179B  0864               	movf	?_efgtoa^(0+128),w
  4816  179C  0020               	movlb	0	; select bank0
  4817  179D  00EE               	movwf	?_vfpfcnvrt
  4818  179E  0008               	return
  4819  179F                     l4950:
  4820                           
  4821                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 1372:         if ((*fmt)[0] =
      +                          = '%') {
  4822  179F  0020               	movlb	0	; select bank0
  4823  17A0  086E               	movf	vfpfcnvrt@fmt,w
  4824  17A1  0086               	movwf	6
  4825  17A2  3001               	movlw	1	; select bank2/3
  4826  17A3  0087               	movwf	7
  4827  17A4  3F40               	moviw [0]fsr1
  4828  17A5  0022               	movlb	2	; select bank2
  4829  17A6  00D9               	movwf	??_vfpfcnvrt^(0+256)
  4830  17A7  3F41               	moviw [1]fsr1
  4831  17A8  00DA               	movwf	(??_vfpfcnvrt^(0+256)+1)
  4832  17A9  0859               	movf	??_vfpfcnvrt^(0+256),w
  4833  17AA  0084               	movwf	4
  4834  17AB  085A               	movf	(??_vfpfcnvrt+1)^(0+256),w
  4835  17AC  0085               	movwf	5
  4836  17AD  0012               	moviw fsr0++
  4837  17AE  3A25               	xorlw	37
  4838  17AF  1D03               	btfss	3,2
  4839  17B0  2FCC               	goto	l4960
  4840                           
  4841                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 1373:             ++*fmt;
  4842  17B1  0020               	movlb	0	; select bank0
  4843  17B2  086E               	movf	vfpfcnvrt@fmt,w
  4844  17B3  0086               	movwf	6
  4845  17B4  3001               	movlw	1	; select bank2/3
  4846  17B5  0087               	movwf	7
  4847  17B6  3001               	movlw	1
  4848  17B7  0781               	addwf	1,f
  4849  17B8  3141               	addfsr 1,1
  4850  17B9  1803               	skipnc
  4851  17BA  0A81               	incf	1,f
  4852                           
  4853                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 1374:             fputc((int)
      +                          '%', fp);
  4854  17BB  3025               	movlw	37
  4855  17BC  00F0               	movwf	fputc@c
  4856  17BD  3000               	movlw	0
  4857  17BE  00F1               	movwf	fputc@c+1
  4858  17BF  0022               	movlb	2	; select bank2
  4859  17C0  0869               	movf	vfpfcnvrt@fp^(0+256),w
  4860  17C1  00D9               	movwf	??_vfpfcnvrt^(0+256)
  4861  17C2  0859               	movf	??_vfpfcnvrt^(0+256),w
  4862  17C3  00F2               	movwf	fputc@fp
  4863  17C4  319E  26C2         	fcall	_fputc
  4864  17C6                     l4956:
  4865                           
  4866                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 1375:             return 1;
  4867  17C6  3001               	movlw	1
  4868  17C7  0020               	movlb	0	; select bank0
  4869  17C8  00EE               	movwf	?_vfpfcnvrt
  4870  17C9  3000               	movlw	0
  4871  17CA  00EF               	movwf	?_vfpfcnvrt+1
  4872  17CB  0008               	return
  4873  17CC                     l4960:
  4874                           
  4875                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 1379:         ++*fmt;
  4876  17CC  0020               	movlb	0	; select bank0
  4877  17CD  086E               	movf	vfpfcnvrt@fmt,w
  4878  17CE  0086               	movwf	6
  4879  17CF  3001               	movlw	1	; select bank2/3
  4880  17D0  0087               	movwf	7
  4881  17D1  3001               	movlw	1
  4882  17D2  0781               	addwf	1,f
  4883  17D3  3141               	addfsr 1,1
  4884  17D4  1803               	skipnc
  4885  17D5  0A81               	incf	1,f
  4886                           
  4887                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 1380:         return 0;
  4888  17D6  01EE               	clrf	?_vfpfcnvrt
  4889  17D7  01EF               	clrf	?_vfpfcnvrt+1
  4890  17D8  0008               	return
  4891  17D9                     l4966:
  4892                           
  4893                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 1384:     fputc((int)(*fmt)[0
      +                          ], fp);
  4894  17D9  0020               	movlb	0	; select bank0
  4895  17DA  086E               	movf	vfpfcnvrt@fmt,w
  4896  17DB  0086               	movwf	6
  4897  17DC  3001               	movlw	1	; select bank2/3
  4898  17DD  0087               	movwf	7
  4899  17DE  3F40               	moviw [0]fsr1
  4900  17DF  0022               	movlb	2	; select bank2
  4901  17E0  00D9               	movwf	??_vfpfcnvrt^(0+256)
  4902  17E1  3F41               	moviw [1]fsr1
  4903  17E2  00DA               	movwf	(??_vfpfcnvrt^(0+256)+1)
  4904  17E3  0859               	movf	??_vfpfcnvrt^(0+256),w
  4905  17E4  0084               	movwf	4
  4906  17E5  085A               	movf	(??_vfpfcnvrt+1)^(0+256),w
  4907  17E6  0085               	movwf	5
  4908  17E7  0800               	movf	0,w	;code access
  4909  17E8  00DB               	movwf	(??_vfpfcnvrt+2)^(0+256)
  4910  17E9  01DC               	clrf	((??_vfpfcnvrt+2)^(0+256)+1)
  4911  17EA  085B               	movf	(??_vfpfcnvrt+2)^(0+256),w
  4912  17EB  00F0               	movwf	fputc@c
  4913  17EC  085C               	movf	(??_vfpfcnvrt+3)^(0+256),w
  4914  17ED  00F1               	movwf	fputc@c+1
  4915  17EE  0869               	movf	vfpfcnvrt@fp^(0+256),w
  4916  17EF  00DD               	movwf	(??_vfpfcnvrt+4)^(0+256)
  4917  17F0  085D               	movf	(??_vfpfcnvrt+4)^(0+256),w
  4918  17F1  00F2               	movwf	fputc@fp
  4919  17F2  319E  26C2  3196   	fcall	_fputc
  4920                           
  4921                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 1385:     ++*fmt;
  4922  17F5  0020               	movlb	0	; select bank0
  4923  17F6  086E               	movf	vfpfcnvrt@fmt,w
  4924  17F7  0086               	movwf	6
  4925  17F8  3001               	movlw	1	; select bank2/3
  4926  17F9  0087               	movwf	7
  4927  17FA  3001               	movlw	1
  4928  17FB  0781               	addwf	1,f
  4929  17FC  3141               	addfsr 1,1
  4930  17FD  1803               	skipnc
  4931  17FE  0A81               	incf	1,f
  4932  17FF  2FC6               	goto	l4956
  4933  1800                     __end_of_vfpfcnvrt:
  4934                           
  4935                           	psect	text4
  4936  1FAF                     __ptext4:	
  4937 ;; *************** function _strncmp *****************
  4938 ;; Defined at:
  4939 ;;		line 3 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/strncmp.c"
  4940 ;; Parameters:    Size  Location     Type
  4941 ;;  _l              1    wreg     PTR const unsigned char 
  4942 ;;		 -> vfpfcnvrt@ct(3), 
  4943 ;;  _r              2    0[COMMON] PTR const unsigned char 
  4944 ;;		 -> STR_12(3), 
  4945 ;;  n               2    2[COMMON] unsigned int 
  4946 ;; Auto vars:     Size  Location     Type
  4947 ;;  _l              1    5[COMMON] PTR const unsigned char 
  4948 ;;		 -> vfpfcnvrt@ct(3), 
  4949 ;;  r               2    6[COMMON] PTR const unsigned char 
  4950 ;;		 -> STR_12(3), 
  4951 ;;  l               1    8[COMMON] PTR const unsigned char 
  4952 ;;		 -> vfpfcnvrt@ct(3), 
  4953 ;; Return value:  Size  Location     Type
  4954 ;;                  2    0[COMMON] int 
  4955 ;; Registers used:
  4956 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  4957 ;; Tracked objects:
  4958 ;;		On entry : 1F/2
  4959 ;;		On exit  : 1F/2
  4960 ;;		Unchanged: 1F/0
  4961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4962 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4963 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4964 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4965 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4966 ;;Total ram usage:        9 bytes
  4967 ;; Hardware stack levels used:    1
  4968 ;; Hardware stack levels required when called:    5
  4969 ;; This function calls:
  4970 ;;		Nothing
  4971 ;; This function is called by:
  4972 ;;		_vfpfcnvrt
  4973 ;; This function uses a non-reentrant model
  4974 ;;
  4975                           
  4976                           
  4977                           ;psect for function _strncmp
  4978  1FAF                     _strncmp:
  4979                           
  4980                           ;incstack = 0
  4981                           ; Regs used in _strncmp: [wreg-fsr1h+status,2+status,0+pclath]
  4982                           ;strncmp@_l stored from wreg
  4983  1FAF  00F5               	movwf	strncmp@_l
  4984  1FB0  0875               	movf	strncmp@_l,w
  4985  1FB1  00F4               	movwf	??_strncmp
  4986  1FB2  0874               	movf	??_strncmp,w
  4987  1FB3  00F8               	movwf	strncmp@l
  4988  1FB4  0871               	movf	strncmp@_r+1,w
  4989  1FB5  00F7               	movwf	strncmp@r+1
  4990  1FB6  0870               	movf	strncmp@_r,w
  4991  1FB7  00F6               	movwf	strncmp@r
  4992  1FB8  3001               	movlw	1
  4993  1FB9  02F2               	subwf	strncmp@n,f
  4994  1FBA  3000               	movlw	0
  4995  1FBB  3BF3               	subwfb	strncmp@n+1,f
  4996  1FBC  0A72               	incf	strncmp@n,w
  4997  1FBD  1D03               	skipz
  4998  1FBE  2FEA               	goto	l4820
  4999  1FBF  0A73               	incf	strncmp@n+1,w
  5000  1FC0  1D03               	btfss	3,2
  5001  1FC1  2FEA               	goto	l4820
  5002  1FC2  01F0               	clrf	?_strncmp
  5003  1FC3  01F1               	clrf	?_strncmp+1
  5004  1FC4  0008               	return
  5005  1FC5                     l4822:
  5006  1FC5  0876               	movf	strncmp@r,w
  5007  1FC6  0084               	movwf	4
  5008  1FC7  0877               	movf	strncmp@r+1,w
  5009  1FC8  0085               	movwf	5
  5010  1FC9  0012               	moviw fsr0++
  5011  1FCA  1903               	btfsc	3,2
  5012  1FCB  2FF1               	goto	l4828
  5013  1FCC  0872               	movf	strncmp@n,w
  5014  1FCD  0473               	iorwf	strncmp@n+1,w
  5015  1FCE  1903               	btfsc	3,2
  5016  1FCF  2FF1               	goto	l4828
  5017  1FD0  0876               	movf	strncmp@r,w
  5018  1FD1  0084               	movwf	4
  5019  1FD2  0877               	movf	strncmp@r+1,w
  5020  1FD3  0085               	movwf	5
  5021  1FD4  0800               	movf	0,w	;code access
  5022  1FD5  00F4               	movwf	??_strncmp
  5023  1FD6  0878               	movf	strncmp@l,w
  5024  1FD7  0086               	movwf	6
  5025  1FD8  3001               	movlw	1	; select bank2/3
  5026  1FD9  0087               	movwf	7
  5027  1FDA  0801               	movf	1,w
  5028  1FDB  0674               	xorwf	??_strncmp,w
  5029  1FDC  1D03               	btfss	3,2
  5030  1FDD  2FF1               	goto	l4828
  5031  1FDE  3001               	movlw	1
  5032  1FDF  00F4               	movwf	??_strncmp
  5033  1FE0  0874               	movf	??_strncmp,w
  5034  1FE1  07F8               	addwf	strncmp@l,f
  5035  1FE2  3001               	movlw	1
  5036  1FE3  07F6               	addwf	strncmp@r,f
  5037  1FE4  3000               	movlw	0
  5038  1FE5  3DF7               	addwfc	strncmp@r+1,f
  5039  1FE6  3001               	movlw	1
  5040  1FE7  02F2               	subwf	strncmp@n,f
  5041  1FE8  3000               	movlw	0
  5042  1FE9  3BF3               	subwfb	strncmp@n+1,f
  5043  1FEA                     l4820:
  5044  1FEA  0878               	movf	strncmp@l,w
  5045  1FEB  0086               	movwf	6
  5046  1FEC  3001               	movlw	1	; select bank2/3
  5047  1FED  0087               	movwf	7
  5048  1FEE  0801               	movf	1,w
  5049  1FEF  1D03               	btfss	3,2
  5050  1FF0  2FC5               	goto	l4822
  5051  1FF1                     l4828:
  5052  1FF1  0878               	movf	strncmp@l,w
  5053  1FF2  0086               	movwf	6
  5054  1FF3  3001               	movlw	1	; select bank2/3
  5055  1FF4  0087               	movwf	7
  5056  1FF5  0876               	movf	strncmp@r,w
  5057  1FF6  0084               	movwf	4
  5058  1FF7  0877               	movf	strncmp@r+1,w
  5059  1FF8  0085               	movwf	5
  5060  1FF9  0800               	movf	0,w	;code access
  5061  1FFA  0201               	subwf	1,w
  5062  1FFB  00F0               	movwf	?_strncmp
  5063  1FFC  01F1               	clrf	?_strncmp+1
  5064  1FFD  1C03               	skipc
  5065  1FFE  03F1               	decf	?_strncmp+1,f
  5066  1FFF  0008               	return
  5067  2000                     __end_of_strncmp:
  5068                           
  5069                           	psect	text5
  5070  004E                     __ptext5:	
  5071 ;; *************** function _efgtoa *****************
  5072 ;; Defined at:
  5073 ;;		line 332 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c"
  5074 ;; Parameters:    Size  Location     Type
  5075 ;;  fp              1    wreg     PTR struct _IO_FILE
  5076 ;;		 -> sprintf@f(5), 
  5077 ;;  f               4   68[BANK1 ] PTR struct _IO_FILE
  5078 ;;  c               1   72[BANK1 ] unsigned char 
  5079 ;; Auto vars:     Size  Location     Type
  5080 ;;  fp              1   28[BANK2 ] PTR struct _IO_FILE
  5081 ;;		 -> sprintf@f(5), 
  5082 ;;  u               4   53[BANK2 ] PTR struct _IO_FILE
  5083 ;;  g               4   45[BANK2 ] PTR struct _IO_FILE
  5084 ;;  l               4   39[BANK2 ] PTR struct _IO_FILE
  5085 ;;  h               4   35[BANK2 ] PTR struct _IO_FILE
  5086 ;;  ou              4   20[BANK2 ] PTR struct _IO_FILE
  5087 ;;  n               2   51[BANK2 ] int 
  5088 ;;  e               2   49[BANK2 ] int 
  5089 ;;  i               2   43[BANK2 ] int 
  5090 ;;  w               2   31[BANK2 ] int 
  5091 ;;  p               2   29[BANK2 ] int 
  5092 ;;  sign            2   26[BANK2 ] int 
  5093 ;;  d               2   24[BANK2 ] int 
  5094 ;;  m               2   18[BANK2 ] int 
  5095 ;;  ne              2   16[BANK2 ] int 
  5096 ;;  pp              2   14[BANK2 ] int 
  5097 ;;  t               2   12[BANK2 ] int 
  5098 ;;  mode            1   34[BANK2 ] unsigned char 
  5099 ;;  nmode           1   33[BANK2 ] unsigned char 
  5100 ;; Return value:  Size  Location     Type
  5101 ;;                  2   68[BANK1 ] int 
  5102 ;; Registers used:
  5103 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5104 ;; Tracked objects:
  5105 ;;		On entry : 1F/2
  5106 ;;		On exit  : 1F/1
  5107 ;;		Unchanged: 0/0
  5108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5109 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  5110 ;;      Locals:         0       0       0      57       0       0       0       0       0       0       0       0       
      +0       0
  5111 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5112 ;;      Totals:         0       0       9      57       0       0       0       0       0       0       0       0       
      +0       0
  5113 ;;Total ram usage:       66 bytes
  5114 ;; Hardware stack levels used:    1
  5115 ;; Hardware stack levels required when called:    9
  5116 ;; This function calls:
  5117 ;;		___awdiv
  5118 ;;		___awmod
  5119 ;;		___fladd
  5120 ;;		___fldiv
  5121 ;;		___fleq
  5122 ;;		___flge
  5123 ;;		___flmul
  5124 ;;		___flneg
  5125 ;;		___flsub
  5126 ;;		___fltol
  5127 ;;		___fpclassifyf
  5128 ;;		_floorf
  5129 ;;		_isupper
  5130 ;;		_pad
  5131 ;;		_strcpy
  5132 ;;		_tolower
  5133 ;; This function is called by:
  5134 ;;		_vfpfcnvrt
  5135 ;; This function uses a non-reentrant model
  5136 ;;
  5137                           
  5138                           
  5139                           ;psect for function _efgtoa
  5140  004E                     _efgtoa:
  5141                           
  5142                           ;incstack = 0
  5143                           ; Regs used in _efgtoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5144                           ;efgtoa@fp stored from wreg
  5145  004E  00BC               	movwf	efgtoa@fp^(0+256)
  5146                           
  5147                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 332: static int efgtoa(FILE *
      +                          fp, long double f, char c);/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 333
      +                          : {;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 334:     char mode, nmode;
      +                          ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 335:     int d, e, i, m, n, n
      +                          e, p, pp, sign, t, w;;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 336:    
      +                           long double g, h, l, ou, u;;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 3
      +                          39:     sign = 0;
  5148  004F  01BA               	clrf	efgtoa@sign^(0+256)
  5149  0050  01BB               	clrf	(efgtoa@sign+1)^(0+256)
  5150                           
  5151                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 340:     g = f;
  5152  0051  0021               	movlb	1	; select bank1
  5153  0052  0867               	movf	(efgtoa@f+3)^(0+128),w
  5154  0053  0022               	movlb	2	; select bank2
  5155  0054  00D0               	movwf	(efgtoa@g+3)^(0+256)
  5156  0055  0021               	movlb	1	; select bank1
  5157  0056  0866               	movf	(efgtoa@f+2)^(0+128),w
  5158  0057  0022               	movlb	2	; select bank2
  5159  0058  00CF               	movwf	(efgtoa@g+2)^(0+256)
  5160  0059  0021               	movlb	1	; select bank1
  5161  005A  0865               	movf	(efgtoa@f+1)^(0+128),w
  5162  005B  0022               	movlb	2	; select bank2
  5163  005C  00CE               	movwf	(efgtoa@g+1)^(0+256)
  5164  005D  0021               	movlb	1	; select bank1
  5165  005E  0864               	movf	efgtoa@f^(0+128),w
  5166  005F  0022               	movlb	2	; select bank2
  5167  0060  00CD               	movwf	efgtoa@g^(0+256)
  5168                           
  5169                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 341:     if (g < 0.0) {
  5170  0061  0850               	movf	(efgtoa@g+3)^(0+256),w
  5171  0062  0020               	movlb	0	; select bank0
  5172  0063  00BD               	movwf	___flge@ff1+3
  5173  0064  0022               	movlb	2	; select bank2
  5174  0065  084F               	movf	(efgtoa@g+2)^(0+256),w
  5175  0066  0020               	movlb	0	; select bank0
  5176  0067  00BC               	movwf	___flge@ff1+2
  5177  0068  0022               	movlb	2	; select bank2
  5178  0069  084E               	movf	(efgtoa@g+1)^(0+256),w
  5179  006A  0020               	movlb	0	; select bank0
  5180  006B  00BB               	movwf	___flge@ff1+1
  5181  006C  0022               	movlb	2	; select bank2
  5182  006D  084D               	movf	efgtoa@g^(0+256),w
  5183  006E  0020               	movlb	0	; select bank0
  5184  006F  00BA               	movwf	___flge@ff1
  5185  0070  3000               	movlw	0
  5186  0071  00C1               	movwf	___flge@ff2+3
  5187  0072  3000               	movlw	0
  5188  0073  00C0               	movwf	___flge@ff2+2
  5189  0074  3000               	movlw	0
  5190  0075  00BF               	movwf	___flge@ff2+1
  5191  0076  3000               	movlw	0
  5192  0077  00BE               	movwf	___flge@ff2
  5193  0078  3187  276E  3180   	fcall	___flge
  5194  007B  1803               	btfsc	3,0
  5195  007C  2895               	goto	l4516
  5196                           
  5197                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 342:         sign = 1;
  5198  007D  3001               	movlw	1
  5199  007E  0022               	movlb	2	; select bank2
  5200  007F  00BA               	movwf	efgtoa@sign^(0+256)
  5201  0080  3000               	movlw	0
  5202  0081  00BB               	movwf	(efgtoa@sign^(0+256)+1)
  5203                           
  5204                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 343:         g = -g;
  5205  0082  0850               	movf	(efgtoa@g+3)^(0+256),w
  5206  0083  00F3               	movwf	___flneg@f1+3
  5207  0084  084F               	movf	(efgtoa@g+2)^(0+256),w
  5208  0085  00F2               	movwf	___flneg@f1+2
  5209  0086  084E               	movf	(efgtoa@g+1)^(0+256),w
  5210  0087  00F1               	movwf	___flneg@f1+1
  5211  0088  084D               	movf	efgtoa@g^(0+256),w
  5212  0089  00F0               	movwf	___flneg@f1
  5213  008A  319B  231E  3180   	fcall	___flneg
  5214  008D  0873               	movf	?___flneg+3,w
  5215  008E  00D0               	movwf	(efgtoa@g+3)^(0+256)
  5216  008F  0872               	movf	?___flneg+2,w
  5217  0090  00CF               	movwf	(efgtoa@g+2)^(0+256)
  5218  0091  0871               	movf	?___flneg+1,w
  5219  0092  00CE               	movwf	(efgtoa@g+1)^(0+256)
  5220  0093  0870               	movf	?___flneg,w
  5221  0094  00CD               	movwf	efgtoa@g^(0+256)
  5222  0095                     l4516:
  5223                           
  5224                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 347:     n = 0;
  5225  0095  0022               	movlb	2	; select bank2
  5226  0096  01D3               	clrf	efgtoa@n^(0+256)
  5227  0097  01D4               	clrf	(efgtoa@n+1)^(0+256)
  5228                           
  5229                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 348:     w = width;
  5230  0098  0023               	movlb	3	; select bank3
  5231  0099  082D               	movf	(_width+1)^(0+384),w
  5232  009A  0022               	movlb	2	; select bank2
  5233  009B  00C0               	movwf	(efgtoa@w+1)^(0+256)
  5234  009C  0023               	movlb	3	; select bank3
  5235  009D  082C               	movf	_width^(0+384),w
  5236  009E  0022               	movlb	2	; select bank2
  5237  009F  00BF               	movwf	efgtoa@w^(0+256)
  5238                           
  5239                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 349:     if (sign || (flags &
      +                           (1 << 2))) {
  5240  00A0  083A               	movf	efgtoa@sign^(0+256),w
  5241  00A1  043B               	iorwf	(efgtoa@sign+1)^(0+256),w
  5242  00A2  1D03               	btfss	3,2
  5243  00A3  28A7               	goto	l4524
  5244  00A4  0023               	movlb	3	; select bank3
  5245  00A5  1D30               	btfss	_flags^(0+384),2
  5246  00A6  28C1               	goto	l4536
  5247  00A7                     l4524:
  5248                           
  5249                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 350:         dbuf[n] = sign ?
      +                           '-' : '+';
  5250  00A7  0022               	movlb	2	; select bank2
  5251  00A8  083A               	movf	efgtoa@sign^(0+256),w
  5252  00A9  043B               	iorwf	(efgtoa@sign+1)^(0+256),w
  5253  00AA  1D03               	btfss	3,2
  5254  00AB  28AE               	goto	l4528
  5255  00AC  302B               	movlw	43
  5256  00AD  28AF               	goto	L2
  5257  00AE                     l4528:
  5258  00AE  302D               	movlw	45
  5259  00AF                     L2:
  5260  00AF  00A0               	movwf	_efgtoa$2205^(0+256)
  5261  00B0  3000               	movlw	0
  5262  00B1  00A1               	movwf	(_efgtoa$2205^(0+256)+1)
  5263  00B2  0820               	movf	_efgtoa$2205^(0+256),w
  5264  00B3  0021               	movlb	1	; select bank1
  5265  00B4  00E9               	movwf	??_efgtoa^(0+128)
  5266  00B5  0869               	movf	??_efgtoa^(0+128),w
  5267  00B6  0025               	movlb	5	; select bank5
  5268  00B7  00A0               	movwf	_dbuf^(0+640)
  5269                           
  5270                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 351:         ++n;
  5271  00B8  3001               	movlw	1
  5272  00B9  0022               	movlb	2	; select bank2
  5273  00BA  07D3               	addwf	efgtoa@n^(0+256),f
  5274  00BB  3000               	movlw	0
  5275  00BC  3DD4               	addwfc	(efgtoa@n+1)^(0+256),f
  5276                           
  5277                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 352:         --w;
  5278  00BD  30FF               	movlw	255
  5279  00BE  07BF               	addwf	efgtoa@w^(0+256),f
  5280  00BF  30FF               	movlw	255
  5281  00C0  3DC0               	addwfc	(efgtoa@w+1)^(0+256),f
  5282  00C1                     l4536:
  5283                           
  5284                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 357:         if ((0 ? isupper
      +                          ((int)c) : ((unsigned)((int)c)-'A') < 26)) {
  5285  00C1  0022               	movlb	2	; select bank2
  5286  00C2  0850               	movf	(efgtoa@g+3)^(0+256),w
  5287  00C3  00F3               	movwf	___fpclassifyf@x+3
  5288  00C4  084F               	movf	(efgtoa@g+2)^(0+256),w
  5289  00C5  00F2               	movwf	___fpclassifyf@x+2
  5290  00C6  084E               	movf	(efgtoa@g+1)^(0+256),w
  5291  00C7  00F1               	movwf	___fpclassifyf@x+1
  5292  00C8  084D               	movf	efgtoa@g^(0+256),w
  5293  00C9  00F0               	movwf	___fpclassifyf@x
  5294  00CA  3191  2112  3180   	fcall	___fpclassifyf
  5295  00CD  0370               	decf	?___fpclassifyf,w
  5296  00CE  0471               	iorwf	?___fpclassifyf+1,w
  5297  00CF  1D03               	btfss	3,2
  5298  00D0  291B               	goto	l4554
  5299  00D1  0021               	movlb	1	; select bank1
  5300  00D2  0868               	movf	efgtoa@c^(0+128),w
  5301  00D3  3EBF               	addlw	191
  5302  00D4  00E9               	movwf	??_efgtoa^(0+128)
  5303  00D5  30FF               	movlw	255
  5304  00D6  1803               	skipnc
  5305  00D7  3000               	movlw	0
  5306  00D8  00EA               	movwf	(??_efgtoa^(0+128)+1)
  5307  00D9  3000               	movlw	0
  5308  00DA  026A               	subwf	(??_efgtoa+1)^(0+128),w
  5309  00DB  301A               	movlw	26
  5310  00DC  1903               	skipnz
  5311  00DD  0269               	subwf	??_efgtoa^(0+128),w
  5312  00DE  1803               	btfsc	3,0
  5313  00DF  28E2               	goto	u5090
  5314  00E0  3001               	movlw	1
  5315  00E1  28E3               	goto	u5100
  5316  00E2                     u5090:
  5317  00E2  3000               	movlw	0
  5318  00E3                     u5100:
  5319  00E3  00EB               	movwf	(??_efgtoa+2)^(0+128)
  5320  00E4  01EC               	clrf	((??_efgtoa+2)^(0+128)+1)
  5321  00E5  086B               	movf	(??_efgtoa+2)^(0+128),w
  5322  00E6  0022               	movlb	2	; select bank2
  5323  00E7  00A2               	movwf	_efgtoa$2206^(0+256)
  5324  00E8  0021               	movlb	1	; select bank1
  5325  00E9  086C               	movf	(??_efgtoa+3)^(0+128),w
  5326  00EA  0022               	movlb	2	; select bank2
  5327  00EB  00A3               	movwf	(_efgtoa$2206+1)^(0+256)
  5328  00EC  0822               	movf	_efgtoa$2206^(0+256),w
  5329  00ED  0423               	iorwf	(_efgtoa$2206+1)^(0+256),w
  5330  00EE  1903               	btfsc	3,2
  5331  00EF  28F4               	goto	l4546
  5332                           
  5333                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 358:             strcpy(&dbuf
      +                          [n], "INF");
  5334  00F0  3034               	movlw	low (STR_2| (0+32768))
  5335  00F1  00F0               	movwf	strcpy@src
  5336  00F2  3098               	movlw	high (STR_2| (0+32768))
  5337  00F3  28F7               	goto	L3
  5338  00F4                     l4546:	
  5339                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 359:         } else {
  5340                           
  5341                           
  5342                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 360:             strcpy(&dbuf
      +                          [n], "inf");
  5343  00F4  303C               	movlw	low (STR_3| (0+32768))
  5344  00F5  00F0               	movwf	strcpy@src
  5345  00F6  3098               	movlw	high (STR_3| (0+32768))
  5346  00F7                     L3:
  5347  00F7  00F1               	movwf	strcpy@src+1
  5348  00F8  0853               	movf	efgtoa@n^(0+256),w
  5349  00F9  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
  5350  00FA  319C  24B8  3180   	fcall	_strcpy
  5351                           
  5352                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 362:         w -= ((sizeof("i
      +                          nf")/sizeof("inf"[0]))-1);
  5353  00FD  30FD               	movlw	253
  5354  00FE  07BF               	addwf	efgtoa@w^(0+256),f
  5355  00FF  30FF               	movlw	255
  5356  0100  3DC0               	addwfc	(efgtoa@w+1)^(0+256),f
  5357                           
  5358                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 363:         return pad(fp, &
      +                          dbuf[0], w);
  5359  0101  30A0               	movlw	(low (_dbuf| (0+512)))& (0+255)
  5360  0102  0021               	movlb	1	; select bank1
  5361  0103  00E9               	movwf	??_efgtoa^(0+128)
  5362  0104  0869               	movf	??_efgtoa^(0+128),w
  5363  0105  0020               	movlb	0	; select bank0
  5364  0106  00A4               	movwf	pad@buf
  5365  0107  0022               	movlb	2	; select bank2
  5366  0108  0840               	movf	(efgtoa@w+1)^(0+256),w
  5367  0109  0020               	movlb	0	; select bank0
  5368  010A  00A6               	movwf	pad@p+1
  5369  010B  0022               	movlb	2	; select bank2
  5370  010C  083F               	movf	efgtoa@w^(0+256),w
  5371  010D  0020               	movlb	0	; select bank0
  5372  010E  00A5               	movwf	pad@p
  5373  010F  0022               	movlb	2	; select bank2
  5374  0110  083C               	movf	efgtoa@fp^(0+256),w
  5375  0111  319F  270E         	fcall	_pad
  5376  0113  0825               	movf	?_pad+1,w
  5377  0114  0021               	movlb	1	; select bank1
  5378  0115  00E5               	movwf	(?_efgtoa+1)^(0+128)
  5379  0116  0020               	movlb	0	; select bank0
  5380  0117  0824               	movf	?_pad,w
  5381  0118  0021               	movlb	1	; select bank1
  5382  0119  00E4               	movwf	?_efgtoa^(0+128)
  5383  011A  0008               	return
  5384  011B                     l4554:
  5385                           
  5386                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 366:         if ((0 ? isupper
      +                          ((int)c) : ((unsigned)((int)c)-'A') < 26)) {
  5387  011B  0022               	movlb	2	; select bank2
  5388  011C  0850               	movf	(efgtoa@g+3)^(0+256),w
  5389  011D  00F3               	movwf	___fpclassifyf@x+3
  5390  011E  084F               	movf	(efgtoa@g+2)^(0+256),w
  5391  011F  00F2               	movwf	___fpclassifyf@x+2
  5392  0120  084E               	movf	(efgtoa@g+1)^(0+256),w
  5393  0121  00F1               	movwf	___fpclassifyf@x+1
  5394  0122  084D               	movf	efgtoa@g^(0+256),w
  5395  0123  00F0               	movwf	___fpclassifyf@x
  5396  0124  3191  2112  3180   	fcall	___fpclassifyf
  5397  0127  0870               	movf	?___fpclassifyf,w
  5398  0128  0471               	iorwf	?___fpclassifyf+1,w
  5399  0129  1D03               	btfss	3,2
  5400  012A  2975               	goto	l4572
  5401  012B  0021               	movlb	1	; select bank1
  5402  012C  0868               	movf	efgtoa@c^(0+128),w
  5403  012D  3EBF               	addlw	191
  5404  012E  00E9               	movwf	??_efgtoa^(0+128)
  5405  012F  30FF               	movlw	255
  5406  0130  1803               	skipnc
  5407  0131  3000               	movlw	0
  5408  0132  00EA               	movwf	(??_efgtoa^(0+128)+1)
  5409  0133  3000               	movlw	0
  5410  0134  026A               	subwf	(??_efgtoa+1)^(0+128),w
  5411  0135  301A               	movlw	26
  5412  0136  1903               	skipnz
  5413  0137  0269               	subwf	??_efgtoa^(0+128),w
  5414  0138  1803               	btfsc	3,0
  5415  0139  293C               	goto	u5130
  5416  013A  3001               	movlw	1
  5417  013B  293D               	goto	u5140
  5418  013C                     u5130:
  5419  013C  3000               	movlw	0
  5420  013D                     u5140:
  5421  013D  00EB               	movwf	(??_efgtoa+2)^(0+128)
  5422  013E  01EC               	clrf	((??_efgtoa+2)^(0+128)+1)
  5423  013F  086B               	movf	(??_efgtoa+2)^(0+128),w
  5424  0140  0022               	movlb	2	; select bank2
  5425  0141  00A4               	movwf	_efgtoa$2211^(0+256)
  5426  0142  0021               	movlb	1	; select bank1
  5427  0143  086C               	movf	(??_efgtoa+3)^(0+128),w
  5428  0144  0022               	movlb	2	; select bank2
  5429  0145  00A5               	movwf	(_efgtoa$2211+1)^(0+256)
  5430  0146  0824               	movf	_efgtoa$2211^(0+256),w
  5431  0147  0425               	iorwf	(_efgtoa$2211+1)^(0+256),w
  5432  0148  1903               	btfsc	3,2
  5433  0149  294E               	goto	l4564
  5434                           
  5435                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 367:             strcpy(&dbuf
      +                          [n], "NAN");
  5436  014A  3038               	movlw	low (STR_6| (0+32768))
  5437  014B  00F0               	movwf	strcpy@src
  5438  014C  3098               	movlw	high (STR_6| (0+32768))
  5439  014D  2951               	goto	L4
  5440  014E                     l4564:	
  5441                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 368:         } else {
  5442                           
  5443                           
  5444                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 369:             strcpy(&dbuf
      +                          [n], "nan");
  5445  014E  3040               	movlw	low (STR_7| (0+32768))
  5446  014F  00F0               	movwf	strcpy@src
  5447  0150  3098               	movlw	high (STR_7| (0+32768))
  5448  0151                     L4:
  5449  0151  00F1               	movwf	strcpy@src+1
  5450  0152  0853               	movf	efgtoa@n^(0+256),w
  5451  0153  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
  5452  0154  319C  24B8  3180   	fcall	_strcpy
  5453                           
  5454                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 371:         w -= ((sizeof("i
      +                          nf")/sizeof("inf"[0]))-1);
  5455  0157  30FD               	movlw	253
  5456  0158  07BF               	addwf	efgtoa@w^(0+256),f
  5457  0159  30FF               	movlw	255
  5458  015A  3DC0               	addwfc	(efgtoa@w+1)^(0+256),f
  5459                           
  5460                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 372:         return pad(fp, &
      +                          dbuf[0], w);
  5461  015B  30A0               	movlw	(low (_dbuf| (0+512)))& (0+255)
  5462  015C  0021               	movlb	1	; select bank1
  5463  015D  00E9               	movwf	??_efgtoa^(0+128)
  5464  015E  0869               	movf	??_efgtoa^(0+128),w
  5465  015F  0020               	movlb	0	; select bank0
  5466  0160  00A4               	movwf	pad@buf
  5467  0161  0022               	movlb	2	; select bank2
  5468  0162  0840               	movf	(efgtoa@w+1)^(0+256),w
  5469  0163  0020               	movlb	0	; select bank0
  5470  0164  00A6               	movwf	pad@p+1
  5471  0165  0022               	movlb	2	; select bank2
  5472  0166  083F               	movf	efgtoa@w^(0+256),w
  5473  0167  0020               	movlb	0	; select bank0
  5474  0168  00A5               	movwf	pad@p
  5475  0169  0022               	movlb	2	; select bank2
  5476  016A  083C               	movf	efgtoa@fp^(0+256),w
  5477  016B  319F  270E         	fcall	_pad
  5478  016D  0825               	movf	?_pad+1,w
  5479  016E  0021               	movlb	1	; select bank1
  5480  016F  00E5               	movwf	(?_efgtoa+1)^(0+128)
  5481  0170  0020               	movlb	0	; select bank0
  5482  0171  0824               	movf	?_pad,w
  5483  0172  0021               	movlb	1	; select bank1
  5484  0173  00E4               	movwf	?_efgtoa^(0+128)
  5485  0174  0008               	return
  5486  0175                     l4572:
  5487                           
  5488                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 376:     u = 1.0;
  5489  0175  303F               	movlw	63
  5490  0176  0022               	movlb	2	; select bank2
  5491  0177  00D8               	movwf	(efgtoa@u+3)^(0+256)
  5492  0178  3080               	movlw	128
  5493  0179  00D7               	movwf	(efgtoa@u+2)^(0+256)
  5494  017A  3000               	movlw	0
  5495  017B  00D6               	movwf	(efgtoa@u+1)^(0+256)
  5496  017C  3000               	movlw	0
  5497  017D  00D5               	movwf	efgtoa@u^(0+256)
  5498                           
  5499                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 377:     e = 0;
  5500  017E  01D1               	clrf	efgtoa@e^(0+256)
  5501  017F  01D2               	clrf	(efgtoa@e+1)^(0+256)
  5502                           
  5503                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 378:     if (!(g == 0.0)) {
  5504  0180  0850               	movf	(efgtoa@g+3)^(0+256),w
  5505  0181  00F3               	movwf	___fleq@ff1+3
  5506  0182  084F               	movf	(efgtoa@g+2)^(0+256),w
  5507  0183  00F2               	movwf	___fleq@ff1+2
  5508  0184  084E               	movf	(efgtoa@g+1)^(0+256),w
  5509  0185  00F1               	movwf	___fleq@ff1+1
  5510  0186  084D               	movf	efgtoa@g^(0+256),w
  5511  0187  00F0               	movwf	___fleq@ff1
  5512  0188  3000               	movlw	0
  5513  0189  00F7               	movwf	___fleq@ff2+3
  5514  018A  3000               	movlw	0
  5515  018B  00F6               	movwf	___fleq@ff2+2
  5516  018C  3000               	movlw	0
  5517  018D  00F5               	movwf	___fleq@ff2+1
  5518  018E  3000               	movlw	0
  5519  018F  00F4               	movwf	___fleq@ff2
  5520  0190  319E  267A  3180   	fcall	___fleq
  5521  0193  1C03               	btfss	3,0
  5522  0194  29C4               	goto	l4584
  5523  0195  2A50               	goto	l4592
  5524  0196                     l4580:
  5525                           
  5526                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 380:             u = u*10.0;
  5527  0196  3041               	movlw	65
  5528  0197  00A3               	movwf	___flmul@b+3
  5529  0198  3020               	movlw	32
  5530  0199  00A2               	movwf	___flmul@b+2
  5531  019A  3000               	movlw	0
  5532  019B  00A1               	movwf	___flmul@b+1
  5533  019C  3000               	movlw	0
  5534  019D  00A0               	movwf	___flmul@b
  5535  019E  0022               	movlb	2	; select bank2
  5536  019F  0858               	movf	(efgtoa@u+3)^(0+256),w
  5537  01A0  0020               	movlb	0	; select bank0
  5538  01A1  00A7               	movwf	___flmul@a+3
  5539  01A2  0022               	movlb	2	; select bank2
  5540  01A3  0857               	movf	(efgtoa@u+2)^(0+256),w
  5541  01A4  0020               	movlb	0	; select bank0
  5542  01A5  00A6               	movwf	___flmul@a+2
  5543  01A6  0022               	movlb	2	; select bank2
  5544  01A7  0856               	movf	(efgtoa@u+1)^(0+256),w
  5545  01A8  0020               	movlb	0	; select bank0
  5546  01A9  00A5               	movwf	___flmul@a+1
  5547  01AA  0022               	movlb	2	; select bank2
  5548  01AB  0855               	movf	efgtoa@u^(0+256),w
  5549  01AC  0020               	movlb	0	; select bank0
  5550  01AD  00A4               	movwf	___flmul@a
  5551  01AE  318A  22F4  3180   	fcall	___flmul
  5552  01B1  0823               	movf	?___flmul+3,w
  5553  01B2  0022               	movlb	2	; select bank2
  5554  01B3  00D8               	movwf	(efgtoa@u+3)^(0+256)
  5555  01B4  0020               	movlb	0	; select bank0
  5556  01B5  0822               	movf	?___flmul+2,w
  5557  01B6  0022               	movlb	2	; select bank2
  5558  01B7  00D7               	movwf	(efgtoa@u+2)^(0+256)
  5559  01B8  0020               	movlb	0	; select bank0
  5560  01B9  0821               	movf	?___flmul+1,w
  5561  01BA  0022               	movlb	2	; select bank2
  5562  01BB  00D6               	movwf	(efgtoa@u+1)^(0+256)
  5563  01BC  0020               	movlb	0	; select bank0
  5564  01BD  0820               	movf	?___flmul,w
  5565  01BE  0022               	movlb	2	; select bank2
  5566  01BF  00D5               	movwf	efgtoa@u^(0+256)
  5567                           
  5568                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 381:             ++e;
  5569  01C0  3001               	movlw	1
  5570  01C1  07D1               	addwf	efgtoa@e^(0+256),f
  5571  01C2  3000               	movlw	0
  5572  01C3  3DD2               	addwfc	(efgtoa@e+1)^(0+256),f
  5573  01C4                     l4584:
  5574                           
  5575                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 379:         while (!(g < (u*
      +                          10.0))) {
  5576  01C4  0850               	movf	(efgtoa@g+3)^(0+256),w
  5577  01C5  0020               	movlb	0	; select bank0
  5578  01C6  00BD               	movwf	___flge@ff1+3
  5579  01C7  0022               	movlb	2	; select bank2
  5580  01C8  084F               	movf	(efgtoa@g+2)^(0+256),w
  5581  01C9  0020               	movlb	0	; select bank0
  5582  01CA  00BC               	movwf	___flge@ff1+2
  5583  01CB  0022               	movlb	2	; select bank2
  5584  01CC  084E               	movf	(efgtoa@g+1)^(0+256),w
  5585  01CD  0020               	movlb	0	; select bank0
  5586  01CE  00BB               	movwf	___flge@ff1+1
  5587  01CF  0022               	movlb	2	; select bank2
  5588  01D0  084D               	movf	efgtoa@g^(0+256),w
  5589  01D1  0020               	movlb	0	; select bank0
  5590  01D2  00BA               	movwf	___flge@ff1
  5591  01D3  3041               	movlw	65
  5592  01D4  00A3               	movwf	___flmul@b+3
  5593  01D5  3020               	movlw	32
  5594  01D6  00A2               	movwf	___flmul@b+2
  5595  01D7  3000               	movlw	0
  5596  01D8  00A1               	movwf	___flmul@b+1
  5597  01D9  3000               	movlw	0
  5598  01DA  00A0               	movwf	___flmul@b
  5599  01DB  0022               	movlb	2	; select bank2
  5600  01DC  0858               	movf	(efgtoa@u+3)^(0+256),w
  5601  01DD  0020               	movlb	0	; select bank0
  5602  01DE  00A7               	movwf	___flmul@a+3
  5603  01DF  0022               	movlb	2	; select bank2
  5604  01E0  0857               	movf	(efgtoa@u+2)^(0+256),w
  5605  01E1  0020               	movlb	0	; select bank0
  5606  01E2  00A6               	movwf	___flmul@a+2
  5607  01E3  0022               	movlb	2	; select bank2
  5608  01E4  0856               	movf	(efgtoa@u+1)^(0+256),w
  5609  01E5  0020               	movlb	0	; select bank0
  5610  01E6  00A5               	movwf	___flmul@a+1
  5611  01E7  0022               	movlb	2	; select bank2
  5612  01E8  0855               	movf	efgtoa@u^(0+256),w
  5613  01E9  0020               	movlb	0	; select bank0
  5614  01EA  00A4               	movwf	___flmul@a
  5615  01EB  318A  22F4  3180   	fcall	___flmul
  5616  01EE  0823               	movf	?___flmul+3,w
  5617  01EF  00C1               	movwf	___flge@ff2+3
  5618  01F0  0822               	movf	?___flmul+2,w
  5619  01F1  00C0               	movwf	___flge@ff2+2
  5620  01F2  0821               	movf	?___flmul+1,w
  5621  01F3  00BF               	movwf	___flge@ff2+1
  5622  01F4  0820               	movf	?___flmul,w
  5623  01F5  00BE               	movwf	___flge@ff2
  5624  01F6  3187  276E  3180   	fcall	___flge
  5625  01F9  1C03               	btfss	3,0
  5626  01FA  2A2B               	goto	l4590
  5627  01FB  2996               	goto	l4580
  5628  01FC                     l4586:
  5629                           
  5630                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 384:             u = u/10.0;
  5631  01FC  3041               	movlw	65
  5632  01FD  0021               	movlb	1	; select bank1
  5633  01FE  00CB               	movwf	(___fldiv@a+3)^(0+128)
  5634  01FF  3020               	movlw	32
  5635  0200  00CA               	movwf	(___fldiv@a+2)^(0+128)
  5636  0201  3000               	movlw	0
  5637  0202  00C9               	movwf	(___fldiv@a+1)^(0+128)
  5638  0203  3000               	movlw	0
  5639  0204  00C8               	movwf	___fldiv@a^(0+128)
  5640  0205  0022               	movlb	2	; select bank2
  5641  0206  0858               	movf	(efgtoa@u+3)^(0+256),w
  5642  0207  0021               	movlb	1	; select bank1
  5643  0208  00CF               	movwf	(___fldiv@b+3)^(0+128)
  5644  0209  0022               	movlb	2	; select bank2
  5645  020A  0857               	movf	(efgtoa@u+2)^(0+256),w
  5646  020B  0021               	movlb	1	; select bank1
  5647  020C  00CE               	movwf	(___fldiv@b+2)^(0+128)
  5648  020D  0022               	movlb	2	; select bank2
  5649  020E  0856               	movf	(efgtoa@u+1)^(0+256),w
  5650  020F  0021               	movlb	1	; select bank1
  5651  0210  00CD               	movwf	(___fldiv@b+1)^(0+128)
  5652  0211  0022               	movlb	2	; select bank2
  5653  0212  0855               	movf	efgtoa@u^(0+256),w
  5654  0213  0021               	movlb	1	; select bank1
  5655  0214  00CC               	movwf	___fldiv@b^(0+128)
  5656  0215  3194  244F  3180   	fcall	___fldiv
  5657  0218  084B               	movf	(?___fldiv+3)^(0+128),w
  5658  0219  0022               	movlb	2	; select bank2
  5659  021A  00D8               	movwf	(efgtoa@u+3)^(0+256)
  5660  021B  0021               	movlb	1	; select bank1
  5661  021C  084A               	movf	(?___fldiv+2)^(0+128),w
  5662  021D  0022               	movlb	2	; select bank2
  5663  021E  00D7               	movwf	(efgtoa@u+2)^(0+256)
  5664  021F  0021               	movlb	1	; select bank1
  5665  0220  0849               	movf	(?___fldiv+1)^(0+128),w
  5666  0221  0022               	movlb	2	; select bank2
  5667  0222  00D6               	movwf	(efgtoa@u+1)^(0+256)
  5668  0223  0021               	movlb	1	; select bank1
  5669  0224  0848               	movf	?___fldiv^(0+128),w
  5670  0225  0022               	movlb	2	; select bank2
  5671  0226  00D5               	movwf	efgtoa@u^(0+256)
  5672                           
  5673                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 385:             --e;
  5674  0227  30FF               	movlw	255
  5675  0228  07D1               	addwf	efgtoa@e^(0+256),f
  5676  0229  30FF               	movlw	255
  5677  022A  3DD2               	addwfc	(efgtoa@e+1)^(0+256),f
  5678  022B                     l4590:
  5679                           
  5680                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 383:         while (g < u) {
  5681  022B  0022               	movlb	2	; select bank2
  5682  022C  0850               	movf	(efgtoa@g+3)^(0+256),w
  5683  022D  0020               	movlb	0	; select bank0
  5684  022E  00BD               	movwf	___flge@ff1+3
  5685  022F  0022               	movlb	2	; select bank2
  5686  0230  084F               	movf	(efgtoa@g+2)^(0+256),w
  5687  0231  0020               	movlb	0	; select bank0
  5688  0232  00BC               	movwf	___flge@ff1+2
  5689  0233  0022               	movlb	2	; select bank2
  5690  0234  084E               	movf	(efgtoa@g+1)^(0+256),w
  5691  0235  0020               	movlb	0	; select bank0
  5692  0236  00BB               	movwf	___flge@ff1+1
  5693  0237  0022               	movlb	2	; select bank2
  5694  0238  084D               	movf	efgtoa@g^(0+256),w
  5695  0239  0020               	movlb	0	; select bank0
  5696  023A  00BA               	movwf	___flge@ff1
  5697  023B  0022               	movlb	2	; select bank2
  5698  023C  0858               	movf	(efgtoa@u+3)^(0+256),w
  5699  023D  0020               	movlb	0	; select bank0
  5700  023E  00C1               	movwf	___flge@ff2+3
  5701  023F  0022               	movlb	2	; select bank2
  5702  0240  0857               	movf	(efgtoa@u+2)^(0+256),w
  5703  0241  0020               	movlb	0	; select bank0
  5704  0242  00C0               	movwf	___flge@ff2+2
  5705  0243  0022               	movlb	2	; select bank2
  5706  0244  0856               	movf	(efgtoa@u+1)^(0+256),w
  5707  0245  0020               	movlb	0	; select bank0
  5708  0246  00BF               	movwf	___flge@ff2+1
  5709  0247  0022               	movlb	2	; select bank2
  5710  0248  0855               	movf	efgtoa@u^(0+256),w
  5711  0249  0020               	movlb	0	; select bank0
  5712  024A  00BE               	movwf	___flge@ff2
  5713  024B  3187  276E  3180   	fcall	___flge
  5714  024E  1C03               	btfss	3,0
  5715  024F  29FC               	goto	l4586
  5716  0250                     l4592:
  5717                           
  5718                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 390:     mode = (char)tolower
      +                          ((int)c);
  5719  0250  0021               	movlb	1	; select bank1
  5720  0251  0868               	movf	efgtoa@c^(0+128),w
  5721  0252  00E9               	movwf	??_efgtoa^(0+128)
  5722  0253  01EA               	clrf	(??_efgtoa^(0+128)+1)
  5723  0254  0869               	movf	??_efgtoa^(0+128),w
  5724  0255  00F6               	movwf	tolower@c
  5725  0256  086A               	movf	(??_efgtoa+1)^(0+128),w
  5726  0257  00F7               	movwf	tolower@c+1
  5727  0258  319C  24F8  3180   	fcall	_tolower
  5728  025B  0876               	movf	?_tolower,w
  5729  025C  0021               	movlb	1	; select bank1
  5730  025D  00EB               	movwf	(??_efgtoa+2)^(0+128)
  5731  025E  086B               	movf	(??_efgtoa+2)^(0+128),w
  5732  025F  0022               	movlb	2	; select bank2
  5733  0260  00C2               	movwf	efgtoa@mode^(0+256)
  5734                           
  5735                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 391:     nmode = mode;
  5736  0261  0842               	movf	efgtoa@mode^(0+256),w
  5737  0262  0021               	movlb	1	; select bank1
  5738  0263  00E9               	movwf	??_efgtoa^(0+128)
  5739  0264  0869               	movf	??_efgtoa^(0+128),w
  5740  0265  0022               	movlb	2	; select bank2
  5741  0266  00C1               	movwf	efgtoa@nmode^(0+256)
  5742                           
  5743                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 392:     if (mode == 'g') {
  5744  0267  3067               	movlw	103
  5745  0268  0642               	xorwf	efgtoa@mode^(0+256),w
  5746  0269  1D03               	btfss	3,2
  5747  026A  2A87               	goto	l1653
  5748                           
  5749                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 393:   if (prec == 0) {
  5750  026B  0023               	movlb	3	; select bank3
  5751  026C  082E               	movf	_prec^(0+384),w
  5752  026D  042F               	iorwf	(_prec+1)^(0+384),w
  5753  026E  1D03               	btfss	3,2
  5754  026F  2A74               	goto	l1654
  5755                           
  5756                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 394:    prec = 1;
  5757  0270  3001               	movlw	1
  5758  0271  00AE               	movwf	_prec^(0+384)
  5759  0272  3000               	movlw	0
  5760  0273  00AF               	movwf	(_prec^(0+384)+1)
  5761  0274                     l1654:	
  5762                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 395:   }
  5763                           
  5764                           
  5765                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 396:         p = (0 < prec) ?
      +                           prec : 6;
  5766  0274  082F               	movf	(_prec+1)^(0+384),w
  5767  0275  3A80               	xorlw	128
  5768  0276  0021               	movlb	1	; select bank1
  5769  0277  00E9               	movwf	??_efgtoa^(0+128)
  5770  0278  3080               	movlw	128
  5771  0279  0269               	subwf	??_efgtoa^(0+128),w
  5772  027A  1D03               	skipz
  5773  027B  2A7F               	goto	u5215
  5774  027C  3001               	movlw	1
  5775  027D  0023               	movlb	3	; select bank3
  5776  027E  022E               	subwf	_prec^(0+384),w
  5777  027F                     u5215:
  5778  027F  1803               	skipnc
  5779  0280  2A8A               	goto	l4604
  5780  0281                     l4602:
  5781  0281  3006               	movlw	6
  5782  0282  0022               	movlb	2	; select bank2
  5783  0283  00BD               	movwf	efgtoa@p^(0+256)
  5784  0284  3000               	movlw	0
  5785  0285  00BE               	movwf	(efgtoa@p^(0+256)+1)
  5786  0286  2A92               	goto	l4610
  5787  0287                     l1653:
  5788                           
  5789                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 398:         p = (prec < 0) ?
      +                           6 : prec;
  5790  0287  0023               	movlb	3	; select bank3
  5791  0288  1BAF               	btfsc	(_prec+1)^(0+384),7
  5792  0289  2A81               	goto	l4602
  5793  028A                     l4604:
  5794  028A  0023               	movlb	3	; select bank3
  5795  028B  082F               	movf	(_prec+1)^(0+384),w
  5796  028C  0022               	movlb	2	; select bank2
  5797  028D  00BE               	movwf	(efgtoa@p+1)^(0+256)
  5798  028E  0023               	movlb	3	; select bank3
  5799  028F  082E               	movf	_prec^(0+384),w
  5800  0290  0022               	movlb	2	; select bank2
  5801  0291  00BD               	movwf	efgtoa@p^(0+256)
  5802  0292                     l4610:
  5803                           
  5804                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 402:     if (mode == 'g') {
  5805  0292  3067               	movlw	103
  5806  0293  0642               	xorwf	efgtoa@mode^(0+256),w
  5807  0294  1D03               	btfss	3,2
  5808  0295  2AC5               	goto	l1664
  5809                           
  5810                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 403:         if (!(e < -4) &&
      +                           !((p - 1) < e)) {
  5811  0296  0852               	movf	(efgtoa@e+1)^(0+256),w
  5812  0297  3A80               	xorlw	128
  5813  0298  0021               	movlb	1	; select bank1
  5814  0299  00E9               	movwf	??_efgtoa^(0+128)
  5815  029A  307F               	movlw	127
  5816  029B  0269               	subwf	??_efgtoa^(0+128),w
  5817  029C  1D03               	skipz
  5818  029D  2AA1               	goto	u5245
  5819  029E  30FC               	movlw	252
  5820  029F  0022               	movlb	2	; select bank2
  5821  02A0  0251               	subwf	efgtoa@e^(0+256),w
  5822  02A1                     u5245:
  5823  02A1  1C03               	skipc
  5824  02A2  2ABF               	goto	l4618
  5825  02A3  0022               	movlb	2	; select bank2
  5826  02A4  083D               	movf	efgtoa@p^(0+256),w
  5827  02A5  3EFF               	addlw	255
  5828  02A6  0021               	movlb	1	; select bank1
  5829  02A7  00E9               	movwf	??_efgtoa^(0+128)
  5830  02A8  30FF               	movlw	255
  5831  02A9  0022               	movlb	2	; select bank2
  5832  02AA  3D3E               	addwfc	(efgtoa@p+1)^(0+256),w
  5833  02AB  0021               	movlb	1	; select bank1
  5834  02AC  00EA               	movwf	(??_efgtoa+1)^(0+128)
  5835  02AD  086A               	movf	(??_efgtoa+1)^(0+128),w
  5836  02AE  3A80               	xorlw	128
  5837  02AF  00EB               	movwf	(??_efgtoa+2)^(0+128)
  5838  02B0  0022               	movlb	2	; select bank2
  5839  02B1  0852               	movf	(efgtoa@e+1)^(0+256),w
  5840  02B2  3A80               	xorlw	128
  5841  02B3  0021               	movlb	1	; select bank1
  5842  02B4  026B               	subwf	(??_efgtoa+2)^(0+128),w
  5843  02B5  1D03               	skipz
  5844  02B6  2ABB               	goto	u5255
  5845  02B7  0022               	movlb	2	; select bank2
  5846  02B8  0851               	movf	efgtoa@e^(0+256),w
  5847  02B9  0021               	movlb	1	; select bank1
  5848  02BA  0269               	subwf	??_efgtoa^(0+128),w
  5849  02BB                     u5255:
  5850  02BB  1C03               	skipc
  5851  02BC  2ABF               	goto	l4618
  5852                           
  5853                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 404:             nmode = 'f';
  5854  02BD  3066               	movlw	102
  5855  02BE  2AC0               	goto	L5
  5856  02BF                     l4618:	
  5857                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 405:         } else {
  5858                           
  5859                           
  5860                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 406:             nmode = 'e';
  5861  02BF  3065               	movlw	101
  5862  02C0                     L5:
  5863  02C0  0021               	movlb	1	; select bank1
  5864  02C1  00E9               	movwf	??_efgtoa^(0+128)
  5865  02C2  0869               	movf	??_efgtoa^(0+128),w
  5866  02C3  0022               	movlb	2	; select bank2
  5867  02C4  00C1               	movwf	efgtoa@nmode^(0+256)
  5868  02C5                     l1664:	
  5869                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 408:     }
  5870                           
  5871                           
  5872                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 411:     m = p;
  5873  02C5  083E               	movf	(efgtoa@p+1)^(0+256),w
  5874  02C6  00B3               	movwf	(efgtoa@m+1)^(0+256)
  5875  02C7  083D               	movf	efgtoa@p^(0+256),w
  5876  02C8  00B2               	movwf	efgtoa@m^(0+256)
  5877                           
  5878                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 412:     if (!(mode == 'g') |
      +                          | ((nmode == 'f') && (e < 0))) {
  5879  02C9  3067               	movlw	103
  5880  02CA  0642               	xorwf	efgtoa@mode^(0+256),w
  5881  02CB  1D03               	btfss	3,2
  5882  02CC  2AD2               	goto	l4626
  5883  02CD  3066               	movlw	102
  5884  02CE  0641               	xorwf	efgtoa@nmode^(0+256),w
  5885  02CF  1903               	btfsc	3,2
  5886  02D0  1FD2               	btfss	(efgtoa@e+1)^(0+256),7
  5887  02D1  2AD6               	goto	l4628
  5888  02D2                     l4626:
  5889                           
  5890                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 413:         ++m;
  5891  02D2  3001               	movlw	1
  5892  02D3  07B2               	addwf	efgtoa@m^(0+256),f
  5893  02D4  3000               	movlw	0
  5894  02D5  3DB3               	addwfc	(efgtoa@m+1)^(0+256),f
  5895  02D6                     l4628:
  5896                           
  5897                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 417:     if (nmode == 'f') {
  5898  02D6  3066               	movlw	102
  5899  02D7  0641               	xorwf	efgtoa@nmode^(0+256),w
  5900  02D8  1D03               	btfss	3,2
  5901  02D9  2AEE               	goto	l4640
  5902                           
  5903                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 418:         if (e < 0) {
  5904  02DA  1FD2               	btfss	(efgtoa@e+1)^(0+256),7
  5905  02DB  2AE6               	goto	l4636
  5906                           
  5907                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 419:             u = 1.0;
  5908  02DC  303F               	movlw	63
  5909  02DD  00D8               	movwf	(efgtoa@u+3)^(0+256)
  5910  02DE  3080               	movlw	128
  5911  02DF  00D7               	movwf	(efgtoa@u+2)^(0+256)
  5912  02E0  3000               	movlw	0
  5913  02E1  00D6               	movwf	(efgtoa@u+1)^(0+256)
  5914  02E2  3000               	movlw	0
  5915  02E3  00D5               	movwf	efgtoa@u^(0+256)
  5916                           
  5917                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 420:             e = 0;
  5918  02E4  01D1               	clrf	efgtoa@e^(0+256)
  5919  02E5  01D2               	clrf	(efgtoa@e+1)^(0+256)
  5920  02E6                     l4636:
  5921                           
  5922                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 422:         if (!(mode == 'g
      +                          ')) {
  5923  02E6  3067               	movlw	103
  5924  02E7  0642               	xorwf	efgtoa@mode^(0+256),w
  5925  02E8  1903               	btfsc	3,2
  5926  02E9  2AEE               	goto	l4640
  5927                           
  5928                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 423:             m += e;
  5929  02EA  0851               	movf	efgtoa@e^(0+256),w
  5930  02EB  07B2               	addwf	efgtoa@m^(0+256),f
  5931  02EC  0852               	movf	(efgtoa@e+1)^(0+256),w
  5932  02ED  3DB3               	addwfc	(efgtoa@m+1)^(0+256),f
  5933  02EE                     l4640:
  5934                           
  5935                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 428:     i = 0;
  5936  02EE  01CB               	clrf	efgtoa@i^(0+256)
  5937  02EF  01CC               	clrf	(efgtoa@i+1)^(0+256)
  5938                           
  5939                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 429:     h = g;
  5940  02F0  0850               	movf	(efgtoa@g+3)^(0+256),w
  5941  02F1  00C6               	movwf	(efgtoa@h+3)^(0+256)
  5942  02F2  084F               	movf	(efgtoa@g+2)^(0+256),w
  5943  02F3  00C5               	movwf	(efgtoa@h+2)^(0+256)
  5944  02F4  084E               	movf	(efgtoa@g+1)^(0+256),w
  5945  02F5  00C4               	movwf	(efgtoa@h+1)^(0+256)
  5946  02F6  084D               	movf	efgtoa@g^(0+256),w
  5947  02F7  00C3               	movwf	efgtoa@h^(0+256)
  5948                           
  5949                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 430:     ou = u;
  5950  02F8  0858               	movf	(efgtoa@u+3)^(0+256),w
  5951  02F9  00B7               	movwf	(efgtoa@ou+3)^(0+256)
  5952  02FA  0857               	movf	(efgtoa@u+2)^(0+256),w
  5953  02FB  00B6               	movwf	(efgtoa@ou+2)^(0+256)
  5954  02FC  0856               	movf	(efgtoa@u+1)^(0+256),w
  5955  02FD  00B5               	movwf	(efgtoa@ou+1)^(0+256)
  5956  02FE  0855               	movf	efgtoa@u^(0+256),w
  5957  02FF  00B4               	movwf	efgtoa@ou^(0+256)
  5958  0300                     l4650:	
  5959                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 431:     while (i < m) {
  5960                           
  5961                           
  5962                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 431:     while (i < m) {
  5963  0300  084C               	movf	(efgtoa@i+1)^(0+256),w
  5964  0301  3A80               	xorlw	128
  5965  0302  0021               	movlb	1	; select bank1
  5966  0303  00E9               	movwf	??_efgtoa^(0+128)
  5967  0304  0022               	movlb	2	; select bank2
  5968  0305  0833               	movf	(efgtoa@m+1)^(0+256),w
  5969  0306  3A80               	xorlw	128
  5970  0307  0021               	movlb	1	; select bank1
  5971  0308  0269               	subwf	??_efgtoa^(0+128),w
  5972  0309  1D03               	skipz
  5973  030A  2B0E               	goto	u5325
  5974  030B  0022               	movlb	2	; select bank2
  5975  030C  0832               	movf	efgtoa@m^(0+256),w
  5976  030D  024B               	subwf	efgtoa@i^(0+256),w
  5977  030E                     u5325:
  5978  030E  1803               	btfsc	3,0
  5979  030F  2BE4               	goto	l4652
  5980                           
  5981                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 432:         l = floorf(h/u);
  5982  0310  0022               	movlb	2	; select bank2
  5983  0311  0858               	movf	(efgtoa@u+3)^(0+256),w
  5984  0312  0021               	movlb	1	; select bank1
  5985  0313  00CB               	movwf	(___fldiv@a+3)^(0+128)
  5986  0314  0022               	movlb	2	; select bank2
  5987  0315  0857               	movf	(efgtoa@u+2)^(0+256),w
  5988  0316  0021               	movlb	1	; select bank1
  5989  0317  00CA               	movwf	(___fldiv@a+2)^(0+128)
  5990  0318  0022               	movlb	2	; select bank2
  5991  0319  0856               	movf	(efgtoa@u+1)^(0+256),w
  5992  031A  0021               	movlb	1	; select bank1
  5993  031B  00C9               	movwf	(___fldiv@a+1)^(0+128)
  5994  031C  0022               	movlb	2	; select bank2
  5995  031D  0855               	movf	efgtoa@u^(0+256),w
  5996  031E  0021               	movlb	1	; select bank1
  5997  031F  00C8               	movwf	___fldiv@a^(0+128)
  5998  0320  0022               	movlb	2	; select bank2
  5999  0321  0846               	movf	(efgtoa@h+3)^(0+256),w
  6000  0322  0021               	movlb	1	; select bank1
  6001  0323  00CF               	movwf	(___fldiv@b+3)^(0+128)
  6002  0324  0022               	movlb	2	; select bank2
  6003  0325  0845               	movf	(efgtoa@h+2)^(0+256),w
  6004  0326  0021               	movlb	1	; select bank1
  6005  0327  00CE               	movwf	(___fldiv@b+2)^(0+128)
  6006  0328  0022               	movlb	2	; select bank2
  6007  0329  0844               	movf	(efgtoa@h+1)^(0+256),w
  6008  032A  0021               	movlb	1	; select bank1
  6009  032B  00CD               	movwf	(___fldiv@b+1)^(0+128)
  6010  032C  0022               	movlb	2	; select bank2
  6011  032D  0843               	movf	efgtoa@h^(0+256),w
  6012  032E  0021               	movlb	1	; select bank1
  6013  032F  00CC               	movwf	___fldiv@b^(0+128)
  6014  0330  3194  244F  3180   	fcall	___fldiv
  6015  0333  084B               	movf	(?___fldiv+3)^(0+128),w
  6016  0334  00D3               	movwf	(floorf@x+3)^(0+128)
  6017  0335  084A               	movf	(?___fldiv+2)^(0+128),w
  6018  0336  00D2               	movwf	(floorf@x+2)^(0+128)
  6019  0337  0849               	movf	(?___fldiv+1)^(0+128),w
  6020  0338  00D1               	movwf	(floorf@x+1)^(0+128)
  6021  0339  0848               	movf	?___fldiv^(0+128),w
  6022  033A  00D0               	movwf	floorf@x^(0+128)
  6023  033B  3188  2041  3180   	fcall	_floorf
  6024  033E  0021               	movlb	1	; select bank1
  6025  033F  0853               	movf	(?_floorf+3)^(0+128),w
  6026  0340  0022               	movlb	2	; select bank2
  6027  0341  00CA               	movwf	(efgtoa@l+3)^(0+256)
  6028  0342  0021               	movlb	1	; select bank1
  6029  0343  0852               	movf	(?_floorf+2)^(0+128),w
  6030  0344  0022               	movlb	2	; select bank2
  6031  0345  00C9               	movwf	(efgtoa@l+2)^(0+256)
  6032  0346  0021               	movlb	1	; select bank1
  6033  0347  0851               	movf	(?_floorf+1)^(0+128),w
  6034  0348  0022               	movlb	2	; select bank2
  6035  0349  00C8               	movwf	(efgtoa@l+1)^(0+256)
  6036  034A  0021               	movlb	1	; select bank1
  6037  034B  0850               	movf	?_floorf^(0+128),w
  6038  034C  0022               	movlb	2	; select bank2
  6039  034D  00C7               	movwf	efgtoa@l^(0+256)
  6040                           
  6041                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 433:         d = (int)l;
  6042  034E  084A               	movf	(efgtoa@l+3)^(0+256),w
  6043  034F  0021               	movlb	1	; select bank1
  6044  0350  00D3               	movwf	(___fltol@f1+3)^(0+128)
  6045  0351  0022               	movlb	2	; select bank2
  6046  0352  0849               	movf	(efgtoa@l+2)^(0+256),w
  6047  0353  0021               	movlb	1	; select bank1
  6048  0354  00D2               	movwf	(___fltol@f1+2)^(0+128)
  6049  0355  0022               	movlb	2	; select bank2
  6050  0356  0848               	movf	(efgtoa@l+1)^(0+256),w
  6051  0357  0021               	movlb	1	; select bank1
  6052  0358  00D1               	movwf	(___fltol@f1+1)^(0+128)
  6053  0359  0022               	movlb	2	; select bank2
  6054  035A  0847               	movf	efgtoa@l^(0+256),w
  6055  035B  0021               	movlb	1	; select bank1
  6056  035C  00D0               	movwf	___fltol@f1^(0+128)
  6057  035D  3190  202D  3180   	fcall	___fltol
  6058  0360  0021               	movlb	1	; select bank1
  6059  0361  0851               	movf	(?___fltol+1)^(0+128),w
  6060  0362  0022               	movlb	2	; select bank2
  6061  0363  00B9               	movwf	(efgtoa@d+1)^(0+256)
  6062  0364  0021               	movlb	1	; select bank1
  6063  0365  0850               	movf	?___fltol^(0+128),w
  6064  0366  0022               	movlb	2	; select bank2
  6065  0367  00B8               	movwf	efgtoa@d^(0+256)
  6066                           
  6067                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 434:         h -= l*u;
  6068  0368  084A               	movf	(efgtoa@l+3)^(0+256),w
  6069  0369  0020               	movlb	0	; select bank0
  6070  036A  00A7               	movwf	___flmul@a+3
  6071  036B  0022               	movlb	2	; select bank2
  6072  036C  0849               	movf	(efgtoa@l+2)^(0+256),w
  6073  036D  0020               	movlb	0	; select bank0
  6074  036E  00A6               	movwf	___flmul@a+2
  6075  036F  0022               	movlb	2	; select bank2
  6076  0370  0848               	movf	(efgtoa@l+1)^(0+256),w
  6077  0371  0020               	movlb	0	; select bank0
  6078  0372  00A5               	movwf	___flmul@a+1
  6079  0373  0022               	movlb	2	; select bank2
  6080  0374  0847               	movf	efgtoa@l^(0+256),w
  6081  0375  0020               	movlb	0	; select bank0
  6082  0376  00A4               	movwf	___flmul@a
  6083  0377  0022               	movlb	2	; select bank2
  6084  0378  0858               	movf	(efgtoa@u+3)^(0+256),w
  6085  0379  0020               	movlb	0	; select bank0
  6086  037A  00A3               	movwf	___flmul@b+3
  6087  037B  0022               	movlb	2	; select bank2
  6088  037C  0857               	movf	(efgtoa@u+2)^(0+256),w
  6089  037D  0020               	movlb	0	; select bank0
  6090  037E  00A2               	movwf	___flmul@b+2
  6091  037F  0022               	movlb	2	; select bank2
  6092  0380  0856               	movf	(efgtoa@u+1)^(0+256),w
  6093  0381  0020               	movlb	0	; select bank0
  6094  0382  00A1               	movwf	___flmul@b+1
  6095  0383  0022               	movlb	2	; select bank2
  6096  0384  0855               	movf	efgtoa@u^(0+256),w
  6097  0385  0020               	movlb	0	; select bank0
  6098  0386  00A0               	movwf	___flmul@b
  6099  0387  318A  22F4  3180   	fcall	___flmul
  6100  038A  0823               	movf	?___flmul+3,w
  6101  038B  00D1               	movwf	___flsub@a+3
  6102  038C  0822               	movf	?___flmul+2,w
  6103  038D  00D0               	movwf	___flsub@a+2
  6104  038E  0821               	movf	?___flmul+1,w
  6105  038F  00CF               	movwf	___flsub@a+1
  6106  0390  0820               	movf	?___flmul,w
  6107  0391  00CE               	movwf	___flsub@a
  6108  0392  0022               	movlb	2	; select bank2
  6109  0393  0846               	movf	(efgtoa@h+3)^(0+256),w
  6110  0394  0020               	movlb	0	; select bank0
  6111  0395  00D5               	movwf	___flsub@b+3
  6112  0396  0022               	movlb	2	; select bank2
  6113  0397  0845               	movf	(efgtoa@h+2)^(0+256),w
  6114  0398  0020               	movlb	0	; select bank0
  6115  0399  00D4               	movwf	___flsub@b+2
  6116  039A  0022               	movlb	2	; select bank2
  6117  039B  0844               	movf	(efgtoa@h+1)^(0+256),w
  6118  039C  0020               	movlb	0	; select bank0
  6119  039D  00D3               	movwf	___flsub@b+1
  6120  039E  0022               	movlb	2	; select bank2
  6121  039F  0843               	movf	efgtoa@h^(0+256),w
  6122  03A0  0020               	movlb	0	; select bank0
  6123  03A1  00D2               	movwf	___flsub@b
  6124  03A2  319C  247C  3180   	fcall	___flsub
  6125  03A5  0851               	movf	?___flsub+3,w
  6126  03A6  0022               	movlb	2	; select bank2
  6127  03A7  00C6               	movwf	(efgtoa@h+3)^(0+256)
  6128  03A8  0020               	movlb	0	; select bank0
  6129  03A9  0850               	movf	?___flsub+2,w
  6130  03AA  0022               	movlb	2	; select bank2
  6131  03AB  00C5               	movwf	(efgtoa@h+2)^(0+256)
  6132  03AC  0020               	movlb	0	; select bank0
  6133  03AD  084F               	movf	?___flsub+1,w
  6134  03AE  0022               	movlb	2	; select bank2
  6135  03AF  00C4               	movwf	(efgtoa@h+1)^(0+256)
  6136  03B0  0020               	movlb	0	; select bank0
  6137  03B1  084E               	movf	?___flsub,w
  6138  03B2  0022               	movlb	2	; select bank2
  6139  03B3  00C3               	movwf	efgtoa@h^(0+256)
  6140                           
  6141                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 435:         u = u/10.0;
  6142  03B4  3041               	movlw	65
  6143  03B5  0021               	movlb	1	; select bank1
  6144  03B6  00CB               	movwf	(___fldiv@a+3)^(0+128)
  6145  03B7  3020               	movlw	32
  6146  03B8  00CA               	movwf	(___fldiv@a+2)^(0+128)
  6147  03B9  3000               	movlw	0
  6148  03BA  00C9               	movwf	(___fldiv@a+1)^(0+128)
  6149  03BB  3000               	movlw	0
  6150  03BC  00C8               	movwf	___fldiv@a^(0+128)
  6151  03BD  0022               	movlb	2	; select bank2
  6152  03BE  0858               	movf	(efgtoa@u+3)^(0+256),w
  6153  03BF  0021               	movlb	1	; select bank1
  6154  03C0  00CF               	movwf	(___fldiv@b+3)^(0+128)
  6155  03C1  0022               	movlb	2	; select bank2
  6156  03C2  0857               	movf	(efgtoa@u+2)^(0+256),w
  6157  03C3  0021               	movlb	1	; select bank1
  6158  03C4  00CE               	movwf	(___fldiv@b+2)^(0+128)
  6159  03C5  0022               	movlb	2	; select bank2
  6160  03C6  0856               	movf	(efgtoa@u+1)^(0+256),w
  6161  03C7  0021               	movlb	1	; select bank1
  6162  03C8  00CD               	movwf	(___fldiv@b+1)^(0+128)
  6163  03C9  0022               	movlb	2	; select bank2
  6164  03CA  0855               	movf	efgtoa@u^(0+256),w
  6165  03CB  0021               	movlb	1	; select bank1
  6166  03CC  00CC               	movwf	___fldiv@b^(0+128)
  6167  03CD  3194  244F  3180   	fcall	___fldiv
  6168  03D0  084B               	movf	(?___fldiv+3)^(0+128),w
  6169  03D1  0022               	movlb	2	; select bank2
  6170  03D2  00D8               	movwf	(efgtoa@u+3)^(0+256)
  6171  03D3  0021               	movlb	1	; select bank1
  6172  03D4  084A               	movf	(?___fldiv+2)^(0+128),w
  6173  03D5  0022               	movlb	2	; select bank2
  6174  03D6  00D7               	movwf	(efgtoa@u+2)^(0+256)
  6175  03D7  0021               	movlb	1	; select bank1
  6176  03D8  0849               	movf	(?___fldiv+1)^(0+128),w
  6177  03D9  0022               	movlb	2	; select bank2
  6178  03DA  00D6               	movwf	(efgtoa@u+1)^(0+256)
  6179  03DB  0021               	movlb	1	; select bank1
  6180  03DC  0848               	movf	?___fldiv^(0+128),w
  6181  03DD  0022               	movlb	2	; select bank2
  6182  03DE  00D5               	movwf	efgtoa@u^(0+256)
  6183                           
  6184                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 436:         ++i;
  6185  03DF  3001               	movlw	1
  6186  03E0  07CB               	addwf	efgtoa@i^(0+256),f
  6187  03E1  3000               	movlw	0
  6188  03E2  3DCC               	addwfc	(efgtoa@i+1)^(0+256),f
  6189  03E3  2B00               	goto	l4650
  6190  03E4                     l4652:
  6191                           
  6192                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 440:     l = u*5.0;
  6193  03E4  3040               	movlw	64
  6194  03E5  0020               	movlb	0	; select bank0
  6195  03E6  00A3               	movwf	___flmul@b+3
  6196  03E7  30A0               	movlw	160
  6197  03E8  00A2               	movwf	___flmul@b+2
  6198  03E9  3000               	movlw	0
  6199  03EA  00A1               	movwf	___flmul@b+1
  6200  03EB  3000               	movlw	0
  6201  03EC  00A0               	movwf	___flmul@b
  6202  03ED  0022               	movlb	2	; select bank2
  6203  03EE  0858               	movf	(efgtoa@u+3)^(0+256),w
  6204  03EF  0020               	movlb	0	; select bank0
  6205  03F0  00A7               	movwf	___flmul@a+3
  6206  03F1  0022               	movlb	2	; select bank2
  6207  03F2  0857               	movf	(efgtoa@u+2)^(0+256),w
  6208  03F3  0020               	movlb	0	; select bank0
  6209  03F4  00A6               	movwf	___flmul@a+2
  6210  03F5  0022               	movlb	2	; select bank2
  6211  03F6  0856               	movf	(efgtoa@u+1)^(0+256),w
  6212  03F7  0020               	movlb	0	; select bank0
  6213  03F8  00A5               	movwf	___flmul@a+1
  6214  03F9  0022               	movlb	2	; select bank2
  6215  03FA  0855               	movf	efgtoa@u^(0+256),w
  6216  03FB  0020               	movlb	0	; select bank0
  6217  03FC  00A4               	movwf	___flmul@a
  6218  03FD  318A  22F4  3180   	fcall	___flmul
  6219  0400  0823               	movf	?___flmul+3,w
  6220  0401  0022               	movlb	2	; select bank2
  6221  0402  00CA               	movwf	(efgtoa@l+3)^(0+256)
  6222  0403  0020               	movlb	0	; select bank0
  6223  0404  0822               	movf	?___flmul+2,w
  6224  0405  0022               	movlb	2	; select bank2
  6225  0406  00C9               	movwf	(efgtoa@l+2)^(0+256)
  6226  0407  0020               	movlb	0	; select bank0
  6227  0408  0821               	movf	?___flmul+1,w
  6228  0409  0022               	movlb	2	; select bank2
  6229  040A  00C8               	movwf	(efgtoa@l+1)^(0+256)
  6230  040B  0020               	movlb	0	; select bank0
  6231  040C  0820               	movf	?___flmul,w
  6232  040D  0022               	movlb	2	; select bank2
  6233  040E  00C7               	movwf	efgtoa@l^(0+256)
  6234                           
  6235                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 441:     if (h < l) {
  6236  040F  0846               	movf	(efgtoa@h+3)^(0+256),w
  6237  0410  0020               	movlb	0	; select bank0
  6238  0411  00BD               	movwf	___flge@ff1+3
  6239  0412  0022               	movlb	2	; select bank2
  6240  0413  0845               	movf	(efgtoa@h+2)^(0+256),w
  6241  0414  0020               	movlb	0	; select bank0
  6242  0415  00BC               	movwf	___flge@ff1+2
  6243  0416  0022               	movlb	2	; select bank2
  6244  0417  0844               	movf	(efgtoa@h+1)^(0+256),w
  6245  0418  0020               	movlb	0	; select bank0
  6246  0419  00BB               	movwf	___flge@ff1+1
  6247  041A  0022               	movlb	2	; select bank2
  6248  041B  0843               	movf	efgtoa@h^(0+256),w
  6249  041C  0020               	movlb	0	; select bank0
  6250  041D  00BA               	movwf	___flge@ff1
  6251  041E  0022               	movlb	2	; select bank2
  6252  041F  084A               	movf	(efgtoa@l+3)^(0+256),w
  6253  0420  0020               	movlb	0	; select bank0
  6254  0421  00C1               	movwf	___flge@ff2+3
  6255  0422  0022               	movlb	2	; select bank2
  6256  0423  0849               	movf	(efgtoa@l+2)^(0+256),w
  6257  0424  0020               	movlb	0	; select bank0
  6258  0425  00C0               	movwf	___flge@ff2+2
  6259  0426  0022               	movlb	2	; select bank2
  6260  0427  0848               	movf	(efgtoa@l+1)^(0+256),w
  6261  0428  0020               	movlb	0	; select bank0
  6262  0429  00BF               	movwf	___flge@ff2+1
  6263  042A  0022               	movlb	2	; select bank2
  6264  042B  0847               	movf	efgtoa@l^(0+256),w
  6265  042C  0020               	movlb	0	; select bank0
  6266  042D  00BE               	movwf	___flge@ff2
  6267  042E  3187  276E  3180   	fcall	___flge
  6268  0431  1803               	btfsc	3,0
  6269  0432  2C36               	goto	l4656
  6270                           
  6271                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 442:         l = 0.0;
  6272  0433  3000               	movlw	0
  6273  0434  0022               	movlb	2	; select bank2
  6274  0435  2C4E               	goto	L6
  6275  0436                     l4656:	
  6276                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 443:     } else {
  6277                           
  6278                           
  6279                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 445:         if ((h == l) && 
      +                          !(d % 2)) {
  6280  0436  0022               	movlb	2	; select bank2
  6281  0437  0846               	movf	(efgtoa@h+3)^(0+256),w
  6282  0438  00F3               	movwf	___fleq@ff1+3
  6283  0439  0845               	movf	(efgtoa@h+2)^(0+256),w
  6284  043A  00F2               	movwf	___fleq@ff1+2
  6285  043B  0844               	movf	(efgtoa@h+1)^(0+256),w
  6286  043C  00F1               	movwf	___fleq@ff1+1
  6287  043D  0843               	movf	efgtoa@h^(0+256),w
  6288  043E  00F0               	movwf	___fleq@ff1
  6289  043F  084A               	movf	(efgtoa@l+3)^(0+256),w
  6290  0440  00F7               	movwf	___fleq@ff2+3
  6291  0441  0849               	movf	(efgtoa@l+2)^(0+256),w
  6292  0442  00F6               	movwf	___fleq@ff2+2
  6293  0443  0848               	movf	(efgtoa@l+1)^(0+256),w
  6294  0444  00F5               	movwf	___fleq@ff2+1
  6295  0445  0847               	movf	efgtoa@l^(0+256),w
  6296  0446  00F4               	movwf	___fleq@ff2
  6297  0447  319E  267A  3180   	fcall	___fleq
  6298  044A  1803               	btfsc	3,0
  6299  044B  1838               	btfsc	efgtoa@d^(0+256),0
  6300  044C  2C55               	goto	l4662
  6301                           
  6302                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 446:             l = 0.0;
  6303  044D  3000               	movlw	0
  6304  044E                     L6:
  6305  044E  00CA               	movwf	(efgtoa@l+3)^(0+256)
  6306  044F  3000               	movlw	0
  6307  0450  00C9               	movwf	(efgtoa@l+2)^(0+256)
  6308  0451  3000               	movlw	0
  6309  0452  00C8               	movwf	(efgtoa@l+1)^(0+256)
  6310  0453  3000               	movlw	0
  6311  0454  00C7               	movwf	efgtoa@l^(0+256)
  6312  0455                     l4662:
  6313                           
  6314                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 451:     h = g + l;
  6315  0455  084A               	movf	(efgtoa@l+3)^(0+256),w
  6316  0456  0020               	movlb	0	; select bank0
  6317  0457  00BD               	movwf	___fladd@b+3
  6318  0458  0022               	movlb	2	; select bank2
  6319  0459  0849               	movf	(efgtoa@l+2)^(0+256),w
  6320  045A  0020               	movlb	0	; select bank0
  6321  045B  00BC               	movwf	___fladd@b+2
  6322  045C  0022               	movlb	2	; select bank2
  6323  045D  0848               	movf	(efgtoa@l+1)^(0+256),w
  6324  045E  0020               	movlb	0	; select bank0
  6325  045F  00BB               	movwf	___fladd@b+1
  6326  0460  0022               	movlb	2	; select bank2
  6327  0461  0847               	movf	efgtoa@l^(0+256),w
  6328  0462  0020               	movlb	0	; select bank0
  6329  0463  00BA               	movwf	___fladd@b
  6330  0464  0022               	movlb	2	; select bank2
  6331  0465  0850               	movf	(efgtoa@g+3)^(0+256),w
  6332  0466  0020               	movlb	0	; select bank0
  6333  0467  00C1               	movwf	___fladd@a+3
  6334  0468  0022               	movlb	2	; select bank2
  6335  0469  084F               	movf	(efgtoa@g+2)^(0+256),w
  6336  046A  0020               	movlb	0	; select bank0
  6337  046B  00C0               	movwf	___fladd@a+2
  6338  046C  0022               	movlb	2	; select bank2
  6339  046D  084E               	movf	(efgtoa@g+1)^(0+256),w
  6340  046E  0020               	movlb	0	; select bank0
  6341  046F  00BF               	movwf	___fladd@a+1
  6342  0470  0022               	movlb	2	; select bank2
  6343  0471  084D               	movf	efgtoa@g^(0+256),w
  6344  0472  0020               	movlb	0	; select bank0
  6345  0473  00BE               	movwf	___fladd@a
  6346  0474  3189  2113  3180   	fcall	___fladd
  6347  0477  083D               	movf	?___fladd+3,w
  6348  0478  0022               	movlb	2	; select bank2
  6349  0479  00C6               	movwf	(efgtoa@h+3)^(0+256)
  6350  047A  0020               	movlb	0	; select bank0
  6351  047B  083C               	movf	?___fladd+2,w
  6352  047C  0022               	movlb	2	; select bank2
  6353  047D  00C5               	movwf	(efgtoa@h+2)^(0+256)
  6354  047E  0020               	movlb	0	; select bank0
  6355  047F  083B               	movf	?___fladd+1,w
  6356  0480  0022               	movlb	2	; select bank2
  6357  0481  00C4               	movwf	(efgtoa@h+1)^(0+256)
  6358  0482  0020               	movlb	0	; select bank0
  6359  0483  083A               	movf	?___fladd,w
  6360  0484  0022               	movlb	2	; select bank2
  6361  0485  00C3               	movwf	efgtoa@h^(0+256)
  6362                           
  6363                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 453:  if (h >= (ou*10.0)) {
  6364  0486  0846               	movf	(efgtoa@h+3)^(0+256),w
  6365  0487  0020               	movlb	0	; select bank0
  6366  0488  00BD               	movwf	___flge@ff1+3
  6367  0489  0022               	movlb	2	; select bank2
  6368  048A  0845               	movf	(efgtoa@h+2)^(0+256),w
  6369  048B  0020               	movlb	0	; select bank0
  6370  048C  00BC               	movwf	___flge@ff1+2
  6371  048D  0022               	movlb	2	; select bank2
  6372  048E  0844               	movf	(efgtoa@h+1)^(0+256),w
  6373  048F  0020               	movlb	0	; select bank0
  6374  0490  00BB               	movwf	___flge@ff1+1
  6375  0491  0022               	movlb	2	; select bank2
  6376  0492  0843               	movf	efgtoa@h^(0+256),w
  6377  0493  0020               	movlb	0	; select bank0
  6378  0494  00BA               	movwf	___flge@ff1
  6379  0495  3041               	movlw	65
  6380  0496  00A3               	movwf	___flmul@b+3
  6381  0497  3020               	movlw	32
  6382  0498  00A2               	movwf	___flmul@b+2
  6383  0499  3000               	movlw	0
  6384  049A  00A1               	movwf	___flmul@b+1
  6385  049B  3000               	movlw	0
  6386  049C  00A0               	movwf	___flmul@b
  6387  049D  0022               	movlb	2	; select bank2
  6388  049E  0837               	movf	(efgtoa@ou+3)^(0+256),w
  6389  049F  0020               	movlb	0	; select bank0
  6390  04A0  00A7               	movwf	___flmul@a+3
  6391  04A1  0022               	movlb	2	; select bank2
  6392  04A2  0836               	movf	(efgtoa@ou+2)^(0+256),w
  6393  04A3  0020               	movlb	0	; select bank0
  6394  04A4  00A6               	movwf	___flmul@a+2
  6395  04A5  0022               	movlb	2	; select bank2
  6396  04A6  0835               	movf	(efgtoa@ou+1)^(0+256),w
  6397  04A7  0020               	movlb	0	; select bank0
  6398  04A8  00A5               	movwf	___flmul@a+1
  6399  04A9  0022               	movlb	2	; select bank2
  6400  04AA  0834               	movf	efgtoa@ou^(0+256),w
  6401  04AB  0020               	movlb	0	; select bank0
  6402  04AC  00A4               	movwf	___flmul@a
  6403  04AD  318A  22F4  3180   	fcall	___flmul
  6404  04B0  0823               	movf	?___flmul+3,w
  6405  04B1  00C1               	movwf	___flge@ff2+3
  6406  04B2  0822               	movf	?___flmul+2,w
  6407  04B3  00C0               	movwf	___flge@ff2+2
  6408  04B4  0821               	movf	?___flmul+1,w
  6409  04B5  00BF               	movwf	___flge@ff2+1
  6410  04B6  0820               	movf	?___flmul,w
  6411  04B7  00BE               	movwf	___flge@ff2
  6412  04B8  3187  276E  3180   	fcall	___flge
  6413  04BB  1C03               	btfss	3,0
  6414  04BC  2CF5               	goto	l1679
  6415                           
  6416                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 454:   e++;
  6417  04BD  3001               	movlw	1
  6418  04BE  0022               	movlb	2	; select bank2
  6419  04BF  07D1               	addwf	efgtoa@e^(0+256),f
  6420  04C0  3000               	movlw	0
  6421  04C1  3DD2               	addwfc	(efgtoa@e+1)^(0+256),f
  6422                           
  6423                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 455:   ou *= 10.0;
  6424  04C2  3041               	movlw	65
  6425  04C3  0020               	movlb	0	; select bank0
  6426  04C4  00A3               	movwf	___flmul@b+3
  6427  04C5  3020               	movlw	32
  6428  04C6  00A2               	movwf	___flmul@b+2
  6429  04C7  3000               	movlw	0
  6430  04C8  00A1               	movwf	___flmul@b+1
  6431  04C9  3000               	movlw	0
  6432  04CA  00A0               	movwf	___flmul@b
  6433  04CB  0022               	movlb	2	; select bank2
  6434  04CC  0837               	movf	(efgtoa@ou+3)^(0+256),w
  6435  04CD  0020               	movlb	0	; select bank0
  6436  04CE  00A7               	movwf	___flmul@a+3
  6437  04CF  0022               	movlb	2	; select bank2
  6438  04D0  0836               	movf	(efgtoa@ou+2)^(0+256),w
  6439  04D1  0020               	movlb	0	; select bank0
  6440  04D2  00A6               	movwf	___flmul@a+2
  6441  04D3  0022               	movlb	2	; select bank2
  6442  04D4  0835               	movf	(efgtoa@ou+1)^(0+256),w
  6443  04D5  0020               	movlb	0	; select bank0
  6444  04D6  00A5               	movwf	___flmul@a+1
  6445  04D7  0022               	movlb	2	; select bank2
  6446  04D8  0834               	movf	efgtoa@ou^(0+256),w
  6447  04D9  0020               	movlb	0	; select bank0
  6448  04DA  00A4               	movwf	___flmul@a
  6449  04DB  318A  22F4  3180   	fcall	___flmul
  6450  04DE  0823               	movf	?___flmul+3,w
  6451  04DF  0022               	movlb	2	; select bank2
  6452  04E0  00B7               	movwf	(efgtoa@ou+3)^(0+256)
  6453  04E1  0020               	movlb	0	; select bank0
  6454  04E2  0822               	movf	?___flmul+2,w
  6455  04E3  0022               	movlb	2	; select bank2
  6456  04E4  00B6               	movwf	(efgtoa@ou+2)^(0+256)
  6457  04E5  0020               	movlb	0	; select bank0
  6458  04E6  0821               	movf	?___flmul+1,w
  6459  04E7  0022               	movlb	2	; select bank2
  6460  04E8  00B5               	movwf	(efgtoa@ou+1)^(0+256)
  6461  04E9  0020               	movlb	0	; select bank0
  6462  04EA  0820               	movf	?___flmul,w
  6463  04EB  0022               	movlb	2	; select bank2
  6464  04EC  00B4               	movwf	efgtoa@ou^(0+256)
  6465                           
  6466                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 456:   if (nmode == 'f') {
  6467  04ED  3066               	movlw	102
  6468  04EE  0641               	xorwf	efgtoa@nmode^(0+256),w
  6469  04EF  1D03               	btfss	3,2
  6470  04F0  2CF5               	goto	l1679
  6471                           
  6472                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 458:    m++;
  6473  04F1  3001               	movlw	1
  6474  04F2  07B2               	addwf	efgtoa@m^(0+256),f
  6475  04F3  3000               	movlw	0
  6476  04F4  3DB3               	addwfc	(efgtoa@m+1)^(0+256),f
  6477  04F5                     l1679:	
  6478                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 460:  }
  6479                           
  6480                           
  6481                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 463:     u = ou;
  6482  04F5  0022               	movlb	2	; select bank2
  6483  04F6  0837               	movf	(efgtoa@ou+3)^(0+256),w
  6484  04F7  00D8               	movwf	(efgtoa@u+3)^(0+256)
  6485  04F8  0836               	movf	(efgtoa@ou+2)^(0+256),w
  6486  04F9  00D7               	movwf	(efgtoa@u+2)^(0+256)
  6487  04FA  0835               	movf	(efgtoa@ou+1)^(0+256),w
  6488  04FB  00D6               	movwf	(efgtoa@u+1)^(0+256)
  6489  04FC  0834               	movf	efgtoa@ou^(0+256),w
  6490  04FD  00D5               	movwf	efgtoa@u^(0+256)
  6491                           
  6492                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 464:     ne = (nmode == 'e') 
      +                          ? 0 : e;
  6493  04FE  3065               	movlw	101
  6494  04FF  0641               	xorwf	efgtoa@nmode^(0+256),w
  6495  0500  1903               	btfsc	3,2
  6496  0501  2D07               	goto	l4678
  6497  0502  0852               	movf	(efgtoa@e+1)^(0+256),w
  6498  0503  00B1               	movwf	(efgtoa@ne+1)^(0+256)
  6499  0504  0851               	movf	efgtoa@e^(0+256),w
  6500  0505  00B0               	movwf	efgtoa@ne^(0+256)
  6501  0506  2D09               	goto	l1684
  6502  0507                     l4678:
  6503  0507  01B0               	clrf	efgtoa@ne^(0+256)
  6504  0508  01B1               	clrf	(efgtoa@ne+1)^(0+256)
  6505  0509                     l1684:
  6506                           
  6507                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 465:     pp = 0;
  6508  0509  01AE               	clrf	efgtoa@pp^(0+256)
  6509  050A  01AF               	clrf	(efgtoa@pp+1)^(0+256)
  6510                           
  6511                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 466:     t = 0;
  6512  050B  01AC               	clrf	efgtoa@t^(0+256)
  6513  050C  01AD               	clrf	(efgtoa@t+1)^(0+256)
  6514                           
  6515                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 467:     i = 0;
  6516  050D  01CB               	clrf	efgtoa@i^(0+256)
  6517  050E  01CC               	clrf	(efgtoa@i+1)^(0+256)
  6518                           
  6519                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 468:     while ((i < m) && (n
      +                           < (80 - 5))) {
  6520  050F  2E4C               	goto	l4728
  6521  0510                     l4680:
  6522                           
  6523                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 469:         l = floorf(h/u);
  6524  0510  0022               	movlb	2	; select bank2
  6525  0511  0858               	movf	(efgtoa@u+3)^(0+256),w
  6526  0512  0021               	movlb	1	; select bank1
  6527  0513  00CB               	movwf	(___fldiv@a+3)^(0+128)
  6528  0514  0022               	movlb	2	; select bank2
  6529  0515  0857               	movf	(efgtoa@u+2)^(0+256),w
  6530  0516  0021               	movlb	1	; select bank1
  6531  0517  00CA               	movwf	(___fldiv@a+2)^(0+128)
  6532  0518  0022               	movlb	2	; select bank2
  6533  0519  0856               	movf	(efgtoa@u+1)^(0+256),w
  6534  051A  0021               	movlb	1	; select bank1
  6535  051B  00C9               	movwf	(___fldiv@a+1)^(0+128)
  6536  051C  0022               	movlb	2	; select bank2
  6537  051D  0855               	movf	efgtoa@u^(0+256),w
  6538  051E  0021               	movlb	1	; select bank1
  6539  051F  00C8               	movwf	___fldiv@a^(0+128)
  6540  0520  0022               	movlb	2	; select bank2
  6541  0521  0846               	movf	(efgtoa@h+3)^(0+256),w
  6542  0522  0021               	movlb	1	; select bank1
  6543  0523  00CF               	movwf	(___fldiv@b+3)^(0+128)
  6544  0524  0022               	movlb	2	; select bank2
  6545  0525  0845               	movf	(efgtoa@h+2)^(0+256),w
  6546  0526  0021               	movlb	1	; select bank1
  6547  0527  00CE               	movwf	(___fldiv@b+2)^(0+128)
  6548  0528  0022               	movlb	2	; select bank2
  6549  0529  0844               	movf	(efgtoa@h+1)^(0+256),w
  6550  052A  0021               	movlb	1	; select bank1
  6551  052B  00CD               	movwf	(___fldiv@b+1)^(0+128)
  6552  052C  0022               	movlb	2	; select bank2
  6553  052D  0843               	movf	efgtoa@h^(0+256),w
  6554  052E  0021               	movlb	1	; select bank1
  6555  052F  00CC               	movwf	___fldiv@b^(0+128)
  6556  0530  3194  244F  3180   	fcall	___fldiv
  6557  0533  084B               	movf	(?___fldiv+3)^(0+128),w
  6558  0534  00D3               	movwf	(floorf@x+3)^(0+128)
  6559  0535  084A               	movf	(?___fldiv+2)^(0+128),w
  6560  0536  00D2               	movwf	(floorf@x+2)^(0+128)
  6561  0537  0849               	movf	(?___fldiv+1)^(0+128),w
  6562  0538  00D1               	movwf	(floorf@x+1)^(0+128)
  6563  0539  0848               	movf	?___fldiv^(0+128),w
  6564  053A  00D0               	movwf	floorf@x^(0+128)
  6565  053B  3188  2041  3180   	fcall	_floorf
  6566  053E  0021               	movlb	1	; select bank1
  6567  053F  0853               	movf	(?_floorf+3)^(0+128),w
  6568  0540  0022               	movlb	2	; select bank2
  6569  0541  00CA               	movwf	(efgtoa@l+3)^(0+256)
  6570  0542  0021               	movlb	1	; select bank1
  6571  0543  0852               	movf	(?_floorf+2)^(0+128),w
  6572  0544  0022               	movlb	2	; select bank2
  6573  0545  00C9               	movwf	(efgtoa@l+2)^(0+256)
  6574  0546  0021               	movlb	1	; select bank1
  6575  0547  0851               	movf	(?_floorf+1)^(0+128),w
  6576  0548  0022               	movlb	2	; select bank2
  6577  0549  00C8               	movwf	(efgtoa@l+1)^(0+256)
  6578  054A  0021               	movlb	1	; select bank1
  6579  054B  0850               	movf	?_floorf^(0+128),w
  6580  054C  0022               	movlb	2	; select bank2
  6581  054D  00C7               	movwf	efgtoa@l^(0+256)
  6582                           
  6583                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 470:         d = (int)l;
  6584  054E  084A               	movf	(efgtoa@l+3)^(0+256),w
  6585  054F  0021               	movlb	1	; select bank1
  6586  0550  00D3               	movwf	(___fltol@f1+3)^(0+128)
  6587  0551  0022               	movlb	2	; select bank2
  6588  0552  0849               	movf	(efgtoa@l+2)^(0+256),w
  6589  0553  0021               	movlb	1	; select bank1
  6590  0554  00D2               	movwf	(___fltol@f1+2)^(0+128)
  6591  0555  0022               	movlb	2	; select bank2
  6592  0556  0848               	movf	(efgtoa@l+1)^(0+256),w
  6593  0557  0021               	movlb	1	; select bank1
  6594  0558  00D1               	movwf	(___fltol@f1+1)^(0+128)
  6595  0559  0022               	movlb	2	; select bank2
  6596  055A  0847               	movf	efgtoa@l^(0+256),w
  6597  055B  0021               	movlb	1	; select bank1
  6598  055C  00D0               	movwf	___fltol@f1^(0+128)
  6599  055D  3190  202D  3180   	fcall	___fltol
  6600  0560  0021               	movlb	1	; select bank1
  6601  0561  0851               	movf	(?___fltol+1)^(0+128),w
  6602  0562  0022               	movlb	2	; select bank2
  6603  0563  00B9               	movwf	(efgtoa@d+1)^(0+256)
  6604  0564  0021               	movlb	1	; select bank1
  6605  0565  0850               	movf	?___fltol^(0+128),w
  6606  0566  0022               	movlb	2	; select bank2
  6607  0567  00B8               	movwf	efgtoa@d^(0+256)
  6608                           
  6609                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 471:         if (!(flags & (1
      +                           << 4)) && !d && (mode == 'g') && (ne < 0)) {
  6610  0568  0023               	movlb	3	; select bank3
  6611  0569  1A30               	btfsc	_flags^(0+384),4
  6612  056A  2D7A               	goto	l4692
  6613  056B  0022               	movlb	2	; select bank2
  6614  056C  0838               	movf	efgtoa@d^(0+256),w
  6615  056D  0439               	iorwf	(efgtoa@d+1)^(0+256),w
  6616  056E  1D03               	btfss	3,2
  6617  056F  2D7A               	goto	l4692
  6618  0570  3067               	movlw	103
  6619  0571  0642               	xorwf	efgtoa@mode^(0+256),w
  6620  0572  1903               	btfsc	3,2
  6621  0573  1FB1               	btfss	(efgtoa@ne+1)^(0+256),7
  6622  0574  2D7A               	goto	l4692
  6623                           
  6624                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 472:             ++t;
  6625  0575  3001               	movlw	1
  6626  0576  07AC               	addwf	efgtoa@t^(0+256),f
  6627  0577  3000               	movlw	0
  6628  0578  3DAD               	addwfc	(efgtoa@t+1)^(0+256),f
  6629                           
  6630                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 473:         } else {
  6631  0579  2DCD               	goto	l4720
  6632  057A                     l4692:
  6633                           
  6634                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 474:             if (!pp && (
      +                          ne < 0)) {
  6635  057A  0022               	movlb	2	; select bank2
  6636  057B  082E               	movf	efgtoa@pp^(0+256),w
  6637  057C  042F               	iorwf	(efgtoa@pp+1)^(0+256),w
  6638  057D  1903               	btfsc	3,2
  6639  057E  1FB1               	btfss	(efgtoa@ne+1)^(0+256),7
  6640  057F  2D99               	goto	l4712
  6641                           
  6642                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 475:                 dbuf[n++
      +                          ] = '.';
  6643  0580  302E               	movlw	46
  6644  0581  0021               	movlb	1	; select bank1
  6645  0582  00E9               	movwf	??_efgtoa^(0+128)
  6646  0583  0022               	movlb	2	; select bank2
  6647  0584  0853               	movf	efgtoa@n^(0+256),w
  6648  0585  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
  6649  0586  0086               	movwf	6
  6650  0587  3002               	movlw	2	; select bank5/6
  6651  0588  0087               	movwf	7
  6652  0589  0021               	movlb	1	; select bank1
  6653  058A  0869               	movf	??_efgtoa^(0+128),w
  6654  058B  0081               	movwf	1
  6655  058C  3001               	movlw	1
  6656  058D  0022               	movlb	2	; select bank2
  6657  058E  07D3               	addwf	efgtoa@n^(0+256),f
  6658  058F  3000               	movlw	0
  6659  0590  3DD4               	addwfc	(efgtoa@n+1)^(0+256),f
  6660                           
  6661                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 476:                 --w;
  6662  0591  30FF               	movlw	255
  6663  0592  07BF               	addwf	efgtoa@w^(0+256),f
  6664  0593  30FF               	movlw	255
  6665  0594  3DC0               	addwfc	(efgtoa@w+1)^(0+256),f
  6666                           
  6667                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 477:                 pp = 1;
  6668  0595  3001               	movlw	1
  6669  0596  00AE               	movwf	efgtoa@pp^(0+256)
  6670  0597  3000               	movlw	0
  6671  0598  00AF               	movwf	(efgtoa@pp^(0+256)+1)
  6672  0599                     l4712:
  6673                           
  6674                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 479:             while (t) {
  6675  0599  082C               	movf	efgtoa@t^(0+256),w
  6676  059A  042D               	iorwf	(efgtoa@t+1)^(0+256),w
  6677  059B  1903               	btfsc	3,2
  6678  059C  2DB7               	goto	l4714
  6679                           
  6680                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 480:                 dbuf[n++
      +                          ] = '0';
  6681  059D  3030               	movlw	48
  6682  059E  0021               	movlb	1	; select bank1
  6683  059F  00E9               	movwf	??_efgtoa^(0+128)
  6684  05A0  0022               	movlb	2	; select bank2
  6685  05A1  0853               	movf	efgtoa@n^(0+256),w
  6686  05A2  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
  6687  05A3  0086               	movwf	6
  6688  05A4  3002               	movlw	2	; select bank5/6
  6689  05A5  0087               	movwf	7
  6690  05A6  0021               	movlb	1	; select bank1
  6691  05A7  0869               	movf	??_efgtoa^(0+128),w
  6692  05A8  0081               	movwf	1
  6693  05A9  3001               	movlw	1
  6694  05AA  0022               	movlb	2	; select bank2
  6695  05AB  07D3               	addwf	efgtoa@n^(0+256),f
  6696  05AC  3000               	movlw	0
  6697  05AD  3DD4               	addwfc	(efgtoa@n+1)^(0+256),f
  6698                           
  6699                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 481:                 --w;
  6700  05AE  30FF               	movlw	255
  6701  05AF  07BF               	addwf	efgtoa@w^(0+256),f
  6702  05B0  30FF               	movlw	255
  6703  05B1  3DC0               	addwfc	(efgtoa@w+1)^(0+256),f
  6704                           
  6705                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 482:                 --t;
  6706  05B2  30FF               	movlw	255
  6707  05B3  07AC               	addwf	efgtoa@t^(0+256),f
  6708  05B4  30FF               	movlw	255
  6709  05B5  3DAD               	addwfc	(efgtoa@t+1)^(0+256),f
  6710  05B6  2D99               	goto	l4712
  6711  05B7                     l4714:
  6712                           
  6713                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 484:             dbuf[n++] = 
      +                          (char)((int)'0' + d);
  6714  05B7  0838               	movf	efgtoa@d^(0+256),w
  6715  05B8  3E30               	addlw	48
  6716  05B9  0021               	movlb	1	; select bank1
  6717  05BA  00E9               	movwf	??_efgtoa^(0+128)
  6718  05BB  0022               	movlb	2	; select bank2
  6719  05BC  0853               	movf	efgtoa@n^(0+256),w
  6720  05BD  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
  6721  05BE  0086               	movwf	6
  6722  05BF  3002               	movlw	2	; select bank5/6
  6723  05C0  0087               	movwf	7
  6724  05C1  0021               	movlb	1	; select bank1
  6725  05C2  0869               	movf	??_efgtoa^(0+128),w
  6726  05C3  0081               	movwf	1
  6727  05C4  3001               	movlw	1
  6728  05C5  0022               	movlb	2	; select bank2
  6729  05C6  07D3               	addwf	efgtoa@n^(0+256),f
  6730  05C7  3000               	movlw	0
  6731  05C8  3DD4               	addwfc	(efgtoa@n+1)^(0+256),f
  6732                           
  6733                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 485:             --w;
  6734  05C9  30FF               	movlw	255
  6735  05CA  07BF               	addwf	efgtoa@w^(0+256),f
  6736  05CB  30FF               	movlw	255
  6737  05CC  3DC0               	addwfc	(efgtoa@w+1)^(0+256),f
  6738  05CD                     l4720:
  6739                           
  6740                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 487:         h -= l*u;
  6741  05CD  084A               	movf	(efgtoa@l+3)^(0+256),w
  6742  05CE  0020               	movlb	0	; select bank0
  6743  05CF  00A7               	movwf	___flmul@a+3
  6744  05D0  0022               	movlb	2	; select bank2
  6745  05D1  0849               	movf	(efgtoa@l+2)^(0+256),w
  6746  05D2  0020               	movlb	0	; select bank0
  6747  05D3  00A6               	movwf	___flmul@a+2
  6748  05D4  0022               	movlb	2	; select bank2
  6749  05D5  0848               	movf	(efgtoa@l+1)^(0+256),w
  6750  05D6  0020               	movlb	0	; select bank0
  6751  05D7  00A5               	movwf	___flmul@a+1
  6752  05D8  0022               	movlb	2	; select bank2
  6753  05D9  0847               	movf	efgtoa@l^(0+256),w
  6754  05DA  0020               	movlb	0	; select bank0
  6755  05DB  00A4               	movwf	___flmul@a
  6756  05DC  0022               	movlb	2	; select bank2
  6757  05DD  0858               	movf	(efgtoa@u+3)^(0+256),w
  6758  05DE  0020               	movlb	0	; select bank0
  6759  05DF  00A3               	movwf	___flmul@b+3
  6760  05E0  0022               	movlb	2	; select bank2
  6761  05E1  0857               	movf	(efgtoa@u+2)^(0+256),w
  6762  05E2  0020               	movlb	0	; select bank0
  6763  05E3  00A2               	movwf	___flmul@b+2
  6764  05E4  0022               	movlb	2	; select bank2
  6765  05E5  0856               	movf	(efgtoa@u+1)^(0+256),w
  6766  05E6  0020               	movlb	0	; select bank0
  6767  05E7  00A1               	movwf	___flmul@b+1
  6768  05E8  0022               	movlb	2	; select bank2
  6769  05E9  0855               	movf	efgtoa@u^(0+256),w
  6770  05EA  0020               	movlb	0	; select bank0
  6771  05EB  00A0               	movwf	___flmul@b
  6772  05EC  318A  22F4  3180   	fcall	___flmul
  6773  05EF  0823               	movf	?___flmul+3,w
  6774  05F0  00D1               	movwf	___flsub@a+3
  6775  05F1  0822               	movf	?___flmul+2,w
  6776  05F2  00D0               	movwf	___flsub@a+2
  6777  05F3  0821               	movf	?___flmul+1,w
  6778  05F4  00CF               	movwf	___flsub@a+1
  6779  05F5  0820               	movf	?___flmul,w
  6780  05F6  00CE               	movwf	___flsub@a
  6781  05F7  0022               	movlb	2	; select bank2
  6782  05F8  0846               	movf	(efgtoa@h+3)^(0+256),w
  6783  05F9  0020               	movlb	0	; select bank0
  6784  05FA  00D5               	movwf	___flsub@b+3
  6785  05FB  0022               	movlb	2	; select bank2
  6786  05FC  0845               	movf	(efgtoa@h+2)^(0+256),w
  6787  05FD  0020               	movlb	0	; select bank0
  6788  05FE  00D4               	movwf	___flsub@b+2
  6789  05FF  0022               	movlb	2	; select bank2
  6790  0600  0844               	movf	(efgtoa@h+1)^(0+256),w
  6791  0601  0020               	movlb	0	; select bank0
  6792  0602  00D3               	movwf	___flsub@b+1
  6793  0603  0022               	movlb	2	; select bank2
  6794  0604  0843               	movf	efgtoa@h^(0+256),w
  6795  0605  0020               	movlb	0	; select bank0
  6796  0606  00D2               	movwf	___flsub@b
  6797  0607  319C  247C  3180   	fcall	___flsub
  6798  060A  0851               	movf	?___flsub+3,w
  6799  060B  0022               	movlb	2	; select bank2
  6800  060C  00C6               	movwf	(efgtoa@h+3)^(0+256)
  6801  060D  0020               	movlb	0	; select bank0
  6802  060E  0850               	movf	?___flsub+2,w
  6803  060F  0022               	movlb	2	; select bank2
  6804  0610  00C5               	movwf	(efgtoa@h+2)^(0+256)
  6805  0611  0020               	movlb	0	; select bank0
  6806  0612  084F               	movf	?___flsub+1,w
  6807  0613  0022               	movlb	2	; select bank2
  6808  0614  00C4               	movwf	(efgtoa@h+1)^(0+256)
  6809  0615  0020               	movlb	0	; select bank0
  6810  0616  084E               	movf	?___flsub,w
  6811  0617  0022               	movlb	2	; select bank2
  6812  0618  00C3               	movwf	efgtoa@h^(0+256)
  6813                           
  6814                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 488:         u = u/10.0;
  6815  0619  3041               	movlw	65
  6816  061A  0021               	movlb	1	; select bank1
  6817  061B  00CB               	movwf	(___fldiv@a+3)^(0+128)
  6818  061C  3020               	movlw	32
  6819  061D  00CA               	movwf	(___fldiv@a+2)^(0+128)
  6820  061E  3000               	movlw	0
  6821  061F  00C9               	movwf	(___fldiv@a+1)^(0+128)
  6822  0620  3000               	movlw	0
  6823  0621  00C8               	movwf	___fldiv@a^(0+128)
  6824  0622  0022               	movlb	2	; select bank2
  6825  0623  0858               	movf	(efgtoa@u+3)^(0+256),w
  6826  0624  0021               	movlb	1	; select bank1
  6827  0625  00CF               	movwf	(___fldiv@b+3)^(0+128)
  6828  0626  0022               	movlb	2	; select bank2
  6829  0627  0857               	movf	(efgtoa@u+2)^(0+256),w
  6830  0628  0021               	movlb	1	; select bank1
  6831  0629  00CE               	movwf	(___fldiv@b+2)^(0+128)
  6832  062A  0022               	movlb	2	; select bank2
  6833  062B  0856               	movf	(efgtoa@u+1)^(0+256),w
  6834  062C  0021               	movlb	1	; select bank1
  6835  062D  00CD               	movwf	(___fldiv@b+1)^(0+128)
  6836  062E  0022               	movlb	2	; select bank2
  6837  062F  0855               	movf	efgtoa@u^(0+256),w
  6838  0630  0021               	movlb	1	; select bank1
  6839  0631  00CC               	movwf	___fldiv@b^(0+128)
  6840  0632  3194  244F  3180   	fcall	___fldiv
  6841  0635  084B               	movf	(?___fldiv+3)^(0+128),w
  6842  0636  0022               	movlb	2	; select bank2
  6843  0637  00D8               	movwf	(efgtoa@u+3)^(0+256)
  6844  0638  0021               	movlb	1	; select bank1
  6845  0639  084A               	movf	(?___fldiv+2)^(0+128),w
  6846  063A  0022               	movlb	2	; select bank2
  6847  063B  00D7               	movwf	(efgtoa@u+2)^(0+256)
  6848  063C  0021               	movlb	1	; select bank1
  6849  063D  0849               	movf	(?___fldiv+1)^(0+128),w
  6850  063E  0022               	movlb	2	; select bank2
  6851  063F  00D6               	movwf	(efgtoa@u+1)^(0+256)
  6852  0640  0021               	movlb	1	; select bank1
  6853  0641  0848               	movf	?___fldiv^(0+128),w
  6854  0642  0022               	movlb	2	; select bank2
  6855  0643  00D5               	movwf	efgtoa@u^(0+256)
  6856                           
  6857                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 489:         --ne;
  6858  0644  30FF               	movlw	255
  6859  0645  07B0               	addwf	efgtoa@ne^(0+256),f
  6860  0646  30FF               	movlw	255
  6861  0647  3DB1               	addwfc	(efgtoa@ne+1)^(0+256),f
  6862                           
  6863                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 490:         ++i;
  6864  0648  3001               	movlw	1
  6865  0649  07CB               	addwf	efgtoa@i^(0+256),f
  6866  064A  3000               	movlw	0
  6867  064B  3DCC               	addwfc	(efgtoa@i+1)^(0+256),f
  6868  064C                     l4728:
  6869                           
  6870                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 468:     while ((i < m) && (n
      +                           < (80 - 5))) {
  6871  064C  084C               	movf	(efgtoa@i+1)^(0+256),w
  6872  064D  3A80               	xorlw	128
  6873  064E  0021               	movlb	1	; select bank1
  6874  064F  00E9               	movwf	??_efgtoa^(0+128)
  6875  0650  0022               	movlb	2	; select bank2
  6876  0651  0833               	movf	(efgtoa@m+1)^(0+256),w
  6877  0652  3A80               	xorlw	128
  6878  0653  0021               	movlb	1	; select bank1
  6879  0654  0269               	subwf	??_efgtoa^(0+128),w
  6880  0655  1D03               	skipz
  6881  0656  2E5A               	goto	u5465
  6882  0657  0022               	movlb	2	; select bank2
  6883  0658  0832               	movf	efgtoa@m^(0+256),w
  6884  0659  024B               	subwf	efgtoa@i^(0+256),w
  6885  065A                     u5465:
  6886  065A  1803               	skipnc
  6887  065B  2E6A               	goto	l4732
  6888  065C  0022               	movlb	2	; select bank2
  6889  065D  0854               	movf	(efgtoa@n+1)^(0+256),w
  6890  065E  3A80               	xorlw	128
  6891  065F  0021               	movlb	1	; select bank1
  6892  0660  00E9               	movwf	??_efgtoa^(0+128)
  6893  0661  3080               	movlw	128
  6894  0662  0269               	subwf	??_efgtoa^(0+128),w
  6895  0663  1D03               	skipz
  6896  0664  2E68               	goto	u5475
  6897  0665  304B               	movlw	75
  6898  0666  0022               	movlb	2	; select bank2
  6899  0667  0253               	subwf	efgtoa@n^(0+256),w
  6900  0668                     u5475:
  6901  0668  1C03               	skipc
  6902  0669  2D10               	goto	l4680
  6903  066A                     l4732:
  6904                           
  6905                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 492:     if (!pp && (flags & 
      +                          (1 << 4))) {
  6906  066A  0022               	movlb	2	; select bank2
  6907  066B  082E               	movf	efgtoa@pp^(0+256),w
  6908  066C  042F               	iorwf	(efgtoa@pp+1)^(0+256),w
  6909  066D  1D03               	btfss	3,2
  6910  066E  2E83               	goto	l4740
  6911  066F  0023               	movlb	3	; select bank3
  6912  0670  1E30               	btfss	_flags^(0+384),4
  6913  0671  2E83               	goto	l4740
  6914                           
  6915                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 493:         dbuf[n++] = '.';
  6916  0672  302E               	movlw	46
  6917  0673  0021               	movlb	1	; select bank1
  6918  0674  00E9               	movwf	??_efgtoa^(0+128)
  6919  0675  0022               	movlb	2	; select bank2
  6920  0676  0853               	movf	efgtoa@n^(0+256),w
  6921  0677  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
  6922  0678  0086               	movwf	6
  6923  0679  3002               	movlw	2	; select bank5/6
  6924  067A  0087               	movwf	7
  6925  067B  0021               	movlb	1	; select bank1
  6926  067C  0869               	movf	??_efgtoa^(0+128),w
  6927  067D  0081               	movwf	1
  6928  067E  3001               	movlw	1
  6929  067F  0022               	movlb	2	; select bank2
  6930  0680  07D3               	addwf	efgtoa@n^(0+256),f
  6931  0681  3000               	movlw	0
  6932  0682  3DD4               	addwfc	(efgtoa@n+1)^(0+256),f
  6933  0683                     l4740:
  6934                           
  6935                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 495:     dbuf[n] = '\0';
  6936  0683  0022               	movlb	2	; select bank2
  6937  0684  0853               	movf	efgtoa@n^(0+256),w
  6938  0685  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
  6939  0686  0086               	movwf	6
  6940  0687  3002               	movlw	2	; select bank5/6
  6941  0688  0087               	movwf	7
  6942  0689  0181               	clrf	1
  6943                           
  6944                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 498:     if (nmode == 'e') {
  6945  068A  3065               	movlw	101
  6946  068B  0641               	xorwf	efgtoa@nmode^(0+256),w
  6947  068C  1D03               	btfss	3,2
  6948  068D  2F54               	goto	l4802
  6949                           
  6950                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 499:         i = sizeof(dbuf)
      +                           - 1;
  6951  068E  304F               	movlw	79
  6952  068F  00CB               	movwf	efgtoa@i^(0+256)
  6953  0690  3000               	movlw	0
  6954  0691  00CC               	movwf	(efgtoa@i^(0+256)+1)
  6955                           
  6956                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 500:         dbuf[i] = '\0';
  6957  0692  084B               	movf	efgtoa@i^(0+256),w
  6958  0693  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
  6959  0694  0086               	movwf	6
  6960  0695  3002               	movlw	2	; select bank5/6
  6961  0696  0087               	movwf	7
  6962  0697  0181               	clrf	1
  6963                           
  6964                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 501:         sign = 0;
  6965  0698  01BA               	clrf	efgtoa@sign^(0+256)
  6966  0699  01BB               	clrf	(efgtoa@sign+1)^(0+256)
  6967                           
  6968                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 502:         if (e < 0) {
  6969  069A  1FD2               	btfss	(efgtoa@e+1)^(0+256),7
  6970  069B  2EA5               	goto	l4756
  6971                           
  6972                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 503:             sign = 1;
  6973  069C  3001               	movlw	1
  6974  069D  00BA               	movwf	efgtoa@sign^(0+256)
  6975  069E  3000               	movlw	0
  6976  069F  00BB               	movwf	(efgtoa@sign^(0+256)+1)
  6977                           
  6978                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 504:             e = -e;
  6979  06A0  09D1               	comf	efgtoa@e^(0+256),f
  6980  06A1  09D2               	comf	(efgtoa@e+1)^(0+256),f
  6981  06A2  0AD1               	incf	efgtoa@e^(0+256),f
  6982  06A3  1903               	skipnz
  6983  06A4  0AD2               	incf	(efgtoa@e+1)^(0+256),f
  6984  06A5                     l4756:
  6985                           
  6986                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 506:         p = 2;
  6987  06A5  3002               	movlw	2
  6988  06A6  00BD               	movwf	efgtoa@p^(0+256)
  6989  06A7  3000               	movlw	0
  6990  06A8  00BE               	movwf	(efgtoa@p^(0+256)+1)
  6991  06A9                     l4768:	
  6992                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 507:         while (e || (0 <
      +                           p)) {
  6993                           
  6994                           
  6995                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 507:         while (e || (0 <
      +                           p)) {
  6996  06A9  0851               	movf	efgtoa@e^(0+256),w
  6997  06AA  0452               	iorwf	(efgtoa@e+1)^(0+256),w
  6998  06AB  1903               	btfsc	3,2
  6999  06AC  2EE3               	goto	l4770
  7000  06AD                     l4758:
  7001                           
  7002                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 508:             --i;
  7003  06AD  30FF               	movlw	255
  7004  06AE  0022               	movlb	2	; select bank2
  7005  06AF  07CB               	addwf	efgtoa@i^(0+256),f
  7006  06B0  30FF               	movlw	255
  7007  06B1  3DCC               	addwfc	(efgtoa@i+1)^(0+256),f
  7008                           
  7009                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 509:             dbuf[i] = '0
      +                          ' + (e % 10);
  7010  06B2  300A               	movlw	10
  7011  06B3  00F0               	movwf	___awmod@divisor
  7012  06B4  3000               	movlw	0
  7013  06B5  00F1               	movwf	___awmod@divisor+1
  7014  06B6  0852               	movf	(efgtoa@e+1)^(0+256),w
  7015  06B7  00F3               	movwf	___awmod@dividend+1
  7016  06B8  0851               	movf	efgtoa@e^(0+256),w
  7017  06B9  00F2               	movwf	___awmod@dividend
  7018  06BA  319E  2635  3180   	fcall	___awmod
  7019  06BD  0870               	movf	?___awmod,w
  7020  06BE  3E30               	addlw	48
  7021  06BF  0021               	movlb	1	; select bank1
  7022  06C0  00E9               	movwf	??_efgtoa^(0+128)
  7023  06C1  0022               	movlb	2	; select bank2
  7024  06C2  084B               	movf	efgtoa@i^(0+256),w
  7025  06C3  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
  7026  06C4  0086               	movwf	6
  7027  06C5  3002               	movlw	2	; select bank5/6
  7028  06C6  0087               	movwf	7
  7029  06C7  0021               	movlb	1	; select bank1
  7030  06C8  0869               	movf	??_efgtoa^(0+128),w
  7031  06C9  0081               	movwf	1
  7032                           
  7033                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 510:             e = e / 10;
  7034  06CA  300A               	movlw	10
  7035  06CB  00F0               	movwf	___awdiv@divisor
  7036  06CC  3000               	movlw	0
  7037  06CD  00F1               	movwf	___awdiv@divisor+1
  7038  06CE  0022               	movlb	2	; select bank2
  7039  06CF  0852               	movf	(efgtoa@e+1)^(0+256),w
  7040  06D0  00F3               	movwf	___awdiv@dividend+1
  7041  06D1  0851               	movf	efgtoa@e^(0+256),w
  7042  06D2  00F2               	movwf	___awdiv@dividend
  7043  06D3  319F  275E  3180   	fcall	___awdiv
  7044  06D6  0871               	movf	?___awdiv+1,w
  7045  06D7  00D2               	movwf	(efgtoa@e+1)^(0+256)
  7046  06D8  0870               	movf	?___awdiv,w
  7047  06D9  00D1               	movwf	efgtoa@e^(0+256)
  7048                           
  7049                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 511:             --p;
  7050  06DA  30FF               	movlw	255
  7051  06DB  07BD               	addwf	efgtoa@p^(0+256),f
  7052  06DC  30FF               	movlw	255
  7053  06DD  3DBE               	addwfc	(efgtoa@p+1)^(0+256),f
  7054                           
  7055                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 512:             --w;
  7056  06DE  30FF               	movlw	255
  7057  06DF  07BF               	addwf	efgtoa@w^(0+256),f
  7058  06E0  30FF               	movlw	255
  7059  06E1  3DC0               	addwfc	(efgtoa@w+1)^(0+256),f
  7060  06E2  2EA9               	goto	l4768
  7061  06E3                     l4770:
  7062  06E3  083E               	movf	(efgtoa@p+1)^(0+256),w
  7063  06E4  3A80               	xorlw	128
  7064  06E5  0021               	movlb	1	; select bank1
  7065  06E6  00E9               	movwf	??_efgtoa^(0+128)
  7066  06E7  3080               	movlw	128
  7067  06E8  0269               	subwf	??_efgtoa^(0+128),w
  7068  06E9  1D03               	skipz
  7069  06EA  2EEE               	goto	u5535
  7070  06EB  3001               	movlw	1
  7071  06EC  0022               	movlb	2	; select bank2
  7072  06ED  023D               	subwf	efgtoa@p^(0+256),w
  7073  06EE                     u5535:
  7074  06EE  1803               	skipnc
  7075  06EF  2EAD               	goto	l4758
  7076                           
  7077                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 514:         --i;
  7078  06F0  30FF               	movlw	255
  7079  06F1  0022               	movlb	2	; select bank2
  7080  06F2  07CB               	addwf	efgtoa@i^(0+256),f
  7081  06F3  30FF               	movlw	255
  7082  06F4  3DCC               	addwfc	(efgtoa@i+1)^(0+256),f
  7083                           
  7084                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 515:         dbuf[i] = sign ?
      +                           '-' : '+';
  7085  06F5  083A               	movf	efgtoa@sign^(0+256),w
  7086  06F6  043B               	iorwf	(efgtoa@sign+1)^(0+256),w
  7087  06F7  1D03               	btfss	3,2
  7088  06F8  2EFB               	goto	l4778
  7089  06F9  302B               	movlw	43
  7090  06FA  2EFC               	goto	L7
  7091  06FB                     l4778:
  7092  06FB  302D               	movlw	45
  7093  06FC                     L7:
  7094  06FC  00A6               	movwf	_efgtoa$2215^(0+256)
  7095  06FD  3000               	movlw	0
  7096  06FE  00A7               	movwf	(_efgtoa$2215^(0+256)+1)
  7097  06FF  0826               	movf	_efgtoa$2215^(0+256),w
  7098  0700  0021               	movlb	1	; select bank1
  7099  0701  00E9               	movwf	??_efgtoa^(0+128)
  7100  0702  0022               	movlb	2	; select bank2
  7101  0703  084B               	movf	efgtoa@i^(0+256),w
  7102  0704  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
  7103  0705  0086               	movwf	6
  7104  0706  3002               	movlw	2	; select bank5/6
  7105  0707  0087               	movwf	7
  7106  0708  0021               	movlb	1	; select bank1
  7107  0709  0869               	movf	??_efgtoa^(0+128),w
  7108  070A  0081               	movwf	1
  7109                           
  7110                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 516:         --w;
  7111  070B  30FF               	movlw	255
  7112  070C  0022               	movlb	2	; select bank2
  7113  070D  07BF               	addwf	efgtoa@w^(0+256),f
  7114  070E  30FF               	movlw	255
  7115  070F  3DC0               	addwfc	(efgtoa@w+1)^(0+256),f
  7116                           
  7117                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 518:         dbuf[i] = (0 ? i
      +                          supper((int)c) : ((unsigned)((int)c)-'A') < 26) ? 'E' : 'e';
  7118  0710  30FF               	movlw	255
  7119  0711  07CB               	addwf	efgtoa@i^(0+256),f
  7120  0712  30FF               	movlw	255
  7121  0713  3DCC               	addwfc	(efgtoa@i+1)^(0+256),f
  7122  0714  0021               	movlb	1	; select bank1
  7123  0715  0868               	movf	efgtoa@c^(0+128),w
  7124  0716  3EBF               	addlw	191
  7125  0717  00E9               	movwf	??_efgtoa^(0+128)
  7126  0718  30FF               	movlw	255
  7127  0719  1803               	skipnc
  7128  071A  3000               	movlw	0
  7129  071B  00EA               	movwf	(??_efgtoa^(0+128)+1)
  7130  071C  3000               	movlw	0
  7131  071D  026A               	subwf	(??_efgtoa+1)^(0+128),w
  7132  071E  301A               	movlw	26
  7133  071F  1903               	skipnz
  7134  0720  0269               	subwf	??_efgtoa^(0+128),w
  7135  0721  1803               	btfsc	3,0
  7136  0722  2F25               	goto	u5550
  7137  0723  3001               	movlw	1
  7138  0724  2F26               	goto	u5560
  7139  0725                     u5550:
  7140  0725  3000               	movlw	0
  7141  0726                     u5560:
  7142  0726  00EB               	movwf	(??_efgtoa+2)^(0+128)
  7143  0727  01EC               	clrf	((??_efgtoa+2)^(0+128)+1)
  7144  0728  086B               	movf	(??_efgtoa+2)^(0+128),w
  7145  0729  0022               	movlb	2	; select bank2
  7146  072A  00AA               	movwf	_efgtoa$2217^(0+256)
  7147  072B  0021               	movlb	1	; select bank1
  7148  072C  086C               	movf	(??_efgtoa+3)^(0+128),w
  7149  072D  0022               	movlb	2	; select bank2
  7150  072E  00AB               	movwf	(_efgtoa$2217+1)^(0+256)
  7151  072F  082A               	movf	_efgtoa$2217^(0+256),w
  7152  0730  042B               	iorwf	(_efgtoa$2217+1)^(0+256),w
  7153  0731  1D03               	btfss	3,2
  7154  0732  2F35               	goto	l4794
  7155  0733  3065               	movlw	101
  7156  0734  2F36               	goto	L8
  7157  0735                     l4794:
  7158  0735  3045               	movlw	69
  7159  0736                     L8:
  7160  0736  00A8               	movwf	_efgtoa$2216^(0+256)
  7161  0737  3000               	movlw	0
  7162  0738  00A9               	movwf	(_efgtoa$2216^(0+256)+1)
  7163  0739  0828               	movf	_efgtoa$2216^(0+256),w
  7164  073A  0021               	movlb	1	; select bank1
  7165  073B  00E9               	movwf	??_efgtoa^(0+128)
  7166  073C  0022               	movlb	2	; select bank2
  7167  073D  084B               	movf	efgtoa@i^(0+256),w
  7168  073E  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
  7169  073F  0086               	movwf	6
  7170  0740  3002               	movlw	2	; select bank5/6
  7171  0741  0087               	movwf	7
  7172  0742  0021               	movlb	1	; select bank1
  7173  0743  0869               	movf	??_efgtoa^(0+128),w
  7174  0744  0081               	movwf	1
  7175                           
  7176                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 519:         --w;
  7177  0745  30FF               	movlw	255
  7178  0746  0022               	movlb	2	; select bank2
  7179  0747  07BF               	addwf	efgtoa@w^(0+256),f
  7180  0748  30FF               	movlw	255
  7181  0749  3DC0               	addwfc	(efgtoa@w+1)^(0+256),f
  7182                           
  7183                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 520:         strcpy(&dbuf[n],
      +                           &dbuf[i]);
  7184  074A  084B               	movf	efgtoa@i^(0+256),w
  7185  074B  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
  7186  074C  00F0               	movwf	strcpy@src
  7187  074D  3002               	movlw	2
  7188  074E  00F1               	movwf	strcpy@src+1
  7189  074F  0853               	movf	efgtoa@n^(0+256),w
  7190  0750  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
  7191  0751  319C  24B8  3180   	fcall	_strcpy
  7192  0754                     l4802:
  7193                           
  7194                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 524:     return pad(fp, &dbuf
      +                          [0], w);
  7195  0754  30A0               	movlw	(low (_dbuf| (0+512)))& (0+255)
  7196  0755  0021               	movlb	1	; select bank1
  7197  0756  00E9               	movwf	??_efgtoa^(0+128)
  7198  0757  0869               	movf	??_efgtoa^(0+128),w
  7199  0758  0020               	movlb	0	; select bank0
  7200  0759  00A4               	movwf	pad@buf
  7201  075A  0022               	movlb	2	; select bank2
  7202  075B  0840               	movf	(efgtoa@w+1)^(0+256),w
  7203  075C  0020               	movlb	0	; select bank0
  7204  075D  00A6               	movwf	pad@p+1
  7205  075E  0022               	movlb	2	; select bank2
  7206  075F  083F               	movf	efgtoa@w^(0+256),w
  7207  0760  0020               	movlb	0	; select bank0
  7208  0761  00A5               	movwf	pad@p
  7209  0762  0022               	movlb	2	; select bank2
  7210  0763  083C               	movf	efgtoa@fp^(0+256),w
  7211  0764  319F  270E         	fcall	_pad
  7212  0766  0825               	movf	?_pad+1,w
  7213  0767  0021               	movlb	1	; select bank1
  7214  0768  00E5               	movwf	(?_efgtoa+1)^(0+128)
  7215  0769  0020               	movlb	0	; select bank0
  7216  076A  0824               	movf	?_pad,w
  7217  076B  0021               	movlb	1	; select bank1
  7218  076C  00E4               	movwf	?_efgtoa^(0+128)
  7219  076D  0008               	return
  7220  076E                     __end_of_efgtoa:
  7221                           
  7222                           	psect	text6
  7223  1CF8                     __ptext6:	
  7224 ;; *************** function _tolower *****************
  7225 ;; Defined at:
  7226 ;;		line 4 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/tolower.c"
  7227 ;; Parameters:    Size  Location     Type
  7228 ;;  c               2    6[COMMON] int 
  7229 ;; Auto vars:     Size  Location     Type
  7230 ;;		None
  7231 ;; Return value:  Size  Location     Type
  7232 ;;                  2    6[COMMON] int 
  7233 ;; Registers used:
  7234 ;;		wreg, status,2, status,0
  7235 ;; Tracked objects:
  7236 ;;		On entry : 1C/2
  7237 ;;		On exit  : 1C/0
  7238 ;;		Unchanged: 1C/0
  7239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7240 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7241 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7242 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7243 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7244 ;;Total ram usage:        8 bytes
  7245 ;; Hardware stack levels used:    1
  7246 ;; Hardware stack levels required when called:    6
  7247 ;; This function calls:
  7248 ;;		_isupper
  7249 ;; This function is called by:
  7250 ;;		_efgtoa
  7251 ;;		_vfpfcnvrt
  7252 ;; This function uses a non-reentrant model
  7253 ;;
  7254                           
  7255                           
  7256                           ;psect for function _tolower
  7257  1CF8                     _tolower:
  7258                           
  7259                           ;incstack = 0
  7260                           ; Regs used in _tolower: [wreg+status,2+status,0]
  7261  1CF8  0876               	movf	tolower@c,w
  7262  1CF9  3EBF               	addlw	191
  7263  1CFA  00F8               	movwf	??_tolower
  7264  1CFB  30FF               	movlw	255
  7265  1CFC  3D77               	addwfc	tolower@c+1,w
  7266  1CFD  00F9               	movwf	??_tolower+1
  7267  1CFE  3000               	movlw	0
  7268  1CFF  0279               	subwf	??_tolower+1,w
  7269  1D00  301A               	movlw	26
  7270  1D01  1903               	skipnz
  7271  1D02  0278               	subwf	??_tolower,w
  7272  1D03  1803               	btfsc	3,0
  7273  1D04  2D07               	goto	u4790
  7274  1D05  3001               	movlw	1
  7275  1D06  2D08               	goto	u4800
  7276  1D07                     u4790:
  7277  1D07  3000               	movlw	0
  7278  1D08                     u4800:
  7279  1D08  00FA               	movwf	??_tolower+2
  7280  1D09  01FB               	clrf	??_tolower+3
  7281  1D0A  087A               	movf	??_tolower+2,w
  7282  1D0B  00FC               	movwf	_tolower$2366
  7283  1D0C  087B               	movf	??_tolower+3,w
  7284  1D0D  00FD               	movwf	_tolower$2366+1
  7285  1D0E  087C               	movf	_tolower$2366,w
  7286  1D0F  047D               	iorwf	_tolower$2366+1,w
  7287  1D10  1903               	btfsc	3,2
  7288  1D11  0008               	return
  7289  1D12  3020               	movlw	32
  7290  1D13  0476               	iorwf	tolower@c,w
  7291  1D14  00F6               	movwf	?_tolower
  7292  1D15  3000               	movlw	0
  7293  1D16  0477               	iorwf	tolower@c+1,w
  7294  1D17  00F7               	movwf	?_tolower+1
  7295  1D18  0008               	return
  7296  1D19                     __end_of_tolower:
  7297                           
  7298                           	psect	text7
  7299  07E9                     __ptext7:	
  7300 ;; *************** function _isupper *****************
  7301 ;; Defined at:
  7302 ;;		line 5 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/isupper.c"
  7303 ;; Parameters:    Size  Location     Type
  7304 ;;  c               2    0[COMMON] int 
  7305 ;; Auto vars:     Size  Location     Type
  7306 ;;		None
  7307 ;; Return value:  Size  Location     Type
  7308 ;;                  2    0[COMMON] int 
  7309 ;; Registers used:
  7310 ;;		wreg, status,2, status,0
  7311 ;; Tracked objects:
  7312 ;;		On entry : 0/0
  7313 ;;		On exit  : 0/0
  7314 ;;		Unchanged: 0/0
  7315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7316 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7318 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7319 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7320 ;;Total ram usage:        6 bytes
  7321 ;; Hardware stack levels used:    1
  7322 ;; Hardware stack levels required when called:    5
  7323 ;; This function calls:
  7324 ;;		Nothing
  7325 ;; This function is called by:
  7326 ;;		_efgtoa
  7327 ;;		_vfpfcnvrt
  7328 ;;		_tolower
  7329 ;; This function uses a non-reentrant model
  7330 ;;
  7331                           
  7332                           
  7333                           ;psect for function _isupper
  7334  07E9                     _isupper:
  7335                           
  7336                           ;incstack = 0
  7337                           ; Regs used in _isupper: [wreg+status,2+status,0]
  7338  07E9  0870               	movf	isupper@c,w
  7339  07EA  3EBF               	addlw	191
  7340  07EB  00F2               	movwf	??_isupper
  7341  07EC  30FF               	movlw	255
  7342  07ED  3D71               	addwfc	isupper@c+1,w
  7343  07EE  00F3               	movwf	??_isupper+1
  7344  07EF  3000               	movlw	0
  7345  07F0  0273               	subwf	??_isupper+1,w
  7346  07F1  301A               	movlw	26
  7347  07F2  1903               	skipnz
  7348  07F3  0272               	subwf	??_isupper,w
  7349  07F4  1803               	btfsc	3,0
  7350  07F5  2FF8               	goto	u3670
  7351  07F6  3001               	movlw	1
  7352  07F7  2FF9               	goto	u3680
  7353  07F8                     u3670:
  7354  07F8  3000               	movlw	0
  7355  07F9                     u3680:
  7356  07F9  00F4               	movwf	??_isupper+2
  7357  07FA  01F5               	clrf	??_isupper+3
  7358  07FB  0874               	movf	??_isupper+2,w
  7359  07FC  00F0               	movwf	?_isupper
  7360  07FD  0875               	movf	??_isupper+3,w
  7361  07FE  00F1               	movwf	?_isupper+1
  7362  07FF  0008               	return
  7363  0800                     __end_of_isupper:
  7364                           
  7365                           	psect	text8
  7366  1CB8                     __ptext8:	
  7367 ;; *************** function _strcpy *****************
  7368 ;; Defined at:
  7369 ;;		line 3 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/strcpy.c"
  7370 ;; Parameters:    Size  Location     Type
  7371 ;;  dest            1    wreg     PTR unsigned char 
  7372 ;;		 -> dbuf(80), 
  7373 ;;  src             2    0[COMMON] PTR const unsigned char 
  7374 ;;		 -> STR_7(4), STR_6(4), STR_3(4), STR_2(4), 
  7375 ;;		 -> dbuf(80), 
  7376 ;; Auto vars:     Size  Location     Type
  7377 ;;  dest            1    7[COMMON] PTR unsigned char 
  7378 ;;		 -> dbuf(80), 
  7379 ;;  s               2    4[COMMON] PTR const unsigned char 
  7380 ;;		 -> STR_7(4), STR_6(4), STR_3(4), STR_2(4), 
  7381 ;;		 -> dbuf(80), 
  7382 ;;  d               1    6[COMMON] PTR unsigned char 
  7383 ;;		 -> dbuf(80), 
  7384 ;; Return value:  Size  Location     Type
  7385 ;;                  1    wreg      PTR unsigned char 
  7386 ;; Registers used:
  7387 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  7388 ;; Tracked objects:
  7389 ;;		On entry : 1F/2
  7390 ;;		On exit  : 1F/2
  7391 ;;		Unchanged: 1F/0
  7392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7393 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7394 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7395 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7396 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7397 ;;Total ram usage:        8 bytes
  7398 ;; Hardware stack levels used:    1
  7399 ;; Hardware stack levels required when called:    5
  7400 ;; This function calls:
  7401 ;;		Nothing
  7402 ;; This function is called by:
  7403 ;;		_efgtoa
  7404 ;; This function uses a non-reentrant model
  7405 ;;
  7406                           
  7407                           
  7408                           ;psect for function _strcpy
  7409  1CB8                     _strcpy:
  7410                           
  7411                           ;incstack = 0
  7412                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  7413                           ;strcpy@dest stored from wreg
  7414  1CB8  00F7               	movwf	strcpy@dest
  7415  1CB9  0871               	movf	strcpy@src+1,w
  7416  1CBA  00F5               	movwf	strcpy@s+1
  7417  1CBB  0870               	movf	strcpy@src,w
  7418  1CBC  00F4               	movwf	strcpy@s
  7419  1CBD  0877               	movf	strcpy@dest,w
  7420  1CBE  00F2               	movwf	??_strcpy
  7421  1CBF  0872               	movf	??_strcpy,w
  7422  1CC0  00F6               	movwf	strcpy@d
  7423  1CC1                     l4392:
  7424  1CC1  0876               	movf	strcpy@d,w
  7425  1CC2  0086               	movwf	6
  7426  1CC3  3002               	movlw	2	; select bank4/5
  7427  1CC4  0087               	movwf	7
  7428  1CC5  0AF6               	incf	strcpy@d,f
  7429  1CC6  0875               	movf	strcpy@s+1,w
  7430  1CC7  00F3               	movwf	??_strcpy+1
  7431  1CC8  0874               	movf	strcpy@s,w
  7432  1CC9  00F2               	movwf	??_strcpy
  7433  1CCA  0AF4               	incf	strcpy@s,f
  7434  1CCB  1903               	skipnz
  7435  1CCC  0AF5               	incf	strcpy@s+1,f
  7436  1CCD  0872               	movf	??_strcpy,w
  7437  1CCE  0084               	movwf	4
  7438  1CCF  0873               	movf	??_strcpy+1,w
  7439  1CD0  0085               	movwf	5
  7440  1CD1  0800               	movf	0,w	;code access
  7441  1CD2  3FC0               	movwi [0]fsr1
  7442  1CD3  0889               	movf	9,f
  7443  1CD4  1903               	btfsc	3,2
  7444  1CD5  0008               	return
  7445  1CD6  2CC1               	goto	l4392
  7446  1CD7                     __end_of_strcpy:
  7447                           
  7448                           	psect	text9
  7449  1F0E                     __ptext9:	
  7450 ;; *************** function _pad *****************
  7451 ;; Defined at:
  7452 ;;		line 72 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c"
  7453 ;; Parameters:    Size  Location     Type
  7454 ;;  fp              1    wreg     PTR struct _IO_FILE
  7455 ;;		 -> sprintf@f(5), 
  7456 ;;  buf             1    4[BANK0 ] PTR unsigned char 
  7457 ;;		 -> dbuf(80), 
  7458 ;;  p               2    5[BANK0 ] int 
  7459 ;; Auto vars:     Size  Location     Type
  7460 ;;  fp              1   11[BANK0 ] PTR struct _IO_FILE
  7461 ;;		 -> sprintf@f(5), 
  7462 ;;  w               2    9[BANK0 ] int 
  7463 ;;  i               2    7[BANK0 ] int 
  7464 ;; Return value:  Size  Location     Type
  7465 ;;                  2    4[BANK0 ] int 
  7466 ;; Registers used:
  7467 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7468 ;; Tracked objects:
  7469 ;;		On entry : 1F/2
  7470 ;;		On exit  : 1F/0
  7471 ;;		Unchanged: 0/0
  7472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7473 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7474 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7475 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7476 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7477 ;;Total ram usage:        9 bytes
  7478 ;; Hardware stack levels used:    1
  7479 ;; Hardware stack levels required when called:    8
  7480 ;; This function calls:
  7481 ;;		_fputc
  7482 ;;		_fputs
  7483 ;;		_strlen
  7484 ;; This function is called by:
  7485 ;;		_efgtoa
  7486 ;; This function uses a non-reentrant model
  7487 ;;
  7488                           
  7489                           
  7490                           ;psect for function _pad
  7491  1F0E                     _pad:
  7492                           
  7493                           ;incstack = 0
  7494                           ; Regs used in _pad: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7495                           ;pad@fp stored from wreg
  7496  1F0E  0020               	movlb	0	; select bank0
  7497  1F0F  00AB               	movwf	pad@fp
  7498                           
  7499                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 72: static int pad(FILE *fp, 
      +                          char *buf, int p);/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 73: {;/opt/m
      +                          icrochip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 74:     int i, w;;/opt/microchip/xc8
      +                          /v2.31/pic/sources/c99/common/doprnt.c: 77:     if (flags & (1 << 0)) {
  7500  1F10  0023               	movlb	3	; select bank3
  7501  1F11  1C30               	btfss	_flags^(0+384),0
  7502  1F12  2F1C               	goto	l4348
  7503                           
  7504                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 78:         fputs((const char
      +                           *)buf, fp);
  7505  1F13  0020               	movlb	0	; select bank0
  7506  1F14  082B               	movf	pad@fp,w
  7507  1F15  00FC               	movwf	??_pad
  7508  1F16  087C               	movf	??_pad,w
  7509  1F17  00F8               	movwf	fputs@fp
  7510  1F18  0824               	movf	pad@buf,w
  7511  1F19  319D  2519  319F   	fcall	_fputs
  7512  1F1C                     l4348:
  7513                           
  7514                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 82:     w = (p < 0) ? 0 : p;
  7515  1F1C  0020               	movlb	0	; select bank0
  7516  1F1D  1BA6               	btfsc	pad@p+1,7
  7517  1F1E  2F24               	goto	l4352
  7518  1F1F  0826               	movf	pad@p+1,w
  7519  1F20  00AA               	movwf	pad@w+1
  7520  1F21  0825               	movf	pad@p,w
  7521  1F22  00A9               	movwf	pad@w
  7522  1F23  2F26               	goto	l1615
  7523  1F24                     l4352:
  7524  1F24  01A9               	clrf	pad@w
  7525  1F25  01AA               	clrf	pad@w+1
  7526  1F26                     l1615:
  7527                           
  7528                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 83:     i = 0;
  7529  1F26  01A7               	clrf	pad@i
  7530  1F27  01A8               	clrf	pad@i+1
  7531  1F28                     l4358:	
  7532                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 84:     while (i < w) {
  7533                           
  7534                           
  7535                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 84:     while (i < w) {
  7536  1F28  0828               	movf	pad@i+1,w
  7537  1F29  3A80               	xorlw	128
  7538  1F2A  00FC               	movwf	??_pad
  7539  1F2B  082A               	movf	pad@w+1,w
  7540  1F2C  3A80               	xorlw	128
  7541  1F2D  027C               	subwf	??_pad,w
  7542  1F2E  1D03               	skipz
  7543  1F2F  2F32               	goto	u4685
  7544  1F30  0829               	movf	pad@w,w
  7545  1F31  0227               	subwf	pad@i,w
  7546  1F32                     u4685:
  7547  1F32  1803               	btfsc	3,0
  7548  1F33  2F46               	goto	l1618
  7549                           
  7550                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 85:         fputc(' ', fp);
  7551  1F34  3020               	movlw	32
  7552  1F35  00F0               	movwf	fputc@c
  7553  1F36  3000               	movlw	0
  7554  1F37  00F1               	movwf	fputc@c+1
  7555  1F38  0020               	movlb	0	; select bank0
  7556  1F39  082B               	movf	pad@fp,w
  7557  1F3A  00FC               	movwf	??_pad
  7558  1F3B  087C               	movf	??_pad,w
  7559  1F3C  00F2               	movwf	fputc@fp
  7560  1F3D  319E  26C2  319F   	fcall	_fputc
  7561                           
  7562                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 86:         ++i;
  7563  1F40  3001               	movlw	1
  7564  1F41  0020               	movlb	0	; select bank0
  7565  1F42  07A7               	addwf	pad@i,f
  7566  1F43  3000               	movlw	0
  7567  1F44  3DA8               	addwfc	pad@i+1,f
  7568  1F45  2F28               	goto	l4358
  7569  1F46                     l1618:
  7570                           
  7571                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 90:     if (!(flags & (1 << 0
      +                          ))) {
  7572  1F46  0023               	movlb	3	; select bank3
  7573  1F47  1830               	btfsc	_flags^(0+384),0
  7574  1F48  2F52               	goto	l4362
  7575                           
  7576                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 91:         fputs((const char
      +                           *)buf, fp);
  7577  1F49  0020               	movlb	0	; select bank0
  7578  1F4A  082B               	movf	pad@fp,w
  7579  1F4B  00FC               	movwf	??_pad
  7580  1F4C  087C               	movf	??_pad,w
  7581  1F4D  00F8               	movwf	fputs@fp
  7582  1F4E  0824               	movf	pad@buf,w
  7583  1F4F  319D  2519  319F   	fcall	_fputs
  7584  1F52                     l4362:
  7585                           
  7586                           ;/opt/microchip/xc8/v2.31/pic/sources/c99/common/doprnt.c: 94:     return (int)(strlen(b
      +                          uf) + (size_t)w);
  7587  1F52  0020               	movlb	0	; select bank0
  7588  1F53  0824               	movf	pad@buf,w
  7589  1F54  319C  242F         	fcall	_strlen
  7590  1F56  0020               	movlb	0	; select bank0
  7591  1F57  0829               	movf	pad@w,w
  7592  1F58  0770               	addwf	?_strlen,w
  7593  1F59  00A4               	movwf	?_pad
  7594  1F5A  082A               	movf	pad@w+1,w
  7595  1F5B  3D71               	addwfc	?_strlen+1,w
  7596  1F5C  00A5               	movwf	?_pad+1
  7597  1F5D  0008               	return
  7598  1F5E                     __end_of_pad:
  7599                           
  7600                           	psect	text10
  7601  1D19                     __ptext10:	
  7602 ;; *************** function _fputs *****************
  7603 ;; Defined at:
  7604 ;;		line 8 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/nf_fputs.c"
  7605 ;; Parameters:    Size  Location     Type
  7606 ;;  s               1    wreg     PTR const unsigned char 
  7607 ;;		 -> dbuf(80), 
  7608 ;;  fp              1    8[COMMON] PTR struct _IO_FILE
  7609 ;;		 -> sprintf@f(5), 
  7610 ;; Auto vars:     Size  Location     Type
  7611 ;;  s               1    3[BANK0 ] PTR const unsigned char 
  7612 ;;		 -> dbuf(80), 
  7613 ;;  i               2    1[BANK0 ] int 
  7614 ;;  c               1    0[BANK0 ] unsigned char 
  7615 ;; Return value:  Size  Location     Type
  7616 ;;                  2    8[COMMON] int 
  7617 ;; Registers used:
  7618 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7619 ;; Tracked objects:
  7620 ;;		On entry : 1F/0
  7621 ;;		On exit  : 1F/0
  7622 ;;		Unchanged: 0/0
  7623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7624 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7625 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7626 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7627 ;;      Totals:         4       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7628 ;;Total ram usage:        8 bytes
  7629 ;; Hardware stack levels used:    1
  7630 ;; Hardware stack levels required when called:    7
  7631 ;; This function calls:
  7632 ;;		_fputc
  7633 ;; This function is called by:
  7634 ;;		_pad
  7635 ;; This function uses a non-reentrant model
  7636 ;;
  7637                           
  7638                           
  7639                           ;psect for function _fputs
  7640  1D19                     _fputs:
  7641                           
  7642                           ;incstack = 0
  7643                           ; Regs used in _fputs: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7644                           ;fputs@s stored from wreg
  7645  1D19  00A3               	movwf	fputs@s
  7646  1D1A  01A1               	clrf	fputs@i
  7647  1D1B  01A2               	clrf	fputs@i+1
  7648  1D1C                     l3874:
  7649  1D1C  0821               	movf	fputs@i,w
  7650  1D1D  0723               	addwf	fputs@s,w
  7651  1D1E  00F9               	movwf	??_fputs
  7652  1D1F  0879               	movf	??_fputs,w
  7653  1D20  0086               	movwf	6
  7654  1D21  3002               	movlw	2	; select bank4/5
  7655  1D22  0087               	movwf	7
  7656  1D23  0801               	movf	1,w
  7657  1D24  00FA               	movwf	??_fputs+1
  7658  1D25  087A               	movf	??_fputs+1,w
  7659  1D26  00A0               	movwf	fputs@c
  7660  1D27  0820               	movf	fputs@c,w
  7661  1D28  1903               	btfsc	3,2
  7662  1D29  0008               	return
  7663  1D2A  0820               	movf	fputs@c,w
  7664  1D2B  00F9               	movwf	??_fputs
  7665  1D2C  01FA               	clrf	??_fputs+1
  7666  1D2D  0879               	movf	??_fputs,w
  7667  1D2E  00F0               	movwf	fputc@c
  7668  1D2F  087A               	movf	??_fputs+1,w
  7669  1D30  00F1               	movwf	fputc@c+1
  7670  1D31  0878               	movf	fputs@fp,w
  7671  1D32  00FB               	movwf	??_fputs+2
  7672  1D33  087B               	movf	??_fputs+2,w
  7673  1D34  00F2               	movwf	fputc@fp
  7674  1D35  319E  26C2  319D   	fcall	_fputc
  7675  1D38  3001               	movlw	1
  7676  1D39  0020               	movlb	0	; select bank0
  7677  1D3A  07A1               	addwf	fputs@i,f
  7678  1D3B  3000               	movlw	0
  7679  1D3C  3DA2               	addwfc	fputs@i+1,f
  7680  1D3D  2D1C               	goto	l3874
  7681  1D3E                     __end_of_fputs:
  7682                           
  7683                           	psect	text11
  7684  1EC2                     __ptext11:	
  7685 ;; *************** function _fputc *****************
  7686 ;; Defined at:
  7687 ;;		line 8 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/nf_fputc.c"
  7688 ;; Parameters:    Size  Location     Type
  7689 ;;  c               2    0[COMMON] int 
  7690 ;;  fp              1    2[COMMON] PTR struct _IO_FILE
  7691 ;;		 -> sprintf@f(5), 
  7692 ;; Auto vars:     Size  Location     Type
  7693 ;;		None
  7694 ;; Return value:  Size  Location     Type
  7695 ;;                  2    0[COMMON] int 
  7696 ;; Registers used:
  7697 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7698 ;; Tracked objects:
  7699 ;;		On entry : 1D/2
  7700 ;;		On exit  : 0/0
  7701 ;;		Unchanged: 0/0
  7702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7703 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7705 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7706 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7707 ;;Total ram usage:        8 bytes
  7708 ;; Hardware stack levels used:    1
  7709 ;; Hardware stack levels required when called:    6
  7710 ;; This function calls:
  7711 ;;		_putch
  7712 ;; This function is called by:
  7713 ;;		_pad
  7714 ;;		_vfpfcnvrt
  7715 ;;		_fputs
  7716 ;; This function uses a non-reentrant model
  7717 ;;
  7718                           
  7719                           
  7720                           ;psect for function _fputc
  7721  1EC2                     _fputc:
  7722                           
  7723                           ;incstack = 0
  7724                           ; Regs used in _fputc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7725  1EC2  0872               	movf	fputc@fp,w
  7726  1EC3  1D03               	btfss	3,2
  7727  1EC4  0872               	movf	fputc@fp,w
  7728  1EC5  1D03               	btfss	3,2
  7729  1EC6  2ECB               	goto	l3602
  7730  1EC7  0870               	movf	fputc@c,w
  7731  1EC8  3180  2003         	fcall	_putch
  7732  1ECA  0008               	return
  7733  1ECB                     l3602:
  7734  1ECB  0872               	movf	fputc@fp,w
  7735  1ECC  3E03               	addlw	3
  7736  1ECD  0086               	movwf	6
  7737  1ECE  3001               	movlw	1	; select bank2/3
  7738  1ECF  0087               	movwf	7
  7739  1ED0  0016               	moviw fsr1++
  7740  1ED1  0401               	iorwf	1,w
  7741  1ED2  1903               	btfsc	3,2
  7742  1ED3  2EF1               	goto	l3606
  7743  1ED4  0872               	movf	fputc@fp,w
  7744  1ED5  3E03               	addlw	3
  7745  1ED6  0086               	movwf	6
  7746  1ED7  3001               	movlw	1	; select bank2/3
  7747  1ED8  0087               	movwf	7
  7748  1ED9  3F40               	moviw [0]fsr1
  7749  1EDA  00F3               	movwf	??_fputc
  7750  1EDB  3F41               	moviw [1]fsr1
  7751  1EDC  00F4               	movwf	??_fputc+1
  7752  1EDD  0A72               	incf	fputc@fp,w
  7753  1EDE  0086               	movwf	6
  7754  1EDF  3001               	movlw	1	; select bank2/3
  7755  1EE0  0087               	movwf	7
  7756  1EE1  3F40               	moviw [0]fsr1
  7757  1EE2  00F5               	movwf	??_fputc+2
  7758  1EE3  3F41               	moviw [1]fsr1
  7759  1EE4  00F6               	movwf	??_fputc+3
  7760  1EE5  0876               	movf	??_fputc+3,w
  7761  1EE6  3A80               	xorlw	128
  7762  1EE7  00F7               	movwf	??_fputc+4
  7763  1EE8  0874               	movf	??_fputc+1,w
  7764  1EE9  3A80               	xorlw	128
  7765  1EEA  0277               	subwf	??_fputc+4,w
  7766  1EEB  1D03               	skipz
  7767  1EEC  2EEF               	goto	u3155
  7768  1EED  0873               	movf	??_fputc,w
  7769  1EEE  0275               	subwf	??_fputc+2,w
  7770  1EEF                     u3155:
  7771  1EEF  1803               	skipnc
  7772  1EF0  0008               	return
  7773  1EF1                     l3606:
  7774  1EF1  0870               	movf	fputc@c,w
  7775  1EF2  00F3               	movwf	??_fputc
  7776  1EF3  0872               	movf	fputc@fp,w
  7777  1EF4  0086               	movwf	6
  7778  1EF5  3001               	movlw	1	; select bank2/3
  7779  1EF6  0087               	movwf	7
  7780  1EF7  0A72               	incf	fputc@fp,w
  7781  1EF8  0084               	movwf	4
  7782  1EF9  3001               	movlw	1	; select bank2/3
  7783  1EFA  0085               	movwf	5
  7784  1EFB  0800               	movf	0,w
  7785  1EFC  0701               	addwf	1,w
  7786  1EFD  00F4               	movwf	??_fputc+1
  7787  1EFE  0874               	movf	??_fputc+1,w
  7788  1EFF  0086               	movwf	6
  7789  1F00  3002               	movlw	2	; select bank4/5
  7790  1F01  0087               	movwf	7
  7791  1F02  0873               	movf	??_fputc,w
  7792  1F03  0081               	movwf	1
  7793  1F04  0A72               	incf	fputc@fp,w
  7794  1F05  0086               	movwf	6
  7795  1F06  3001               	movlw	1	; select bank2/3
  7796  1F07  0087               	movwf	7
  7797  1F08  3001               	movlw	1
  7798  1F09  0781               	addwf	1,f
  7799  1F0A  3141               	addfsr 1,1
  7800  1F0B  1803               	skipnc
  7801  1F0C  0A81               	incf	1,f
  7802  1F0D  0008               	return
  7803  1F0E                     __end_of_fputc:
  7804                           
  7805                           	psect	text12
  7806  0003                     __ptext12:	
  7807 ;; *************** function _putch *****************
  7808 ;; Defined at:
  7809 ;;		line 7 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/putch.c"
  7810 ;; Parameters:    Size  Location     Type
  7811 ;;  c               1    wreg     unsigned char 
  7812 ;; Auto vars:     Size  Location     Type
  7813 ;;  c               1    0[COMMON] unsigned char 
  7814 ;; Return value:  Size  Location     Type
  7815 ;;                  1    wreg      void 
  7816 ;; Registers used:
  7817 ;;		wreg
  7818 ;; Tracked objects:
  7819 ;;		On entry : 1D/2
  7820 ;;		On exit  : 1D/0
  7821 ;;		Unchanged: 1D/0
  7822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7826 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7827 ;;Total ram usage:        0 bytes
  7828 ;; Hardware stack levels used:    1
  7829 ;; Hardware stack levels required when called:    5
  7830 ;; This function calls:
  7831 ;;		Nothing
  7832 ;; This function is called by:
  7833 ;;		_fputc
  7834 ;; This function uses a non-reentrant model
  7835 ;;
  7836                           
  7837                           
  7838                           ;psect for function _putch
  7839  0003                     _putch:
  7840                           
  7841                           ;incstack = 0
  7842                           ; Regs used in _putch: [wreg]
  7843  0003  0008               	return
  7844  0004                     __end_of_putch:
  7845                           
  7846                           	psect	text13
  7847  0841                     __ptext13:	
  7848 ;; *************** function _floorf *****************
  7849 ;; Defined at:
  7850 ;;		line 3 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/floorf.c"
  7851 ;; Parameters:    Size  Location     Type
  7852 ;;  x               4   48[BANK1 ] float 
  7853 ;; Auto vars:     Size  Location     Type
  7854 ;;  u               4   64[BANK1 ] struct .
  7855 ;;  m               4   58[BANK1 ] unsigned long 
  7856 ;;  e               2   62[BANK1 ] int 
  7857 ;; Return value:  Size  Location     Type
  7858 ;;                  4   48[BANK1 ] float 
  7859 ;; Registers used:
  7860 ;;		wreg, status,2, status,0
  7861 ;; Tracked objects:
  7862 ;;		On entry : 1F/1
  7863 ;;		On exit  : 0/0
  7864 ;;		Unchanged: 0/0
  7865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7866 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7867 ;;      Locals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0
  7868 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7869 ;;      Totals:         0       0      20       0       0       0       0       0       0       0       0       0       
      +0       0
  7870 ;;Total ram usage:       20 bytes
  7871 ;; Hardware stack levels used:    1
  7872 ;; Hardware stack levels required when called:    5
  7873 ;; This function calls:
  7874 ;;		Nothing
  7875 ;; This function is called by:
  7876 ;;		_efgtoa
  7877 ;; This function uses a non-reentrant model
  7878 ;;
  7879                           
  7880                           
  7881                           ;psect for function _floorf
  7882  0841                     _floorf:
  7883                           
  7884                           ;incstack = 0
  7885                           ; Regs used in _floorf: [wreg+status,2+status,0]
  7886  0841  0023               	movlb	3	; select bank3
  7887  0842  0823               	movf	(floorf@F527+3)^(0+384),w
  7888  0843  0021               	movlb	1	; select bank1
  7889  0844  00E3               	movwf	(floorf@u+3)^(0+128)
  7890  0845  0023               	movlb	3	; select bank3
  7891  0846  0822               	movf	(floorf@F527+2)^(0+384),w
  7892  0847  0021               	movlb	1	; select bank1
  7893  0848  00E2               	movwf	(floorf@u+2)^(0+128)
  7894  0849  0023               	movlb	3	; select bank3
  7895  084A  0821               	movf	(floorf@F527+1)^(0+384),w
  7896  084B  0021               	movlb	1	; select bank1
  7897  084C  00E1               	movwf	(floorf@u+1)^(0+128)
  7898  084D  0023               	movlb	3	; select bank3
  7899  084E  0820               	movf	floorf@F527^(0+384),w
  7900  084F  0021               	movlb	1	; select bank1
  7901  0850  00E0               	movwf	floorf@u^(0+128)
  7902  0851  0853               	movf	(floorf@x+3)^(0+128),w
  7903  0852  00E3               	movwf	(floorf@u+3)^(0+128)
  7904  0853  0852               	movf	(floorf@x+2)^(0+128),w
  7905  0854  00E2               	movwf	(floorf@u+2)^(0+128)
  7906  0855  0851               	movf	(floorf@x+1)^(0+128),w
  7907  0856  00E1               	movwf	(floorf@u+1)^(0+128)
  7908  0857  0850               	movf	floorf@x^(0+128),w
  7909  0858  00E0               	movwf	floorf@u^(0+128)
  7910  0859  0860               	movf	floorf@u^(0+128),w
  7911  085A  00D4               	movwf	??_floorf^(0+128)
  7912  085B  0861               	movf	(floorf@u+1)^(0+128),w
  7913  085C  00D5               	movwf	(??_floorf^(0+128)+1)
  7914  085D  0862               	movf	(floorf@u+2)^(0+128),w
  7915  085E  00D6               	movwf	(??_floorf^(0+128)+2)
  7916  085F  0863               	movf	(floorf@u+3)^(0+128),w
  7917  0860  00D7               	movwf	(??_floorf^(0+128)+3)
  7918  0861  3017               	movlw	23
  7919  0862                     u4825:
  7920  0862  36D7               	lsrf	(??_floorf^(0+128)+3),f
  7921  0863  0CD6               	rrf	(??_floorf^(0+128)+2),f
  7922  0864  0CD5               	rrf	(??_floorf^(0+128)+1),f
  7923  0865  0CD4               	rrf	??_floorf^(0+128),f
  7924  0866  0B89               	decfsz	9,f
  7925  0867  2862               	goto	u4825
  7926  0868  30FF               	movlw	255
  7927  0869  0554               	andwf	??_floorf^(0+128),w
  7928  086A  00D8               	movwf	(??_floorf+4)^(0+128)
  7929  086B  3000               	movlw	0
  7930  086C  0555               	andwf	(??_floorf+1)^(0+128),w
  7931  086D  00D9               	movwf	(??_floorf+5)^(0+128)
  7932  086E  0858               	movf	(??_floorf+4)^(0+128),w
  7933  086F  3E81               	addlw	129
  7934  0870  00DE               	movwf	floorf@e^(0+128)
  7935  0871  30FF               	movlw	255
  7936  0872  3D59               	addwfc	(??_floorf+5)^(0+128),w
  7937  0873  00DF               	movwf	(floorf@e+1)^(0+128)
  7938  0874  085F               	movf	(floorf@e+1)^(0+128),w
  7939  0875  3A80               	xorlw	128
  7940  0876  00D4               	movwf	??_floorf^(0+128)
  7941  0877  3080               	movlw	128
  7942  0878  0254               	subwf	??_floorf^(0+128),w
  7943  0879  1D03               	skipz
  7944  087A  287D               	goto	u4835
  7945  087B  3017               	movlw	23
  7946  087C  025E               	subwf	floorf@e^(0+128),w
  7947  087D                     u4835:
  7948  087D  1803               	btfsc	3,0
  7949  087E  0008               	return
  7950  087F  0021               	movlb	1	; select bank1
  7951  0880  1BDF               	btfsc	(floorf@e+1)^(0+128),7
  7952  0881  28D7               	goto	l4424
  7953  0882  30FF               	movlw	255
  7954  0883  00D4               	movwf	??_floorf^(0+128)
  7955  0884  30FF               	movlw	255
  7956  0885  00D5               	movwf	(??_floorf^(0+128)+1)
  7957  0886  307F               	movlw	127
  7958  0887  00D6               	movwf	(??_floorf^(0+128)+2)
  7959  0888  3000               	movlw	0
  7960  0889  00D7               	movwf	(??_floorf^(0+128)+3)
  7961  088A  0A5E               	incf	floorf@e^(0+128),w
  7962  088B  2890               	goto	u4850
  7963  088C                     u4855:
  7964  088C  37D7               	asrf	(??_floorf^(0+128)+3),f
  7965  088D  0CD6               	rrf	(??_floorf^(0+128)+2),f
  7966  088E  0CD5               	rrf	(??_floorf^(0+128)+1),f
  7967  088F  0CD4               	rrf	??_floorf^(0+128),f
  7968  0890                     u4850:
  7969  0890  0B89               	decfsz	9,f
  7970  0891  288C               	goto	u4855
  7971  0892  0857               	movf	(??_floorf+3)^(0+128),w
  7972  0893  00DD               	movwf	(floorf@m+3)^(0+128)
  7973  0894  0856               	movf	(??_floorf+2)^(0+128),w
  7974  0895  00DC               	movwf	(floorf@m+2)^(0+128)
  7975  0896  0855               	movf	(??_floorf+1)^(0+128),w
  7976  0897  00DB               	movwf	(floorf@m+1)^(0+128)
  7977  0898  0854               	movf	??_floorf^(0+128),w
  7978  0899  00DA               	movwf	floorf@m^(0+128)
  7979  089A  0860               	movf	floorf@u^(0+128),w
  7980  089B  055A               	andwf	floorf@m^(0+128),w
  7981  089C  00D4               	movwf	??_floorf^(0+128)
  7982  089D  0861               	movf	(floorf@u+1)^(0+128),w
  7983  089E  055B               	andwf	(floorf@m+1)^(0+128),w
  7984  089F  00D5               	movwf	(??_floorf^(0+128)+1)
  7985  08A0  0862               	movf	(floorf@u+2)^(0+128),w
  7986  08A1  055C               	andwf	(floorf@m+2)^(0+128),w
  7987  08A2  00D6               	movwf	(??_floorf^(0+128)+2)
  7988  08A3  0863               	movf	(floorf@u+3)^(0+128),w
  7989  08A4  055D               	andwf	(floorf@m+3)^(0+128),w
  7990  08A5  00D7               	movwf	(??_floorf^(0+128)+3)
  7991  08A6  0857               	movf	(??_floorf+3)^(0+128),w
  7992  08A7  0456               	iorwf	(??_floorf+2)^(0+128),w
  7993  08A8  0455               	iorwf	(??_floorf+1)^(0+128),w
  7994  08A9  0454               	iorwf	??_floorf^(0+128),w
  7995  08AA  1903               	btfsc	3,2
  7996  08AB  0008               	return
  7997  08AC  0860               	movf	floorf@u^(0+128),w
  7998  08AD  00D4               	movwf	??_floorf^(0+128)
  7999  08AE  0861               	movf	(floorf@u+1)^(0+128),w
  8000  08AF  00D5               	movwf	(??_floorf^(0+128)+1)
  8001  08B0  0862               	movf	(floorf@u+2)^(0+128),w
  8002  08B1  00D6               	movwf	(??_floorf^(0+128)+2)
  8003  08B2  0863               	movf	(floorf@u+3)^(0+128),w
  8004  08B3  00D7               	movwf	(??_floorf^(0+128)+3)
  8005  08B4  301F               	movlw	31
  8006  08B5                     u4875:
  8007  08B5  36D7               	lsrf	(??_floorf^(0+128)+3),f
  8008  08B6  0CD6               	rrf	(??_floorf^(0+128)+2),f
  8009  08B7  0CD5               	rrf	(??_floorf^(0+128)+1),f
  8010  08B8  0CD4               	rrf	??_floorf^(0+128),f
  8011  08B9  0B89               	decfsz	9,f
  8012  08BA  28B5               	goto	u4875
  8013  08BB  0854               	movf	??_floorf^(0+128),w
  8014  08BC  1903               	btfsc	3,2
  8015  08BD  28C6               	goto	l4422
  8016  08BE  085A               	movf	floorf@m^(0+128),w
  8017  08BF  07E0               	addwf	floorf@u^(0+128),f
  8018  08C0  085B               	movf	(floorf@m+1)^(0+128),w
  8019  08C1  3DE1               	addwfc	(floorf@u+1)^(0+128),f
  8020  08C2  085C               	movf	(floorf@m+2)^(0+128),w
  8021  08C3  3DE2               	addwfc	(floorf@u+2)^(0+128),f
  8022  08C4  085D               	movf	(floorf@m+3)^(0+128),w
  8023  08C5  3DE3               	addwfc	(floorf@u+3)^(0+128),f
  8024  08C6                     l4422:
  8025  08C6  095A               	comf	floorf@m^(0+128),w
  8026  08C7  00D4               	movwf	??_floorf^(0+128)
  8027  08C8  095B               	comf	(floorf@m+1)^(0+128),w
  8028  08C9  00D5               	movwf	(??_floorf^(0+128)+1)
  8029  08CA  095C               	comf	(floorf@m+2)^(0+128),w
  8030  08CB  00D6               	movwf	(??_floorf^(0+128)+2)
  8031  08CC  095D               	comf	(floorf@m+3)^(0+128),w
  8032  08CD  00D7               	movwf	(??_floorf^(0+128)+3)
  8033  08CE  0854               	movf	??_floorf^(0+128),w
  8034  08CF  05E0               	andwf	floorf@u^(0+128),f
  8035  08D0  0855               	movf	(??_floorf+1)^(0+128),w
  8036  08D1  05E1               	andwf	(floorf@u+1)^(0+128),f
  8037  08D2  0856               	movf	(??_floorf+2)^(0+128),w
  8038  08D3  05E2               	andwf	(floorf@u+2)^(0+128),f
  8039  08D4  0857               	movf	(??_floorf+3)^(0+128),w
  8040  08D5  05E3               	andwf	(floorf@u+3)^(0+128),f
  8041  08D6  290A               	goto	l1755
  8042  08D7                     l4424:
  8043  08D7  0860               	movf	floorf@u^(0+128),w
  8044  08D8  00D4               	movwf	??_floorf^(0+128)
  8045  08D9  0861               	movf	(floorf@u+1)^(0+128),w
  8046  08DA  00D5               	movwf	(??_floorf^(0+128)+1)
  8047  08DB  0862               	movf	(floorf@u+2)^(0+128),w
  8048  08DC  00D6               	movwf	(??_floorf^(0+128)+2)
  8049  08DD  0863               	movf	(floorf@u+3)^(0+128),w
  8050  08DE  00D7               	movwf	(??_floorf^(0+128)+3)
  8051  08DF  301F               	movlw	31
  8052  08E0                     u4895:
  8053  08E0  36D7               	lsrf	(??_floorf^(0+128)+3),f
  8054  08E1  0CD6               	rrf	(??_floorf^(0+128)+2),f
  8055  08E2  0CD5               	rrf	(??_floorf^(0+128)+1),f
  8056  08E3  0CD4               	rrf	??_floorf^(0+128),f
  8057  08E4  0B89               	decfsz	9,f
  8058  08E5  28E0               	goto	u4895
  8059  08E6  0854               	movf	??_floorf^(0+128),w
  8060  08E7  1D03               	btfss	3,2
  8061  08E8  28ED               	goto	l4428
  8062  08E9  3000               	movlw	0
  8063  08EA  00E3               	movwf	(floorf@u+3)^(0+128)
  8064  08EB  3000               	movlw	0
  8065  08EC  2905               	goto	L9
  8066  08ED                     l4428:
  8067  08ED  0860               	movf	floorf@u^(0+128),w
  8068  08EE  00D4               	movwf	??_floorf^(0+128)
  8069  08EF  0861               	movf	(floorf@u+1)^(0+128),w
  8070  08F0  00D5               	movwf	(??_floorf^(0+128)+1)
  8071  08F1  0862               	movf	(floorf@u+2)^(0+128),w
  8072  08F2  00D6               	movwf	(??_floorf^(0+128)+2)
  8073  08F3  0863               	movf	(floorf@u+3)^(0+128),w
  8074  08F4  00D7               	movwf	(??_floorf^(0+128)+3)
  8075  08F5  3001               	movlw	1
  8076  08F6                     u4915:
  8077  08F6  35D4               	lslf	??_floorf^(0+128),f
  8078  08F7  0DD5               	rlf	(??_floorf^(0+128)+1),f
  8079  08F8  0DD6               	rlf	(??_floorf^(0+128)+2),f
  8080  08F9  0DD7               	rlf	(??_floorf^(0+128)+3),f
  8081  08FA  0B89               	decfsz	9,f
  8082  08FB  28F6               	goto	u4915
  8083  08FC  0857               	movf	(??_floorf+3)^(0+128),w
  8084  08FD  0456               	iorwf	(??_floorf+2)^(0+128),w
  8085  08FE  0455               	iorwf	(??_floorf+1)^(0+128),w
  8086  08FF  0454               	iorwf	??_floorf^(0+128),w
  8087  0900  1903               	skipnz
  8088  0901  290A               	goto	l1755
  8089  0902  30BF               	movlw	191
  8090  0903  00E3               	movwf	(floorf@u+3)^(0+128)
  8091  0904  3080               	movlw	128
  8092  0905                     L9:
  8093  0905  00E2               	movwf	(floorf@u+2)^(0+128)
  8094  0906  3000               	movlw	0
  8095  0907  00E1               	movwf	(floorf@u+1)^(0+128)
  8096  0908  3000               	movlw	0
  8097  0909  00E0               	movwf	floorf@u^(0+128)
  8098  090A                     l1755:
  8099  090A  0863               	movf	(floorf@u+3)^(0+128),w
  8100  090B  00D3               	movwf	(?_floorf+3)^(0+128)
  8101  090C  0862               	movf	(floorf@u+2)^(0+128),w
  8102  090D  00D2               	movwf	(?_floorf+2)^(0+128)
  8103  090E  0861               	movf	(floorf@u+1)^(0+128),w
  8104  090F  00D1               	movwf	(?_floorf+1)^(0+128)
  8105  0910  0860               	movf	floorf@u^(0+128),w
  8106  0911  00D0               	movwf	?_floorf^(0+128)
  8107  0912  0008               	return
  8108  0913                     __end_of_floorf:
  8109                           
  8110                           	psect	text14
  8111  1112                     __ptext14:	
  8112 ;; *************** function ___fpclassifyf *****************
  8113 ;; Defined at:
  8114 ;;		line 4 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/__fpclassifyf.c"
  8115 ;; Parameters:    Size  Location     Type
  8116 ;;  x               4    0[COMMON] float 
  8117 ;; Auto vars:     Size  Location     Type
  8118 ;;  u               4    2[BANK0 ] struct .
  8119 ;;  e               2    0[BANK0 ] int 
  8120 ;; Return value:  Size  Location     Type
  8121 ;;                  2    0[COMMON] int 
  8122 ;; Registers used:
  8123 ;;		wreg, status,2, status,0
  8124 ;; Tracked objects:
  8125 ;;		On entry : 1F/2
  8126 ;;		On exit  : 1F/0
  8127 ;;		Unchanged: 0/0
  8128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8129 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8130 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8131 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8132 ;;      Totals:        10       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8133 ;;Total ram usage:       16 bytes
  8134 ;; Hardware stack levels used:    1
  8135 ;; Hardware stack levels required when called:    5
  8136 ;; This function calls:
  8137 ;;		Nothing
  8138 ;; This function is called by:
  8139 ;;		_efgtoa
  8140 ;; This function uses a non-reentrant model
  8141 ;;
  8142                           
  8143                           
  8144                           ;psect for function ___fpclassifyf
  8145  1112                     ___fpclassifyf:
  8146                           
  8147                           ;incstack = 0
  8148                           ; Regs used in ___fpclassifyf: [wreg+status,2+status,0]
  8149  1112  0023               	movlb	3	; select bank3
  8150  1113  0827               	movf	(___fpclassifyf@F465+3)^(0+384),w
  8151  1114  0020               	movlb	0	; select bank0
  8152  1115  00A5               	movwf	___fpclassifyf@u+3
  8153  1116  0023               	movlb	3	; select bank3
  8154  1117  0826               	movf	(___fpclassifyf@F465+2)^(0+384),w
  8155  1118  0020               	movlb	0	; select bank0
  8156  1119  00A4               	movwf	___fpclassifyf@u+2
  8157  111A  0023               	movlb	3	; select bank3
  8158  111B  0825               	movf	(___fpclassifyf@F465+1)^(0+384),w
  8159  111C  0020               	movlb	0	; select bank0
  8160  111D  00A3               	movwf	___fpclassifyf@u+1
  8161  111E  0023               	movlb	3	; select bank3
  8162  111F  0824               	movf	___fpclassifyf@F465^(0+384),w
  8163  1120  0020               	movlb	0	; select bank0
  8164  1121  00A2               	movwf	___fpclassifyf@u
  8165  1122  0873               	movf	___fpclassifyf@x+3,w
  8166  1123  00A5               	movwf	___fpclassifyf@u+3
  8167  1124  0872               	movf	___fpclassifyf@x+2,w
  8168  1125  00A4               	movwf	___fpclassifyf@u+2
  8169  1126  0871               	movf	___fpclassifyf@x+1,w
  8170  1127  00A3               	movwf	___fpclassifyf@u+1
  8171  1128  0870               	movf	___fpclassifyf@x,w
  8172  1129  00A2               	movwf	___fpclassifyf@u
  8173  112A  0822               	movf	___fpclassifyf@u,w
  8174  112B  00F4               	movwf	??___fpclassifyf
  8175  112C  0823               	movf	___fpclassifyf@u+1,w
  8176  112D  00F5               	movwf	??___fpclassifyf+1
  8177  112E  0824               	movf	___fpclassifyf@u+2,w
  8178  112F  00F6               	movwf	??___fpclassifyf+2
  8179  1130  0825               	movf	___fpclassifyf@u+3,w
  8180  1131  00F7               	movwf	??___fpclassifyf+3
  8181  1132  3017               	movlw	23
  8182  1133                     u4705:
  8183  1133  36F7               	lsrf	??___fpclassifyf+3,f
  8184  1134  0CF6               	rrf	??___fpclassifyf+2,f
  8185  1135  0CF5               	rrf	??___fpclassifyf+1,f
  8186  1136  0CF4               	rrf	??___fpclassifyf,f
  8187  1137  0B89               	decfsz	9,f
  8188  1138  2933               	goto	u4705
  8189  1139  30FF               	movlw	255
  8190  113A  0574               	andwf	??___fpclassifyf,w
  8191  113B  00A0               	movwf	___fpclassifyf@e
  8192  113C  3000               	movlw	0
  8193  113D  0575               	andwf	??___fpclassifyf+1,w
  8194  113E  00A1               	movwf	___fpclassifyf@e+1
  8195  113F  0820               	movf	___fpclassifyf@e,w
  8196  1140  0421               	iorwf	___fpclassifyf@e+1,w
  8197  1141  1D03               	btfss	3,2
  8198  1142  2962               	goto	l4380
  8199  1143  0822               	movf	___fpclassifyf@u,w
  8200  1144  00F4               	movwf	??___fpclassifyf
  8201  1145  0823               	movf	___fpclassifyf@u+1,w
  8202  1146  00F5               	movwf	??___fpclassifyf+1
  8203  1147  0824               	movf	___fpclassifyf@u+2,w
  8204  1148  00F6               	movwf	??___fpclassifyf+2
  8205  1149  0825               	movf	___fpclassifyf@u+3,w
  8206  114A  00F7               	movwf	??___fpclassifyf+3
  8207  114B  3001               	movlw	1
  8208  114C                     u4725:
  8209  114C  35F4               	lslf	??___fpclassifyf,f
  8210  114D  0DF5               	rlf	??___fpclassifyf+1,f
  8211  114E  0DF6               	rlf	??___fpclassifyf+2,f
  8212  114F  0DF7               	rlf	??___fpclassifyf+3,f
  8213  1150  0B89               	decfsz	9,f
  8214  1151  294C               	goto	u4725
  8215  1152  0877               	movf	??___fpclassifyf+3,w
  8216  1153  0476               	iorwf	??___fpclassifyf+2,w
  8217  1154  0475               	iorwf	??___fpclassifyf+1,w
  8218  1155  0474               	iorwf	??___fpclassifyf,w
  8219  1156  1D03               	skipz
  8220  1157  295D               	goto	l4376
  8221  1158  3002               	movlw	2
  8222  1159  00F0               	movwf	?___fpclassifyf
  8223  115A  3000               	movlw	0
  8224  115B  00F1               	movwf	?___fpclassifyf+1
  8225  115C  0008               	return
  8226  115D                     l4376:
  8227  115D  3003               	movlw	3
  8228  115E  00F0               	movwf	?___fpclassifyf
  8229  115F  3000               	movlw	0
  8230  1160  00F1               	movwf	?___fpclassifyf+1
  8231  1161  0008               	return
  8232  1162                     l4380:
  8233  1162  0A20               	incf	___fpclassifyf@e,w
  8234  1163  0421               	iorwf	___fpclassifyf@e+1,w
  8235  1164  1D03               	btfss	3,2
  8236  1165  2985               	goto	l4386
  8237  1166  0822               	movf	___fpclassifyf@u,w
  8238  1167  00F4               	movwf	??___fpclassifyf
  8239  1168  0823               	movf	___fpclassifyf@u+1,w
  8240  1169  00F5               	movwf	??___fpclassifyf+1
  8241  116A  0824               	movf	___fpclassifyf@u+2,w
  8242  116B  00F6               	movwf	??___fpclassifyf+2
  8243  116C  0825               	movf	___fpclassifyf@u+3,w
  8244  116D  00F7               	movwf	??___fpclassifyf+3
  8245  116E  3009               	movlw	9
  8246  116F                     u4755:
  8247  116F  35F4               	lslf	??___fpclassifyf,f
  8248  1170  0DF5               	rlf	??___fpclassifyf+1,f
  8249  1171  0DF6               	rlf	??___fpclassifyf+2,f
  8250  1172  0DF7               	rlf	??___fpclassifyf+3,f
  8251  1173  0B89               	decfsz	9,f
  8252  1174  296F               	goto	u4755
  8253  1175  0877               	movf	??___fpclassifyf+3,w
  8254  1176  0476               	iorwf	??___fpclassifyf+2,w
  8255  1177  0475               	iorwf	??___fpclassifyf+1,w
  8256  1178  0474               	iorwf	??___fpclassifyf,w
  8257  1179  1D03               	btfss	3,2
  8258  117A  297D               	goto	u4760
  8259  117B  3001               	movlw	1
  8260  117C  297E               	goto	u4770
  8261  117D                     u4760:
  8262  117D  3000               	movlw	0
  8263  117E                     u4770:
  8264  117E  00F8               	movwf	??___fpclassifyf+4
  8265  117F  01F9               	clrf	??___fpclassifyf+5
  8266  1180  0878               	movf	??___fpclassifyf+4,w
  8267  1181  00F0               	movwf	?___fpclassifyf
  8268  1182  0879               	movf	??___fpclassifyf+5,w
  8269  1183  00F1               	movwf	?___fpclassifyf+1
  8270  1184  0008               	return
  8271  1185                     l4386:
  8272  1185  3004               	movlw	4
  8273  1186  00F0               	movwf	?___fpclassifyf
  8274  1187  3000               	movlw	0
  8275  1188  00F1               	movwf	?___fpclassifyf+1
  8276  1189  0008               	return
  8277  118A                     __end_of___fpclassifyf:
  8278                           
  8279                           	psect	text15
  8280  1B1E                     __ptext15:	
  8281 ;; *************** function ___flneg *****************
  8282 ;; Defined at:
  8283 ;;		line 15 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/flneg.c"
  8284 ;; Parameters:    Size  Location     Type
  8285 ;;  f1              4    0[COMMON] int 
  8286 ;; Auto vars:     Size  Location     Type
  8287 ;;		None
  8288 ;; Return value:  Size  Location     Type
  8289 ;;                  4    0[COMMON] int 
  8290 ;; Registers used:
  8291 ;;		wreg
  8292 ;; Tracked objects:
  8293 ;;		On entry : 1F/2
  8294 ;;		On exit  : 1F/2
  8295 ;;		Unchanged: 1F/0
  8296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8297 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8300 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8301 ;;Total ram usage:        4 bytes
  8302 ;; Hardware stack levels used:    1
  8303 ;; Hardware stack levels required when called:    5
  8304 ;; This function calls:
  8305 ;;		Nothing
  8306 ;; This function is called by:
  8307 ;;		_efgtoa
  8308 ;; This function uses a non-reentrant model
  8309 ;;
  8310                           
  8311                           
  8312                           ;psect for function ___flneg
  8313  1B1E                     ___flneg:
  8314                           
  8315                           ;incstack = 0
  8316                           ; Regs used in ___flneg: [wreg]
  8317  1B1E  0873               	movf	___flneg@f1+3,w
  8318  1B1F  0472               	iorwf	___flneg@f1+2,w
  8319  1B20  0471               	iorwf	___flneg@f1+1,w
  8320  1B21  0470               	iorwf	___flneg@f1,w
  8321  1B22  1903               	skipnz
  8322  1B23  0008               	return
  8323  1B24  3080               	movlw	128
  8324  1B25  06F3               	xorwf	___flneg@f1+3,f
  8325  1B26  0008               	return
  8326  1B27                     __end_of___flneg:
  8327                           
  8328                           	psect	text16
  8329  1E7A                     __ptext16:	
  8330 ;; *************** function ___fleq *****************
  8331 ;; Defined at:
  8332 ;;		line 4 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/fleq.c"
  8333 ;; Parameters:    Size  Location     Type
  8334 ;;  ff1             4    0[COMMON] int 
  8335 ;;  ff2             4    4[COMMON] int 
  8336 ;; Auto vars:     Size  Location     Type
  8337 ;;		None
  8338 ;; Return value:  Size  Location     Type
  8339 ;;		None               void
  8340 ;; Registers used:
  8341 ;;		wreg, status,2, status,0
  8342 ;; Tracked objects:
  8343 ;;		On entry : 1F/2
  8344 ;;		On exit  : 1F/2
  8345 ;;		Unchanged: 1F/0
  8346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8347 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8349 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8350 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8351 ;;Total ram usage:       12 bytes
  8352 ;; Hardware stack levels used:    1
  8353 ;; Hardware stack levels required when called:    5
  8354 ;; This function calls:
  8355 ;;		Nothing
  8356 ;; This function is called by:
  8357 ;;		_efgtoa
  8358 ;; This function uses a non-reentrant model
  8359 ;;
  8360                           
  8361                           
  8362                           ;psect for function ___fleq
  8363  1E7A                     ___fleq:
  8364                           
  8365                           ;incstack = 0
  8366                           ; Regs used in ___fleq: [wreg+status,2+status,0]
  8367  1E7A  3000               	movlw	0
  8368  1E7B  0570               	andwf	___fleq@ff1,w
  8369  1E7C  00F8               	movwf	??___fleq
  8370  1E7D  3000               	movlw	0
  8371  1E7E  0571               	andwf	___fleq@ff1+1,w
  8372  1E7F  00F9               	movwf	??___fleq+1
  8373  1E80  3080               	movlw	128
  8374  1E81  0572               	andwf	___fleq@ff1+2,w
  8375  1E82  00FA               	movwf	??___fleq+2
  8376  1E83  307F               	movlw	127
  8377  1E84  0573               	andwf	___fleq@ff1+3,w
  8378  1E85  00FB               	movwf	??___fleq+3
  8379  1E86  087B               	movf	??___fleq+3,w
  8380  1E87  047A               	iorwf	??___fleq+2,w
  8381  1E88  0479               	iorwf	??___fleq+1,w
  8382  1E89  0478               	iorwf	??___fleq,w
  8383  1E8A  1D03               	skipz
  8384  1E8B  2E94               	goto	l1271
  8385  1E8C  3000               	movlw	0
  8386  1E8D  00F3               	movwf	___fleq@ff1+3
  8387  1E8E  3000               	movlw	0
  8388  1E8F  00F2               	movwf	___fleq@ff1+2
  8389  1E90  3000               	movlw	0
  8390  1E91  00F1               	movwf	___fleq@ff1+1
  8391  1E92  3000               	movlw	0
  8392  1E93  00F0               	movwf	___fleq@ff1
  8393  1E94                     l1271:
  8394  1E94  3000               	movlw	0
  8395  1E95  0574               	andwf	___fleq@ff2,w
  8396  1E96  00F8               	movwf	??___fleq
  8397  1E97  3000               	movlw	0
  8398  1E98  0575               	andwf	___fleq@ff2+1,w
  8399  1E99  00F9               	movwf	??___fleq+1
  8400  1E9A  3080               	movlw	128
  8401  1E9B  0576               	andwf	___fleq@ff2+2,w
  8402  1E9C  00FA               	movwf	??___fleq+2
  8403  1E9D  307F               	movlw	127
  8404  1E9E  0577               	andwf	___fleq@ff2+3,w
  8405  1E9F  00FB               	movwf	??___fleq+3
  8406  1EA0  087B               	movf	??___fleq+3,w
  8407  1EA1  047A               	iorwf	??___fleq+2,w
  8408  1EA2  0479               	iorwf	??___fleq+1,w
  8409  1EA3  0478               	iorwf	??___fleq,w
  8410  1EA4  1D03               	skipz
  8411  1EA5  2EAE               	goto	l1272
  8412  1EA6  3000               	movlw	0
  8413  1EA7  00F7               	movwf	___fleq@ff2+3
  8414  1EA8  3000               	movlw	0
  8415  1EA9  00F6               	movwf	___fleq@ff2+2
  8416  1EAA  3000               	movlw	0
  8417  1EAB  00F5               	movwf	___fleq@ff2+1
  8418  1EAC  3000               	movlw	0
  8419  1EAD  00F4               	movwf	___fleq@ff2
  8420  1EAE                     l1272:
  8421  1EAE  0877               	movf	___fleq@ff2+3,w
  8422  1EAF  0673               	xorwf	___fleq@ff1+3,w
  8423  1EB0  1D03               	skipz
  8424  1EB1  2EBC               	goto	u3955
  8425  1EB2  0876               	movf	___fleq@ff2+2,w
  8426  1EB3  0672               	xorwf	___fleq@ff1+2,w
  8427  1EB4  1D03               	skipz
  8428  1EB5  2EBC               	goto	u3955
  8429  1EB6  0875               	movf	___fleq@ff2+1,w
  8430  1EB7  0671               	xorwf	___fleq@ff1+1,w
  8431  1EB8  1D03               	skipz
  8432  1EB9  2EBC               	goto	u3955
  8433  1EBA  0874               	movf	___fleq@ff2,w
  8434  1EBB  0670               	xorwf	___fleq@ff1,w
  8435  1EBC                     u3955:
  8436  1EBC  1903               	skipnz
  8437  1EBD  2EC0               	goto	l3990
  8438  1EBE  1003               	clrc
  8439  1EBF  0008               	return
  8440  1EC0                     l3990:
  8441  1EC0  1403               	setc
  8442  1EC1  0008               	return
  8443  1EC2                     __end_of___fleq:
  8444                           
  8445                           	psect	text17
  8446  1E35                     __ptext17:	
  8447 ;; *************** function ___awmod *****************
  8448 ;; Defined at:
  8449 ;;		line 5 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/awmod.c"
  8450 ;; Parameters:    Size  Location     Type
  8451 ;;  divisor         2    0[COMMON] int 
  8452 ;;  dividend        2    2[COMMON] int 
  8453 ;; Auto vars:     Size  Location     Type
  8454 ;;  sign            1    6[COMMON] unsigned char 
  8455 ;;  counter         1    5[COMMON] unsigned char 
  8456 ;; Return value:  Size  Location     Type
  8457 ;;                  2    0[COMMON] int 
  8458 ;; Registers used:
  8459 ;;		wreg, status,2, status,0
  8460 ;; Tracked objects:
  8461 ;;		On entry : 1F/2
  8462 ;;		On exit  : 1F/2
  8463 ;;		Unchanged: 1F/0
  8464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8465 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8466 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8467 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8468 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8469 ;;Total ram usage:        7 bytes
  8470 ;; Hardware stack levels used:    1
  8471 ;; Hardware stack levels required when called:    5
  8472 ;; This function calls:
  8473 ;;		Nothing
  8474 ;; This function is called by:
  8475 ;;		_efgtoa
  8476 ;; This function uses a non-reentrant model
  8477 ;;
  8478                           
  8479                           
  8480                           ;psect for function ___awmod
  8481  1E35                     ___awmod:
  8482                           
  8483                           ;incstack = 0
  8484                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  8485  1E35  01F6               	clrf	___awmod@sign
  8486  1E36  1FF3               	btfss	___awmod@dividend+1,7
  8487  1E37  2E3F               	goto	l3952
  8488  1E38  09F2               	comf	___awmod@dividend,f
  8489  1E39  09F3               	comf	___awmod@dividend+1,f
  8490  1E3A  0AF2               	incf	___awmod@dividend,f
  8491  1E3B  1903               	skipnz
  8492  1E3C  0AF3               	incf	___awmod@dividend+1,f
  8493  1E3D  01F6               	clrf	___awmod@sign
  8494  1E3E  0AF6               	incf	___awmod@sign,f
  8495  1E3F                     l3952:
  8496  1E3F  1FF1               	btfss	___awmod@divisor+1,7
  8497  1E40  2E46               	goto	l3956
  8498  1E41  09F0               	comf	___awmod@divisor,f
  8499  1E42  09F1               	comf	___awmod@divisor+1,f
  8500  1E43  0AF0               	incf	___awmod@divisor,f
  8501  1E44  1903               	skipnz
  8502  1E45  0AF1               	incf	___awmod@divisor+1,f
  8503  1E46                     l3956:
  8504  1E46  0870               	movf	___awmod@divisor,w
  8505  1E47  0471               	iorwf	___awmod@divisor+1,w
  8506  1E48  1903               	btfsc	3,2
  8507  1E49  2E6D               	goto	l3974
  8508  1E4A  01F5               	clrf	___awmod@counter
  8509  1E4B  0AF5               	incf	___awmod@counter,f
  8510  1E4C                     l3964:
  8511  1E4C  1BF1               	btfsc	___awmod@divisor+1,7
  8512  1E4D  2E58               	goto	l3966
  8513  1E4E  3001               	movlw	1
  8514  1E4F                     u3875:
  8515  1E4F  35F0               	lslf	___awmod@divisor,f
  8516  1E50  0DF1               	rlf	___awmod@divisor+1,f
  8517  1E51  0B89               	decfsz	9,f
  8518  1E52  2E4F               	goto	u3875
  8519  1E53  3001               	movlw	1
  8520  1E54  00F4               	movwf	??___awmod
  8521  1E55  0874               	movf	??___awmod,w
  8522  1E56  07F5               	addwf	___awmod@counter,f
  8523  1E57  2E4C               	goto	l3964
  8524  1E58                     l3966:
  8525  1E58  0871               	movf	___awmod@divisor+1,w
  8526  1E59  0273               	subwf	___awmod@dividend+1,w
  8527  1E5A  1D03               	skipz
  8528  1E5B  2E5E               	goto	u3895
  8529  1E5C  0870               	movf	___awmod@divisor,w
  8530  1E5D  0272               	subwf	___awmod@dividend,w
  8531  1E5E                     u3895:
  8532  1E5E  1C03               	skipc
  8533  1E5F  2E64               	goto	l3970
  8534  1E60  0870               	movf	___awmod@divisor,w
  8535  1E61  02F2               	subwf	___awmod@dividend,f
  8536  1E62  0871               	movf	___awmod@divisor+1,w
  8537  1E63  3BF3               	subwfb	___awmod@dividend+1,f
  8538  1E64                     l3970:
  8539  1E64  3001               	movlw	1
  8540  1E65                     u3905:
  8541  1E65  36F1               	lsrf	___awmod@divisor+1,f
  8542  1E66  0CF0               	rrf	___awmod@divisor,f
  8543  1E67  0B89               	decfsz	9,f
  8544  1E68  2E65               	goto	u3905
  8545  1E69  3001               	movlw	1
  8546  1E6A  02F5               	subwf	___awmod@counter,f
  8547  1E6B  1D03               	btfss	3,2
  8548  1E6C  2E58               	goto	l3966
  8549  1E6D                     l3974:
  8550  1E6D  0876               	movf	___awmod@sign,w
  8551  1E6E  1903               	btfsc	3,2
  8552  1E6F  2E75               	goto	l3978
  8553  1E70  09F2               	comf	___awmod@dividend,f
  8554  1E71  09F3               	comf	___awmod@dividend+1,f
  8555  1E72  0AF2               	incf	___awmod@dividend,f
  8556  1E73  1903               	skipnz
  8557  1E74  0AF3               	incf	___awmod@dividend+1,f
  8558  1E75                     l3978:
  8559  1E75  0873               	movf	___awmod@dividend+1,w
  8560  1E76  00F1               	movwf	?___awmod+1
  8561  1E77  0872               	movf	___awmod@dividend,w
  8562  1E78  00F0               	movwf	?___awmod
  8563  1E79  0008               	return
  8564  1E7A                     __end_of___awmod:
  8565                           
  8566                           	psect	text18
  8567  1F5E                     __ptext18:	
  8568 ;; *************** function ___awdiv *****************
  8569 ;; Defined at:
  8570 ;;		line 5 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/awdiv.c"
  8571 ;; Parameters:    Size  Location     Type
  8572 ;;  divisor         2    0[COMMON] int 
  8573 ;;  dividend        2    2[COMMON] int 
  8574 ;; Auto vars:     Size  Location     Type
  8575 ;;  quotient        2    7[COMMON] int 
  8576 ;;  sign            1    6[COMMON] unsigned char 
  8577 ;;  counter         1    5[COMMON] unsigned char 
  8578 ;; Return value:  Size  Location     Type
  8579 ;;                  2    0[COMMON] int 
  8580 ;; Registers used:
  8581 ;;		wreg, status,2, status,0
  8582 ;; Tracked objects:
  8583 ;;		On entry : 1F/2
  8584 ;;		On exit  : 1F/2
  8585 ;;		Unchanged: 1F/0
  8586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8587 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8588 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8589 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8590 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8591 ;;Total ram usage:        9 bytes
  8592 ;; Hardware stack levels used:    1
  8593 ;; Hardware stack levels required when called:    5
  8594 ;; This function calls:
  8595 ;;		Nothing
  8596 ;; This function is called by:
  8597 ;;		_efgtoa
  8598 ;; This function uses a non-reentrant model
  8599 ;;
  8600                           
  8601                           
  8602                           ;psect for function ___awdiv
  8603  1F5E                     ___awdiv:
  8604                           
  8605                           ;incstack = 0
  8606                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  8607  1F5E  01F6               	clrf	___awdiv@sign
  8608  1F5F  1FF1               	btfss	___awdiv@divisor+1,7
  8609  1F60  2F68               	goto	l3908
  8610  1F61  09F0               	comf	___awdiv@divisor,f
  8611  1F62  09F1               	comf	___awdiv@divisor+1,f
  8612  1F63  0AF0               	incf	___awdiv@divisor,f
  8613  1F64  1903               	skipnz
  8614  1F65  0AF1               	incf	___awdiv@divisor+1,f
  8615  1F66  01F6               	clrf	___awdiv@sign
  8616  1F67  0AF6               	incf	___awdiv@sign,f
  8617  1F68                     l3908:
  8618  1F68  1FF3               	btfss	___awdiv@dividend+1,7
  8619  1F69  2F73               	goto	l3914
  8620  1F6A  09F2               	comf	___awdiv@dividend,f
  8621  1F6B  09F3               	comf	___awdiv@dividend+1,f
  8622  1F6C  0AF2               	incf	___awdiv@dividend,f
  8623  1F6D  1903               	skipnz
  8624  1F6E  0AF3               	incf	___awdiv@dividend+1,f
  8625  1F6F  3001               	movlw	1
  8626  1F70  00F4               	movwf	??___awdiv
  8627  1F71  0874               	movf	??___awdiv,w
  8628  1F72  06F6               	xorwf	___awdiv@sign,f
  8629  1F73                     l3914:
  8630  1F73  01F7               	clrf	___awdiv@quotient
  8631  1F74  01F8               	clrf	___awdiv@quotient+1
  8632  1F75  0870               	movf	___awdiv@divisor,w
  8633  1F76  0471               	iorwf	___awdiv@divisor+1,w
  8634  1F77  1903               	btfsc	3,2
  8635  1F78  2FA2               	goto	l3936
  8636  1F79  01F5               	clrf	___awdiv@counter
  8637  1F7A  0AF5               	incf	___awdiv@counter,f
  8638  1F7B                     l3924:
  8639  1F7B  1BF1               	btfsc	___awdiv@divisor+1,7
  8640  1F7C  2F87               	goto	l3926
  8641  1F7D  3001               	movlw	1
  8642  1F7E                     u3775:
  8643  1F7E  35F0               	lslf	___awdiv@divisor,f
  8644  1F7F  0DF1               	rlf	___awdiv@divisor+1,f
  8645  1F80  0B89               	decfsz	9,f
  8646  1F81  2F7E               	goto	u3775
  8647  1F82  3001               	movlw	1
  8648  1F83  00F4               	movwf	??___awdiv
  8649  1F84  0874               	movf	??___awdiv,w
  8650  1F85  07F5               	addwf	___awdiv@counter,f
  8651  1F86  2F7B               	goto	l3924
  8652  1F87                     l3926:
  8653  1F87  3001               	movlw	1
  8654  1F88                     u3795:
  8655  1F88  35F7               	lslf	___awdiv@quotient,f
  8656  1F89  0DF8               	rlf	___awdiv@quotient+1,f
  8657  1F8A  0B89               	decfsz	9,f
  8658  1F8B  2F88               	goto	u3795
  8659  1F8C  0871               	movf	___awdiv@divisor+1,w
  8660  1F8D  0273               	subwf	___awdiv@dividend+1,w
  8661  1F8E  1D03               	skipz
  8662  1F8F  2F92               	goto	u3805
  8663  1F90  0870               	movf	___awdiv@divisor,w
  8664  1F91  0272               	subwf	___awdiv@dividend,w
  8665  1F92                     u3805:
  8666  1F92  1C03               	skipc
  8667  1F93  2F99               	goto	l3932
  8668  1F94  0870               	movf	___awdiv@divisor,w
  8669  1F95  02F2               	subwf	___awdiv@dividend,f
  8670  1F96  0871               	movf	___awdiv@divisor+1,w
  8671  1F97  3BF3               	subwfb	___awdiv@dividend+1,f
  8672  1F98  1477               	bsf	___awdiv@quotient,0
  8673  1F99                     l3932:
  8674  1F99  3001               	movlw	1
  8675  1F9A                     u3815:
  8676  1F9A  36F1               	lsrf	___awdiv@divisor+1,f
  8677  1F9B  0CF0               	rrf	___awdiv@divisor,f
  8678  1F9C  0B89               	decfsz	9,f
  8679  1F9D  2F9A               	goto	u3815
  8680  1F9E  3001               	movlw	1
  8681  1F9F  02F5               	subwf	___awdiv@counter,f
  8682  1FA0  1D03               	btfss	3,2
  8683  1FA1  2F87               	goto	l3926
  8684  1FA2                     l3936:
  8685  1FA2  0876               	movf	___awdiv@sign,w
  8686  1FA3  1903               	btfsc	3,2
  8687  1FA4  2FAA               	goto	l3940
  8688  1FA5  09F7               	comf	___awdiv@quotient,f
  8689  1FA6  09F8               	comf	___awdiv@quotient+1,f
  8690  1FA7  0AF7               	incf	___awdiv@quotient,f
  8691  1FA8  1903               	skipnz
  8692  1FA9  0AF8               	incf	___awdiv@quotient+1,f
  8693  1FAA                     l3940:
  8694  1FAA  0878               	movf	___awdiv@quotient+1,w
  8695  1FAB  00F1               	movwf	?___awdiv+1
  8696  1FAC  0877               	movf	___awdiv@quotient,w
  8697  1FAD  00F0               	movwf	?___awdiv
  8698  1FAE  0008               	return
  8699  1FAF                     __end_of___awdiv:
  8700                           
  8701                           	psect	text19
  8702  1D91                     __ptext19:	
  8703 ;; *************** function _TX_Whole_String *****************
  8704 ;; Defined at:
  8705 ;;		line 164 in file "main.c"
  8706 ;; Parameters:    Size  Location     Type
  8707 ;;  input_string    1    wreg     PTR unsigned char 
  8708 ;;		 -> Buff_g(20), 
  8709 ;; Auto vars:     Size  Location     Type
  8710 ;;  input_string    1    9[COMMON] PTR unsigned char 
  8711 ;;		 -> Buff_g(20), 
  8712 ;;  i               1   10[COMMON] unsigned char 
  8713 ;;  size_of_stri    2    7[COMMON] unsigned short 
  8714 ;; Return value:  Size  Location     Type
  8715 ;;                  1    wreg      void 
  8716 ;; Registers used:
  8717 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8718 ;; Tracked objects:
  8719 ;;		On entry : 1F/2
  8720 ;;		On exit  : 0/0
  8721 ;;		Unchanged: 0/0
  8722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8724 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8725 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8726 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8727 ;;Total ram usage:        6 bytes
  8728 ;; Hardware stack levels used:    1
  8729 ;; Hardware stack levels required when called:    7
  8730 ;; This function calls:
  8731 ;;		_TX_Command
  8732 ;;		_strlen
  8733 ;; This function is called by:
  8734 ;;		_main
  8735 ;; This function uses a non-reentrant model
  8736 ;;
  8737                           
  8738                           
  8739                           ;psect for function _TX_Whole_String
  8740  1D91                     _TX_Whole_String:
  8741                           
  8742                           ;incstack = 0
  8743                           ; Regs used in _TX_Whole_String: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8744                           ;TX_Whole_String@input_string stored from wreg
  8745  1D91  00F9               	movwf	TX_Whole_String@input_string
  8746                           
  8747                           ;main.c: 166:     uint16_t size_of_string = strlen(input_string);
  8748  1D92  0879               	movf	TX_Whole_String@input_string,w
  8749  1D93  319C  242F  319D   	fcall	_strlen
  8750  1D96  0871               	movf	?_strlen+1,w
  8751  1D97  00F8               	movwf	TX_Whole_String@size_of_string+1
  8752  1D98  0870               	movf	?_strlen,w
  8753  1D99  00F7               	movwf	TX_Whole_String@size_of_string
  8754                           
  8755                           ;main.c: 168:     for (uint8_t i = 0; i < size_of_string; i++){
  8756  1D9A  01FA               	clrf	TX_Whole_String@i
  8757  1D9B                     l5296:
  8758  1D9B  087A               	movf	TX_Whole_String@i,w
  8759  1D9C  00F5               	movwf	??_TX_Whole_String
  8760  1D9D  01F6               	clrf	??_TX_Whole_String+1
  8761  1D9E  0878               	movf	TX_Whole_String@size_of_string+1,w
  8762  1D9F  0276               	subwf	??_TX_Whole_String+1,w
  8763  1DA0  1D03               	skipz
  8764  1DA1  2DA4               	goto	u6225
  8765  1DA2  0877               	movf	TX_Whole_String@size_of_string,w
  8766  1DA3  0275               	subwf	??_TX_Whole_String,w
  8767  1DA4                     u6225:
  8768  1DA4  1803               	btfsc	3,0
  8769  1DA5  0008               	return
  8770                           
  8771                           ;main.c: 170:         TX_Command(input_string[i]);
  8772  1DA6  087A               	movf	TX_Whole_String@i,w
  8773  1DA7  0779               	addwf	TX_Whole_String@input_string,w
  8774  1DA8  00F5               	movwf	??_TX_Whole_String
  8775  1DA9  0875               	movf	??_TX_Whole_String,w
  8776  1DAA  0086               	movwf	6
  8777  1DAB  3002               	movlw	2	; select bank4/5
  8778  1DAC  0087               	movwf	7
  8779  1DAD  0801               	movf	1,w
  8780  1DAE  319B  233C  319D   	fcall	_TX_Command
  8781                           
  8782                           ;main.c: 171:         _delay((unsigned long)((5)*(8000000/4000.0)));
  8783  1DB1  300D               	movlw	13
  8784  1DB2  00F5               	movwf	??_TX_Whole_String
  8785  1DB3  30FC               	movlw	252
  8786  1DB4                     u6297:
  8787  1DB4  0B89               	decfsz	9,f
  8788  1DB5  2DB4               	goto	u6297
  8789  1DB6  0BF5               	decfsz	??_TX_Whole_String,f
  8790  1DB7  2DB4               	goto	u6297
  8791                           
  8792                           ;main.c: 173:     }
  8793  1DB8  3001               	movlw	1
  8794  1DB9  00F5               	movwf	??_TX_Whole_String
  8795  1DBA  0875               	movf	??_TX_Whole_String,w
  8796  1DBB  07FA               	addwf	TX_Whole_String@i,f
  8797  1DBC  2D9B               	goto	l5296
  8798  1DBD                     __end_of_TX_Whole_String:
  8799                           
  8800                           	psect	text20
  8801  1C2F                     __ptext20:	
  8802 ;; *************** function _strlen *****************
  8803 ;; Defined at:
  8804 ;;		line 5 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/strlen.c"
  8805 ;; Parameters:    Size  Location     Type
  8806 ;;  s               1    wreg     PTR const unsigned char 
  8807 ;;		 -> dbuf(80), Buff_g(20), 
  8808 ;; Auto vars:     Size  Location     Type
  8809 ;;  s               1    4[COMMON] PTR const unsigned char 
  8810 ;;		 -> dbuf(80), Buff_g(20), 
  8811 ;;  a               1    3[COMMON] PTR const unsigned char 
  8812 ;;		 -> dbuf(80), Buff_g(20), 
  8813 ;; Return value:  Size  Location     Type
  8814 ;;                  2    0[COMMON] unsigned int 
  8815 ;; Registers used:
  8816 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8817 ;; Tracked objects:
  8818 ;;		On entry : 1D/0
  8819 ;;		On exit  : 1D/0
  8820 ;;		Unchanged: 1D/0
  8821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8822 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8823 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8824 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8825 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8826 ;;Total ram usage:        5 bytes
  8827 ;; Hardware stack levels used:    1
  8828 ;; Hardware stack levels required when called:    5
  8829 ;; This function calls:
  8830 ;;		Nothing
  8831 ;; This function is called by:
  8832 ;;		_TX_Whole_String
  8833 ;;		_pad
  8834 ;; This function uses a non-reentrant model
  8835 ;;
  8836                           
  8837                           
  8838                           ;psect for function _strlen
  8839  1C2F                     _strlen:
  8840                           
  8841                           ;incstack = 0
  8842                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  8843                           ;strlen@s stored from wreg
  8844  1C2F  00F4               	movwf	strlen@s
  8845  1C30  0874               	movf	strlen@s,w
  8846  1C31  00F2               	movwf	??_strlen
  8847  1C32  0872               	movf	??_strlen,w
  8848  1C33  00F3               	movwf	strlen@a
  8849  1C34                     l3640:
  8850  1C34  0874               	movf	strlen@s,w
  8851  1C35  0086               	movwf	6
  8852  1C36  3002               	movlw	2	; select bank4/5
  8853  1C37  0087               	movwf	7
  8854  1C38  0801               	movf	1,w
  8855  1C39  1903               	btfsc	3,2
  8856  1C3A  2C40               	goto	l3642
  8857  1C3B  3001               	movlw	1
  8858  1C3C  00F2               	movwf	??_strlen
  8859  1C3D  0872               	movf	??_strlen,w
  8860  1C3E  07F4               	addwf	strlen@s,f
  8861  1C3F  2C34               	goto	l3640
  8862  1C40                     l3642:
  8863  1C40  0873               	movf	strlen@a,w
  8864  1C41  0274               	subwf	strlen@s,w
  8865  1C42  00F0               	movwf	?_strlen
  8866  1C43  01F1               	clrf	?_strlen+1
  8867  1C44  1BF0               	btfsc	?_strlen,7
  8868  1C45  03F1               	decf	?_strlen+1,f
  8869  1C46  0008               	return
  8870  1C47                     __end_of_strlen:
  8871                           
  8872                           	psect	text21
  8873  1B3C                     __ptext21:	
  8874 ;; *************** function _TX_Command *****************
  8875 ;; Defined at:
  8876 ;;		line 155 in file "main.c"
  8877 ;; Parameters:    Size  Location     Type
  8878 ;;  txData          1    wreg     unsigned char 
  8879 ;; Auto vars:     Size  Location     Type
  8880 ;;  txData          1    1[COMMON] unsigned char 
  8881 ;; Return value:  Size  Location     Type
  8882 ;;                  1    wreg      void 
  8883 ;; Registers used:
  8884 ;;		wreg, status,2, status,0, pclath, cstack
  8885 ;; Tracked objects:
  8886 ;;		On entry : 0/2
  8887 ;;		On exit  : 1C/0
  8888 ;;		Unchanged: 0/0
  8889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8891 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8893 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8894 ;;Total ram usage:        1 bytes
  8895 ;; Hardware stack levels used:    1
  8896 ;; Hardware stack levels required when called:    6
  8897 ;; This function calls:
  8898 ;;		_EUSART_Write
  8899 ;;		_EUSART_is_tx_ready
  8900 ;; This function is called by:
  8901 ;;		_TX_Whole_String
  8902 ;; This function uses a non-reentrant model
  8903 ;;
  8904                           
  8905                           
  8906                           ;psect for function _TX_Command
  8907  1B3C                     _TX_Command:
  8908                           
  8909                           ;incstack = 0
  8910                           ; Regs used in _TX_Command: [wreg+status,2+status,0+pclath+cstack]
  8911                           ;TX_Command@txData stored from wreg
  8912  1B3C  00F1               	movwf	TX_Command@txData
  8913                           
  8914                           ;main.c: 157:     if (EUSART_is_tx_ready()) {
  8915  1B3D  319B  2331  319B   	fcall	_EUSART_is_tx_ready
  8916  1B40  3A00               	xorlw	0
  8917  1B41  1903               	skipnz
  8918  1B42  0008               	return
  8919                           
  8920                           ;main.c: 159:         EUSART_Write(txData);
  8921  1B43  0871               	movf	TX_Command@txData,w
  8922  1B44  319B  2316         	fcall	_EUSART_Write
  8923  1B46  0008               	return
  8924  1B47                     __end_of_TX_Command:
  8925                           
  8926                           	psect	text22
  8927  1B31                     __ptext22:	
  8928 ;; *************** function _EUSART_is_tx_ready *****************
  8929 ;; Defined at:
  8930 ;;		line 94 in file "mcc_generated_files/eusart.c"
  8931 ;; Parameters:    Size  Location     Type
  8932 ;;		None
  8933 ;; Auto vars:     Size  Location     Type
  8934 ;;		None
  8935 ;; Return value:  Size  Location     Type
  8936 ;;                  1    wreg      _Bool 
  8937 ;; Registers used:
  8938 ;;		wreg, status,2
  8939 ;; Tracked objects:
  8940 ;;		On entry : 0/2
  8941 ;;		On exit  : 1C/0
  8942 ;;		Unchanged: 0/0
  8943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8945 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8947 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8948 ;;Total ram usage:        1 bytes
  8949 ;; Hardware stack levels used:    1
  8950 ;; Hardware stack levels required when called:    5
  8951 ;; This function calls:
  8952 ;;		Nothing
  8953 ;; This function is called by:
  8954 ;;		_TX_Command
  8955 ;; This function uses a non-reentrant model
  8956 ;;
  8957                           
  8958                           
  8959                           ;psect for function _EUSART_is_tx_ready
  8960  1B31                     _EUSART_is_tx_ready:
  8961                           
  8962                           ;mcc_generated_files/eusart.c: 96:     return (_Bool)(PIR1bits.TXIF && TXSTAbits.TXEN);
  8963                           
  8964                           ;incstack = 0
  8965                           ; Regs used in _EUSART_is_tx_ready: [wreg+status,2]
  8966  1B31  01F0               	clrf	_EUSART_is_tx_ready$1151
  8967  1B32  0020               	movlb	0	; select bank0
  8968  1B33  1E11               	btfss	17,4	;volatile
  8969  1B34  2B3A               	goto	l4888
  8970  1B35  0023               	movlb	3	; select bank3
  8971  1B36  1E9E               	btfss	30,5	;volatile
  8972  1B37  2B3A               	goto	l4888
  8973  1B38  01F0               	clrf	_EUSART_is_tx_ready$1151
  8974  1B39  0AF0               	incf	_EUSART_is_tx_ready$1151,f
  8975  1B3A                     l4888:
  8976  1B3A  0870               	movf	_EUSART_is_tx_ready$1151,w
  8977  1B3B  0008               	return
  8978  1B3C                     __end_of_EUSART_is_tx_ready:
  8979                           
  8980                           	psect	text23
  8981  1B16                     __ptext23:	
  8982 ;; *************** function _EUSART_Write *****************
  8983 ;; Defined at:
  8984 ;;		line 132 in file "mcc_generated_files/eusart.c"
  8985 ;; Parameters:    Size  Location     Type
  8986 ;;  txData          1    wreg     unsigned char 
  8987 ;; Auto vars:     Size  Location     Type
  8988 ;;  txData          1    0[COMMON] unsigned char 
  8989 ;; Return value:  Size  Location     Type
  8990 ;;                  1    wreg      void 
  8991 ;; Registers used:
  8992 ;;		wreg
  8993 ;; Tracked objects:
  8994 ;;		On entry : 1C/2
  8995 ;;		On exit  : 1F/3
  8996 ;;		Unchanged: 0/0
  8997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8999 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9001 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9002 ;;Total ram usage:        1 bytes
  9003 ;; Hardware stack levels used:    1
  9004 ;; Hardware stack levels required when called:    5
  9005 ;; This function calls:
  9006 ;;		Nothing
  9007 ;; This function is called by:
  9008 ;;		_TX_Command
  9009 ;; This function uses a non-reentrant model
  9010 ;;
  9011                           
  9012                           
  9013                           ;psect for function _EUSART_Write
  9014  1B16                     _EUSART_Write:
  9015                           
  9016                           ;incstack = 0
  9017                           ; Regs used in _EUSART_Write: [wreg]
  9018                           ;EUSART_Write@txData stored from wreg
  9019  1B16  00F0               	movwf	EUSART_Write@txData
  9020  1B17                     l656:	
  9021                           ;mcc_generated_files/eusart.c: 135:     {;mcc_generated_files/eusart.c: 136:     }
  9022                           
  9023                           
  9024                           ;mcc_generated_files/eusart.c: 134:     while(0 == PIR1bits.TXIF)
  9025  1B17  0020               	movlb	0	; select bank0
  9026  1B18  1E11               	btfss	17,4	;volatile
  9027  1B19  2B17               	goto	l656
  9028                           
  9029                           ;mcc_generated_files/eusart.c: 138:     TXREG = txData;
  9030  1B1A  0870               	movf	EUSART_Write@txData,w
  9031  1B1B  0023               	movlb	3	; select bank3
  9032  1B1C  009A               	movwf	26	;volatile
  9033  1B1D  0008               	return
  9034  1B1E                     __end_of_EUSART_Write:
  9035                           
  9036                           	psect	text24
  9037  1C1A                     __ptext24:	
  9038 ;; *************** function _SYSTEM_Initialize *****************
  9039 ;; Defined at:
  9040 ;;		line 50 in file "mcc_generated_files/mcc.c"
  9041 ;; Parameters:    Size  Location     Type
  9042 ;;		None
  9043 ;; Auto vars:     Size  Location     Type
  9044 ;;		None
  9045 ;; Return value:  Size  Location     Type
  9046 ;;                  1    wreg      void 
  9047 ;; Registers used:
  9048 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9049 ;; Tracked objects:
  9050 ;;		On entry : B1F/0
  9051 ;;		On exit  : 1F/1
  9052 ;;		Unchanged: 0/0
  9053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9057 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9058 ;;Total ram usage:        0 bytes
  9059 ;; Hardware stack levels used:    1
  9060 ;; Hardware stack levels required when called:   10
  9061 ;; This function calls:
  9062 ;;		_ADC_Initialize
  9063 ;;		_EUSART_Initialize
  9064 ;;		_MTOUCH_Initialize
  9065 ;;		_OSCILLATOR_Initialize
  9066 ;;		_PIN_MANAGER_Initialize
  9067 ;;		_TMR2_Initialize
  9068 ;;		_WDT_Initialize
  9069 ;; This function is called by:
  9070 ;;		_main
  9071 ;; This function uses a non-reentrant model
  9072 ;;
  9073                           
  9074                           
  9075                           ;psect for function _SYSTEM_Initialize
  9076  1C1A                     _SYSTEM_Initialize:
  9077                           
  9078                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  9079                           
  9080                           ;incstack = 0
  9081                           ; Regs used in _SYSTEM_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9082  1C1A  319D  253E  319C   	fcall	_PIN_MANAGER_Initialize
  9083                           
  9084                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  9085  1C1D  319A  22F7  319C   	fcall	_OSCILLATOR_Initialize
  9086                           
  9087                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  9088  1C20  319A  22AE  319C   	fcall	_WDT_Initialize
  9089                           
  9090                           ;mcc_generated_files/mcc.c: 56:     ADC_Initialize();
  9091  1C23  319A  22F0  319C   	fcall	_ADC_Initialize
  9092                           
  9093                           ;mcc_generated_files/mcc.c: 57:     TMR2_Initialize();
  9094  1C26  319B  23A2  319C   	fcall	_TMR2_Initialize
  9095                           
  9096                           ;mcc_generated_files/mcc.c: 58:     EUSART_Initialize();
  9097  1C29  319C  24D7  319C   	fcall	_EUSART_Initialize
  9098                           
  9099                           ;mcc_generated_files/mcc.c: 59:     MTOUCH_Initialize();
  9100  1C2C  319B  2353         	fcall	_MTOUCH_Initialize
  9101  1C2E  0008               	return
  9102  1C2F                     __end_of_SYSTEM_Initialize:
  9103                           
  9104                           	psect	text25
  9105  1AAE                     __ptext25:	
  9106 ;; *************** function _WDT_Initialize *****************
  9107 ;; Defined at:
  9108 ;;		line 72 in file "mcc_generated_files/mcc.c"
  9109 ;; Parameters:    Size  Location     Type
  9110 ;;		None
  9111 ;; Auto vars:     Size  Location     Type
  9112 ;;		None
  9113 ;; Return value:  Size  Location     Type
  9114 ;;                  1    wreg      void 
  9115 ;; Registers used:
  9116 ;;		wreg
  9117 ;; Tracked objects:
  9118 ;;		On entry : 1F/2
  9119 ;;		On exit  : 1F/1
  9120 ;;		Unchanged: 0/0
  9121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9125 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9126 ;;Total ram usage:        0 bytes
  9127 ;; Hardware stack levels used:    1
  9128 ;; Hardware stack levels required when called:    5
  9129 ;; This function calls:
  9130 ;;		Nothing
  9131 ;; This function is called by:
  9132 ;;		_SYSTEM_Initialize
  9133 ;; This function uses a non-reentrant model
  9134 ;;
  9135                           
  9136                           
  9137                           ;psect for function _WDT_Initialize
  9138  1AAE                     _WDT_Initialize:
  9139                           
  9140                           ;mcc_generated_files/mcc.c: 75:     WDTCON = 0x16;
  9141                           
  9142                           ;incstack = 0
  9143                           ; Regs used in _WDT_Initialize: [wreg]
  9144  1AAE  3016               	movlw	22
  9145  1AAF  0021               	movlb	1	; select bank1
  9146  1AB0  0097               	movwf	23	;volatile
  9147  1AB1  0008               	return
  9148  1AB2                     __end_of_WDT_Initialize:
  9149                           
  9150                           	psect	text26
  9151  1BA2                     __ptext26:	
  9152 ;; *************** function _TMR2_Initialize *****************
  9153 ;; Defined at:
  9154 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  9155 ;; Parameters:    Size  Location     Type
  9156 ;;		None
  9157 ;; Auto vars:     Size  Location     Type
  9158 ;;		None
  9159 ;; Return value:  Size  Location     Type
  9160 ;;                  1    wreg      void 
  9161 ;; Registers used:
  9162 ;;		wreg, status,2, status,0, pclath, cstack
  9163 ;; Tracked objects:
  9164 ;;		On entry : 1F/1
  9165 ;;		On exit  : 1F/0
  9166 ;;		Unchanged: 0/0
  9167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9171 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9172 ;;Total ram usage:        0 bytes
  9173 ;; Hardware stack levels used:    1
  9174 ;; Hardware stack levels required when called:    6
  9175 ;; This function calls:
  9176 ;;		_TMR2_SetInterruptHandler
  9177 ;; This function is called by:
  9178 ;;		_SYSTEM_Initialize
  9179 ;; This function uses a non-reentrant model
  9180 ;;
  9181                           
  9182                           
  9183                           ;psect for function _TMR2_Initialize
  9184  1BA2                     _TMR2_Initialize:
  9185                           
  9186                           ;mcc_generated_files/tmr2.c: 69:     PR2 = 0xC7;
  9187                           
  9188                           ;incstack = 0
  9189                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9190  1BA2  30C7               	movlw	199
  9191  1BA3  0020               	movlb	0	; select bank0
  9192  1BA4  009B               	movwf	27	;volatile
  9193                           
  9194                           ;mcc_generated_files/tmr2.c: 72:     TMR2 = 0x00;
  9195  1BA5  019A               	clrf	26	;volatile
  9196                           
  9197                           ;mcc_generated_files/tmr2.c: 75:     PIR1bits.TMR2IF = 0;
  9198  1BA6  1091               	bcf	17,1	;volatile
  9199                           
  9200                           ;mcc_generated_files/tmr2.c: 78:     PIE1bits.TMR2IE = 1;
  9201  1BA7  0021               	movlb	1	; select bank1
  9202  1BA8  1491               	bsf	17,1	;volatile
  9203                           
  9204                           ;mcc_generated_files/tmr2.c: 81:     TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandl
      +                          er);
  9205  1BA9  3000               	movlw	low _TMR2_DefaultInterruptHandler
  9206  1BAA  00F0               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  9207  1BAB  3010               	movlw	high _TMR2_DefaultInterruptHandler
  9208  1BAC  00F1               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  9209  1BAD  319A  22DE         	fcall	_TMR2_SetInterruptHandler
  9210                           
  9211                           ;mcc_generated_files/tmr2.c: 84:     T2CON = 0x00;
  9212  1BAF  0020               	movlb	0	; select bank0
  9213  1BB0  019C               	clrf	28	;volatile
  9214  1BB1  0008               	return
  9215  1BB2                     __end_of_TMR2_Initialize:
  9216                           
  9217                           	psect	text27
  9218  1ADE                     __ptext27:	
  9219 ;; *************** function _TMR2_SetInterruptHandler *****************
  9220 ;; Defined at:
  9221 ;;		line 132 in file "mcc_generated_files/tmr2.c"
  9222 ;; Parameters:    Size  Location     Type
  9223 ;;  InterruptHan    2    0[COMMON] PTR FTN()void 
  9224 ;;		 -> TMR2_DefaultInterruptHandler(1), TMR2_Int_isr(1), 
  9225 ;; Auto vars:     Size  Location     Type
  9226 ;;		None
  9227 ;; Return value:  Size  Location     Type
  9228 ;;                  1    wreg      void 
  9229 ;; Registers used:
  9230 ;;		wreg
  9231 ;; Tracked objects:
  9232 ;;		On entry : 1D/3
  9233 ;;		On exit  : 1F/3
  9234 ;;		Unchanged: 0/0
  9235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9236 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9239 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9240 ;;Total ram usage:        2 bytes
  9241 ;; Hardware stack levels used:    1
  9242 ;; Hardware stack levels required when called:    5
  9243 ;; This function calls:
  9244 ;;		Nothing
  9245 ;; This function is called by:
  9246 ;;		_main
  9247 ;;		_TMR2_Initialize
  9248 ;; This function uses a non-reentrant model
  9249 ;;
  9250                           
  9251                           
  9252                           ;psect for function _TMR2_SetInterruptHandler
  9253  1ADE                     _TMR2_SetInterruptHandler:
  9254                           
  9255                           ;mcc_generated_files/tmr2.c: 133:     TMR2_InterruptHandler = InterruptHandler;
  9256                           
  9257                           ;incstack = 0
  9258                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  9259  1ADE  0871               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
  9260  1ADF  0023               	movlb	3	; select bank3
  9261  1AE0  00ED               	movwf	(_TMR2_InterruptHandler+1)^(0+384)
  9262  1AE1  0870               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
  9263  1AE2  00EC               	movwf	_TMR2_InterruptHandler^(0+384)
  9264  1AE3  0008               	return
  9265  1AE4                     __end_of_TMR2_SetInterruptHandler:
  9266                           
  9267                           	psect	text28
  9268  1D3E                     __ptext28:	
  9269 ;; *************** function _PIN_MANAGER_Initialize *****************
  9270 ;; Defined at:
  9271 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  9272 ;; Parameters:    Size  Location     Type
  9273 ;;		None
  9274 ;; Auto vars:     Size  Location     Type
  9275 ;;		None
  9276 ;; Return value:  Size  Location     Type
  9277 ;;                  1    wreg      void 
  9278 ;; Registers used:
  9279 ;;		wreg, status,2, status,0, pclath, cstack
  9280 ;; Tracked objects:
  9281 ;;		On entry : B1F/0
  9282 ;;		On exit  : 1F/3
  9283 ;;		Unchanged: 0/0
  9284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9288 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9289 ;;Total ram usage:        0 bytes
  9290 ;; Hardware stack levels used:    1
  9291 ;; Hardware stack levels required when called:    6
  9292 ;; This function calls:
  9293 ;;		_IOCAF2_SetInterruptHandler
  9294 ;; This function is called by:
  9295 ;;		_SYSTEM_Initialize
  9296 ;; This function uses a non-reentrant model
  9297 ;;
  9298                           
  9299                           
  9300                           ;psect for function _PIN_MANAGER_Initialize
  9301  1D3E                     _PIN_MANAGER_Initialize:
  9302                           
  9303                           ;mcc_generated_files/pin_manager.c: 62:     LATA = 0x00;
  9304                           
  9305                           ;incstack = 0
  9306                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9307  1D3E  0022               	movlb	2	; select bank2
  9308  1D3F  018C               	clrf	12	;volatile
  9309                           
  9310                           ;mcc_generated_files/pin_manager.c: 63:     LATB = 0x00;
  9311  1D40  018D               	clrf	13	;volatile
  9312                           
  9313                           ;mcc_generated_files/pin_manager.c: 64:     LATC = 0x00;
  9314  1D41  018E               	clrf	14	;volatile
  9315                           
  9316                           ;mcc_generated_files/pin_manager.c: 69:     TRISA = 0x2F;
  9317  1D42  302F               	movlw	47
  9318  1D43  0021               	movlb	1	; select bank1
  9319  1D44  008C               	movwf	12	;volatile
  9320                           
  9321                           ;mcc_generated_files/pin_manager.c: 70:     TRISB = 0x70;
  9322  1D45  3070               	movlw	112
  9323  1D46  008D               	movwf	13	;volatile
  9324                           
  9325                           ;mcc_generated_files/pin_manager.c: 71:     TRISC = 0x83;
  9326  1D47  3083               	movlw	131
  9327  1D48  008E               	movwf	14	;volatile
  9328                           
  9329                           ;mcc_generated_files/pin_manager.c: 76:     ANSELC = 0x83;
  9330  1D49  3083               	movlw	131
  9331  1D4A  0023               	movlb	3	; select bank3
  9332  1D4B  008E               	movwf	14	;volatile
  9333                           
  9334                           ;mcc_generated_files/pin_manager.c: 77:     ANSELB = 0x10;
  9335  1D4C  3010               	movlw	16
  9336  1D4D  008D               	movwf	13	;volatile
  9337                           
  9338                           ;mcc_generated_files/pin_manager.c: 78:     ANSELA = 0x03;
  9339  1D4E  3003               	movlw	3
  9340  1D4F  008C               	movwf	12	;volatile
  9341                           
  9342                           ;mcc_generated_files/pin_manager.c: 83:     WPUB = 0x00;
  9343  1D50  0024               	movlb	4	; select bank4
  9344  1D51  018D               	clrf	13	;volatile
  9345                           
  9346                           ;mcc_generated_files/pin_manager.c: 84:     WPUA = 0x04;
  9347  1D52  3004               	movlw	4
  9348  1D53  008C               	movwf	12	;volatile
  9349                           
  9350                           ;mcc_generated_files/pin_manager.c: 85:     WPUC = 0x00;
  9351  1D54  018E               	clrf	14	;volatile
  9352                           
  9353                           ;mcc_generated_files/pin_manager.c: 86:     OPTION_REGbits.nWPUEN = 0;
  9354  1D55  0021               	movlb	1	; select bank1
  9355  1D56  1395               	bcf	21,7	;volatile
  9356                           
  9357                           ;mcc_generated_files/pin_manager.c: 92:     APFCON0 = 0x00;
  9358  1D57  0022               	movlb	2	; select bank2
  9359  1D58  019D               	clrf	29	;volatile
  9360                           
  9361                           ;mcc_generated_files/pin_manager.c: 93:     APFCON1 = 0x00;
  9362  1D59  019E               	clrf	30	;volatile
  9363                           
  9364                           ;mcc_generated_files/pin_manager.c: 99:     IOCAFbits.IOCAF2 = 0;
  9365  1D5A  0027               	movlb	7	; select bank7
  9366  1D5B  1113               	bcf	19,2	;volatile
  9367                           
  9368                           ;mcc_generated_files/pin_manager.c: 101:     IOCANbits.IOCAN2 = 0;
  9369  1D5C  1112               	bcf	18,2	;volatile
  9370                           
  9371                           ;mcc_generated_files/pin_manager.c: 103:     IOCAPbits.IOCAP2 = 1;
  9372  1D5D  1511               	bsf	17,2	;volatile
  9373                           
  9374                           ;mcc_generated_files/pin_manager.c: 108:     IOCAF2_SetInterruptHandler(IOCAF2_DefaultIn
      +                          terruptHandler);
  9375  1D5E  30A1               	movlw	low _IOCAF2_DefaultInterruptHandler
  9376  1D5F  00F0               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler
  9377  1D60  301A               	movlw	high _IOCAF2_DefaultInterruptHandler
  9378  1D61  00F1               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler+1
  9379  1D62  319A  22D8         	fcall	_IOCAF2_SetInterruptHandler
  9380                           
  9381                           ;mcc_generated_files/pin_manager.c: 111:     INTCONbits.IOCIE = 1;
  9382  1D64  158B               	bsf	11,3	;volatile
  9383  1D65  0008               	return
  9384  1D66                     __end_of_PIN_MANAGER_Initialize:
  9385                           
  9386                           	psect	text29
  9387  1AD8                     __ptext29:	
  9388 ;; *************** function _IOCAF2_SetInterruptHandler *****************
  9389 ;; Defined at:
  9390 ;;		line 142 in file "mcc_generated_files/pin_manager.c"
  9391 ;; Parameters:    Size  Location     Type
  9392 ;;  InterruptHan    2    0[COMMON] PTR FTN()void 
  9393 ;;		 -> Zero_Detection_isr(1), IOCAF2_DefaultInterruptHandler(1), 
  9394 ;; Auto vars:     Size  Location     Type
  9395 ;;		None
  9396 ;; Return value:  Size  Location     Type
  9397 ;;                  1    wreg      void 
  9398 ;; Registers used:
  9399 ;;		wreg
  9400 ;; Tracked objects:
  9401 ;;		On entry : 1B/3
  9402 ;;		On exit  : 1F/3
  9403 ;;		Unchanged: 0/0
  9404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9405 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9408 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9409 ;;Total ram usage:        2 bytes
  9410 ;; Hardware stack levels used:    1
  9411 ;; Hardware stack levels required when called:    5
  9412 ;; This function calls:
  9413 ;;		Nothing
  9414 ;; This function is called by:
  9415 ;;		_PIN_MANAGER_Initialize
  9416 ;;		_main
  9417 ;; This function uses a non-reentrant model
  9418 ;;
  9419                           
  9420                           
  9421                           ;psect for function _IOCAF2_SetInterruptHandler
  9422  1AD8                     _IOCAF2_SetInterruptHandler:
  9423                           
  9424                           ;mcc_generated_files/pin_manager.c: 143:     IOCAF2_InterruptHandler = InterruptHandler;
  9425                           
  9426                           ;incstack = 0
  9427                           ; Regs used in _IOCAF2_SetInterruptHandler: [wreg]
  9428  1AD8  0871               	movf	IOCAF2_SetInterruptHandler@InterruptHandler+1,w
  9429  1AD9  0023               	movlb	3	; select bank3
  9430  1ADA  00EF               	movwf	(_IOCAF2_InterruptHandler+1)^(0+384)
  9431  1ADB  0870               	movf	IOCAF2_SetInterruptHandler@InterruptHandler,w
  9432  1ADC  00EE               	movwf	_IOCAF2_InterruptHandler^(0+384)
  9433  1ADD  0008               	return
  9434  1ADE                     __end_of_IOCAF2_SetInterruptHandler:
  9435                           
  9436                           	psect	text30
  9437  1AF7                     __ptext30:	
  9438 ;; *************** function _OSCILLATOR_Initialize *****************
  9439 ;; Defined at:
  9440 ;;		line 62 in file "mcc_generated_files/mcc.c"
  9441 ;; Parameters:    Size  Location     Type
  9442 ;;		None
  9443 ;; Auto vars:     Size  Location     Type
  9444 ;;		None
  9445 ;; Return value:  Size  Location     Type
  9446 ;;                  1    wreg      void 
  9447 ;; Registers used:
  9448 ;;		wreg, status,2
  9449 ;; Tracked objects:
  9450 ;;		On entry : 1F/3
  9451 ;;		On exit  : 1F/2
  9452 ;;		Unchanged: 0/0
  9453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9457 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9458 ;;Total ram usage:        0 bytes
  9459 ;; Hardware stack levels used:    1
  9460 ;; Hardware stack levels required when called:    5
  9461 ;; This function calls:
  9462 ;;		Nothing
  9463 ;; This function is called by:
  9464 ;;		_SYSTEM_Initialize
  9465 ;; This function uses a non-reentrant model
  9466 ;;
  9467                           
  9468                           
  9469                           ;psect for function _OSCILLATOR_Initialize
  9470  1AF7                     _OSCILLATOR_Initialize:
  9471                           
  9472                           ;mcc_generated_files/mcc.c: 65:     OSCCON = 0x70;
  9473                           
  9474                           ;incstack = 0
  9475                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  9476  1AF7  3070               	movlw	112
  9477  1AF8  0021               	movlb	1	; select bank1
  9478  1AF9  0099               	movwf	25	;volatile
  9479                           
  9480                           ;mcc_generated_files/mcc.c: 67:     OSCTUNE = 0x00;
  9481  1AFA  0198               	clrf	24	;volatile
  9482                           
  9483                           ;mcc_generated_files/mcc.c: 69:     BORCON = 0x00;
  9484  1AFB  0022               	movlb	2	; select bank2
  9485  1AFC  0196               	clrf	22	;volatile
  9486  1AFD  0008               	return
  9487  1AFE                     __end_of_OSCILLATOR_Initialize:
  9488                           
  9489                           	psect	text31
  9490  1B53                     __ptext31:	
  9491 ;; *************** function _MTOUCH_Initialize *****************
  9492 ;; Defined at:
  9493 ;;		line 81 in file "mcc_generated_files/mtouch/mtouch.c"
  9494 ;; Parameters:    Size  Location     Type
  9495 ;;		None
  9496 ;; Auto vars:     Size  Location     Type
  9497 ;;		None
  9498 ;; Return value:  Size  Location     Type
  9499 ;;                  1    wreg      void 
  9500 ;; Registers used:
  9501 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9502 ;; Tracked objects:
  9503 ;;		On entry : 1F/3
  9504 ;;		On exit  : 1F/1
  9505 ;;		Unchanged: 0/0
  9506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9510 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9511 ;;Total ram usage:        0 bytes
  9512 ;; Hardware stack levels used:    1
  9513 ;; Hardware stack levels required when called:    9
  9514 ;; This function calls:
  9515 ;;		_MTOUCH_Button_InitializeAll
  9516 ;;		_MTOUCH_Sensor_InitializeAll
  9517 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  9518 ;;		_MTOUCH_Sensor_Scan_Initialize
  9519 ;; This function is called by:
  9520 ;;		_SYSTEM_Initialize
  9521 ;; This function uses a non-reentrant model
  9522 ;;
  9523                           
  9524                           
  9525                           ;psect for function _MTOUCH_Initialize
  9526  1B53                     _MTOUCH_Initialize:
  9527                           
  9528                           ;mcc_generated_files/mtouch/mtouch.c: 83:     MTOUCH_Sensor_InitializeAll();
  9529                           
  9530                           ;incstack = 0
  9531                           ; Regs used in _MTOUCH_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9532  1B53  319B  2386  319B   	fcall	_MTOUCH_Sensor_InitializeAll
  9533                           
  9534                           ;mcc_generated_files/mtouch/mtouch.c: 84:     MTOUCH_Button_InitializeAll();
  9535  1B56  319C  2447  319B   	fcall	_MTOUCH_Button_InitializeAll
  9536                           
  9537                           ;mcc_generated_files/mtouch/mtouch.c: 85:     MTOUCH_Sensor_Sampled_ResetAll();
  9538  1B59  319C  2407  319B   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  9539                           
  9540                           ;mcc_generated_files/mtouch/mtouch.c: 86:     MTOUCH_Sensor_Scan_Initialize();
  9541  1B5C  319A  22C1         	fcall	_MTOUCH_Sensor_Scan_Initialize
  9542  1B5E  0008               	return
  9543  1B5F                     __end_of_MTOUCH_Initialize:
  9544                           
  9545                           	psect	text32
  9546  1AC1                     __ptext32:	
  9547 ;; *************** function _MTOUCH_Sensor_Scan_Initialize *****************
  9548 ;; Defined at:
  9549 ;;		line 171 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9550 ;; Parameters:    Size  Location     Type
  9551 ;;		None
  9552 ;; Auto vars:     Size  Location     Type
  9553 ;;		None
  9554 ;; Return value:  Size  Location     Type
  9555 ;;                  1    wreg      void 
  9556 ;; Registers used:
  9557 ;;		wreg, status,2
  9558 ;; Tracked objects:
  9559 ;;		On entry : 0/3
  9560 ;;		On exit  : 1F/1
  9561 ;;		Unchanged: 0/0
  9562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9566 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9567 ;;Total ram usage:        0 bytes
  9568 ;; Hardware stack levels used:    1
  9569 ;; Hardware stack levels required when called:    5
  9570 ;; This function calls:
  9571 ;;		Nothing
  9572 ;; This function is called by:
  9573 ;;		_MTOUCH_Initialize
  9574 ;; This function uses a non-reentrant model
  9575 ;;
  9576                           
  9577                           
  9578                           ;psect for function _MTOUCH_Sensor_Scan_Initialize
  9579  1AC1                     _MTOUCH_Sensor_Scan_Initialize:
  9580                           
  9581                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 174:     ADCON0 = (uint8_t)0;
  9582                           
  9583                           ;incstack = 0
  9584                           ; Regs used in _MTOUCH_Sensor_Scan_Initialize: [wreg+status,2]
  9585  1AC1  0021               	movlb	1	; select bank1
  9586  1AC2  019D               	clrf	29	;volatile
  9587                           
  9588                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 175:     ADCON1 = (uint8_t)( 0x1<<7 | 0x1<<
      +                          4 | 0x0 );
  9589  1AC3  3090               	movlw	144
  9590  1AC4  009E               	movwf	30	;volatile
  9591  1AC5  0008               	return
  9592  1AC6                     __end_of_MTOUCH_Sensor_Scan_Initialize:
  9593                           
  9594                           	psect	text33
  9595  1C07                     __ptext33:	
  9596 ;; *************** function _MTOUCH_Sensor_Sampled_ResetAll *****************
  9597 ;; Defined at:
  9598 ;;		line 546 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9599 ;; Parameters:    Size  Location     Type
  9600 ;;		None
  9601 ;; Auto vars:     Size  Location     Type
  9602 ;;  sensor          1    2[COMMON] PTR struct .
  9603 ;;		 -> mtouch_sensor(9), 
  9604 ;; Return value:  Size  Location     Type
  9605 ;;                  1    wreg      void 
  9606 ;; Registers used:
  9607 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9608 ;; Tracked objects:
  9609 ;;		On entry : 0/3
  9610 ;;		On exit  : 0/0
  9611 ;;		Unchanged: 0/0
  9612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9614 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9615 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9616 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9617 ;;Total ram usage:        2 bytes
  9618 ;; Hardware stack levels used:    1
  9619 ;; Hardware stack levels required when called:    6
  9620 ;; This function calls:
  9621 ;;		_Sensor_Sampled_Reset
  9622 ;; This function is called by:
  9623 ;;		_MTOUCH_Initialize
  9624 ;; This function uses a non-reentrant model
  9625 ;;
  9626                           
  9627                           
  9628                           ;psect for function _MTOUCH_Sensor_Sampled_ResetAll
  9629  1C07                     _MTOUCH_Sensor_Sampled_ResetAll:
  9630                           
  9631                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 548:     mtouch_sensor_t* sensor;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 549:     for(sensor = &mtouch_sensor[0];sensor<= &mto
      +                          uch_sensor[(1u)-1];sensor++)
  9632                           
  9633                           ;incstack = 0
  9634                           ; Regs used in _MTOUCH_Sensor_Sampled_ResetAll: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
  9635  1C07  304A               	movlw	(low (_mtouch_sensor| (0+512)))& (0+255)
  9636  1C08  00F1               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  9637  1C09  0871               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  9638  1C0A  00F2               	movwf	MTOUCH_Sensor_Sampled_ResetAll@sensor
  9639  1C0B                     L10:
  9640  1C0B  304A               	movlw	(low (_mtouch_sensor| (0+512)))& (0+255)
  9641  1C0C  00F1               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  9642  1C0D  0872               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  9643  1C0E  0271               	subwf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  9644  1C0F  1C03               	btfss	3,0
  9645  1C10  0008               	return
  9646                           
  9647                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 550:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 551:         Sensor_Sampled_Reset(sensor);
  9648  1C11  0872               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  9649  1C12  319B  230E  319C   	fcall	_Sensor_Sampled_Reset
  9650                           
  9651                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 552:     }
  9652  1C15  3009               	movlw	9
  9653  1C16  00F1               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  9654  1C17  0871               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  9655  1C18  07F2               	addwf	MTOUCH_Sensor_Sampled_ResetAll@sensor,f
  9656  1C19  2C0B               	goto	L10
  9657  1C1A                     __end_of_MTOUCH_Sensor_Sampled_ResetAll:
  9658                           
  9659                           	psect	text34
  9660  1B86                     __ptext34:	
  9661 ;; *************** function _MTOUCH_Sensor_InitializeAll *****************
  9662 ;; Defined at:
  9663 ;;		line 156 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9664 ;; Parameters:    Size  Location     Type
  9665 ;;		None
  9666 ;; Auto vars:     Size  Location     Type
  9667 ;;  sensor          1    9[COMMON] enum E2660
  9668 ;; Return value:  Size  Location     Type
  9669 ;;                  1    wreg      void 
  9670 ;; Registers used:
  9671 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9672 ;; Tracked objects:
  9673 ;;		On entry : 1F/3
  9674 ;;		On exit  : 0/0
  9675 ;;		Unchanged: 0/0
  9676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9678 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9679 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9680 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9681 ;;Total ram usage:        2 bytes
  9682 ;; Hardware stack levels used:    1
  9683 ;; Hardware stack levels required when called:    8
  9684 ;; This function calls:
  9685 ;;		_MTOUCH_Sensor_Initialize
  9686 ;; This function is called by:
  9687 ;;		_MTOUCH_Initialize
  9688 ;; This function uses a non-reentrant model
  9689 ;;
  9690                           
  9691                           
  9692                           ;psect for function _MTOUCH_Sensor_InitializeAll
  9693  1B86                     _MTOUCH_Sensor_InitializeAll:
  9694                           
  9695                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 158:     enum mtouch_sensor_names sensor;;m
      +                          cc_generated_files/mtouch/mtouch_sensor.c: 159:     for (sensor = 0; sensor < (1u); sens
      +                          or++)
  9696                           
  9697                           ;incstack = 0
  9698                           ; Regs used in _MTOUCH_Sensor_InitializeAll: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  9699  1B86  01F9               	clrf	MTOUCH_Sensor_InitializeAll@sensor
  9700  1B87                     l4838:
  9701                           
  9702                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 160:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 161:         MTOUCH_Sensor_Initialize(sensor);
  9703  1B87  0879               	movf	MTOUCH_Sensor_InitializeAll@sensor,w
  9704  1B88  319B  23F6  319B   	fcall	_MTOUCH_Sensor_Initialize
  9705                           
  9706                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 162:     }
  9707  1B8B  3001               	movlw	1
  9708  1B8C  00F8               	movwf	??_MTOUCH_Sensor_InitializeAll
  9709  1B8D  0878               	movf	??_MTOUCH_Sensor_InitializeAll,w
  9710  1B8E  07F9               	addwf	MTOUCH_Sensor_InitializeAll@sensor,f
  9711  1B8F  0879               	movf	MTOUCH_Sensor_InitializeAll@sensor,w
  9712  1B90  1D03               	btfss	3,2
  9713  1B91  0008               	return
  9714  1B92  2B87               	goto	l4838
  9715  1B93                     __end_of_MTOUCH_Sensor_InitializeAll:
  9716                           
  9717                           	psect	text35
  9718  1BF6                     __ptext35:	
  9719 ;; *************** function _MTOUCH_Sensor_Initialize *****************
  9720 ;; Defined at:
  9721 ;;		line 142 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9722 ;; Parameters:    Size  Location     Type
  9723 ;;  sensor          1    wreg     enum E2660
  9724 ;; Auto vars:     Size  Location     Type
  9725 ;;  sensor          1    7[COMMON] enum E2660
  9726 ;; Return value:  Size  Location     Type
  9727 ;;                  1    wreg      enum E2662
  9728 ;; Registers used:
  9729 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9730 ;; Tracked objects:
  9731 ;;		On entry : 0/3
  9732 ;;		On exit  : 0/0
  9733 ;;		Unchanged: 0/0
  9734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9736 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9737 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9738 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9739 ;;Total ram usage:        2 bytes
  9740 ;; Hardware stack levels used:    1
  9741 ;; Hardware stack levels required when called:    7
  9742 ;; This function calls:
  9743 ;;		_MTOUCH_Sensor_Enable
  9744 ;;		_Sensor_Sampled_Reset
  9745 ;;		___bmul
  9746 ;; This function is called by:
  9747 ;;		_MTOUCH_Sensor_InitializeAll
  9748 ;; This function uses a non-reentrant model
  9749 ;;
  9750                           
  9751                           
  9752                           ;psect for function _MTOUCH_Sensor_Initialize
  9753  1BF6                     _MTOUCH_Sensor_Initialize:
  9754                           
  9755                           ;incstack = 0
  9756                           ; Regs used in _MTOUCH_Sensor_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  9757                           ;MTOUCH_Sensor_Initialize@sensor stored from wreg
  9758  1BF6  00F7               	movwf	MTOUCH_Sensor_Initialize@sensor
  9759                           
  9760                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 142: enum mtouch_sensor_error MTOUCH_Sensor
      +                          _Initialize(enum mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c:
      +                           143: {;mcc_generated_files/mtouch/mtouch_sensor.c: 144:     MTOUCH_Sensor_Enable(sensor
      +                          );
  9761  1BF7  0877               	movf	MTOUCH_Sensor_Initialize@sensor,w
  9762  1BF8  319B  23E5  319B   	fcall	_MTOUCH_Sensor_Enable
  9763                           
  9764                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 145:     Sensor_Sampled_Reset(&mtouch_senso
      +                          r[sensor]);
  9765  1BFB  3009               	movlw	9
  9766  1BFC  00F6               	movwf	??_MTOUCH_Sensor_Initialize
  9767  1BFD  0876               	movf	??_MTOUCH_Sensor_Initialize,w
  9768  1BFE  00F0               	movwf	___bmul@multiplicand
  9769  1BFF  0877               	movf	MTOUCH_Sensor_Initialize@sensor,w
  9770  1C00  319B  23D4  319B   	fcall	___bmul
  9771  1C03  3E4A               	addlw	(low (_mtouch_sensor| (0+512)))& (0+255)
  9772  1C04  319B  230E         	fcall	_Sensor_Sampled_Reset
  9773  1C06  0008               	return
  9774  1C07                     __end_of_MTOUCH_Sensor_Initialize:
  9775                           
  9776                           	psect	text36
  9777  1B0E                     __ptext36:	
  9778 ;; *************** function _Sensor_Sampled_Reset *****************
  9779 ;; Defined at:
  9780 ;;		line 563 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9781 ;; Parameters:    Size  Location     Type
  9782 ;;  sensor          1    wreg     PTR struct .
  9783 ;;		 -> mtouch_sensor(9), 
  9784 ;; Auto vars:     Size  Location     Type
  9785 ;;  sensor          1    0[COMMON] PTR struct .
  9786 ;;		 -> mtouch_sensor(9), 
  9787 ;; Return value:  Size  Location     Type
  9788 ;;                  1    wreg      void 
  9789 ;; Registers used:
  9790 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9791 ;; Tracked objects:
  9792 ;;		On entry : 0/3
  9793 ;;		On exit  : 0/0
  9794 ;;		Unchanged: 0/0
  9795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9797 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9799 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9800 ;;Total ram usage:        1 bytes
  9801 ;; Hardware stack levels used:    1
  9802 ;; Hardware stack levels required when called:    5
  9803 ;; This function calls:
  9804 ;;		Nothing
  9805 ;; This function is called by:
  9806 ;;		_MTOUCH_Sensor_Initialize
  9807 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  9808 ;; This function uses a non-reentrant model
  9809 ;;
  9810                           
  9811                           
  9812                           ;psect for function _Sensor_Sampled_Reset
  9813  1B0E                     _Sensor_Sampled_Reset:
  9814                           
  9815                           ;incstack = 0
  9816                           ; Regs used in _Sensor_Sampled_Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
  9817                           ;Sensor_Sampled_Reset@sensor stored from wreg
  9818  1B0E  00F0               	movwf	Sensor_Sampled_Reset@sensor
  9819                           
  9820                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 563: static __attribute__((inline)) void Se
      +                          nsor_Sampled_Reset(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          564: {;mcc_generated_files/mtouch/mtouch_sensor.c: 565:     sensor->sampled = 0;
  9821  1B0F  0870               	movf	Sensor_Sampled_Reset@sensor,w
  9822  1B10  3E08               	addlw	8
  9823  1B11  0086               	movwf	6
  9824  1B12  3002               	movlw	2	; select bank4/5
  9825  1B13  0087               	movwf	7
  9826  1B14  1081               	bcf	1,1
  9827  1B15  0008               	return
  9828  1B16                     __end_of_Sensor_Sampled_Reset:
  9829                           
  9830                           	psect	text37
  9831  1BE5                     __ptext37:	
  9832 ;; *************** function _MTOUCH_Sensor_Enable *****************
  9833 ;; Defined at:
  9834 ;;		line 480 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9835 ;; Parameters:    Size  Location     Type
  9836 ;;  sensor          1    wreg     enum E2660
  9837 ;; Auto vars:     Size  Location     Type
  9838 ;;  sensor          1    5[COMMON] enum E2660
  9839 ;; Return value:  Size  Location     Type
  9840 ;;                  1    wreg      void 
  9841 ;; Registers used:
  9842 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9843 ;; Tracked objects:
  9844 ;;		On entry : 0/3
  9845 ;;		On exit  : 0/0
  9846 ;;		Unchanged: 0/0
  9847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9849 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9850 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9851 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9852 ;;Total ram usage:        2 bytes
  9853 ;; Hardware stack levels used:    1
  9854 ;; Hardware stack levels required when called:    6
  9855 ;; This function calls:
  9856 ;;		___bmul
  9857 ;; This function is called by:
  9858 ;;		_MTOUCH_Sensor_Initialize
  9859 ;; This function uses a non-reentrant model
  9860 ;;
  9861                           
  9862                           
  9863                           ;psect for function _MTOUCH_Sensor_Enable
  9864  1BE5                     _MTOUCH_Sensor_Enable:
  9865                           
  9866                           ;incstack = 0
  9867                           ; Regs used in _MTOUCH_Sensor_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9868                           ;MTOUCH_Sensor_Enable@sensor stored from wreg
  9869  1BE5  00F5               	movwf	MTOUCH_Sensor_Enable@sensor
  9870                           
  9871                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 480: void MTOUCH_Sensor_Enable(enum mtouch_
      +                          sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 481: {;mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 482:     if(sensor < (1u))
  9872  1BE6  0875               	movf	MTOUCH_Sensor_Enable@sensor,w
  9873  1BE7  1D03               	btfss	3,2
  9874  1BE8  0008               	return
  9875                           
  9876                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 483:         mtouch_sensor[sensor].enabled 
      +                          = 1;
  9877  1BE9  3009               	movlw	9
  9878  1BEA  00F4               	movwf	??_MTOUCH_Sensor_Enable
  9879  1BEB  0874               	movf	??_MTOUCH_Sensor_Enable,w
  9880  1BEC  00F0               	movwf	___bmul@multiplicand
  9881  1BED  0875               	movf	MTOUCH_Sensor_Enable@sensor,w
  9882  1BEE  319B  23D4         	fcall	___bmul
  9883  1BF0  3E52               	addlw	(low ((_mtouch_sensor| (0+512)+8)))& (0+255)
  9884  1BF1  0086               	movwf	6
  9885  1BF2  3002               	movlw	2	; select bank4/5
  9886  1BF3  0087               	movwf	7
  9887  1BF4  1401               	bsf	1,0
  9888  1BF5  0008               	return
  9889  1BF6                     __end_of_MTOUCH_Sensor_Enable:
  9890                           
  9891                           	psect	text38
  9892  1BD4                     __ptext38:	
  9893 ;; *************** function ___bmul *****************
  9894 ;; Defined at:
  9895 ;;		line 4 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/Umul8.c"
  9896 ;; Parameters:    Size  Location     Type
  9897 ;;  multiplier      1    wreg     unsigned char 
  9898 ;;  multiplicand    1    0[COMMON] unsigned char 
  9899 ;; Auto vars:     Size  Location     Type
  9900 ;;  multiplier      1    3[COMMON] unsigned char 
  9901 ;;  product         1    2[COMMON] unsigned char 
  9902 ;; Return value:  Size  Location     Type
  9903 ;;                  1    wreg      unsigned char 
  9904 ;; Registers used:
  9905 ;;		wreg, status,2, status,0
  9906 ;; Tracked objects:
  9907 ;;		On entry : 0/3
  9908 ;;		On exit  : 0/0
  9909 ;;		Unchanged: 0/0
  9910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9911 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9912 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9913 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9914 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9915 ;;Total ram usage:        4 bytes
  9916 ;; Hardware stack levels used:    1
  9917 ;; Hardware stack levels required when called:    5
  9918 ;; This function calls:
  9919 ;;		Nothing
  9920 ;; This function is called by:
  9921 ;;		_MTOUCH_Sensor_Initialize
  9922 ;;		_MTOUCH_Sensor_Enable
  9923 ;;		_MTOUCH_Sensor_RawSample_Get
  9924 ;; This function uses a non-reentrant model
  9925 ;;
  9926                           
  9927                           
  9928                           ;psect for function ___bmul
  9929  1BD4                     ___bmul:
  9930                           
  9931                           ;incstack = 0
  9932                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  9933                           ;___bmul@multiplier stored from wreg
  9934  1BD4  00F3               	movwf	___bmul@multiplier
  9935  1BD5  01F2               	clrf	___bmul@product
  9936  1BD6                     l3648:
  9937  1BD6  1C73               	btfss	___bmul@multiplier,0
  9938  1BD7  2BDC               	goto	l3652
  9939  1BD8  0870               	movf	___bmul@multiplicand,w
  9940  1BD9  00F1               	movwf	??___bmul
  9941  1BDA  0871               	movf	??___bmul,w
  9942  1BDB  07F2               	addwf	___bmul@product,f
  9943  1BDC                     l3652:
  9944  1BDC  1003               	clrc
  9945  1BDD  0DF0               	rlf	___bmul@multiplicand,f
  9946  1BDE  1003               	clrc
  9947  1BDF  0CF3               	rrf	___bmul@multiplier,f
  9948  1BE0  0873               	movf	___bmul@multiplier,w
  9949  1BE1  1D03               	btfss	3,2
  9950  1BE2  2BD6               	goto	l3648
  9951  1BE3  0872               	movf	___bmul@product,w
  9952  1BE4  0008               	return
  9953  1BE5                     __end_of___bmul:
  9954                           
  9955                           	psect	text39
  9956  1C47                     __ptext39:	
  9957 ;; *************** function _MTOUCH_Button_InitializeAll *****************
  9958 ;; Defined at:
  9959 ;;		line 155 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9960 ;; Parameters:    Size  Location     Type
  9961 ;;		None
  9962 ;; Auto vars:     Size  Location     Type
  9963 ;;  button          1   11[COMMON] enum E2818
  9964 ;; Return value:  Size  Location     Type
  9965 ;;                  1    wreg      void 
  9966 ;; Registers used:
  9967 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9968 ;; Tracked objects:
  9969 ;;		On entry : 0/3
  9970 ;;		On exit  : 0/0
  9971 ;;		Unchanged: 0/0
  9972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9974 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9975 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9976 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9977 ;;Total ram usage:        2 bytes
  9978 ;; Hardware stack levels used:    1
  9979 ;; Hardware stack levels required when called:    7
  9980 ;; This function calls:
  9981 ;;		_MTOUCH_Button_Initialize
  9982 ;;		_memcpy
  9983 ;; This function is called by:
  9984 ;;		_MTOUCH_Initialize
  9985 ;; This function uses a non-reentrant model
  9986 ;;
  9987                           
  9988                           
  9989                           ;psect for function _MTOUCH_Button_InitializeAll
  9990  1C47                     _MTOUCH_Button_InitializeAll:
  9991                           
  9992                           ;mcc_generated_files/mtouch/mtouch_button.c: 157:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 159:     memcpy(mtouch_button,mtouch_button_i
      +                          nit,sizeof(mtouch_button_init));
  9993                           
  9994                           ;incstack = 0
  9995                           ; Regs used in _MTOUCH_Button_InitializeAll: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9996  1C47  3000               	movlw	low (_mtouch_button_init| (0+32768))
  9997  1C48  00F0               	movwf	memcpy@s1
  9998  1C49  3098               	movlw	high (_mtouch_button_init| (0+32768))
  9999  1C4A  00F1               	movwf	memcpy@s1+1
 10000  1C4B  3010               	movlw	16
 10001  1C4C  00F2               	movwf	memcpy@n
 10002  1C4D  3000               	movlw	0
 10003  1C4E  00F3               	movwf	memcpy@n+1
 10004  1C4F  3034               	movlw	(low (_mtouch_button| (0+512)))& (0+255)
 10005  1C50  319D  2566  319C   	fcall	_memcpy
 10006                           
 10007                           ;mcc_generated_files/mtouch/mtouch_button.c: 161:     for (button = 0; button < 1u; butt
      +                          on++)
 10008  1C53  01FB               	clrf	MTOUCH_Button_InitializeAll@button
 10009  1C54                     l4866:
 10010                           
 10011                           ;mcc_generated_files/mtouch/mtouch_button.c: 162:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 163:         MTOUCH_Button_Initialize(button);
 10012  1C54  087B               	movf	MTOUCH_Button_InitializeAll@button,w
 10013  1C55  319D  25BD  319C   	fcall	_MTOUCH_Button_Initialize
 10014                           
 10015                           ;mcc_generated_files/mtouch/mtouch_button.c: 164:     }
 10016  1C58  3001               	movlw	1
 10017  1C59  00FA               	movwf	??_MTOUCH_Button_InitializeAll
 10018  1C5A  087A               	movf	??_MTOUCH_Button_InitializeAll,w
 10019  1C5B  07FB               	addwf	MTOUCH_Button_InitializeAll@button,f
 10020  1C5C  087B               	movf	MTOUCH_Button_InitializeAll@button,w
 10021  1C5D  1D03               	btfss	3,2
 10022  1C5E  0008               	return
 10023  1C5F  2C54               	goto	l4866
 10024  1C60                     __end_of_MTOUCH_Button_InitializeAll:
 10025                           
 10026                           	psect	text40
 10027  1D66                     __ptext40:	
 10028 ;; *************** function _memcpy *****************
 10029 ;; Defined at:
 10030 ;;		line 4 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/memcpy.c"
 10031 ;; Parameters:    Size  Location     Type
 10032 ;;  d1              1    wreg     PTR void 
 10033 ;;		 -> mtouch_button(16), 
 10034 ;;  s1              2    0[COMMON] PTR const void 
 10035 ;;		 -> mtouch_button_init(16), 
 10036 ;;  n               2    2[COMMON] unsigned int 
 10037 ;; Auto vars:     Size  Location     Type
 10038 ;;  d1              1    8[COMMON] PTR void 
 10039 ;;		 -> mtouch_button(16), 
 10040 ;;  s               2    5[COMMON] PTR const unsigned char 
 10041 ;;		 -> mtouch_button_init(16), 
 10042 ;;  d               1    9[COMMON] PTR unsigned char 
 10043 ;;		 -> mtouch_button(16), 
 10044 ;;  tmp             1    7[COMMON] unsigned char 
 10045 ;; Return value:  Size  Location     Type
 10046 ;;                  1    wreg      PTR void 
 10047 ;; Registers used:
 10048 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 10049 ;; Tracked objects:
 10050 ;;		On entry : 0/3
 10051 ;;		On exit  : 0/0
 10052 ;;		Unchanged: 0/0
 10053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10054 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10055 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10056 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10057 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10058 ;;Total ram usage:       10 bytes
 10059 ;; Hardware stack levels used:    1
 10060 ;; Hardware stack levels required when called:    5
 10061 ;; This function calls:
 10062 ;;		Nothing
 10063 ;; This function is called by:
 10064 ;;		_MTOUCH_Button_InitializeAll
 10065 ;; This function uses a non-reentrant model
 10066 ;;
 10067                           
 10068                           
 10069                           ;psect for function _memcpy
 10070  1D66                     _memcpy:
 10071                           
 10072                           ;incstack = 0
 10073                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0+pclath]
 10074                           ;memcpy@d1 stored from wreg
 10075  1D66  00F8               	movwf	memcpy@d1
 10076  1D67  0871               	movf	memcpy@s1+1,w
 10077  1D68  00F6               	movwf	memcpy@s+1
 10078  1D69  0870               	movf	memcpy@s1,w
 10079  1D6A  00F5               	movwf	memcpy@s
 10080  1D6B  0878               	movf	memcpy@d1,w
 10081  1D6C  00F4               	movwf	??_memcpy
 10082  1D6D  0874               	movf	??_memcpy,w
 10083  1D6E  00F9               	movwf	memcpy@d
 10084  1D6F                     l4460:
 10085  1D6F  3001               	movlw	1
 10086  1D70  02F2               	subwf	memcpy@n,f
 10087  1D71  3000               	movlw	0
 10088  1D72  3BF3               	subwfb	memcpy@n+1,f
 10089  1D73  0A72               	incf	memcpy@n,w
 10090  1D74  1903               	btfsc	3,2
 10091  1D75  0A73               	incf	memcpy@n+1,w
 10092  1D76  1903               	btfsc	3,2
 10093  1D77  0008               	return
 10094  1D78  0875               	movf	memcpy@s,w
 10095  1D79  0084               	movwf	4
 10096  1D7A  0876               	movf	memcpy@s+1,w
 10097  1D7B  0085               	movwf	5
 10098  1D7C  0800               	movf	0,w	;code access
 10099  1D7D  00F4               	movwf	??_memcpy
 10100  1D7E  0874               	movf	??_memcpy,w
 10101  1D7F  00F7               	movwf	memcpy@tmp
 10102  1D80  3001               	movlw	1
 10103  1D81  07F5               	addwf	memcpy@s,f
 10104  1D82  3000               	movlw	0
 10105  1D83  3DF6               	addwfc	memcpy@s+1,f
 10106  1D84  0877               	movf	memcpy@tmp,w
 10107  1D85  00F4               	movwf	??_memcpy
 10108  1D86  0879               	movf	memcpy@d,w
 10109  1D87  0086               	movwf	6
 10110  1D88  3002               	movlw	2	; select bank4/5
 10111  1D89  0087               	movwf	7
 10112  1D8A  0874               	movf	??_memcpy,w
 10113  1D8B  0081               	movwf	1
 10114  1D8C  3001               	movlw	1
 10115  1D8D  00F4               	movwf	??_memcpy
 10116  1D8E  0874               	movf	??_memcpy,w
 10117  1D8F  07F9               	addwf	memcpy@d,f
 10118  1D90  2D6F               	goto	l4460
 10119  1D91                     __end_of_memcpy:
 10120                           
 10121                           	psect	text41
 10122  1DBD                     __ptext41:	
 10123 ;; *************** function _MTOUCH_Button_Initialize *****************
 10124 ;; Defined at:
 10125 ;;		line 143 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10126 ;; Parameters:    Size  Location     Type
 10127 ;;  name            1    wreg     enum E2818
 10128 ;; Auto vars:     Size  Location     Type
 10129 ;;  name            1    2[COMMON] enum E2818
 10130 ;;  button          1    3[COMMON] PTR struct .
 10131 ;;		 -> mtouch_button(16), 
 10132 ;; Return value:  Size  Location     Type
 10133 ;;                  1    wreg      void 
 10134 ;; Registers used:
 10135 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10136 ;; Tracked objects:
 10137 ;;		On entry : 0/3
 10138 ;;		On exit  : 0/0
 10139 ;;		Unchanged: 0/0
 10140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10142 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10143 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10144 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10145 ;;Total ram usage:        4 bytes
 10146 ;; Hardware stack levels used:    1
 10147 ;; Hardware stack levels required when called:    6
 10148 ;; This function calls:
 10149 ;;		_MTOUCH_Sensor_Calibrate
 10150 ;; This function is called by:
 10151 ;;		_MTOUCH_Button_InitializeAll
 10152 ;;		_Button_State_NotPressed
 10153 ;;		_Button_State_Pressed
 10154 ;; This function uses a non-reentrant model
 10155 ;;
 10156                           
 10157                           
 10158                           ;psect for function _MTOUCH_Button_Initialize
 10159  1DBD                     _MTOUCH_Button_Initialize:
 10160                           
 10161                           ;incstack = 0
 10162                           ; Regs used in _MTOUCH_Button_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 10163                           ;MTOUCH_Button_Initialize@name stored from wreg
 10164  1DBD  00F2               	movwf	MTOUCH_Button_Initialize@name
 10165                           
 10166                           ;mcc_generated_files/mtouch/mtouch_button.c: 143: void MTOUCH_Button_Initialize(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 144: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 145:     mtouch_button_t* button = &mtouch_button[name];
 10167  1DBE  0872               	movf	MTOUCH_Button_Initialize@name,w
 10168  1DBF  00F0               	movwf	??_MTOUCH_Button_Initialize
 10169  1DC0  3003               	movlw	3
 10170  1DC1                     u4935:
 10171  1DC1  35F0               	lslf	??_MTOUCH_Button_Initialize,f
 10172  1DC2  3EFF               	addlw	-1
 10173  1DC3  1D03               	skipz
 10174  1DC4  2DC1               	goto	u4935
 10175  1DC5  3570               	lslf	??_MTOUCH_Button_Initialize,w
 10176  1DC6  3E34               	addlw	(low (_mtouch_button| (0+512)))& (0+255)
 10177  1DC7  00F1               	movwf	??_MTOUCH_Button_Initialize+1
 10178  1DC8  0871               	movf	??_MTOUCH_Button_Initialize+1,w
 10179  1DC9  00F3               	movwf	MTOUCH_Button_Initialize@button
 10180                           
 10181                           ;mcc_generated_files/mtouch/mtouch_button.c: 147:     button->state = MTOUCH_BUTTON_STAT
      +                          E_initializing;
 10182  1DCA  0873               	movf	MTOUCH_Button_Initialize@button,w
 10183  1DCB  3E02               	addlw	2
 10184  1DCC  0086               	movwf	6
 10185  1DCD  3002               	movlw	2	; select bank4/5
 10186  1DCE  0087               	movwf	7
 10187  1DCF  0181               	clrf	1
 10188                           
 10189                           ;mcc_generated_files/mtouch/mtouch_button.c: 148:     button->baseline = (mtouch_button_
      +                          baseline_t)0;
 10190  1DD0  0873               	movf	MTOUCH_Button_Initialize@button,w
 10191  1DD1  3E05               	addlw	5
 10192  1DD2  0086               	movwf	6
 10193  1DD3  3002               	movlw	2	; select bank4/5
 10194  1DD4  0087               	movwf	7
 10195  1DD5  3000               	movlw	0
 10196  1DD6  3FC0               	movwi [0]fsr1
 10197  1DD7  3000               	movlw	0
 10198  1DD8  3FC1               	movwi [1]fsr1
 10199  1DD9  3FC2               	movwi [2]fsr1
 10200  1DDA  3FC3               	movwi [3]fsr1
 10201                           
 10202                           ;mcc_generated_files/mtouch/mtouch_button.c: 149:     button->counter = (mtouch_button_s
      +                          tatecounter_t)0;
 10203  1DDB  0873               	movf	MTOUCH_Button_Initialize@button,w
 10204  1DDC  3E0A               	addlw	10
 10205  1DDD  0086               	movwf	6
 10206  1DDE  3002               	movlw	2	; select bank4/5
 10207  1DDF  0087               	movwf	7
 10208  1DE0  3000               	movlw	0
 10209  1DE1  3FC0               	movwi [0]fsr1
 10210  1DE2  3FC1               	movwi [1]fsr1
 10211                           
 10212                           ;mcc_generated_files/mtouch/mtouch_button.c: 150:     button->baseline_count = (mtouch_b
      +                          utton_baselinecounter_t)0;
 10213  1DE3  0873               	movf	MTOUCH_Button_Initialize@button,w
 10214  1DE4  3E0C               	addlw	12
 10215  1DE5  0086               	movwf	6
 10216  1DE6  3002               	movlw	2	; select bank4/5
 10217  1DE7  0087               	movwf	7
 10218  1DE8  3000               	movlw	0
 10219  1DE9  3FC0               	movwi [0]fsr1
 10220  1DEA  3FC1               	movwi [1]fsr1
 10221                           
 10222                           ;mcc_generated_files/mtouch/mtouch_button.c: 152:     MTOUCH_Sensor_Calibrate(button->se
      +                          nsor);
 10223  1DEB  0A73               	incf	MTOUCH_Button_Initialize@button,w
 10224  1DEC  0086               	movwf	6
 10225  1DED  3002               	movlw	2	; select bank4/5
 10226  1DEE  0087               	movwf	7
 10227  1DEF  0801               	movf	1,w
 10228  1DF0  3180  2002         	fcall	_MTOUCH_Sensor_Calibrate
 10229  1DF2  0008               	return
 10230  1DF3                     __end_of_MTOUCH_Button_Initialize:
 10231                           
 10232                           	psect	text42
 10233  0002                     __ptext42:	
 10234 ;; *************** function _MTOUCH_Sensor_Calibrate *****************
 10235 ;; Defined at:
 10236 ;;		line 534 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10237 ;; Parameters:    Size  Location     Type
 10238 ;;  sensor          1    wreg     enum E2660
 10239 ;; Auto vars:     Size  Location     Type
 10240 ;;  sensor          1    0[COMMON] enum E2660
 10241 ;; Return value:  Size  Location     Type
 10242 ;;                  1    wreg      void 
 10243 ;; Registers used:
 10244 ;;		wreg
 10245 ;; Tracked objects:
 10246 ;;		On entry : 0/3
 10247 ;;		On exit  : 0/0
 10248 ;;		Unchanged: 0/0
 10249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10253 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10254 ;;Total ram usage:        0 bytes
 10255 ;; Hardware stack levels used:    1
 10256 ;; Hardware stack levels required when called:    5
 10257 ;; This function calls:
 10258 ;;		Nothing
 10259 ;; This function is called by:
 10260 ;;		_MTOUCH_Button_Initialize
 10261 ;; This function uses a non-reentrant model
 10262 ;;
 10263                           
 10264                           
 10265                           ;psect for function _MTOUCH_Sensor_Calibrate
 10266  0002                     _MTOUCH_Sensor_Calibrate:
 10267                           
 10268                           ;incstack = 0
 10269                           ; Regs used in _MTOUCH_Sensor_Calibrate: [wreg]
 10270  0002  0008               	return
 10271  0003                     __end_of_MTOUCH_Sensor_Calibrate:
 10272                           
 10273                           	psect	text43
 10274  1CD7                     __ptext43:	
 10275 ;; *************** function _EUSART_Initialize *****************
 10276 ;; Defined at:
 10277 ;;		line 66 in file "mcc_generated_files/eusart.c"
 10278 ;; Parameters:    Size  Location     Type
 10279 ;;		None
 10280 ;; Auto vars:     Size  Location     Type
 10281 ;;		None
 10282 ;; Return value:  Size  Location     Type
 10283 ;;                  1    wreg      void 
 10284 ;; Registers used:
 10285 ;;		wreg, status,2, status,0, pclath, cstack
 10286 ;; Tracked objects:
 10287 ;;		On entry : 1F/0
 10288 ;;		On exit  : 1F/3
 10289 ;;		Unchanged: 0/0
 10290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10294 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10295 ;;Total ram usage:        0 bytes
 10296 ;; Hardware stack levels used:    1
 10297 ;; Hardware stack levels required when called:    6
 10298 ;; This function calls:
 10299 ;;		_EUSART_SetErrorHandler
 10300 ;;		_EUSART_SetFramingErrorHandler
 10301 ;;		_EUSART_SetOverrunErrorHandler
 10302 ;; This function is called by:
 10303 ;;		_SYSTEM_Initialize
 10304 ;; This function uses a non-reentrant model
 10305 ;;
 10306                           
 10307                           
 10308                           ;psect for function _EUSART_Initialize
 10309  1CD7                     _EUSART_Initialize:
 10310                           
 10311                           ;mcc_generated_files/eusart.c: 71:     BAUDCON = 0x08;
 10312                           
 10313                           ;incstack = 0
 10314                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10315  1CD7  3008               	movlw	8
 10316  1CD8  0023               	movlb	3	; select bank3
 10317  1CD9  009F               	movwf	31	;volatile
 10318                           
 10319                           ;mcc_generated_files/eusart.c: 74:     RCSTA = 0x90;
 10320  1CDA  3090               	movlw	144
 10321  1CDB  009D               	movwf	29	;volatile
 10322                           
 10323                           ;mcc_generated_files/eusart.c: 77:     TXSTA = 0x24;
 10324  1CDC  3024               	movlw	36
 10325  1CDD  009E               	movwf	30	;volatile
 10326                           
 10327                           ;mcc_generated_files/eusart.c: 80:     SPBRGL = 0xCF;
 10328  1CDE  30CF               	movlw	207
 10329  1CDF  009B               	movwf	27	;volatile
 10330                           
 10331                           ;mcc_generated_files/eusart.c: 83:     SPBRGH = 0x00;
 10332  1CE0  019C               	clrf	28	;volatile
 10333                           
 10334                           ;mcc_generated_files/eusart.c: 86:     EUSART_SetFramingErrorHandler(EUSART_DefaultFrami
      +                          ngErrorHandler);
 10335  1CE1  3000               	movlw	0
 10336  1CE2  00F0               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
 10337  1CE3  3000               	movlw	0
 10338  1CE4  00F1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
 10339  1CE5  319A  22D2  319C   	fcall	_EUSART_SetFramingErrorHandler
 10340                           
 10341                           ;mcc_generated_files/eusart.c: 87:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOverr
      +                          unErrorHandler);
 10342  1CE8  3000               	movlw	0
 10343  1CE9  00F0               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
 10344  1CEA  3000               	movlw	0
 10345  1CEB  00F1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
 10346  1CEC  319A  22BC  319C   	fcall	_EUSART_SetOverrunErrorHandler
 10347                           
 10348                           ;mcc_generated_files/eusart.c: 88:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandler
      +                          );
 10349  1CEF  3000               	movlw	0
 10350  1CF0  00F0               	movwf	EUSART_SetErrorHandler@interruptHandler
 10351  1CF1  3000               	movlw	0
 10352  1CF2  00F1               	movwf	EUSART_SetErrorHandler@interruptHandler+1
 10353  1CF3  319A  22B7         	fcall	_EUSART_SetErrorHandler
 10354                           
 10355                           ;mcc_generated_files/eusart.c: 90:     eusartRxLastError.status = 0;
 10356  1CF5  0023               	movlb	3	; select bank3
 10357  1CF6  01BA               	clrf	_eusartRxLastError^(0+384)	;volatile
 10358  1CF7  0008               	return
 10359  1CF8                     __end_of_EUSART_Initialize:
 10360                           
 10361                           	psect	text44
 10362  1ABC                     __ptext44:	
 10363 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
 10364 ;; Defined at:
 10365 ;;		line 161 in file "mcc_generated_files/eusart.c"
 10366 ;; Parameters:    Size  Location     Type
 10367 ;;  interruptHan    2    0[COMMON] PTR FTN()void 
 10368 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
 10369 ;; Auto vars:     Size  Location     Type
 10370 ;;		None
 10371 ;; Return value:  Size  Location     Type
 10372 ;;                  1    wreg      void 
 10373 ;; Registers used:
 10374 ;;		wreg
 10375 ;; Tracked objects:
 10376 ;;		On entry : 1F/4
 10377 ;;		On exit  : 1F/4
 10378 ;;		Unchanged: 0/0
 10379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10380 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10383 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10384 ;;Total ram usage:        2 bytes
 10385 ;; Hardware stack levels used:    1
 10386 ;; Hardware stack levels required when called:    5
 10387 ;; This function calls:
 10388 ;;		Nothing
 10389 ;; This function is called by:
 10390 ;;		_EUSART_Initialize
 10391 ;; This function uses a non-reentrant model
 10392 ;;
 10393                           
 10394                           
 10395                           ;psect for function _EUSART_SetOverrunErrorHandler
 10396  1ABC                     _EUSART_SetOverrunErrorHandler:
 10397                           
 10398                           ;mcc_generated_files/eusart.c: 162:     EUSART_OverrunErrorHandler = interruptHandler;
 10399                           
 10400                           ;incstack = 0
 10401                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
 10402  1ABC  0871               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
 10403  1ABD  00D6               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+512)
 10404  1ABE  0870               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
 10405  1ABF  00D5               	movwf	_EUSART_OverrunErrorHandler^(0+512)
 10406  1AC0  0008               	return
 10407  1AC1                     __end_of_EUSART_SetOverrunErrorHandler:
 10408                           
 10409                           	psect	text45
 10410  1AD2                     __ptext45:	
 10411 ;; *************** function _EUSART_SetFramingErrorHandler *****************
 10412 ;; Defined at:
 10413 ;;		line 157 in file "mcc_generated_files/eusart.c"
 10414 ;; Parameters:    Size  Location     Type
 10415 ;;  interruptHan    2    0[COMMON] PTR FTN()void 
 10416 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
 10417 ;; Auto vars:     Size  Location     Type
 10418 ;;		None
 10419 ;; Return value:  Size  Location     Type
 10420 ;;                  1    wreg      void 
 10421 ;; Registers used:
 10422 ;;		wreg
 10423 ;; Tracked objects:
 10424 ;;		On entry : 1F/3
 10425 ;;		On exit  : 1F/4
 10426 ;;		Unchanged: 0/0
 10427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10428 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10431 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10432 ;;Total ram usage:        2 bytes
 10433 ;; Hardware stack levels used:    1
 10434 ;; Hardware stack levels required when called:    5
 10435 ;; This function calls:
 10436 ;;		Nothing
 10437 ;; This function is called by:
 10438 ;;		_EUSART_Initialize
 10439 ;; This function uses a non-reentrant model
 10440 ;;
 10441                           
 10442                           
 10443                           ;psect for function _EUSART_SetFramingErrorHandler
 10444  1AD2                     _EUSART_SetFramingErrorHandler:
 10445                           
 10446                           ;mcc_generated_files/eusart.c: 158:     EUSART_FramingErrorHandler = interruptHandler;
 10447                           
 10448                           ;incstack = 0
 10449                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
 10450  1AD2  0871               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
 10451  1AD3  0024               	movlb	4	; select bank4
 10452  1AD4  00D8               	movwf	(_EUSART_FramingErrorHandler+1)^(0+512)
 10453  1AD5  0870               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
 10454  1AD6  00D7               	movwf	_EUSART_FramingErrorHandler^(0+512)
 10455  1AD7  0008               	return
 10456  1AD8                     __end_of_EUSART_SetFramingErrorHandler:
 10457                           
 10458                           	psect	text46
 10459  1AB7                     __ptext46:	
 10460 ;; *************** function _EUSART_SetErrorHandler *****************
 10461 ;; Defined at:
 10462 ;;		line 165 in file "mcc_generated_files/eusart.c"
 10463 ;; Parameters:    Size  Location     Type
 10464 ;;  interruptHan    2    0[COMMON] PTR FTN()void 
 10465 ;;		 -> EUSART_DefaultErrorHandler(1), 
 10466 ;; Auto vars:     Size  Location     Type
 10467 ;;		None
 10468 ;; Return value:  Size  Location     Type
 10469 ;;                  1    wreg      void 
 10470 ;; Registers used:
 10471 ;;		wreg
 10472 ;; Tracked objects:
 10473 ;;		On entry : 1F/4
 10474 ;;		On exit  : 1F/4
 10475 ;;		Unchanged: 0/0
 10476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10477 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10480 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10481 ;;Total ram usage:        2 bytes
 10482 ;; Hardware stack levels used:    1
 10483 ;; Hardware stack levels required when called:    5
 10484 ;; This function calls:
 10485 ;;		Nothing
 10486 ;; This function is called by:
 10487 ;;		_EUSART_Initialize
 10488 ;; This function uses a non-reentrant model
 10489 ;;
 10490                           
 10491                           
 10492                           ;psect for function _EUSART_SetErrorHandler
 10493  1AB7                     _EUSART_SetErrorHandler:
 10494                           
 10495                           ;mcc_generated_files/eusart.c: 166:     EUSART_ErrorHandler = interruptHandler;
 10496                           
 10497                           ;incstack = 0
 10498                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
 10499  1AB7  0871               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
 10500  1AB8  00D4               	movwf	(_EUSART_ErrorHandler+1)^(0+512)
 10501  1AB9  0870               	movf	EUSART_SetErrorHandler@interruptHandler,w
 10502  1ABA  00D3               	movwf	_EUSART_ErrorHandler^(0+512)
 10503  1ABB  0008               	return
 10504  1ABC                     __end_of_EUSART_SetErrorHandler:
 10505                           
 10506                           	psect	text47
 10507  1AF0                     __ptext47:	
 10508 ;; *************** function _ADC_Initialize *****************
 10509 ;; Defined at:
 10510 ;;		line 67 in file "mcc_generated_files/adc.c"
 10511 ;; Parameters:    Size  Location     Type
 10512 ;;		None
 10513 ;; Auto vars:     Size  Location     Type
 10514 ;;		None
 10515 ;; Return value:  Size  Location     Type
 10516 ;;                  1    wreg      void 
 10517 ;; Registers used:
 10518 ;;		wreg, status,2
 10519 ;; Tracked objects:
 10520 ;;		On entry : 1F/1
 10521 ;;		On exit  : 1F/1
 10522 ;;		Unchanged: 0/0
 10523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10525 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10527 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10528 ;;Total ram usage:        0 bytes
 10529 ;; Hardware stack levels used:    1
 10530 ;; Hardware stack levels required when called:    5
 10531 ;; This function calls:
 10532 ;;		Nothing
 10533 ;; This function is called by:
 10534 ;;		_SYSTEM_Initialize
 10535 ;; This function uses a non-reentrant model
 10536 ;;
 10537                           
 10538                           
 10539                           ;psect for function _ADC_Initialize
 10540  1AF0                     _ADC_Initialize:
 10541                           
 10542                           ;mcc_generated_files/adc.c: 72:     ADCON1 = 0xA0;
 10543                           
 10544                           ;incstack = 0
 10545                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 10546  1AF0  30A0               	movlw	160
 10547  1AF1  009E               	movwf	30	;volatile
 10548                           
 10549                           ;mcc_generated_files/adc.c: 75:     ADRESL = 0x00;
 10550  1AF2  019B               	clrf	27	;volatile
 10551                           
 10552                           ;mcc_generated_files/adc.c: 78:     ADRESH = 0x00;
 10553  1AF3  019C               	clrf	28	;volatile
 10554                           
 10555                           ;mcc_generated_files/adc.c: 81:     ADCON0 = 0x01;
 10556  1AF4  3001               	movlw	1
 10557  1AF5  009D               	movwf	29	;volatile
 10558  1AF6  0008               	return
 10559  1AF7                     __end_of_ADC_Initialize:
 10560                           
 10561                           	psect	text48
 10562  1BC3                     __ptext48:	
 10563 ;; *************** function _Read_ADC_Num *****************
 10564 ;; Defined at:
 10565 ;;		line 189 in file "main.c"
 10566 ;; Parameters:    Size  Location     Type
 10567 ;;		None
 10568 ;; Auto vars:     Size  Location     Type
 10569 ;;  convertedVal    2    4[COMMON] unsigned short 
 10570 ;; Return value:  Size  Location     Type
 10571 ;;                  2    2[COMMON] unsigned short 
 10572 ;; Registers used:
 10573 ;;		wreg, status,0, pclath, cstack
 10574 ;; Tracked objects:
 10575 ;;		On entry : 1F/1
 10576 ;;		On exit  : 1F/1
 10577 ;;		Unchanged: 0/0
 10578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10579 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10580 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10582 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10583 ;;Total ram usage:        4 bytes
 10584 ;; Hardware stack levels used:    1
 10585 ;; Hardware stack levels required when called:    6
 10586 ;; This function calls:
 10587 ;;		_ADC_GetConversionResult
 10588 ;;		_ADC_IsConversionDone
 10589 ;; This function is called by:
 10590 ;;		_main
 10591 ;; This function uses a non-reentrant model
 10592 ;;
 10593                           
 10594                           
 10595                           ;psect for function _Read_ADC_Num
 10596  1BC3                     _Read_ADC_Num:
 10597  1BC3                     l5248:	
 10598                           ;main.c: 191:     uint16_t convertedValue;;main.c: 193:     while(!ADC_IsConversionDone(
      +                          ));
 10599                           
 10600                           ;incstack = 0
 10601                           ; Regs used in _Read_ADC_Num: [wreg+status,0+pclath+cstack]
 10602                           
 10603  1BC3  319A  22CC  319B   	fcall	_ADC_IsConversionDone
 10604  1BC6  3A00               	xorlw	0
 10605  1BC7  1903               	skipnz
 10606  1BC8  2BC3               	goto	l5248
 10607                           
 10608                           ;main.c: 194:     convertedValue = ADC_GetConversionResult();
 10609  1BC9  319A  22B2         	fcall	_ADC_GetConversionResult
 10610  1BCB  0871               	movf	?_ADC_GetConversionResult+1,w
 10611  1BCC  00F5               	movwf	Read_ADC_Num@convertedValue+1
 10612  1BCD  0870               	movf	?_ADC_GetConversionResult,w
 10613  1BCE  00F4               	movwf	Read_ADC_Num@convertedValue
 10614                           
 10615                           ;main.c: 196:     return convertedValue;
 10616  1BCF  0875               	movf	Read_ADC_Num@convertedValue+1,w
 10617  1BD0  00F3               	movwf	?_Read_ADC_Num+1
 10618  1BD1  0874               	movf	Read_ADC_Num@convertedValue,w
 10619  1BD2  00F2               	movwf	?_Read_ADC_Num
 10620  1BD3  0008               	return
 10621  1BD4                     __end_of_Read_ADC_Num:
 10622                           
 10623                           	psect	text49
 10624  1ACC                     __ptext49:	
 10625 ;; *************** function _ADC_IsConversionDone *****************
 10626 ;; Defined at:
 10627 ;;		line 100 in file "mcc_generated_files/adc.c"
 10628 ;; Parameters:    Size  Location     Type
 10629 ;;		None
 10630 ;; Auto vars:     Size  Location     Type
 10631 ;;		None
 10632 ;; Return value:  Size  Location     Type
 10633 ;;                  1    wreg      _Bool 
 10634 ;; Registers used:
 10635 ;;		wreg, status,0
 10636 ;; Tracked objects:
 10637 ;;		On entry : 1F/1
 10638 ;;		On exit  : 1F/1
 10639 ;;		Unchanged: 0/0
 10640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10644 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10645 ;;Total ram usage:        0 bytes
 10646 ;; Hardware stack levels used:    1
 10647 ;; Hardware stack levels required when called:    5
 10648 ;; This function calls:
 10649 ;;		Nothing
 10650 ;; This function is called by:
 10651 ;;		_Read_ADC_Num
 10652 ;; This function uses a non-reentrant model
 10653 ;;
 10654                           
 10655                           
 10656                           ;psect for function _ADC_IsConversionDone
 10657  1ACC                     _ADC_IsConversionDone:
 10658                           
 10659                           ;mcc_generated_files/adc.c: 103:    return ((_Bool)(!ADCON0bits.GO_nDONE));
 10660                           
 10661                           ;incstack = 0
 10662                           ; Regs used in _ADC_IsConversionDone: [wreg+status,0]
 10663  1ACC  1003               	clrc
 10664  1ACD  1C9D               	btfss	29,1	;volatile
 10665  1ACE  1403               	setc
 10666  1ACF  3000               	movlw	0
 10667  1AD0  3D09               	addwfc	9,w
 10668  1AD1  0008               	return
 10669  1AD2                     __end_of_ADC_IsConversionDone:
 10670                           
 10671                           	psect	text50
 10672  1AB2                     __ptext50:	
 10673 ;; *************** function _ADC_GetConversionResult *****************
 10674 ;; Defined at:
 10675 ;;		line 106 in file "mcc_generated_files/adc.c"
 10676 ;; Parameters:    Size  Location     Type
 10677 ;;		None
 10678 ;; Auto vars:     Size  Location     Type
 10679 ;;		None
 10680 ;; Return value:  Size  Location     Type
 10681 ;;                  2    0[COMMON] unsigned short 
 10682 ;; Registers used:
 10683 ;;		wreg
 10684 ;; Tracked objects:
 10685 ;;		On entry : 1F/1
 10686 ;;		On exit  : 1F/1
 10687 ;;		Unchanged: 0/0
 10688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10689 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10692 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10693 ;;Total ram usage:        2 bytes
 10694 ;; Hardware stack levels used:    1
 10695 ;; Hardware stack levels required when called:    5
 10696 ;; This function calls:
 10697 ;;		Nothing
 10698 ;; This function is called by:
 10699 ;;		_Read_ADC_Num
 10700 ;; This function uses a non-reentrant model
 10701 ;;
 10702                           
 10703                           
 10704                           ;psect for function _ADC_GetConversionResult
 10705  1AB2                     _ADC_GetConversionResult:
 10706                           
 10707                           ;mcc_generated_files/adc.c: 109:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
 10708                           
 10709                           ;incstack = 0
 10710                           ; Regs used in _ADC_GetConversionResult: [wreg]
 10711  1AB2  081C               	movf	28,w	;volatile
 10712  1AB3  00F1               	movwf	?_ADC_GetConversionResult+1
 10713  1AB4  081B               	movf	27,w	;volatile
 10714  1AB5  00F0               	movwf	?_ADC_GetConversionResult
 10715  1AB6  0008               	return
 10716  1AB7                     __end_of_ADC_GetConversionResult:
 10717                           
 10718                           	psect	text51
 10719  137F                     __ptext51:	
 10720 ;; *************** function _Measure_Temp_PT100_2Wire *****************
 10721 ;; Defined at:
 10722 ;;		line 219 in file "main.c"
 10723 ;; Parameters:    Size  Location     Type
 10724 ;;  R_PT100         4   48[BANK1 ] float 
 10725 ;; Auto vars:     Size  Location     Type
 10726 ;;  Temp_PT100      4   52[BANK1 ] float 
 10727 ;; Return value:  Size  Location     Type
 10728 ;;                  4   48[BANK1 ] float 
 10729 ;; Registers used:
 10730 ;;		wreg, status,2, status,0, pclath, cstack
 10731 ;; Tracked objects:
 10732 ;;		On entry : 1F/1
 10733 ;;		On exit  : 1F/1
 10734 ;;		Unchanged: 0/0
 10735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10736 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 10737 ;;      Locals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0
 10738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10739 ;;      Totals:         0       0      20       0       0       0       0       0       0       0       0       0       
      +0       0
 10740 ;;Total ram usage:       20 bytes
 10741 ;; Hardware stack levels used:    1
 10742 ;; Hardware stack levels required when called:    8
 10743 ;; This function calls:
 10744 ;;		___fladd
 10745 ;;		___fldiv
 10746 ;;		___flmul
 10747 ;;		_sqrtf
 10748 ;; This function is called by:
 10749 ;;		_main
 10750 ;; This function uses a non-reentrant model
 10751 ;;
 10752                           
 10753                           
 10754                           ;psect for function _Measure_Temp_PT100_2Wire
 10755  137F                     _Measure_Temp_PT100_2Wire:
 10756                           
 10757                           ;main.c: 221:     float Temp_PT100;;main.c: 223:     Temp_PT100 = ((-3.9083E-03 + sqrtf(
      +                          17.58480889E-06 + -23.10E-09 * R_PT100)) / -1.155E-06) - Tolerance_Temp_const;
 10758                           
 10759                           ;incstack = 0
 10760                           ; Regs used in _Measure_Temp_PT100_2Wire: [wreg+status,2+status,0+pclath+cstack]
 10761  137F  3037               	movlw	55
 10762  1380  0020               	movlb	0	; select bank0
 10763  1381  00BD               	movwf	___fladd@b+3
 10764  1382  3093               	movlw	147
 10765  1383  00BC               	movwf	___fladd@b+2
 10766  1384  3083               	movlw	131
 10767  1385  00BB               	movwf	___fladd@b+1
 10768  1386  3017               	movlw	23
 10769  1387  00BA               	movwf	___fladd@b
 10770  1388  30B2               	movlw	178
 10771  1389  00A3               	movwf	___flmul@b+3
 10772  138A  30C6               	movlw	198
 10773  138B  00A2               	movwf	___flmul@b+2
 10774  138C  306D               	movlw	109
 10775  138D  00A1               	movwf	___flmul@b+1
 10776  138E  3070               	movlw	112
 10777  138F  00A0               	movwf	___flmul@b
 10778  1390  0021               	movlb	1	; select bank1
 10779  1391  0853               	movf	(Measure_Temp_PT100_2Wire@R_PT100+3)^(0+128),w
 10780  1392  0020               	movlb	0	; select bank0
 10781  1393  00A7               	movwf	___flmul@a+3
 10782  1394  0021               	movlb	1	; select bank1
 10783  1395  0852               	movf	(Measure_Temp_PT100_2Wire@R_PT100+2)^(0+128),w
 10784  1396  0020               	movlb	0	; select bank0
 10785  1397  00A6               	movwf	___flmul@a+2
 10786  1398  0021               	movlb	1	; select bank1
 10787  1399  0851               	movf	(Measure_Temp_PT100_2Wire@R_PT100+1)^(0+128),w
 10788  139A  0020               	movlb	0	; select bank0
 10789  139B  00A5               	movwf	___flmul@a+1
 10790  139C  0021               	movlb	1	; select bank1
 10791  139D  0850               	movf	Measure_Temp_PT100_2Wire@R_PT100^(0+128),w
 10792  139E  0020               	movlb	0	; select bank0
 10793  139F  00A4               	movwf	___flmul@a
 10794  13A0  318A  22F4  3193   	fcall	___flmul
 10795  13A3  0823               	movf	?___flmul+3,w
 10796  13A4  00C1               	movwf	___fladd@a+3
 10797  13A5  0822               	movf	?___flmul+2,w
 10798  13A6  00C0               	movwf	___fladd@a+2
 10799  13A7  0821               	movf	?___flmul+1,w
 10800  13A8  00BF               	movwf	___fladd@a+1
 10801  13A9  0820               	movf	?___flmul,w
 10802  13AA  00BE               	movwf	___fladd@a
 10803  13AB  3189  2113  3193   	fcall	___fladd
 10804  13AE  083D               	movf	?___fladd+3,w
 10805  13AF  0021               	movlb	1	; select bank1
 10806  13B0  00DB               	movwf	(_Measure_Temp_PT100_2Wire$2709+3)^(0+128)
 10807  13B1  0020               	movlb	0	; select bank0
 10808  13B2  083C               	movf	?___fladd+2,w
 10809  13B3  0021               	movlb	1	; select bank1
 10810  13B4  00DA               	movwf	(_Measure_Temp_PT100_2Wire$2709+2)^(0+128)
 10811  13B5  0020               	movlb	0	; select bank0
 10812  13B6  083B               	movf	?___fladd+1,w
 10813  13B7  0021               	movlb	1	; select bank1
 10814  13B8  00D9               	movwf	(_Measure_Temp_PT100_2Wire$2709+1)^(0+128)
 10815  13B9  0020               	movlb	0	; select bank0
 10816  13BA  083A               	movf	?___fladd,w
 10817  13BB  0021               	movlb	1	; select bank1
 10818  13BC  00D8               	movwf	_Measure_Temp_PT100_2Wire$2709^(0+128)
 10819                           
 10820                           ;main.c: 221:     float Temp_PT100;;main.c: 223:     Temp_PT100 = ((-3.9083E-03 + sqrtf(
      +                          17.58480889E-06 + -23.10E-09 * R_PT100)) / -1.155E-06) - Tolerance_Temp_const;
 10821  13BD  085B               	movf	(_Measure_Temp_PT100_2Wire$2709+3)^(0+128),w
 10822  13BE  0020               	movlb	0	; select bank0
 10823  13BF  00D1               	movwf	sqrtf@x+3
 10824  13C0  0021               	movlb	1	; select bank1
 10825  13C1  085A               	movf	(_Measure_Temp_PT100_2Wire$2709+2)^(0+128),w
 10826  13C2  0020               	movlb	0	; select bank0
 10827  13C3  00D0               	movwf	sqrtf@x+2
 10828  13C4  0021               	movlb	1	; select bank1
 10829  13C5  0859               	movf	(_Measure_Temp_PT100_2Wire$2709+1)^(0+128),w
 10830  13C6  0020               	movlb	0	; select bank0
 10831  13C7  00CF               	movwf	sqrtf@x+1
 10832  13C8  0021               	movlb	1	; select bank1
 10833  13C9  0858               	movf	_Measure_Temp_PT100_2Wire$2709^(0+128),w
 10834  13CA  0020               	movlb	0	; select bank0
 10835  13CB  00CE               	movwf	sqrtf@x
 10836  13CC  318D  250C  3193   	fcall	_sqrtf
 10837  13CF  0851               	movf	?_sqrtf+3,w
 10838  13D0  0021               	movlb	1	; select bank1
 10839  13D1  00DF               	movwf	(_Measure_Temp_PT100_2Wire$2710+3)^(0+128)
 10840  13D2  0020               	movlb	0	; select bank0
 10841  13D3  0850               	movf	?_sqrtf+2,w
 10842  13D4  0021               	movlb	1	; select bank1
 10843  13D5  00DE               	movwf	(_Measure_Temp_PT100_2Wire$2710+2)^(0+128)
 10844  13D6  0020               	movlb	0	; select bank0
 10845  13D7  084F               	movf	?_sqrtf+1,w
 10846  13D8  0021               	movlb	1	; select bank1
 10847  13D9  00DD               	movwf	(_Measure_Temp_PT100_2Wire$2710+1)^(0+128)
 10848  13DA  0020               	movlb	0	; select bank0
 10849  13DB  084E               	movf	?_sqrtf,w
 10850  13DC  0021               	movlb	1	; select bank1
 10851  13DD  00DC               	movwf	_Measure_Temp_PT100_2Wire$2710^(0+128)
 10852                           
 10853                           ;main.c: 221:     float Temp_PT100;;main.c: 223:     Temp_PT100 = ((-3.9083E-03 + sqrtf(
      +                          17.58480889E-06 + -23.10E-09 * R_PT100)) / -1.155E-06) - Tolerance_Temp_const;
 10854  13DE  30B5               	movlw	181
 10855  13DF  00CB               	movwf	(___fldiv@a+3)^(0+128)
 10856  13E0  309B               	movlw	155
 10857  13E1  00CA               	movwf	(___fldiv@a+2)^(0+128)
 10858  13E2  3005               	movlw	5
 10859  13E3  00C9               	movwf	(___fldiv@a+1)^(0+128)
 10860  13E4  307F               	movlw	127
 10861  13E5  00C8               	movwf	___fldiv@a^(0+128)
 10862  13E6  30BB               	movlw	187
 10863  13E7  0020               	movlb	0	; select bank0
 10864  13E8  00BD               	movwf	___fladd@b+3
 10865  13E9  3080               	movlw	128
 10866  13EA  00BC               	movwf	___fladd@b+2
 10867  13EB  3011               	movlw	17
 10868  13EC  00BB               	movwf	___fladd@b+1
 10869  13ED  3032               	movlw	50
 10870  13EE  00BA               	movwf	___fladd@b
 10871  13EF  0021               	movlb	1	; select bank1
 10872  13F0  085F               	movf	(_Measure_Temp_PT100_2Wire$2710+3)^(0+128),w
 10873  13F1  0020               	movlb	0	; select bank0
 10874  13F2  00C1               	movwf	___fladd@a+3
 10875  13F3  0021               	movlb	1	; select bank1
 10876  13F4  085E               	movf	(_Measure_Temp_PT100_2Wire$2710+2)^(0+128),w
 10877  13F5  0020               	movlb	0	; select bank0
 10878  13F6  00C0               	movwf	___fladd@a+2
 10879  13F7  0021               	movlb	1	; select bank1
 10880  13F8  085D               	movf	(_Measure_Temp_PT100_2Wire$2710+1)^(0+128),w
 10881  13F9  0020               	movlb	0	; select bank0
 10882  13FA  00BF               	movwf	___fladd@a+1
 10883  13FB  0021               	movlb	1	; select bank1
 10884  13FC  085C               	movf	_Measure_Temp_PT100_2Wire$2710^(0+128),w
 10885  13FD  0020               	movlb	0	; select bank0
 10886  13FE  00BE               	movwf	___fladd@a
 10887  13FF  3189  2113  3193   	fcall	___fladd
 10888  1402  083D               	movf	?___fladd+3,w
 10889  1403  0021               	movlb	1	; select bank1
 10890  1404  00CF               	movwf	(___fldiv@b+3)^(0+128)
 10891  1405  0020               	movlb	0	; select bank0
 10892  1406  083C               	movf	?___fladd+2,w
 10893  1407  0021               	movlb	1	; select bank1
 10894  1408  00CE               	movwf	(___fldiv@b+2)^(0+128)
 10895  1409  0020               	movlb	0	; select bank0
 10896  140A  083B               	movf	?___fladd+1,w
 10897  140B  0021               	movlb	1	; select bank1
 10898  140C  00CD               	movwf	(___fldiv@b+1)^(0+128)
 10899  140D  0020               	movlb	0	; select bank0
 10900  140E  083A               	movf	?___fladd,w
 10901  140F  0021               	movlb	1	; select bank1
 10902  1410  00CC               	movwf	___fldiv@b^(0+128)
 10903  1411  3194  244F  3193   	fcall	___fldiv
 10904  1414  084B               	movf	(?___fldiv+3)^(0+128),w
 10905  1415  00E3               	movwf	(_Measure_Temp_PT100_2Wire$2711+3)^(0+128)
 10906  1416  084A               	movf	(?___fldiv+2)^(0+128),w
 10907  1417  00E2               	movwf	(_Measure_Temp_PT100_2Wire$2711+2)^(0+128)
 10908  1418  0849               	movf	(?___fldiv+1)^(0+128),w
 10909  1419  00E1               	movwf	(_Measure_Temp_PT100_2Wire$2711+1)^(0+128)
 10910  141A  0848               	movf	?___fldiv^(0+128),w
 10911  141B  00E0               	movwf	_Measure_Temp_PT100_2Wire$2711^(0+128)
 10912                           
 10913                           ;main.c: 221:     float Temp_PT100;;main.c: 223:     Temp_PT100 = ((-3.9083E-03 + sqrtf(
      +                          17.58480889E-06 + -23.10E-09 * R_PT100)) / -1.155E-06) - Tolerance_Temp_const;
 10914  141C  30C2               	movlw	194
 10915  141D  0020               	movlb	0	; select bank0
 10916  141E  00BD               	movwf	___fladd@b+3
 10917  141F  3014               	movlw	20
 10918  1420  00BC               	movwf	___fladd@b+2
 10919  1421  30CC               	movlw	204
 10920  1422  00BB               	movwf	___fladd@b+1
 10921  1423  30CD               	movlw	205
 10922  1424  00BA               	movwf	___fladd@b
 10923  1425  0021               	movlb	1	; select bank1
 10924  1426  0863               	movf	(_Measure_Temp_PT100_2Wire$2711+3)^(0+128),w
 10925  1427  0020               	movlb	0	; select bank0
 10926  1428  00C1               	movwf	___fladd@a+3
 10927  1429  0021               	movlb	1	; select bank1
 10928  142A  0862               	movf	(_Measure_Temp_PT100_2Wire$2711+2)^(0+128),w
 10929  142B  0020               	movlb	0	; select bank0
 10930  142C  00C0               	movwf	___fladd@a+2
 10931  142D  0021               	movlb	1	; select bank1
 10932  142E  0861               	movf	(_Measure_Temp_PT100_2Wire$2711+1)^(0+128),w
 10933  142F  0020               	movlb	0	; select bank0
 10934  1430  00BF               	movwf	___fladd@a+1
 10935  1431  0021               	movlb	1	; select bank1
 10936  1432  0860               	movf	_Measure_Temp_PT100_2Wire$2711^(0+128),w
 10937  1433  0020               	movlb	0	; select bank0
 10938  1434  00BE               	movwf	___fladd@a
 10939  1435  3189  2113         	fcall	___fladd
 10940  1437  083D               	movf	?___fladd+3,w
 10941  1438  0021               	movlb	1	; select bank1
 10942  1439  00D7               	movwf	(Measure_Temp_PT100_2Wire@Temp_PT100+3)^(0+128)
 10943  143A  0020               	movlb	0	; select bank0
 10944  143B  083C               	movf	?___fladd+2,w
 10945  143C  0021               	movlb	1	; select bank1
 10946  143D  00D6               	movwf	(Measure_Temp_PT100_2Wire@Temp_PT100+2)^(0+128)
 10947  143E  0020               	movlb	0	; select bank0
 10948  143F  083B               	movf	?___fladd+1,w
 10949  1440  0021               	movlb	1	; select bank1
 10950  1441  00D5               	movwf	(Measure_Temp_PT100_2Wire@Temp_PT100+1)^(0+128)
 10951  1442  0020               	movlb	0	; select bank0
 10952  1443  083A               	movf	?___fladd,w
 10953  1444  0021               	movlb	1	; select bank1
 10954  1445  00D4               	movwf	Measure_Temp_PT100_2Wire@Temp_PT100^(0+128)
 10955                           
 10956                           ;main.c: 225:     return Temp_PT100;
 10957  1446  0857               	movf	(Measure_Temp_PT100_2Wire@Temp_PT100+3)^(0+128),w
 10958  1447  00D3               	movwf	(?_Measure_Temp_PT100_2Wire+3)^(0+128)
 10959  1448  0856               	movf	(Measure_Temp_PT100_2Wire@Temp_PT100+2)^(0+128),w
 10960  1449  00D2               	movwf	(?_Measure_Temp_PT100_2Wire+2)^(0+128)
 10961  144A  0855               	movf	(Measure_Temp_PT100_2Wire@Temp_PT100+1)^(0+128),w
 10962  144B  00D1               	movwf	(?_Measure_Temp_PT100_2Wire+1)^(0+128)
 10963  144C  0854               	movf	Measure_Temp_PT100_2Wire@Temp_PT100^(0+128),w
 10964  144D  00D0               	movwf	?_Measure_Temp_PT100_2Wire^(0+128)
 10965  144E  0008               	return
 10966  144F                     __end_of_Measure_Temp_PT100_2Wire:
 10967                           
 10968                           	psect	text52
 10969  0D0C                     __ptext52:	
 10970 ;; *************** function _sqrtf *****************
 10971 ;; Defined at:
 10972 ;;		line 22 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/sqrtf.c"
 10973 ;; Parameters:    Size  Location     Type
 10974 ;;  x               4   46[BANK0 ] float 
 10975 ;; Auto vars:     Size  Location     Type
 10976 ;;  ix              4   36[BANK1 ] long 
 10977 ;;  r               4   32[BANK1 ] unsigned long 
 10978 ;;  m               4   28[BANK1 ] long 
 10979 ;;  z               4   24[BANK1 ] float 
 10980 ;;  t               4   20[BANK1 ] long 
 10981 ;;  q               4   16[BANK1 ] long 
 10982 ;;  __xc8_float_    4   12[BANK1 ] struct .
 10983 ;;  i               4    8[BANK1 ] long 
 10984 ;;  s               4    4[BANK1 ] long 
 10985 ;;  sign            4    0        long 
 10986 ;; Return value:  Size  Location     Type
 10987 ;;                  4   46[BANK0 ] float 
 10988 ;; Registers used:
 10989 ;;		wreg, status,2, status,0, pclath, cstack
 10990 ;; Tracked objects:
 10991 ;;		On entry : 1F/0
 10992 ;;		On exit  : 1F/0
 10993 ;;		Unchanged: 0/0
 10994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10995 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10996 ;;      Locals:         0       0      40       0       0       0       0       0       0       0       0       0       
      +0       0
 10997 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10998 ;;      Totals:         0      12      40       0       0       0       0       0       0       0       0       0       
      +0       0
 10999 ;;Total ram usage:       52 bytes
 11000 ;; Hardware stack levels used:    1
 11001 ;; Hardware stack levels required when called:    7
 11002 ;; This function calls:
 11003 ;;		___fladd
 11004 ;;		___flge
 11005 ;;		___flmul
 11006 ;;		_nanf
 11007 ;; This function is called by:
 11008 ;;		_Measure_Temp_PT100_2Wire
 11009 ;; This function uses a non-reentrant model
 11010 ;;
 11011                           
 11012                           
 11013                           ;psect for function _sqrtf
 11014  0D0C                     _sqrtf:
 11015                           
 11016                           ;incstack = 0
 11017                           ; Regs used in _sqrtf: [wreg+status,2+status,0+pclath+cstack]
 11018  0D0C  0851               	movf	sqrtf@x+3,w
 11019  0D0D  0021               	movlb	1	; select bank1
 11020  0D0E  00AF               	movwf	(sqrtf@__xc8_float_word+3)^(0+128)
 11021  0D0F  0020               	movlb	0	; select bank0
 11022  0D10  0850               	movf	sqrtf@x+2,w
 11023  0D11  0021               	movlb	1	; select bank1
 11024  0D12  00AE               	movwf	(sqrtf@__xc8_float_word+2)^(0+128)
 11025  0D13  0020               	movlb	0	; select bank0
 11026  0D14  084F               	movf	sqrtf@x+1,w
 11027  0D15  0021               	movlb	1	; select bank1
 11028  0D16  00AD               	movwf	(sqrtf@__xc8_float_word+1)^(0+128)
 11029  0D17  0020               	movlb	0	; select bank0
 11030  0D18  084E               	movf	sqrtf@x,w
 11031  0D19  0021               	movlb	1	; select bank1
 11032  0D1A  00AC               	movwf	sqrtf@__xc8_float_word^(0+128)
 11033  0D1B  082F               	movf	(sqrtf@__xc8_float_word+3)^(0+128),w
 11034  0D1C  00C7               	movwf	(sqrtf@ix+3)^(0+128)
 11035  0D1D  082E               	movf	(sqrtf@__xc8_float_word+2)^(0+128),w
 11036  0D1E  00C6               	movwf	(sqrtf@ix+2)^(0+128)
 11037  0D1F  082D               	movf	(sqrtf@__xc8_float_word+1)^(0+128),w
 11038  0D20  00C5               	movwf	(sqrtf@ix+1)^(0+128)
 11039  0D21  082C               	movf	sqrtf@__xc8_float_word^(0+128),w
 11040  0D22  00C4               	movwf	sqrtf@ix^(0+128)
 11041  0D23  3000               	movlw	0
 11042  0D24  0544               	andwf	sqrtf@ix^(0+128),w
 11043  0D25  0020               	movlb	0	; select bank0
 11044  0D26  00D2               	movwf	??_sqrtf
 11045  0D27  3000               	movlw	0
 11046  0D28  0021               	movlb	1	; select bank1
 11047  0D29  0545               	andwf	(sqrtf@ix+1)^(0+128),w
 11048  0D2A  0020               	movlb	0	; select bank0
 11049  0D2B  00D3               	movwf	??_sqrtf+1
 11050  0D2C  3080               	movlw	128
 11051  0D2D  0021               	movlb	1	; select bank1
 11052  0D2E  0546               	andwf	(sqrtf@ix+2)^(0+128),w
 11053  0D2F  0020               	movlb	0	; select bank0
 11054  0D30  00D4               	movwf	??_sqrtf+2
 11055  0D31  307F               	movlw	127
 11056  0D32  0021               	movlb	1	; select bank1
 11057  0D33  0547               	andwf	(sqrtf@ix+3)^(0+128),w
 11058  0D34  0020               	movlb	0	; select bank0
 11059  0D35  00D5               	movwf	??_sqrtf+3
 11060  0D36  3080               	movlw	128
 11061  0D37  0654               	xorwf	??_sqrtf+2,w
 11062  0D38  307F               	movlw	127
 11063  0D39  1903               	skipnz
 11064  0D3A  0655               	xorwf	??_sqrtf+3,w
 11065  0D3B  0452               	iorwf	??_sqrtf,w
 11066  0D3C  0453               	iorwf	??_sqrtf+1,w
 11067  0D3D  1D03               	btfss	3,2
 11068  0D3E  2D6E               	goto	l5090
 11069  0D3F  0020               	movlb	0	; select bank0
 11070  0D40  0851               	movf	sqrtf@x+3,w
 11071  0D41  00BD               	movwf	___fladd@b+3
 11072  0D42  0850               	movf	sqrtf@x+2,w
 11073  0D43  00BC               	movwf	___fladd@b+2
 11074  0D44  084F               	movf	sqrtf@x+1,w
 11075  0D45  00BB               	movwf	___fladd@b+1
 11076  0D46  084E               	movf	sqrtf@x,w
 11077  0D47  00BA               	movwf	___fladd@b
 11078  0D48  0851               	movf	sqrtf@x+3,w
 11079  0D49  00A3               	movwf	___flmul@b+3
 11080  0D4A  0850               	movf	sqrtf@x+2,w
 11081  0D4B  00A2               	movwf	___flmul@b+2
 11082  0D4C  084F               	movf	sqrtf@x+1,w
 11083  0D4D  00A1               	movwf	___flmul@b+1
 11084  0D4E  084E               	movf	sqrtf@x,w
 11085  0D4F  00A0               	movwf	___flmul@b
 11086  0D50  0851               	movf	sqrtf@x+3,w
 11087  0D51  00A7               	movwf	___flmul@a+3
 11088  0D52  0850               	movf	sqrtf@x+2,w
 11089  0D53  00A6               	movwf	___flmul@a+2
 11090  0D54  084F               	movf	sqrtf@x+1,w
 11091  0D55  00A5               	movwf	___flmul@a+1
 11092  0D56  084E               	movf	sqrtf@x,w
 11093  0D57  00A4               	movwf	___flmul@a
 11094  0D58  318A  22F4  318D   	fcall	___flmul
 11095  0D5B  0823               	movf	?___flmul+3,w
 11096  0D5C  00C1               	movwf	___fladd@a+3
 11097  0D5D  0822               	movf	?___flmul+2,w
 11098  0D5E  00C0               	movwf	___fladd@a+2
 11099  0D5F  0821               	movf	?___flmul+1,w
 11100  0D60  00BF               	movwf	___fladd@a+1
 11101  0D61  0820               	movf	?___flmul,w
 11102  0D62  00BE               	movwf	___fladd@a
 11103  0D63  3189  2113         	fcall	___fladd
 11104  0D65  083D               	movf	?___fladd+3,w
 11105  0D66  00D1               	movwf	?_sqrtf+3
 11106  0D67  083C               	movf	?___fladd+2,w
 11107  0D68  00D0               	movwf	?_sqrtf+2
 11108  0D69  083B               	movf	?___fladd+1,w
 11109  0D6A  00CF               	movwf	?_sqrtf+1
 11110  0D6B  083A               	movf	?___fladd,w
 11111  0D6C  00CE               	movwf	?_sqrtf
 11112  0D6D  0008               	return
 11113  0D6E                     l5090:
 11114  0D6E  0021               	movlb	1	; select bank1
 11115  0D6F  1BC7               	btfsc	(sqrtf@ix+3)^(0+128),7
 11116  0D70  2D7E               	goto	l5092
 11117  0D71  0847               	movf	(sqrtf@ix+3)^(0+128),w
 11118  0D72  1D03               	btfss	3,2
 11119  0D73  2DB0               	goto	l5102
 11120  0D74  0846               	movf	(sqrtf@ix+2)^(0+128),w
 11121  0D75  1D03               	btfss	3,2
 11122  0D76  2DB0               	goto	l5102
 11123  0D77  0845               	movf	(sqrtf@ix+1)^(0+128),w
 11124  0D78  1D03               	btfss	3,2
 11125  0D79  2DB0               	goto	l5102
 11126  0D7A  3001               	movlw	1
 11127  0D7B  0244               	subwf	sqrtf@ix^(0+128),w
 11128  0D7C  1803               	btfsc	3,0
 11129  0D7D  2DB0               	goto	l5102
 11130  0D7E                     l5092:
 11131  0D7E  30FF               	movlw	255
 11132  0D7F  0021               	movlb	1	; select bank1
 11133  0D80  0544               	andwf	sqrtf@ix^(0+128),w
 11134  0D81  0020               	movlb	0	; select bank0
 11135  0D82  00D2               	movwf	??_sqrtf
 11136  0D83  30FF               	movlw	255
 11137  0D84  0021               	movlb	1	; select bank1
 11138  0D85  0545               	andwf	(sqrtf@ix+1)^(0+128),w
 11139  0D86  0020               	movlb	0	; select bank0
 11140  0D87  00D3               	movwf	??_sqrtf+1
 11141  0D88  30FF               	movlw	255
 11142  0D89  0021               	movlb	1	; select bank1
 11143  0D8A  0546               	andwf	(sqrtf@ix+2)^(0+128),w
 11144  0D8B  0020               	movlb	0	; select bank0
 11145  0D8C  00D4               	movwf	??_sqrtf+2
 11146  0D8D  307F               	movlw	127
 11147  0D8E  0021               	movlb	1	; select bank1
 11148  0D8F  0547               	andwf	(sqrtf@ix+3)^(0+128),w
 11149  0D90  0020               	movlb	0	; select bank0
 11150  0D91  00D5               	movwf	??_sqrtf+3
 11151  0D92  0855               	movf	??_sqrtf+3,w
 11152  0D93  0454               	iorwf	??_sqrtf+2,w
 11153  0D94  0453               	iorwf	??_sqrtf+1,w
 11154  0D95  0452               	iorwf	??_sqrtf,w
 11155  0D96  1903               	btfsc	3,2
 11156  0D97  0008               	return
 11157  0D98  0021               	movlb	1	; select bank1
 11158  0D99  1FC7               	btfss	(sqrtf@ix+3)^(0+128),7
 11159  0D9A  2DB0               	goto	l5102
 11160  0D9B  3021               	movlw	33
 11161  0D9C  0023               	movlb	3	; select bank3
 11162  0D9D  00A8               	movwf	_errno^(0+384)
 11163  0D9E  3000               	movlw	0
 11164  0D9F  00A9               	movwf	(_errno^(0+384)+1)
 11165  0DA0  301B               	movlw	low ((STR_1+11)| (0+32768))
 11166  0DA1  00F0               	movwf	nanf@s
 11167  0DA2  3098               	movlw	high ((STR_1+11)| (0+32768))
 11168  0DA3  00F1               	movwf	nanf@s+1
 11169  0DA4  319B  23B2         	fcall	_nanf
 11170  0DA6  0873               	movf	?_nanf+3,w
 11171  0DA7  0020               	movlb	0	; select bank0
 11172  0DA8  00D1               	movwf	?_sqrtf+3
 11173  0DA9  0872               	movf	?_nanf+2,w
 11174  0DAA  00D0               	movwf	?_sqrtf+2
 11175  0DAB  0871               	movf	?_nanf+1,w
 11176  0DAC  00CF               	movwf	?_sqrtf+1
 11177  0DAD  0870               	movf	?_nanf,w
 11178  0DAE  00CE               	movwf	?_sqrtf
 11179  0DAF  0008               	return
 11180  0DB0                     l5102:
 11181  0DB0  0021               	movlb	1	; select bank1
 11182  0DB1  0844               	movf	sqrtf@ix^(0+128),w
 11183  0DB2  0020               	movlb	0	; select bank0
 11184  0DB3  00D2               	movwf	??_sqrtf
 11185  0DB4  0021               	movlb	1	; select bank1
 11186  0DB5  0845               	movf	(sqrtf@ix+1)^(0+128),w
 11187  0DB6  0020               	movlb	0	; select bank0
 11188  0DB7  00D3               	movwf	??_sqrtf+1
 11189  0DB8  0021               	movlb	1	; select bank1
 11190  0DB9  0846               	movf	(sqrtf@ix+2)^(0+128),w
 11191  0DBA  0020               	movlb	0	; select bank0
 11192  0DBB  00D4               	movwf	??_sqrtf+2
 11193  0DBC  0021               	movlb	1	; select bank1
 11194  0DBD  0847               	movf	(sqrtf@ix+3)^(0+128),w
 11195  0DBE  0020               	movlb	0	; select bank0
 11196  0DBF  00D5               	movwf	??_sqrtf+3
 11197  0DC0  3017               	movlw	23
 11198  0DC1  00D6               	movwf	??_sqrtf+4
 11199  0DC2                     u5885:
 11200  0DC2  37D5               	asrf	??_sqrtf+3,f
 11201  0DC3  0CD4               	rrf	??_sqrtf+2,f
 11202  0DC4  0CD3               	rrf	??_sqrtf+1,f
 11203  0DC5  0CD2               	rrf	??_sqrtf,f
 11204  0DC6  0BD6               	decfsz	??_sqrtf+4,f
 11205  0DC7  2DC2               	goto	u5885
 11206  0DC8  0855               	movf	??_sqrtf+3,w
 11207  0DC9  0021               	movlb	1	; select bank1
 11208  0DCA  00BF               	movwf	(sqrtf@m+3)^(0+128)
 11209  0DCB  0020               	movlb	0	; select bank0
 11210  0DCC  0854               	movf	??_sqrtf+2,w
 11211  0DCD  0021               	movlb	1	; select bank1
 11212  0DCE  00BE               	movwf	(sqrtf@m+2)^(0+128)
 11213  0DCF  0020               	movlb	0	; select bank0
 11214  0DD0  0853               	movf	??_sqrtf+1,w
 11215  0DD1  0021               	movlb	1	; select bank1
 11216  0DD2  00BD               	movwf	(sqrtf@m+1)^(0+128)
 11217  0DD3  0020               	movlb	0	; select bank0
 11218  0DD4  0852               	movf	??_sqrtf,w
 11219  0DD5  0021               	movlb	1	; select bank1
 11220  0DD6  00BC               	movwf	sqrtf@m^(0+128)
 11221  0DD7  083F               	movf	(sqrtf@m+3)^(0+128),w
 11222  0DD8  043E               	iorwf	(sqrtf@m+2)^(0+128),w
 11223  0DD9  043D               	iorwf	(sqrtf@m+1)^(0+128),w
 11224  0DDA  043C               	iorwf	sqrtf@m^(0+128),w
 11225  0DDB  1D03               	skipz
 11226  0DDC  2E1F               	goto	l1803
 11227  0DDD  3000               	movlw	0
 11228  0DDE  00AB               	movwf	(sqrtf@i+3)^(0+128)
 11229  0DDF  3000               	movlw	0
 11230  0DE0  00AA               	movwf	(sqrtf@i+2)^(0+128)
 11231  0DE1  3000               	movlw	0
 11232  0DE2  00A9               	movwf	(sqrtf@i+1)^(0+128)
 11233  0DE3  3000               	movlw	0
 11234  0DE4  00A8               	movwf	sqrtf@i^(0+128)
 11235  0DE5                     l5112:
 11236  0DE5  1BC6               	btfsc	(sqrtf@ix+2)^(0+128),7
 11237  0DE6  2DF7               	goto	l5114
 11238  0DE7  3001               	movlw	1
 11239  0DE8                     u5905:
 11240  0DE8  35C4               	lslf	sqrtf@ix^(0+128),f
 11241  0DE9  0DC5               	rlf	(sqrtf@ix+1)^(0+128),f
 11242  0DEA  0DC6               	rlf	(sqrtf@ix+2)^(0+128),f
 11243  0DEB  0DC7               	rlf	(sqrtf@ix+3)^(0+128),f
 11244  0DEC  0B89               	decfsz	9,f
 11245  0DED  2DE8               	goto	u5905
 11246  0DEE  3001               	movlw	1
 11247  0DEF  07A8               	addwf	sqrtf@i^(0+128),f
 11248  0DF0  3000               	movlw	0
 11249  0DF1  3DA9               	addwfc	(sqrtf@i+1)^(0+128),f
 11250  0DF2  3000               	movlw	0
 11251  0DF3  3DAA               	addwfc	(sqrtf@i+2)^(0+128),f
 11252  0DF4  3000               	movlw	0
 11253  0DF5  3DAB               	addwfc	(sqrtf@i+3)^(0+128),f
 11254  0DF6  2DE5               	goto	l5112
 11255  0DF7                     l5114:
 11256  0DF7  30FF               	movlw	255
 11257  0DF8  0020               	movlb	0	; select bank0
 11258  0DF9  00D2               	movwf	??_sqrtf
 11259  0DFA  30FF               	movlw	255
 11260  0DFB  00D3               	movwf	??_sqrtf+1
 11261  0DFC  30FF               	movlw	255
 11262  0DFD  00D4               	movwf	??_sqrtf+2
 11263  0DFE  30FF               	movlw	255
 11264  0DFF  00D5               	movwf	??_sqrtf+3
 11265  0E00  0021               	movlb	1	; select bank1
 11266  0E01  0828               	movf	sqrtf@i^(0+128),w
 11267  0E02  0020               	movlb	0	; select bank0
 11268  0E03  07D2               	addwf	??_sqrtf,f
 11269  0E04  0021               	movlb	1	; select bank1
 11270  0E05  0829               	movf	(sqrtf@i+1)^(0+128),w
 11271  0E06  0020               	movlb	0	; select bank0
 11272  0E07  3DD3               	addwfc	??_sqrtf+1,f
 11273  0E08  0021               	movlb	1	; select bank1
 11274  0E09  082A               	movf	(sqrtf@i+2)^(0+128),w
 11275  0E0A  0020               	movlb	0	; select bank0
 11276  0E0B  3DD4               	addwfc	??_sqrtf+2,f
 11277  0E0C  0021               	movlb	1	; select bank1
 11278  0E0D  082B               	movf	(sqrtf@i+3)^(0+128),w
 11279  0E0E  0020               	movlb	0	; select bank0
 11280  0E0F  3DD5               	addwfc	??_sqrtf+3,f
 11281  0E10  0852               	movf	??_sqrtf,w
 11282  0E11  0021               	movlb	1	; select bank1
 11283  0E12  02BC               	subwf	sqrtf@m^(0+128),f
 11284  0E13  0020               	movlb	0	; select bank0
 11285  0E14  0853               	movf	??_sqrtf+1,w
 11286  0E15  0021               	movlb	1	; select bank1
 11287  0E16  3BBD               	subwfb	(sqrtf@m+1)^(0+128),f
 11288  0E17  0020               	movlb	0	; select bank0
 11289  0E18  0854               	movf	??_sqrtf+2,w
 11290  0E19  0021               	movlb	1	; select bank1
 11291  0E1A  3BBE               	subwfb	(sqrtf@m+2)^(0+128),f
 11292  0E1B  0020               	movlb	0	; select bank0
 11293  0E1C  0855               	movf	??_sqrtf+3,w
 11294  0E1D  0021               	movlb	1	; select bank1
 11295  0E1E  3BBF               	subwfb	(sqrtf@m+3)^(0+128),f
 11296  0E1F                     l1803:
 11297  0E1F  3081               	movlw	129
 11298  0E20  07BC               	addwf	sqrtf@m^(0+128),f
 11299  0E21  30FF               	movlw	255
 11300  0E22  3DBD               	addwfc	(sqrtf@m+1)^(0+128),f
 11301  0E23  30FF               	movlw	255
 11302  0E24  3DBE               	addwfc	(sqrtf@m+2)^(0+128),f
 11303  0E25  30FF               	movlw	255
 11304  0E26  3DBF               	addwfc	(sqrtf@m+3)^(0+128),f
 11305  0E27  3000               	movlw	0
 11306  0E28  0020               	movlb	0	; select bank0
 11307  0E29  00D2               	movwf	??_sqrtf
 11308  0E2A  3000               	movlw	0
 11309  0E2B  00D3               	movwf	??_sqrtf+1
 11310  0E2C  3080               	movlw	128
 11311  0E2D  00D4               	movwf	??_sqrtf+2
 11312  0E2E  3000               	movlw	0
 11313  0E2F  00D5               	movwf	??_sqrtf+3
 11314  0E30  30FF               	movlw	255
 11315  0E31  0021               	movlb	1	; select bank1
 11316  0E32  0544               	andwf	sqrtf@ix^(0+128),w
 11317  0E33  0020               	movlb	0	; select bank0
 11318  0E34  00D6               	movwf	??_sqrtf+4
 11319  0E35  30FF               	movlw	255
 11320  0E36  0021               	movlb	1	; select bank1
 11321  0E37  0545               	andwf	(sqrtf@ix+1)^(0+128),w
 11322  0E38  0020               	movlb	0	; select bank0
 11323  0E39  00D7               	movwf	??_sqrtf+5
 11324  0E3A  307F               	movlw	127
 11325  0E3B  0021               	movlb	1	; select bank1
 11326  0E3C  0546               	andwf	(sqrtf@ix+2)^(0+128),w
 11327  0E3D  0020               	movlb	0	; select bank0
 11328  0E3E  00D8               	movwf	??_sqrtf+6
 11329  0E3F  3000               	movlw	0
 11330  0E40  0021               	movlb	1	; select bank1
 11331  0E41  0547               	andwf	(sqrtf@ix+3)^(0+128),w
 11332  0E42  0020               	movlb	0	; select bank0
 11333  0E43  00D9               	movwf	??_sqrtf+7
 11334  0E44  0856               	movf	??_sqrtf+4,w
 11335  0E45  04D2               	iorwf	??_sqrtf,f
 11336  0E46  0857               	movf	??_sqrtf+5,w
 11337  0E47  04D3               	iorwf	??_sqrtf+1,f
 11338  0E48  0858               	movf	??_sqrtf+6,w
 11339  0E49  04D4               	iorwf	??_sqrtf+2,f
 11340  0E4A  0859               	movf	??_sqrtf+7,w
 11341  0E4B  04D5               	iorwf	??_sqrtf+3,f
 11342  0E4C  0855               	movf	??_sqrtf+3,w
 11343  0E4D  0021               	movlb	1	; select bank1
 11344  0E4E  00C7               	movwf	(sqrtf@ix+3)^(0+128)
 11345  0E4F  0020               	movlb	0	; select bank0
 11346  0E50  0854               	movf	??_sqrtf+2,w
 11347  0E51  0021               	movlb	1	; select bank1
 11348  0E52  00C6               	movwf	(sqrtf@ix+2)^(0+128)
 11349  0E53  0020               	movlb	0	; select bank0
 11350  0E54  0853               	movf	??_sqrtf+1,w
 11351  0E55  0021               	movlb	1	; select bank1
 11352  0E56  00C5               	movwf	(sqrtf@ix+1)^(0+128)
 11353  0E57  0020               	movlb	0	; select bank0
 11354  0E58  0852               	movf	??_sqrtf,w
 11355  0E59  0021               	movlb	1	; select bank1
 11356  0E5A  00C4               	movwf	sqrtf@ix^(0+128)
 11357  0E5B  1C3C               	btfss	sqrtf@m^(0+128),0
 11358  0E5C  2E65               	goto	l1807
 11359  0E5D  0844               	movf	sqrtf@ix^(0+128),w
 11360  0E5E  07C4               	addwf	sqrtf@ix^(0+128),f
 11361  0E5F  0845               	movf	(sqrtf@ix+1)^(0+128),w
 11362  0E60  3DC5               	addwfc	(sqrtf@ix+1)^(0+128),f
 11363  0E61  0846               	movf	(sqrtf@ix+2)^(0+128),w
 11364  0E62  3DC6               	addwfc	(sqrtf@ix+2)^(0+128),f
 11365  0E63  0847               	movf	(sqrtf@ix+3)^(0+128),w
 11366  0E64  3DC7               	addwfc	(sqrtf@ix+3)^(0+128),f
 11367  0E65                     l1807:
 11368  0E65  3001               	movlw	1
 11369  0E66  0020               	movlb	0	; select bank0
 11370  0E67  00D2               	movwf	??_sqrtf
 11371  0E68                     u5935:
 11372  0E68  0021               	movlb	1	; select bank1
 11373  0E69  37BF               	asrf	(sqrtf@m+3)^(0+128),f
 11374  0E6A  0CBE               	rrf	(sqrtf@m+2)^(0+128),f
 11375  0E6B  0CBD               	rrf	(sqrtf@m+1)^(0+128),f
 11376  0E6C  0CBC               	rrf	sqrtf@m^(0+128),f
 11377  0E6D  0020               	movlb	0	; select bank0
 11378  0E6E  0BD2               	decfsz	??_sqrtf& (0+127),f
 11379  0E6F  2E68               	goto	u5935
 11380  0E70  0021               	movlb	1	; select bank1
 11381  0E71  0844               	movf	sqrtf@ix^(0+128),w
 11382  0E72  07C4               	addwf	sqrtf@ix^(0+128),f
 11383  0E73  0845               	movf	(sqrtf@ix+1)^(0+128),w
 11384  0E74  3DC5               	addwfc	(sqrtf@ix+1)^(0+128),f
 11385  0E75  0846               	movf	(sqrtf@ix+2)^(0+128),w
 11386  0E76  3DC6               	addwfc	(sqrtf@ix+2)^(0+128),f
 11387  0E77  0847               	movf	(sqrtf@ix+3)^(0+128),w
 11388  0E78  3DC7               	addwfc	(sqrtf@ix+3)^(0+128),f
 11389  0E79  3000               	movlw	0
 11390  0E7A  00A7               	movwf	(sqrtf@s+3)^(0+128)
 11391  0E7B  3000               	movlw	0
 11392  0E7C  00A6               	movwf	(sqrtf@s+2)^(0+128)
 11393  0E7D  3000               	movlw	0
 11394  0E7E  00A5               	movwf	(sqrtf@s+1)^(0+128)
 11395  0E7F  3000               	movlw	0
 11396  0E80  00A4               	movwf	sqrtf@s^(0+128)
 11397  0E81  0827               	movf	(sqrtf@s+3)^(0+128),w
 11398  0E82  00B3               	movwf	(sqrtf@q+3)^(0+128)
 11399  0E83  0826               	movf	(sqrtf@s+2)^(0+128),w
 11400  0E84  00B2               	movwf	(sqrtf@q+2)^(0+128)
 11401  0E85  0825               	movf	(sqrtf@s+1)^(0+128),w
 11402  0E86  00B1               	movwf	(sqrtf@q+1)^(0+128)
 11403  0E87  0824               	movf	sqrtf@s^(0+128),w
 11404  0E88  00B0               	movwf	sqrtf@q^(0+128)
 11405  0E89  3001               	movlw	1
 11406  0E8A  00C3               	movwf	(sqrtf@r+3)^(0+128)
 11407  0E8B  3000               	movlw	0
 11408  0E8C  00C2               	movwf	(sqrtf@r+2)^(0+128)
 11409  0E8D  3000               	movlw	0
 11410  0E8E  00C1               	movwf	(sqrtf@r+1)^(0+128)
 11411  0E8F  3000               	movlw	0
 11412  0E90  00C0               	movwf	sqrtf@r^(0+128)
 11413  0E91                     l5126:
 11414  0E91  0843               	movf	(sqrtf@r+3)^(0+128),w
 11415  0E92  0442               	iorwf	(sqrtf@r+2)^(0+128),w
 11416  0E93  0441               	iorwf	(sqrtf@r+1)^(0+128),w
 11417  0E94  0440               	iorwf	sqrtf@r^(0+128),w
 11418  0E95  1903               	btfsc	3,2
 11419  0E96  2F13               	goto	l5128
 11420  0E97  0840               	movf	sqrtf@r^(0+128),w
 11421  0E98  0724               	addwf	sqrtf@s^(0+128),w
 11422  0E99  0020               	movlb	0	; select bank0
 11423  0E9A  00D2               	movwf	??_sqrtf
 11424  0E9B  0021               	movlb	1	; select bank1
 11425  0E9C  0841               	movf	(sqrtf@r+1)^(0+128),w
 11426  0E9D  3D25               	addwfc	(sqrtf@s+1)^(0+128),w
 11427  0E9E  0020               	movlb	0	; select bank0
 11428  0E9F  00D3               	movwf	??_sqrtf+1
 11429  0EA0  0021               	movlb	1	; select bank1
 11430  0EA1  0842               	movf	(sqrtf@r+2)^(0+128),w
 11431  0EA2  3D26               	addwfc	(sqrtf@s+2)^(0+128),w
 11432  0EA3  0020               	movlb	0	; select bank0
 11433  0EA4  00D4               	movwf	??_sqrtf+2
 11434  0EA5  0021               	movlb	1	; select bank1
 11435  0EA6  0843               	movf	(sqrtf@r+3)^(0+128),w
 11436  0EA7  3D27               	addwfc	(sqrtf@s+3)^(0+128),w
 11437  0EA8  0020               	movlb	0	; select bank0
 11438  0EA9  00D5               	movwf	??_sqrtf+3
 11439  0EAA  0855               	movf	??_sqrtf+3,w
 11440  0EAB  0021               	movlb	1	; select bank1
 11441  0EAC  00B7               	movwf	(sqrtf@t+3)^(0+128)
 11442  0EAD  0020               	movlb	0	; select bank0
 11443  0EAE  0854               	movf	??_sqrtf+2,w
 11444  0EAF  0021               	movlb	1	; select bank1
 11445  0EB0  00B6               	movwf	(sqrtf@t+2)^(0+128)
 11446  0EB1  0020               	movlb	0	; select bank0
 11447  0EB2  0853               	movf	??_sqrtf+1,w
 11448  0EB3  0021               	movlb	1	; select bank1
 11449  0EB4  00B5               	movwf	(sqrtf@t+1)^(0+128)
 11450  0EB5  0020               	movlb	0	; select bank0
 11451  0EB6  0852               	movf	??_sqrtf,w
 11452  0EB7  0021               	movlb	1	; select bank1
 11453  0EB8  00B4               	movwf	sqrtf@t^(0+128)
 11454  0EB9  0847               	movf	(sqrtf@ix+3)^(0+128),w
 11455  0EBA  3A80               	xorlw	128
 11456  0EBB  0020               	movlb	0	; select bank0
 11457  0EBC  00D2               	movwf	??_sqrtf
 11458  0EBD  0021               	movlb	1	; select bank1
 11459  0EBE  0837               	movf	(sqrtf@t+3)^(0+128),w
 11460  0EBF  3A80               	xorlw	128
 11461  0EC0  0020               	movlb	0	; select bank0
 11462  0EC1  0252               	subwf	??_sqrtf,w
 11463  0EC2  0021               	movlb	1	; select bank1
 11464  0EC3  1D03               	skipz
 11465  0EC4  2ECF               	goto	u5943
 11466  0EC5  0836               	movf	(sqrtf@t+2)^(0+128),w
 11467  0EC6  0246               	subwf	(sqrtf@ix+2)^(0+128),w
 11468  0EC7  1D03               	skipz
 11469  0EC8  2ECF               	goto	u5943
 11470  0EC9  0835               	movf	(sqrtf@t+1)^(0+128),w
 11471  0ECA  0245               	subwf	(sqrtf@ix+1)^(0+128),w
 11472  0ECB  1D03               	skipz
 11473  0ECC  2ECF               	goto	u5943
 11474  0ECD  0834               	movf	sqrtf@t^(0+128),w
 11475  0ECE  0244               	subwf	sqrtf@ix^(0+128),w
 11476  0ECF                     u5943:
 11477  0ECF  1C03               	skipc
 11478  0ED0  2F03               	goto	l1810
 11479  0ED1  0840               	movf	sqrtf@r^(0+128),w
 11480  0ED2  0734               	addwf	sqrtf@t^(0+128),w
 11481  0ED3  0020               	movlb	0	; select bank0
 11482  0ED4  00D2               	movwf	??_sqrtf
 11483  0ED5  0021               	movlb	1	; select bank1
 11484  0ED6  0841               	movf	(sqrtf@r+1)^(0+128),w
 11485  0ED7  3D35               	addwfc	(sqrtf@t+1)^(0+128),w
 11486  0ED8  0020               	movlb	0	; select bank0
 11487  0ED9  00D3               	movwf	??_sqrtf+1
 11488  0EDA  0021               	movlb	1	; select bank1
 11489  0EDB  0842               	movf	(sqrtf@r+2)^(0+128),w
 11490  0EDC  3D36               	addwfc	(sqrtf@t+2)^(0+128),w
 11491  0EDD  0020               	movlb	0	; select bank0
 11492  0EDE  00D4               	movwf	??_sqrtf+2
 11493  0EDF  0021               	movlb	1	; select bank1
 11494  0EE0  0843               	movf	(sqrtf@r+3)^(0+128),w
 11495  0EE1  3D37               	addwfc	(sqrtf@t+3)^(0+128),w
 11496  0EE2  0020               	movlb	0	; select bank0
 11497  0EE3  00D5               	movwf	??_sqrtf+3
 11498  0EE4  0855               	movf	??_sqrtf+3,w
 11499  0EE5  0021               	movlb	1	; select bank1
 11500  0EE6  00A7               	movwf	(sqrtf@s+3)^(0+128)
 11501  0EE7  0020               	movlb	0	; select bank0
 11502  0EE8  0854               	movf	??_sqrtf+2,w
 11503  0EE9  0021               	movlb	1	; select bank1
 11504  0EEA  00A6               	movwf	(sqrtf@s+2)^(0+128)
 11505  0EEB  0020               	movlb	0	; select bank0
 11506  0EEC  0853               	movf	??_sqrtf+1,w
 11507  0EED  0021               	movlb	1	; select bank1
 11508  0EEE  00A5               	movwf	(sqrtf@s+1)^(0+128)
 11509  0EEF  0020               	movlb	0	; select bank0
 11510  0EF0  0852               	movf	??_sqrtf,w
 11511  0EF1  0021               	movlb	1	; select bank1
 11512  0EF2  00A4               	movwf	sqrtf@s^(0+128)
 11513  0EF3  0834               	movf	sqrtf@t^(0+128),w
 11514  0EF4  02C4               	subwf	sqrtf@ix^(0+128),f
 11515  0EF5  0835               	movf	(sqrtf@t+1)^(0+128),w
 11516  0EF6  3BC5               	subwfb	(sqrtf@ix+1)^(0+128),f
 11517  0EF7  0836               	movf	(sqrtf@t+2)^(0+128),w
 11518  0EF8  3BC6               	subwfb	(sqrtf@ix+2)^(0+128),f
 11519  0EF9  0837               	movf	(sqrtf@t+3)^(0+128),w
 11520  0EFA  3BC7               	subwfb	(sqrtf@ix+3)^(0+128),f
 11521  0EFB  0840               	movf	sqrtf@r^(0+128),w
 11522  0EFC  07B0               	addwf	sqrtf@q^(0+128),f
 11523  0EFD  0841               	movf	(sqrtf@r+1)^(0+128),w
 11524  0EFE  3DB1               	addwfc	(sqrtf@q+1)^(0+128),f
 11525  0EFF  0842               	movf	(sqrtf@r+2)^(0+128),w
 11526  0F00  3DB2               	addwfc	(sqrtf@q+2)^(0+128),f
 11527  0F01  0843               	movf	(sqrtf@r+3)^(0+128),w
 11528  0F02  3DB3               	addwfc	(sqrtf@q+3)^(0+128),f
 11529  0F03                     l1810:
 11530  0F03  0844               	movf	sqrtf@ix^(0+128),w
 11531  0F04  07C4               	addwf	sqrtf@ix^(0+128),f
 11532  0F05  0845               	movf	(sqrtf@ix+1)^(0+128),w
 11533  0F06  3DC5               	addwfc	(sqrtf@ix+1)^(0+128),f
 11534  0F07  0846               	movf	(sqrtf@ix+2)^(0+128),w
 11535  0F08  3DC6               	addwfc	(sqrtf@ix+2)^(0+128),f
 11536  0F09  0847               	movf	(sqrtf@ix+3)^(0+128),w
 11537  0F0A  3DC7               	addwfc	(sqrtf@ix+3)^(0+128),f
 11538  0F0B  3001               	movlw	1
 11539  0F0C                     u5955:
 11540  0F0C  36C3               	lsrf	(sqrtf@r+3)^(0+128),f
 11541  0F0D  0CC2               	rrf	(sqrtf@r+2)^(0+128),f
 11542  0F0E  0CC1               	rrf	(sqrtf@r+1)^(0+128),f
 11543  0F0F  0CC0               	rrf	sqrtf@r^(0+128),f
 11544  0F10  0B89               	decfsz	9,f
 11545  0F11  2F0C               	goto	u5955
 11546  0F12  2E91               	goto	l5126
 11547  0F13                     l5128:
 11548  0F13  0847               	movf	(sqrtf@ix+3)^(0+128),w
 11549  0F14  0446               	iorwf	(sqrtf@ix+2)^(0+128),w
 11550  0F15  0445               	iorwf	(sqrtf@ix+1)^(0+128),w
 11551  0F16  0444               	iorwf	sqrtf@ix^(0+128),w
 11552  0F17  1903               	skipnz
 11553  0F18  2F90               	goto	l5142
 11554  0F19  303F               	movlw	63
 11555  0F1A  00BB               	movwf	(sqrtf@z+3)^(0+128)
 11556  0F1B  3080               	movlw	128
 11557  0F1C  00BA               	movwf	(sqrtf@z+2)^(0+128)
 11558  0F1D  3000               	movlw	0
 11559  0F1E  00B9               	movwf	(sqrtf@z+1)^(0+128)
 11560  0F1F  3000               	movlw	0
 11561  0F20  00B8               	movwf	sqrtf@z^(0+128)
 11562  0F21  083B               	movf	(sqrtf@z+3)^(0+128),w
 11563  0F22  0020               	movlb	0	; select bank0
 11564  0F23  00BD               	movwf	___flge@ff1+3
 11565  0F24  0021               	movlb	1	; select bank1
 11566  0F25  083A               	movf	(sqrtf@z+2)^(0+128),w
 11567  0F26  0020               	movlb	0	; select bank0
 11568  0F27  00BC               	movwf	___flge@ff1+2
 11569  0F28  0021               	movlb	1	; select bank1
 11570  0F29  0839               	movf	(sqrtf@z+1)^(0+128),w
 11571  0F2A  0020               	movlb	0	; select bank0
 11572  0F2B  00BB               	movwf	___flge@ff1+1
 11573  0F2C  0021               	movlb	1	; select bank1
 11574  0F2D  0838               	movf	sqrtf@z^(0+128),w
 11575  0F2E  0020               	movlb	0	; select bank0
 11576  0F2F  00BA               	movwf	___flge@ff1
 11577  0F30  303F               	movlw	63
 11578  0F31  00C1               	movwf	___flge@ff2+3
 11579  0F32  3080               	movlw	128
 11580  0F33  00C0               	movwf	___flge@ff2+2
 11581  0F34  3000               	movlw	0
 11582  0F35  00BF               	movwf	___flge@ff2+1
 11583  0F36  3000               	movlw	0
 11584  0F37  00BE               	movwf	___flge@ff2
 11585  0F38  3187  276E  318D   	fcall	___flge
 11586  0F3B  1C03               	btfss	3,0
 11587  0F3C  2F90               	goto	l5142
 11588  0F3D  303F               	movlw	63
 11589  0F3E  0021               	movlb	1	; select bank1
 11590  0F3F  00BB               	movwf	(sqrtf@z+3)^(0+128)
 11591  0F40  3080               	movlw	128
 11592  0F41  00BA               	movwf	(sqrtf@z+2)^(0+128)
 11593  0F42  3000               	movlw	0
 11594  0F43  00B9               	movwf	(sqrtf@z+1)^(0+128)
 11595  0F44  3000               	movlw	0
 11596  0F45  00B8               	movwf	sqrtf@z^(0+128)
 11597  0F46  303F               	movlw	63
 11598  0F47  0020               	movlb	0	; select bank0
 11599  0F48  00BD               	movwf	___flge@ff1+3
 11600  0F49  3080               	movlw	128
 11601  0F4A  00BC               	movwf	___flge@ff1+2
 11602  0F4B  3000               	movlw	0
 11603  0F4C  00BB               	movwf	___flge@ff1+1
 11604  0F4D  3000               	movlw	0
 11605  0F4E  00BA               	movwf	___flge@ff1
 11606  0F4F  0021               	movlb	1	; select bank1
 11607  0F50  083B               	movf	(sqrtf@z+3)^(0+128),w
 11608  0F51  0020               	movlb	0	; select bank0
 11609  0F52  00C1               	movwf	___flge@ff2+3
 11610  0F53  0021               	movlb	1	; select bank1
 11611  0F54  083A               	movf	(sqrtf@z+2)^(0+128),w
 11612  0F55  0020               	movlb	0	; select bank0
 11613  0F56  00C0               	movwf	___flge@ff2+2
 11614  0F57  0021               	movlb	1	; select bank1
 11615  0F58  0839               	movf	(sqrtf@z+1)^(0+128),w
 11616  0F59  0020               	movlb	0	; select bank0
 11617  0F5A  00BF               	movwf	___flge@ff2+1
 11618  0F5B  0021               	movlb	1	; select bank1
 11619  0F5C  0838               	movf	sqrtf@z^(0+128),w
 11620  0F5D  0020               	movlb	0	; select bank0
 11621  0F5E  00BE               	movwf	___flge@ff2
 11622  0F5F  3187  276E  318D   	fcall	___flge
 11623  0F62  1803               	btfsc	3,0
 11624  0F63  2F6D               	goto	l5140
 11625  0F64  3002               	movlw	2
 11626  0F65  0021               	movlb	1	; select bank1
 11627  0F66  07B0               	addwf	sqrtf@q^(0+128),f
 11628  0F67  3000               	movlw	0
 11629  0F68  3DB1               	addwfc	(sqrtf@q+1)^(0+128),f
 11630  0F69  3000               	movlw	0
 11631  0F6A  3DB2               	addwfc	(sqrtf@q+2)^(0+128),f
 11632  0F6B  3000               	movlw	0
 11633  0F6C  2F8F               	goto	L11
 11634  0F6D                     l5140:
 11635  0F6D  3001               	movlw	1
 11636  0F6E  0021               	movlb	1	; select bank1
 11637  0F6F  0530               	andwf	sqrtf@q^(0+128),w
 11638  0F70  0020               	movlb	0	; select bank0
 11639  0F71  00D2               	movwf	??_sqrtf
 11640  0F72  3000               	movlw	0
 11641  0F73  0021               	movlb	1	; select bank1
 11642  0F74  0531               	andwf	(sqrtf@q+1)^(0+128),w
 11643  0F75  0020               	movlb	0	; select bank0
 11644  0F76  00D3               	movwf	??_sqrtf+1
 11645  0F77  3000               	movlw	0
 11646  0F78  0021               	movlb	1	; select bank1
 11647  0F79  0532               	andwf	(sqrtf@q+2)^(0+128),w
 11648  0F7A  0020               	movlb	0	; select bank0
 11649  0F7B  00D4               	movwf	??_sqrtf+2
 11650  0F7C  3000               	movlw	0
 11651  0F7D  0021               	movlb	1	; select bank1
 11652  0F7E  0533               	andwf	(sqrtf@q+3)^(0+128),w
 11653  0F7F  0020               	movlb	0	; select bank0
 11654  0F80  00D5               	movwf	??_sqrtf+3
 11655  0F81  0852               	movf	??_sqrtf,w
 11656  0F82  0021               	movlb	1	; select bank1
 11657  0F83  07B0               	addwf	sqrtf@q^(0+128),f
 11658  0F84  0020               	movlb	0	; select bank0
 11659  0F85  0853               	movf	??_sqrtf+1,w
 11660  0F86  0021               	movlb	1	; select bank1
 11661  0F87  3DB1               	addwfc	(sqrtf@q+1)^(0+128),f
 11662  0F88  0020               	movlb	0	; select bank0
 11663  0F89  0854               	movf	??_sqrtf+2,w
 11664  0F8A  0021               	movlb	1	; select bank1
 11665  0F8B  3DB2               	addwfc	(sqrtf@q+2)^(0+128),f
 11666  0F8C  0020               	movlb	0	; select bank0
 11667  0F8D  0855               	movf	??_sqrtf+3,w
 11668  0F8E  0021               	movlb	1	; select bank1
 11669  0F8F                     L11:
 11670  0F8F  3DB3               	addwfc	(sqrtf@q+3)^(0+128),f
 11671  0F90                     l5142:
 11672  0F90  0021               	movlb	1	; select bank1
 11673  0F91  0830               	movf	sqrtf@q^(0+128),w
 11674  0F92  0020               	movlb	0	; select bank0
 11675  0F93  00D2               	movwf	??_sqrtf
 11676  0F94  0021               	movlb	1	; select bank1
 11677  0F95  0831               	movf	(sqrtf@q+1)^(0+128),w
 11678  0F96  0020               	movlb	0	; select bank0
 11679  0F97  00D3               	movwf	??_sqrtf+1
 11680  0F98  0021               	movlb	1	; select bank1
 11681  0F99  0832               	movf	(sqrtf@q+2)^(0+128),w
 11682  0F9A  0020               	movlb	0	; select bank0
 11683  0F9B  00D4               	movwf	??_sqrtf+2
 11684  0F9C  0021               	movlb	1	; select bank1
 11685  0F9D  0833               	movf	(sqrtf@q+3)^(0+128),w
 11686  0F9E  0020               	movlb	0	; select bank0
 11687  0F9F  00D5               	movwf	??_sqrtf+3
 11688  0FA0  3001               	movlw	1
 11689  0FA1  00D6               	movwf	??_sqrtf+4
 11690  0FA2                     u6005:
 11691  0FA2  37D5               	asrf	??_sqrtf+3,f
 11692  0FA3  0CD4               	rrf	??_sqrtf+2,f
 11693  0FA4  0CD3               	rrf	??_sqrtf+1,f
 11694  0FA5  0CD2               	rrf	??_sqrtf,f
 11695  0FA6  0BD6               	decfsz	??_sqrtf+4,f
 11696  0FA7  2FA2               	goto	u6005
 11697  0FA8  3000               	movlw	0
 11698  0FA9  0752               	addwf	??_sqrtf,w
 11699  0FAA  0021               	movlb	1	; select bank1
 11700  0FAB  00C4               	movwf	sqrtf@ix^(0+128)
 11701  0FAC  3000               	movlw	0
 11702  0FAD  0020               	movlb	0	; select bank0
 11703  0FAE  3D53               	addwfc	??_sqrtf+1,w
 11704  0FAF  0021               	movlb	1	; select bank1
 11705  0FB0  00C5               	movwf	(sqrtf@ix+1)^(0+128)
 11706  0FB1  3000               	movlw	0
 11707  0FB2  0020               	movlb	0	; select bank0
 11708  0FB3  3D54               	addwfc	??_sqrtf+2,w
 11709  0FB4  0021               	movlb	1	; select bank1
 11710  0FB5  00C6               	movwf	(sqrtf@ix+2)^(0+128)
 11711  0FB6  303F               	movlw	63
 11712  0FB7  0020               	movlb	0	; select bank0
 11713  0FB8  3D55               	addwfc	??_sqrtf+3,w
 11714  0FB9  0021               	movlb	1	; select bank1
 11715  0FBA  00C7               	movwf	(sqrtf@ix+3)^(0+128)
 11716  0FBB  083C               	movf	sqrtf@m^(0+128),w
 11717  0FBC  0020               	movlb	0	; select bank0
 11718  0FBD  00D2               	movwf	??_sqrtf
 11719  0FBE  0021               	movlb	1	; select bank1
 11720  0FBF  083D               	movf	(sqrtf@m+1)^(0+128),w
 11721  0FC0  0020               	movlb	0	; select bank0
 11722  0FC1  00D3               	movwf	??_sqrtf+1
 11723  0FC2  0021               	movlb	1	; select bank1
 11724  0FC3  083E               	movf	(sqrtf@m+2)^(0+128),w
 11725  0FC4  0020               	movlb	0	; select bank0
 11726  0FC5  00D4               	movwf	??_sqrtf+2
 11727  0FC6  0021               	movlb	1	; select bank1
 11728  0FC7  083F               	movf	(sqrtf@m+3)^(0+128),w
 11729  0FC8  0020               	movlb	0	; select bank0
 11730  0FC9  00D5               	movwf	??_sqrtf+3
 11731  0FCA  3017               	movlw	23
 11732  0FCB                     u6015:
 11733  0FCB  35D2               	lslf	??_sqrtf,f
 11734  0FCC  0DD3               	rlf	??_sqrtf+1,f
 11735  0FCD  0DD4               	rlf	??_sqrtf+2,f
 11736  0FCE  0DD5               	rlf	??_sqrtf+3,f
 11737  0FCF  0B89               	decfsz	9,f
 11738  0FD0  2FCB               	goto	u6015
 11739  0FD1  0852               	movf	??_sqrtf,w
 11740  0FD2  0021               	movlb	1	; select bank1
 11741  0FD3  07C4               	addwf	sqrtf@ix^(0+128),f
 11742  0FD4  0020               	movlb	0	; select bank0
 11743  0FD5  0853               	movf	??_sqrtf+1,w
 11744  0FD6  0021               	movlb	1	; select bank1
 11745  0FD7  3DC5               	addwfc	(sqrtf@ix+1)^(0+128),f
 11746  0FD8  0020               	movlb	0	; select bank0
 11747  0FD9  0854               	movf	??_sqrtf+2,w
 11748  0FDA  0021               	movlb	1	; select bank1
 11749  0FDB  3DC6               	addwfc	(sqrtf@ix+2)^(0+128),f
 11750  0FDC  0020               	movlb	0	; select bank0
 11751  0FDD  0855               	movf	??_sqrtf+3,w
 11752  0FDE  0021               	movlb	1	; select bank1
 11753  0FDF  3DC7               	addwfc	(sqrtf@ix+3)^(0+128),f
 11754  0FE0  0847               	movf	(sqrtf@ix+3)^(0+128),w
 11755  0FE1  00AF               	movwf	(sqrtf@__xc8_float_word+3)^(0+128)
 11756  0FE2  0846               	movf	(sqrtf@ix+2)^(0+128),w
 11757  0FE3  00AE               	movwf	(sqrtf@__xc8_float_word+2)^(0+128)
 11758  0FE4  0845               	movf	(sqrtf@ix+1)^(0+128),w
 11759  0FE5  00AD               	movwf	(sqrtf@__xc8_float_word+1)^(0+128)
 11760  0FE6  0844               	movf	sqrtf@ix^(0+128),w
 11761  0FE7  00AC               	movwf	sqrtf@__xc8_float_word^(0+128)
 11762  0FE8  082F               	movf	(sqrtf@__xc8_float_word+3)^(0+128),w
 11763  0FE9  00BB               	movwf	(sqrtf@z+3)^(0+128)
 11764  0FEA  082E               	movf	(sqrtf@__xc8_float_word+2)^(0+128),w
 11765  0FEB  00BA               	movwf	(sqrtf@z+2)^(0+128)
 11766  0FEC  082D               	movf	(sqrtf@__xc8_float_word+1)^(0+128),w
 11767  0FED  00B9               	movwf	(sqrtf@z+1)^(0+128)
 11768  0FEE  082C               	movf	sqrtf@__xc8_float_word^(0+128),w
 11769  0FEF  00B8               	movwf	sqrtf@z^(0+128)
 11770  0FF0  083B               	movf	(sqrtf@z+3)^(0+128),w
 11771  0FF1  0020               	movlb	0	; select bank0
 11772  0FF2  00D1               	movwf	?_sqrtf+3
 11773  0FF3  0021               	movlb	1	; select bank1
 11774  0FF4  083A               	movf	(sqrtf@z+2)^(0+128),w
 11775  0FF5  0020               	movlb	0	; select bank0
 11776  0FF6  00D0               	movwf	?_sqrtf+2
 11777  0FF7  0021               	movlb	1	; select bank1
 11778  0FF8  0839               	movf	(sqrtf@z+1)^(0+128),w
 11779  0FF9  0020               	movlb	0	; select bank0
 11780  0FFA  00CF               	movwf	?_sqrtf+1
 11781  0FFB  0021               	movlb	1	; select bank1
 11782  0FFC  0838               	movf	sqrtf@z^(0+128),w
 11783  0FFD  0020               	movlb	0	; select bank0
 11784  0FFE  00CE               	movwf	?_sqrtf
 11785  0FFF  0008               	return
 11786  1000                     __end_of_sqrtf:
 11787                           
 11788                           	psect	text53
 11789  1BB2                     __ptext53:	
 11790 ;; *************** function _nanf *****************
 11791 ;; Defined at:
 11792 ;;		line 4 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/nanf.c"
 11793 ;; Parameters:    Size  Location     Type
 11794 ;;  s               2    0[COMMON] PTR const unsigned char 
 11795 ;;		 -> STR_15(1), 
 11796 ;; Auto vars:     Size  Location     Type
 11797 ;;  u               4    4[COMMON] struct .
 11798 ;; Return value:  Size  Location     Type
 11799 ;;                  4    0[COMMON] float 
 11800 ;; Registers used:
 11801 ;;		wreg
 11802 ;; Tracked objects:
 11803 ;;		On entry : 1F/3
 11804 ;;		On exit  : 1F/3
 11805 ;;		Unchanged: 1E/0
 11806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11807 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11808 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11810 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11811 ;;Total ram usage:        8 bytes
 11812 ;; Hardware stack levels used:    1
 11813 ;; Hardware stack levels required when called:    5
 11814 ;; This function calls:
 11815 ;;		Nothing
 11816 ;; This function is called by:
 11817 ;;		_sqrtf
 11818 ;; This function uses a non-reentrant model
 11819 ;;
 11820                           
 11821                           
 11822                           ;psect for function _nanf
 11823  1BB2                     _nanf:
 11824                           
 11825                           ;incstack = 0
 11826                           ; Regs used in _nanf: [wreg]
 11827  1BB2  307F               	movlw	127
 11828  1BB3  00F7               	movwf	nanf@u+3
 11829  1BB4  30FF               	movlw	255
 11830  1BB5  00F6               	movwf	nanf@u+2
 11831  1BB6  30FF               	movlw	255
 11832  1BB7  00F5               	movwf	nanf@u+1
 11833  1BB8  30FF               	movlw	255
 11834  1BB9  00F4               	movwf	nanf@u
 11835  1BBA  0877               	movf	nanf@u+3,w
 11836  1BBB  00F3               	movwf	?_nanf+3
 11837  1BBC  0876               	movf	nanf@u+2,w
 11838  1BBD  00F2               	movwf	?_nanf+2
 11839  1BBE  0875               	movf	nanf@u+1,w
 11840  1BBF  00F1               	movwf	?_nanf+1
 11841  1BC0  0874               	movf	nanf@u,w
 11842  1BC1  00F0               	movwf	?_nanf
 11843  1BC2  0008               	return
 11844  1BC3                     __end_of_nanf:
 11845                           
 11846                           	psect	text54
 11847  076E                     __ptext54:	
 11848 ;; *************** function ___flge *****************
 11849 ;; Defined at:
 11850 ;;		line 4 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/flge.c"
 11851 ;; Parameters:    Size  Location     Type
 11852 ;;  ff1             4   26[BANK0 ] float 
 11853 ;;  ff2             4   30[BANK0 ] float 
 11854 ;; Auto vars:     Size  Location     Type
 11855 ;;		None
 11856 ;; Return value:  Size  Location     Type
 11857 ;;		None               void
 11858 ;; Registers used:
 11859 ;;		wreg, status,2, status,0
 11860 ;; Tracked objects:
 11861 ;;		On entry : 1F/0
 11862 ;;		On exit  : 1F/0
 11863 ;;		Unchanged: 0/0
 11864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11865 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11867 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11868 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11869 ;;Total ram usage:       12 bytes
 11870 ;; Hardware stack levels used:    1
 11871 ;; Hardware stack levels required when called:    5
 11872 ;; This function calls:
 11873 ;;		Nothing
 11874 ;; This function is called by:
 11875 ;;		_efgtoa
 11876 ;;		_sqrtf
 11877 ;; This function uses a non-reentrant model
 11878 ;;
 11879                           
 11880                           
 11881                           ;psect for function ___flge
 11882  076E                     ___flge:
 11883                           
 11884                           ;incstack = 0
 11885                           ; Regs used in ___flge: [wreg+status,2+status,0]
 11886  076E  3000               	movlw	0
 11887  076F  053A               	andwf	___flge@ff1,w
 11888  0770  00C2               	movwf	??___flge
 11889  0771  3000               	movlw	0
 11890  0772  053B               	andwf	___flge@ff1+1,w
 11891  0773  00C3               	movwf	??___flge+1
 11892  0774  3080               	movlw	128
 11893  0775  053C               	andwf	___flge@ff1+2,w
 11894  0776  00C4               	movwf	??___flge+2
 11895  0777  307F               	movlw	127
 11896  0778  053D               	andwf	___flge@ff1+3,w
 11897  0779  00C5               	movwf	??___flge+3
 11898  077A  0845               	movf	??___flge+3,w
 11899  077B  0444               	iorwf	??___flge+2,w
 11900  077C  0443               	iorwf	??___flge+1,w
 11901  077D  0442               	iorwf	??___flge,w
 11902  077E  1D03               	skipz
 11903  077F  2F88               	goto	l1280
 11904  0780  3000               	movlw	0
 11905  0781  00BD               	movwf	___flge@ff1+3
 11906  0782  3000               	movlw	0
 11907  0783  00BC               	movwf	___flge@ff1+2
 11908  0784  3000               	movlw	0
 11909  0785  00BB               	movwf	___flge@ff1+1
 11910  0786  3000               	movlw	0
 11911  0787  00BA               	movwf	___flge@ff1
 11912  0788                     l1280:
 11913  0788  3000               	movlw	0
 11914  0789  053E               	andwf	___flge@ff2,w
 11915  078A  00C2               	movwf	??___flge
 11916  078B  3000               	movlw	0
 11917  078C  053F               	andwf	___flge@ff2+1,w
 11918  078D  00C3               	movwf	??___flge+1
 11919  078E  3080               	movlw	128
 11920  078F  0540               	andwf	___flge@ff2+2,w
 11921  0790  00C4               	movwf	??___flge+2
 11922  0791  307F               	movlw	127
 11923  0792  0541               	andwf	___flge@ff2+3,w
 11924  0793  00C5               	movwf	??___flge+3
 11925  0794  0845               	movf	??___flge+3,w
 11926  0795  0444               	iorwf	??___flge+2,w
 11927  0796  0443               	iorwf	??___flge+1,w
 11928  0797  0442               	iorwf	??___flge,w
 11929  0798  1D03               	skipz
 11930  0799  2FA2               	goto	l4000
 11931  079A  3000               	movlw	0
 11932  079B  00C1               	movwf	___flge@ff2+3
 11933  079C  3000               	movlw	0
 11934  079D  00C0               	movwf	___flge@ff2+2
 11935  079E  3000               	movlw	0
 11936  079F  00BF               	movwf	___flge@ff2+1
 11937  07A0  3000               	movlw	0
 11938  07A1  00BE               	movwf	___flge@ff2
 11939  07A2                     l4000:
 11940  07A2  1FBD               	btfss	___flge@ff1+3,7
 11941  07A3  2FBC               	goto	l4004
 11942  07A4  3000               	movlw	0
 11943  07A5  00C2               	movwf	??___flge
 11944  07A6  3000               	movlw	0
 11945  07A7  00C3               	movwf	??___flge+1
 11946  07A8  3000               	movlw	0
 11947  07A9  00C4               	movwf	??___flge+2
 11948  07AA  3080               	movlw	128
 11949  07AB  00C5               	movwf	??___flge+3
 11950  07AC  083A               	movf	___flge@ff1,w
 11951  07AD  02C2               	subwf	??___flge,f
 11952  07AE  083B               	movf	___flge@ff1+1,w
 11953  07AF  3BC3               	subwfb	??___flge+1,f
 11954  07B0  083C               	movf	___flge@ff1+2,w
 11955  07B1  3BC4               	subwfb	??___flge+2,f
 11956  07B2  083D               	movf	___flge@ff1+3,w
 11957  07B3  3BC5               	subwfb	??___flge+3,f
 11958  07B4  0845               	movf	??___flge+3,w
 11959  07B5  00BD               	movwf	___flge@ff1+3
 11960  07B6  0844               	movf	??___flge+2,w
 11961  07B7  00BC               	movwf	___flge@ff1+2
 11962  07B8  0843               	movf	??___flge+1,w
 11963  07B9  00BB               	movwf	___flge@ff1+1
 11964  07BA  0842               	movf	??___flge,w
 11965  07BB  00BA               	movwf	___flge@ff1
 11966  07BC                     l4004:
 11967  07BC  1FC1               	btfss	___flge@ff2+3,7
 11968  07BD  2FD6               	goto	l1283
 11969  07BE  3000               	movlw	0
 11970  07BF  00C2               	movwf	??___flge
 11971  07C0  3000               	movlw	0
 11972  07C1  00C3               	movwf	??___flge+1
 11973  07C2  3000               	movlw	0
 11974  07C3  00C4               	movwf	??___flge+2
 11975  07C4  3080               	movlw	128
 11976  07C5  00C5               	movwf	??___flge+3
 11977  07C6  083E               	movf	___flge@ff2,w
 11978  07C7  02C2               	subwf	??___flge,f
 11979  07C8  083F               	movf	___flge@ff2+1,w
 11980  07C9  3BC3               	subwfb	??___flge+1,f
 11981  07CA  0840               	movf	___flge@ff2+2,w
 11982  07CB  3BC4               	subwfb	??___flge+2,f
 11983  07CC  0841               	movf	___flge@ff2+3,w
 11984  07CD  3BC5               	subwfb	??___flge+3,f
 11985  07CE  0845               	movf	??___flge+3,w
 11986  07CF  00C1               	movwf	___flge@ff2+3
 11987  07D0  0844               	movf	??___flge+2,w
 11988  07D1  00C0               	movwf	___flge@ff2+2
 11989  07D2  0843               	movf	??___flge+1,w
 11990  07D3  00BF               	movwf	___flge@ff2+1
 11991  07D4  0842               	movf	??___flge,w
 11992  07D5  00BE               	movwf	___flge@ff2
 11993  07D6                     l1283:
 11994  07D6  3080               	movlw	128
 11995  07D7  06BD               	xorwf	___flge@ff1+3,f
 11996  07D8  3080               	movlw	128
 11997  07D9  06C1               	xorwf	___flge@ff2+3,f
 11998  07DA  0841               	movf	___flge@ff2+3,w
 11999  07DB  023D               	subwf	___flge@ff1+3,w
 12000  07DC  1D03               	skipz
 12001  07DD  0008               	return
 12002  07DE  0840               	movf	___flge@ff2+2,w
 12003  07DF  023C               	subwf	___flge@ff1+2,w
 12004  07E0  1D03               	skipz
 12005  07E1  0008               	return
 12006  07E2  083F               	movf	___flge@ff2+1,w
 12007  07E3  023B               	subwf	___flge@ff1+1,w
 12008  07E4  1D03               	skipz
 12009  07E5  0008               	return
 12010  07E6  083E               	movf	___flge@ff2,w
 12011  07E7  023A               	subwf	___flge@ff1,w
 12012  07E8  0008               	return
 12013  07E9                     __end_of___flge:
 12014                           
 12015                           	psect	text55
 12016  109D                     __ptext55:	
 12017 ;; *************** function _Measure_R_PT100_2Wire *****************
 12018 ;; Defined at:
 12019 ;;		line 208 in file "main.c"
 12020 ;; Parameters:    Size  Location     Type
 12021 ;;  ADC_volt        4   48[BANK1 ] float 
 12022 ;; Auto vars:     Size  Location     Type
 12023 ;;  R_PT100         4   76[BANK0 ] float 
 12024 ;; Return value:  Size  Location     Type
 12025 ;;                  4   48[BANK1 ] float 
 12026 ;; Registers used:
 12027 ;;		wreg, status,2, status,0, pclath, cstack
 12028 ;; Tracked objects:
 12029 ;;		On entry : 1F/1
 12030 ;;		On exit  : 1F/1
 12031 ;;		Unchanged: 0/0
 12032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12033 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 12034 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12036 ;;      Totals:         0       4       4       0       0       0       0       0       0       0       0       0       
      +0       0
 12037 ;;Total ram usage:        8 bytes
 12038 ;; Hardware stack levels used:    1
 12039 ;; Hardware stack levels required when called:    7
 12040 ;; This function calls:
 12041 ;;		___fldiv
 12042 ;;		___flmul
 12043 ;;		___flsub
 12044 ;; This function is called by:
 12045 ;;		_main
 12046 ;; This function uses a non-reentrant model
 12047 ;;
 12048                           
 12049                           
 12050                           ;psect for function _Measure_R_PT100_2Wire
 12051  109D                     _Measure_R_PT100_2Wire:
 12052                           
 12053                           ;main.c: 212:     R_PT100 = R_const * ADC_volt / (R_const - ADC_volt);
 12054                           
 12055                           ;incstack = 0
 12056                           ; Regs used in _Measure_R_PT100_2Wire: [wreg+status,2+status,0+pclath+cstack]
 12057  109D  0853               	movf	(Measure_R_PT100_2Wire@ADC_volt+3)^(0+128),w
 12058  109E  0020               	movlb	0	; select bank0
 12059  109F  00D1               	movwf	___flsub@a+3
 12060  10A0  0021               	movlb	1	; select bank1
 12061  10A1  0852               	movf	(Measure_R_PT100_2Wire@ADC_volt+2)^(0+128),w
 12062  10A2  0020               	movlb	0	; select bank0
 12063  10A3  00D0               	movwf	___flsub@a+2
 12064  10A4  0021               	movlb	1	; select bank1
 12065  10A5  0851               	movf	(Measure_R_PT100_2Wire@ADC_volt+1)^(0+128),w
 12066  10A6  0020               	movlb	0	; select bank0
 12067  10A7  00CF               	movwf	___flsub@a+1
 12068  10A8  0021               	movlb	1	; select bank1
 12069  10A9  0850               	movf	Measure_R_PT100_2Wire@ADC_volt^(0+128),w
 12070  10AA  0020               	movlb	0	; select bank0
 12071  10AB  00CE               	movwf	___flsub@a
 12072  10AC  3042               	movlw	66
 12073  10AD  00D5               	movwf	___flsub@b+3
 12074  10AE  30C8               	movlw	200
 12075  10AF  00D4               	movwf	___flsub@b+2
 12076  10B0  3000               	movlw	0
 12077  10B1  00D3               	movwf	___flsub@b+1
 12078  10B2  3000               	movlw	0
 12079  10B3  00D2               	movwf	___flsub@b
 12080  10B4  319C  247C  3190   	fcall	___flsub
 12081  10B7  0851               	movf	?___flsub+3,w
 12082  10B8  0021               	movlb	1	; select bank1
 12083  10B9  00CB               	movwf	(___fldiv@a+3)^(0+128)
 12084  10BA  0020               	movlb	0	; select bank0
 12085  10BB  0850               	movf	?___flsub+2,w
 12086  10BC  0021               	movlb	1	; select bank1
 12087  10BD  00CA               	movwf	(___fldiv@a+2)^(0+128)
 12088  10BE  0020               	movlb	0	; select bank0
 12089  10BF  084F               	movf	?___flsub+1,w
 12090  10C0  0021               	movlb	1	; select bank1
 12091  10C1  00C9               	movwf	(___fldiv@a+1)^(0+128)
 12092  10C2  0020               	movlb	0	; select bank0
 12093  10C3  084E               	movf	?___flsub,w
 12094  10C4  0021               	movlb	1	; select bank1
 12095  10C5  00C8               	movwf	___fldiv@a^(0+128)
 12096  10C6  3042               	movlw	66
 12097  10C7  0020               	movlb	0	; select bank0
 12098  10C8  00A3               	movwf	___flmul@b+3
 12099  10C9  30C8               	movlw	200
 12100  10CA  00A2               	movwf	___flmul@b+2
 12101  10CB  3000               	movlw	0
 12102  10CC  00A1               	movwf	___flmul@b+1
 12103  10CD  3000               	movlw	0
 12104  10CE  00A0               	movwf	___flmul@b
 12105  10CF  0021               	movlb	1	; select bank1
 12106  10D0  0853               	movf	(Measure_R_PT100_2Wire@ADC_volt+3)^(0+128),w
 12107  10D1  0020               	movlb	0	; select bank0
 12108  10D2  00A7               	movwf	___flmul@a+3
 12109  10D3  0021               	movlb	1	; select bank1
 12110  10D4  0852               	movf	(Measure_R_PT100_2Wire@ADC_volt+2)^(0+128),w
 12111  10D5  0020               	movlb	0	; select bank0
 12112  10D6  00A6               	movwf	___flmul@a+2
 12113  10D7  0021               	movlb	1	; select bank1
 12114  10D8  0851               	movf	(Measure_R_PT100_2Wire@ADC_volt+1)^(0+128),w
 12115  10D9  0020               	movlb	0	; select bank0
 12116  10DA  00A5               	movwf	___flmul@a+1
 12117  10DB  0021               	movlb	1	; select bank1
 12118  10DC  0850               	movf	Measure_R_PT100_2Wire@ADC_volt^(0+128),w
 12119  10DD  0020               	movlb	0	; select bank0
 12120  10DE  00A4               	movwf	___flmul@a
 12121  10DF  318A  22F4  3190   	fcall	___flmul
 12122  10E2  0823               	movf	?___flmul+3,w
 12123  10E3  0021               	movlb	1	; select bank1
 12124  10E4  00CF               	movwf	(___fldiv@b+3)^(0+128)
 12125  10E5  0020               	movlb	0	; select bank0
 12126  10E6  0822               	movf	?___flmul+2,w
 12127  10E7  0021               	movlb	1	; select bank1
 12128  10E8  00CE               	movwf	(___fldiv@b+2)^(0+128)
 12129  10E9  0020               	movlb	0	; select bank0
 12130  10EA  0821               	movf	?___flmul+1,w
 12131  10EB  0021               	movlb	1	; select bank1
 12132  10EC  00CD               	movwf	(___fldiv@b+1)^(0+128)
 12133  10ED  0020               	movlb	0	; select bank0
 12134  10EE  0820               	movf	?___flmul,w
 12135  10EF  0021               	movlb	1	; select bank1
 12136  10F0  00CC               	movwf	___fldiv@b^(0+128)
 12137  10F1  3194  244F         	fcall	___fldiv
 12138  10F3  084B               	movf	(?___fldiv+3)^(0+128),w
 12139  10F4  0020               	movlb	0	; select bank0
 12140  10F5  00EF               	movwf	Measure_R_PT100_2Wire@R_PT100+3
 12141  10F6  0021               	movlb	1	; select bank1
 12142  10F7  084A               	movf	(?___fldiv+2)^(0+128),w
 12143  10F8  0020               	movlb	0	; select bank0
 12144  10F9  00EE               	movwf	Measure_R_PT100_2Wire@R_PT100+2
 12145  10FA  0021               	movlb	1	; select bank1
 12146  10FB  0849               	movf	(?___fldiv+1)^(0+128),w
 12147  10FC  0020               	movlb	0	; select bank0
 12148  10FD  00ED               	movwf	Measure_R_PT100_2Wire@R_PT100+1
 12149  10FE  0021               	movlb	1	; select bank1
 12150  10FF  0848               	movf	?___fldiv^(0+128),w
 12151  1100  0020               	movlb	0	; select bank0
 12152  1101  00EC               	movwf	Measure_R_PT100_2Wire@R_PT100
 12153                           
 12154                           ;main.c: 214:     return R_PT100;
 12155  1102  086F               	movf	Measure_R_PT100_2Wire@R_PT100+3,w
 12156  1103  0021               	movlb	1	; select bank1
 12157  1104  00D3               	movwf	(?_Measure_R_PT100_2Wire+3)^(0+128)
 12158  1105  0020               	movlb	0	; select bank0
 12159  1106  086E               	movf	Measure_R_PT100_2Wire@R_PT100+2,w
 12160  1107  0021               	movlb	1	; select bank1
 12161  1108  00D2               	movwf	(?_Measure_R_PT100_2Wire+2)^(0+128)
 12162  1109  0020               	movlb	0	; select bank0
 12163  110A  086D               	movf	Measure_R_PT100_2Wire@R_PT100+1,w
 12164  110B  0021               	movlb	1	; select bank1
 12165  110C  00D1               	movwf	(?_Measure_R_PT100_2Wire+1)^(0+128)
 12166  110D  0020               	movlb	0	; select bank0
 12167  110E  086C               	movf	Measure_R_PT100_2Wire@R_PT100,w
 12168  110F  0021               	movlb	1	; select bank1
 12169  1110  00D0               	movwf	?_Measure_R_PT100_2Wire^(0+128)
 12170  1111  0008               	return
 12171  1112                     __end_of_Measure_R_PT100_2Wire:
 12172                           
 12173                           	psect	text56
 12174  1B79                     __ptext56:	
 12175 ;; *************** function _Init_Function *****************
 12176 ;; Defined at:
 12177 ;;		line 145 in file "main.c"
 12178 ;; Parameters:    Size  Location     Type
 12179 ;;		None
 12180 ;; Auto vars:     Size  Location     Type
 12181 ;;		None
 12182 ;; Return value:  Size  Location     Type
 12183 ;;                  1    wreg      void 
 12184 ;; Registers used:
 12185 ;;		wreg, status,2, status,0, pclath, cstack
 12186 ;; Tracked objects:
 12187 ;;		On entry : 1F/1
 12188 ;;		On exit  : 1F/2
 12189 ;;		Unchanged: 0/0
 12190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12194 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12195 ;;Total ram usage:        0 bytes
 12196 ;; Hardware stack levels used:    1
 12197 ;; Hardware stack levels required when called:    6
 12198 ;; This function calls:
 12199 ;;		_StartStop_AlarmLED
 12200 ;;		_StartStop_Buzzer
 12201 ;;		_StartStop_Fan
 12202 ;; This function is called by:
 12203 ;;		_main
 12204 ;; This function uses a non-reentrant model
 12205 ;;
 12206                           
 12207                           
 12208                           ;psect for function _Init_Function
 12209  1B79                     _Init_Function:
 12210                           
 12211                           ;main.c: 147:     StartStop_AlarmLED(0);
 12212                           
 12213                           ;incstack = 0
 12214                           ; Regs used in _Init_Function: [wreg+status,2+status,0+pclath+cstack]
 12215  1B79  3000               	movlw	0
 12216  1B7A  319B  2327  319B   	fcall	_StartStop_AlarmLED
 12217                           
 12218                           ;main.c: 148:     StartStop_Fan(0);
 12219  1B7D  3000               	movlw	0
 12220  1B7E  319B  2306  319B   	fcall	_StartStop_Fan
 12221                           
 12222                           ;main.c: 149:     StartStop_Buzzer(0);
 12223  1B81  3000               	movlw	0
 12224  1B82  319A  22FE         	fcall	_StartStop_Buzzer
 12225  1B84  128E               	bcf	14,5	;volatile
 12226  1B85  0008               	return
 12227  1B86                     __end_of_Init_Function:
 12228                           
 12229                           	psect	text57
 12230  1B06                     __ptext57:	
 12231 ;; *************** function _StartStop_Fan *****************
 12232 ;; Defined at:
 12233 ;;		line 272 in file "main.c"
 12234 ;; Parameters:    Size  Location     Type
 12235 ;;  OnOff           1    wreg     _Bool 
 12236 ;; Auto vars:     Size  Location     Type
 12237 ;;  OnOff           1    0[COMMON] _Bool 
 12238 ;; Return value:  Size  Location     Type
 12239 ;;                  1    wreg      void 
 12240 ;; Registers used:
 12241 ;;		wreg, status,2, status,0
 12242 ;; Tracked objects:
 12243 ;;		On entry : 1F/2
 12244 ;;		On exit  : 1F/2
 12245 ;;		Unchanged: 0/0
 12246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12248 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12250 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12251 ;;Total ram usage:        1 bytes
 12252 ;; Hardware stack levels used:    1
 12253 ;; Hardware stack levels required when called:    5
 12254 ;; This function calls:
 12255 ;;		Nothing
 12256 ;; This function is called by:
 12257 ;;		_Init_Function
 12258 ;; This function uses a non-reentrant model
 12259 ;;
 12260                           
 12261                           
 12262                           ;psect for function _StartStop_Fan
 12263  1B06                     _StartStop_Fan:
 12264                           
 12265                           ;incstack = 0
 12266                           ; Regs used in _StartStop_Fan: [wreg+status,2+status,0]
 12267                           ;StartStop_Fan@OnOff stored from wreg
 12268  1B06  00F0               	movwf	StartStop_Fan@OnOff
 12269                           
 12270                           ;main.c: 274:     if (1 == OnOff){
 12271  1B07  0370               	decf	StartStop_Fan@OnOff,w
 12272  1B08  1D03               	btfss	3,2
 12273  1B09  2B0C               	goto	l886
 12274                           
 12275                           ;main.c: 276:         do { LATCbits.LATC3 = 1; } while(0);
 12276  1B0A  158E               	bsf	14,3	;volatile
 12277  1B0B  0008               	return
 12278  1B0C                     l886:	
 12279                           ;main.c: 280:         do { LATCbits.LATC3 = 0; } while(0);
 12280                           
 12281  1B0C  118E               	bcf	14,3	;volatile
 12282  1B0D  0008               	return
 12283  1B0E                     __end_of_StartStop_Fan:
 12284                           
 12285                           	psect	text58
 12286  1AFE                     __ptext58:	
 12287 ;; *************** function _StartStop_Buzzer *****************
 12288 ;; Defined at:
 12289 ;;		line 286 in file "main.c"
 12290 ;; Parameters:    Size  Location     Type
 12291 ;;  OnOff           1    wreg     _Bool 
 12292 ;; Auto vars:     Size  Location     Type
 12293 ;;  OnOff           1    0[COMMON] _Bool 
 12294 ;; Return value:  Size  Location     Type
 12295 ;;                  1    wreg      void 
 12296 ;; Registers used:
 12297 ;;		wreg, status,2, status,0
 12298 ;; Tracked objects:
 12299 ;;		On entry : 1F/2
 12300 ;;		On exit  : 1F/2
 12301 ;;		Unchanged: 0/0
 12302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12304 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12306 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12307 ;;Total ram usage:        1 bytes
 12308 ;; Hardware stack levels used:    1
 12309 ;; Hardware stack levels required when called:    5
 12310 ;; This function calls:
 12311 ;;		Nothing
 12312 ;; This function is called by:
 12313 ;;		_Init_Function
 12314 ;; This function uses a non-reentrant model
 12315 ;;
 12316                           
 12317                           
 12318                           ;psect for function _StartStop_Buzzer
 12319  1AFE                     _StartStop_Buzzer:
 12320                           
 12321                           ;incstack = 0
 12322                           ; Regs used in _StartStop_Buzzer: [wreg+status,2+status,0]
 12323                           ;StartStop_Buzzer@OnOff stored from wreg
 12324  1AFE  00F0               	movwf	StartStop_Buzzer@OnOff
 12325                           
 12326                           ;main.c: 288:     if (1 == OnOff){
 12327  1AFF  0370               	decf	StartStop_Buzzer@OnOff,w
 12328  1B00  1D03               	btfss	3,2
 12329  1B01  2B04               	goto	l895
 12330                           
 12331                           ;main.c: 290:         do { LATCbits.LATC4 = 1; } while(0);
 12332  1B02  160E               	bsf	14,4	;volatile
 12333  1B03  0008               	return
 12334  1B04                     l895:	
 12335                           ;main.c: 294:         do { LATCbits.LATC4 = 0; } while(0);
 12336                           
 12337  1B04  120E               	bcf	14,4	;volatile
 12338  1B05  0008               	return
 12339  1B06                     __end_of_StartStop_Buzzer:
 12340                           
 12341                           	psect	text59
 12342  1B27                     __ptext59:	
 12343 ;; *************** function _StartStop_AlarmLED *****************
 12344 ;; Defined at:
 12345 ;;		line 258 in file "main.c"
 12346 ;; Parameters:    Size  Location     Type
 12347 ;;  OnOff           1    wreg     _Bool 
 12348 ;; Auto vars:     Size  Location     Type
 12349 ;;  OnOff           1    0[COMMON] _Bool 
 12350 ;; Return value:  Size  Location     Type
 12351 ;;                  1    wreg      void 
 12352 ;; Registers used:
 12353 ;;		wreg, status,2, status,0
 12354 ;; Tracked objects:
 12355 ;;		On entry : 1C/2
 12356 ;;		On exit  : 1F/2
 12357 ;;		Unchanged: 0/0
 12358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12360 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12362 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12363 ;;Total ram usage:        1 bytes
 12364 ;; Hardware stack levels used:    1
 12365 ;; Hardware stack levels required when called:    5
 12366 ;; This function calls:
 12367 ;;		Nothing
 12368 ;; This function is called by:
 12369 ;;		_main
 12370 ;;		_Init_Function
 12371 ;; This function uses a non-reentrant model
 12372 ;;
 12373                           
 12374                           
 12375                           ;psect for function _StartStop_AlarmLED
 12376  1B27                     _StartStop_AlarmLED:
 12377                           
 12378                           ;incstack = 0
 12379                           ; Regs used in _StartStop_AlarmLED: [wreg+status,2+status,0]
 12380                           ;StartStop_AlarmLED@OnOff stored from wreg
 12381  1B27  00F0               	movwf	StartStop_AlarmLED@OnOff
 12382                           
 12383                           ;main.c: 260:     if (1 == OnOff){
 12384  1B28  0370               	decf	StartStop_AlarmLED@OnOff,w
 12385  1B29  1D03               	btfss	3,2
 12386  1B2A  2B2E               	goto	l877
 12387                           
 12388                           ;main.c: 262:         do { LATCbits.LATC2 = 1; } while(0);
 12389  1B2B  0022               	movlb	2	; select bank2
 12390  1B2C  150E               	bsf	14,2	;volatile
 12391  1B2D  0008               	return
 12392  1B2E                     l877:	
 12393                           ;main.c: 266:         do { LATCbits.LATC2 = 0; } while(0);
 12394                           
 12395  1B2E  0022               	movlb	2	; select bank2
 12396  1B2F  110E               	bcf	14,2	;volatile
 12397  1B30  0008               	return
 12398  1B31                     __end_of_StartStop_AlarmLED:
 12399                           
 12400                           	psect	text60
 12401  1DF3                     __ptext60:	
 12402 ;; *************** function _ChangeADCtoVoltage *****************
 12403 ;; Defined at:
 12404 ;;		line 201 in file "main.c"
 12405 ;; Parameters:    Size  Location     Type
 12406 ;;  ADC_number      2   48[BANK1 ] unsigned short 
 12407 ;; Auto vars:     Size  Location     Type
 12408 ;;		None
 12409 ;; Return value:  Size  Location     Type
 12410 ;;                  4   48[BANK1 ] float 
 12411 ;; Registers used:
 12412 ;;		wreg, status,2, status,0, pclath, cstack
 12413 ;; Tracked objects:
 12414 ;;		On entry : 1F/1
 12415 ;;		On exit  : 1F/1
 12416 ;;		Unchanged: 0/0
 12417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12418 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 12419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12421 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 12422 ;;Total ram usage:        4 bytes
 12423 ;; Hardware stack levels used:    1
 12424 ;; Hardware stack levels required when called:    7
 12425 ;; This function calls:
 12426 ;;		___fldiv
 12427 ;;		___flmul
 12428 ;;		___xxtofl
 12429 ;; This function is called by:
 12430 ;;		_main
 12431 ;; This function uses a non-reentrant model
 12432 ;;
 12433                           
 12434                           
 12435                           ;psect for function _ChangeADCtoVoltage
 12436  1DF3                     _ChangeADCtoVoltage:
 12437                           
 12438                           ;main.c: 203:     return (float)(5.0 * ADC_number / 1023);
 12439                           
 12440                           ;incstack = 0
 12441                           ; Regs used in _ChangeADCtoVoltage: [wreg+status,2+status,0+pclath+cstack]
 12442  1DF3  3044               	movlw	68
 12443  1DF4  00CB               	movwf	(___fldiv@a+3)^(0+128)
 12444  1DF5  307F               	movlw	127
 12445  1DF6  00CA               	movwf	(___fldiv@a+2)^(0+128)
 12446  1DF7  30C0               	movlw	192
 12447  1DF8  00C9               	movwf	(___fldiv@a+1)^(0+128)
 12448  1DF9  3000               	movlw	0
 12449  1DFA  00C8               	movwf	___fldiv@a^(0+128)
 12450  1DFB  3040               	movlw	64
 12451  1DFC  0020               	movlb	0	; select bank0
 12452  1DFD  00A3               	movwf	___flmul@b+3
 12453  1DFE  30A0               	movlw	160
 12454  1DFF  00A2               	movwf	___flmul@b+2
 12455  1E00  3000               	movlw	0
 12456  1E01  00A1               	movwf	___flmul@b+1
 12457  1E02  3000               	movlw	0
 12458  1E03  00A0               	movwf	___flmul@b
 12459  1E04  0021               	movlb	1	; select bank1
 12460  1E05  0850               	movf	ChangeADCtoVoltage@ADC_number^(0+128),w
 12461  1E06  00F0               	movwf	___xxtofl@val
 12462  1E07  0851               	movf	(ChangeADCtoVoltage@ADC_number+1)^(0+128),w
 12463  1E08  00F1               	movwf	___xxtofl@val+1
 12464  1E09  01F2               	clrf	___xxtofl@val+2
 12465  1E0A  01F3               	clrf	___xxtofl@val+3
 12466  1E0B  3000               	movlw	0
 12467  1E0C  3191  218A  319D   	fcall	___xxtofl
 12468  1E0F  0873               	movf	?___xxtofl+3,w
 12469  1E10  0020               	movlb	0	; select bank0
 12470  1E11  00A7               	movwf	___flmul@a+3
 12471  1E12  0872               	movf	?___xxtofl+2,w
 12472  1E13  00A6               	movwf	___flmul@a+2
 12473  1E14  0871               	movf	?___xxtofl+1,w
 12474  1E15  00A5               	movwf	___flmul@a+1
 12475  1E16  0870               	movf	?___xxtofl,w
 12476  1E17  00A4               	movwf	___flmul@a
 12477  1E18  318A  22F4  319D   	fcall	___flmul
 12478  1E1B  0823               	movf	?___flmul+3,w
 12479  1E1C  0021               	movlb	1	; select bank1
 12480  1E1D  00CF               	movwf	(___fldiv@b+3)^(0+128)
 12481  1E1E  0020               	movlb	0	; select bank0
 12482  1E1F  0822               	movf	?___flmul+2,w
 12483  1E20  0021               	movlb	1	; select bank1
 12484  1E21  00CE               	movwf	(___fldiv@b+2)^(0+128)
 12485  1E22  0020               	movlb	0	; select bank0
 12486  1E23  0821               	movf	?___flmul+1,w
 12487  1E24  0021               	movlb	1	; select bank1
 12488  1E25  00CD               	movwf	(___fldiv@b+1)^(0+128)
 12489  1E26  0020               	movlb	0	; select bank0
 12490  1E27  0820               	movf	?___flmul,w
 12491  1E28  0021               	movlb	1	; select bank1
 12492  1E29  00CC               	movwf	___fldiv@b^(0+128)
 12493  1E2A  3194  244F         	fcall	___fldiv
 12494  1E2C  084B               	movf	(?___fldiv+3)^(0+128),w
 12495  1E2D  00D3               	movwf	(?_ChangeADCtoVoltage+3)^(0+128)
 12496  1E2E  084A               	movf	(?___fldiv+2)^(0+128),w
 12497  1E2F  00D2               	movwf	(?_ChangeADCtoVoltage+2)^(0+128)
 12498  1E30  0849               	movf	(?___fldiv+1)^(0+128),w
 12499  1E31  00D1               	movwf	(?_ChangeADCtoVoltage+1)^(0+128)
 12500  1E32  0848               	movf	?___fldiv^(0+128),w
 12501  1E33  00D0               	movwf	?_ChangeADCtoVoltage^(0+128)
 12502  1E34  0008               	return
 12503  1E35                     __end_of_ChangeADCtoVoltage:
 12504                           
 12505                           	psect	text61
 12506  118A                     __ptext61:	
 12507 ;; *************** function ___xxtofl *****************
 12508 ;; Defined at:
 12509 ;;		line 10 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/xxtofl.c"
 12510 ;; Parameters:    Size  Location     Type
 12511 ;;  sign            1    wreg     unsigned char 
 12512 ;;  val             4    0[COMMON] long 
 12513 ;; Auto vars:     Size  Location     Type
 12514 ;;  sign            1    8[COMMON] unsigned char 
 12515 ;;  arg             4   10[COMMON] unsigned long 
 12516 ;;  exp             1    9[COMMON] unsigned char 
 12517 ;; Return value:  Size  Location     Type
 12518 ;;                  4    0[COMMON] unsigned char 
 12519 ;; Registers used:
 12520 ;;		wreg, status,2, status,0
 12521 ;; Tracked objects:
 12522 ;;		On entry : 1F/1
 12523 ;;		On exit  : 1F/1
 12524 ;;		Unchanged: 1F/0
 12525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12526 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12527 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12528 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12529 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12530 ;;Total ram usage:       14 bytes
 12531 ;; Hardware stack levels used:    1
 12532 ;; Hardware stack levels required when called:    5
 12533 ;; This function calls:
 12534 ;;		Nothing
 12535 ;; This function is called by:
 12536 ;;		_ChangeADCtoVoltage
 12537 ;; This function uses a non-reentrant model
 12538 ;;
 12539                           
 12540                           
 12541                           ;psect for function ___xxtofl
 12542  118A                     ___xxtofl:
 12543                           
 12544                           ;incstack = 0
 12545                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
 12546                           ;___xxtofl@sign stored from wreg
 12547  118A  00F8               	movwf	___xxtofl@sign
 12548  118B  0878               	movf	___xxtofl@sign,w
 12549  118C  1D03               	btfss	3,2
 12550  118D  1FF3               	btfss	___xxtofl@val+3,7
 12551  118E  299F               	goto	l5166
 12552  118F  0970               	comf	___xxtofl@val,w
 12553  1190  00FA               	movwf	___xxtofl@arg
 12554  1191  0971               	comf	___xxtofl@val+1,w
 12555  1192  00FB               	movwf	___xxtofl@arg+1
 12556  1193  0972               	comf	___xxtofl@val+2,w
 12557  1194  00FC               	movwf	___xxtofl@arg+2
 12558  1195  0973               	comf	___xxtofl@val+3,w
 12559  1196  00FD               	movwf	___xxtofl@arg+3
 12560  1197  0AFA               	incf	___xxtofl@arg,f
 12561  1198  1903               	skipnz
 12562  1199  0AFB               	incf	___xxtofl@arg+1,f
 12563  119A  1903               	skipnz
 12564  119B  0AFC               	incf	___xxtofl@arg+2,f
 12565  119C  1903               	skipnz
 12566  119D  0AFD               	incf	___xxtofl@arg+3,f
 12567  119E  29A7               	goto	l1543
 12568  119F                     l5166:
 12569  119F  0873               	movf	___xxtofl@val+3,w
 12570  11A0  00FD               	movwf	___xxtofl@arg+3
 12571  11A1  0872               	movf	___xxtofl@val+2,w
 12572  11A2  00FC               	movwf	___xxtofl@arg+2
 12573  11A3  0871               	movf	___xxtofl@val+1,w
 12574  11A4  00FB               	movwf	___xxtofl@arg+1
 12575  11A5  0870               	movf	___xxtofl@val,w
 12576  11A6  00FA               	movwf	___xxtofl@arg
 12577  11A7                     l1543:
 12578  11A7  0873               	movf	___xxtofl@val+3,w
 12579  11A8  0472               	iorwf	___xxtofl@val+2,w
 12580  11A9  0471               	iorwf	___xxtofl@val+1,w
 12581  11AA  0470               	iorwf	___xxtofl@val,w
 12582  11AB  1D03               	skipz
 12583  11AC  29B6               	goto	l5172
 12584  11AD  3000               	movlw	0
 12585  11AE  00F3               	movwf	?___xxtofl+3
 12586  11AF  3000               	movlw	0
 12587  11B0  00F2               	movwf	?___xxtofl+2
 12588  11B1  3000               	movlw	0
 12589  11B2  00F1               	movwf	?___xxtofl+1
 12590  11B3  3000               	movlw	0
 12591  11B4  00F0               	movwf	?___xxtofl
 12592  11B5  0008               	return
 12593  11B6                     l5172:
 12594  11B6  3096               	movlw	150
 12595  11B7  00F4               	movwf	??___xxtofl
 12596  11B8  0874               	movf	??___xxtofl,w
 12597  11B9  00F9               	movwf	___xxtofl@exp
 12598  11BA                     l5176:
 12599  11BA  30FE               	movlw	254
 12600  11BB  057D               	andwf	___xxtofl@arg+3,w
 12601  11BC  1903               	btfsc	3,2
 12602  11BD  29DD               	goto	l1549
 12603  11BE  3001               	movlw	1
 12604  11BF  00F4               	movwf	??___xxtofl
 12605  11C0  0874               	movf	??___xxtofl,w
 12606  11C1  07F9               	addwf	___xxtofl@exp,f
 12607  11C2  3001               	movlw	1
 12608  11C3                     u6075:
 12609  11C3  36FD               	lsrf	___xxtofl@arg+3,f
 12610  11C4  0CFC               	rrf	___xxtofl@arg+2,f
 12611  11C5  0CFB               	rrf	___xxtofl@arg+1,f
 12612  11C6  0CFA               	rrf	___xxtofl@arg,f
 12613  11C7  0B89               	decfsz	9,f
 12614  11C8  29C3               	goto	u6075
 12615  11C9  29BA               	goto	l5176
 12616  11CA                     l5178:
 12617  11CA  3001               	movlw	1
 12618  11CB  00F4               	movwf	??___xxtofl
 12619  11CC  0874               	movf	??___xxtofl,w
 12620  11CD  07F9               	addwf	___xxtofl@exp,f
 12621  11CE  3001               	movlw	1
 12622  11CF  07FA               	addwf	___xxtofl@arg,f
 12623  11D0  3000               	movlw	0
 12624  11D1  3DFB               	addwfc	___xxtofl@arg+1,f
 12625  11D2  3000               	movlw	0
 12626  11D3  3DFC               	addwfc	___xxtofl@arg+2,f
 12627  11D4  3000               	movlw	0
 12628  11D5  3DFD               	addwfc	___xxtofl@arg+3,f
 12629  11D6  3001               	movlw	1
 12630  11D7                     u6095:
 12631  11D7  36FD               	lsrf	___xxtofl@arg+3,f
 12632  11D8  0CFC               	rrf	___xxtofl@arg+2,f
 12633  11D9  0CFB               	rrf	___xxtofl@arg+1,f
 12634  11DA  0CFA               	rrf	___xxtofl@arg,f
 12635  11DB  0B89               	decfsz	9,f
 12636  11DC  29D7               	goto	u6095
 12637  11DD                     l1549:
 12638  11DD  30FF               	movlw	255
 12639  11DE  057D               	andwf	___xxtofl@arg+3,w
 12640  11DF  1903               	btfsc	3,2
 12641  11E0  29EF               	goto	l5186
 12642  11E1  29CA               	goto	l5178
 12643  11E2                     l5188:
 12644  11E2  3002               	movlw	2
 12645  11E3  0279               	subwf	___xxtofl@exp,w
 12646  11E4  1C03               	btfss	3,0
 12647  11E5  29F1               	goto	l1556
 12648  11E6  3001               	movlw	1
 12649  11E7  02F9               	subwf	___xxtofl@exp,f
 12650  11E8  3001               	movlw	1
 12651  11E9                     u6115:
 12652  11E9  35FA               	lslf	___xxtofl@arg,f
 12653  11EA  0DFB               	rlf	___xxtofl@arg+1,f
 12654  11EB  0DFC               	rlf	___xxtofl@arg+2,f
 12655  11EC  0DFD               	rlf	___xxtofl@arg+3,f
 12656  11ED  0B89               	decfsz	9,f
 12657  11EE  29E9               	goto	u6115
 12658  11EF                     l5186:
 12659  11EF  1FFC               	btfss	___xxtofl@arg+2,7
 12660  11F0  29E2               	goto	l5188
 12661  11F1                     l1556:
 12662  11F1  1879               	btfsc	___xxtofl@exp,0
 12663  11F2  29FB               	goto	l1557
 12664  11F3  30FF               	movlw	255
 12665  11F4  05FA               	andwf	___xxtofl@arg,f
 12666  11F5  30FF               	movlw	255
 12667  11F6  05FB               	andwf	___xxtofl@arg+1,f
 12668  11F7  307F               	movlw	127
 12669  11F8  05FC               	andwf	___xxtofl@arg+2,f
 12670  11F9  30FF               	movlw	255
 12671  11FA  05FD               	andwf	___xxtofl@arg+3,f
 12672  11FB                     l1557:
 12673  11FB  1003               	clrc
 12674  11FC  0CF9               	rrf	___xxtofl@exp,f
 12675  11FD  0879               	movf	___xxtofl@exp,w
 12676  11FE  00F4               	movwf	??___xxtofl
 12677  11FF  01F5               	clrf	??___xxtofl+1
 12678  1200  01F6               	clrf	??___xxtofl+2
 12679  1201  01F7               	clrf	??___xxtofl+3
 12680  1202  3018               	movlw	24
 12681  1203                     u6155:
 12682  1203  35F4               	lslf	??___xxtofl,f
 12683  1204  0DF5               	rlf	??___xxtofl+1,f
 12684  1205  0DF6               	rlf	??___xxtofl+2,f
 12685  1206  0DF7               	rlf	??___xxtofl+3,f
 12686  1207  0B89               	decfsz	9,f
 12687  1208  2A03               	goto	u6155
 12688  1209  0874               	movf	??___xxtofl,w
 12689  120A  04FA               	iorwf	___xxtofl@arg,f
 12690  120B  0875               	movf	??___xxtofl+1,w
 12691  120C  04FB               	iorwf	___xxtofl@arg+1,f
 12692  120D  0876               	movf	??___xxtofl+2,w
 12693  120E  04FC               	iorwf	___xxtofl@arg+2,f
 12694  120F  0877               	movf	??___xxtofl+3,w
 12695  1210  04FD               	iorwf	___xxtofl@arg+3,f
 12696  1211  0878               	movf	___xxtofl@sign,w
 12697  1212  1D03               	btfss	3,2
 12698  1213  1FF3               	btfss	___xxtofl@val+3,7
 12699  1214  2A16               	goto	l5200
 12700  1215  17FD               	bsf	___xxtofl@arg+3,7
 12701  1216                     l5200:
 12702  1216  087D               	movf	___xxtofl@arg+3,w
 12703  1217  00F3               	movwf	?___xxtofl+3
 12704  1218  087C               	movf	___xxtofl@arg+2,w
 12705  1219  00F2               	movwf	?___xxtofl+2
 12706  121A  087B               	movf	___xxtofl@arg+1,w
 12707  121B  00F1               	movwf	?___xxtofl+1
 12708  121C  087A               	movf	___xxtofl@arg,w
 12709  121D  00F0               	movwf	?___xxtofl
 12710  121E  0008               	return
 12711  121F                     __end_of___xxtofl:
 12712                           
 12713                           	psect	text62
 12714  121F                     __ptext62:	
 12715 ;; *************** function _CalcRequiredDelayForTrigTRIAC *****************
 12716 ;; Defined at:
 12717 ;;		line 318 in file "main.c"
 12718 ;; Parameters:    Size  Location     Type
 12719 ;;  dim_percenta    4   57[BANK1 ] float 
 12720 ;; Auto vars:     Size  Location     Type
 12721 ;;  delay           4   61[BANK1 ] float 
 12722 ;;  ret             2   65[BANK1 ] unsigned short 
 12723 ;; Return value:  Size  Location     Type
 12724 ;;                  2   57[BANK1 ] unsigned short 
 12725 ;; Registers used:
 12726 ;;		wreg, status,2, status,0, pclath, cstack
 12727 ;; Tracked objects:
 12728 ;;		On entry : 1F/1
 12729 ;;		On exit  : 1F/1
 12730 ;;		Unchanged: 0/0
 12731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12732 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 12733 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
 12734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12735 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0
 12736 ;;Total ram usage:       10 bytes
 12737 ;; Hardware stack levels used:    1
 12738 ;; Hardware stack levels required when called:    7
 12739 ;; This function calls:
 12740 ;;		___fldiv
 12741 ;;		___flmul
 12742 ;;		___flsub
 12743 ;;		___fltol
 12744 ;; This function is called by:
 12745 ;;		_main
 12746 ;; This function uses a non-reentrant model
 12747 ;;
 12748                           
 12749                           
 12750                           ;psect for function _CalcRequiredDelayForTrigTRIAC
 12751  121F                     _CalcRequiredDelayForTrigTRIAC:
 12752                           
 12753                           ;main.c: 320:     float delay;;main.c: 321:     uint16_t ret;;main.c: 323:     delay = H
      +                          alfCycleACDuration_const - (5.0 * dim_percentage / 50.0);
 12754                           
 12755                           ;incstack = 0
 12756                           ; Regs used in _CalcRequiredDelayForTrigTRIAC: [wreg+status,2+status,0+pclath+cstack]
 12757  121F  3042               	movlw	66
 12758  1220  00CB               	movwf	(___fldiv@a+3)^(0+128)
 12759  1221  3048               	movlw	72
 12760  1222  00CA               	movwf	(___fldiv@a+2)^(0+128)
 12761  1223  3000               	movlw	0
 12762  1224  00C9               	movwf	(___fldiv@a+1)^(0+128)
 12763  1225  3000               	movlw	0
 12764  1226  00C8               	movwf	___fldiv@a^(0+128)
 12765  1227  3040               	movlw	64
 12766  1228  0020               	movlb	0	; select bank0
 12767  1229  00A3               	movwf	___flmul@b+3
 12768  122A  30A0               	movlw	160
 12769  122B  00A2               	movwf	___flmul@b+2
 12770  122C  3000               	movlw	0
 12771  122D  00A1               	movwf	___flmul@b+1
 12772  122E  3000               	movlw	0
 12773  122F  00A0               	movwf	___flmul@b
 12774  1230  0021               	movlb	1	; select bank1
 12775  1231  085C               	movf	(CalcRequiredDelayForTrigTRIAC@dim_percentage+3)^(0+128),w
 12776  1232  0020               	movlb	0	; select bank0
 12777  1233  00A7               	movwf	___flmul@a+3
 12778  1234  0021               	movlb	1	; select bank1
 12779  1235  085B               	movf	(CalcRequiredDelayForTrigTRIAC@dim_percentage+2)^(0+128),w
 12780  1236  0020               	movlb	0	; select bank0
 12781  1237  00A6               	movwf	___flmul@a+2
 12782  1238  0021               	movlb	1	; select bank1
 12783  1239  085A               	movf	(CalcRequiredDelayForTrigTRIAC@dim_percentage+1)^(0+128),w
 12784  123A  0020               	movlb	0	; select bank0
 12785  123B  00A5               	movwf	___flmul@a+1
 12786  123C  0021               	movlb	1	; select bank1
 12787  123D  0859               	movf	CalcRequiredDelayForTrigTRIAC@dim_percentage^(0+128),w
 12788  123E  0020               	movlb	0	; select bank0
 12789  123F  00A4               	movwf	___flmul@a
 12790  1240  318A  22F4  3192   	fcall	___flmul
 12791  1243  0823               	movf	?___flmul+3,w
 12792  1244  0021               	movlb	1	; select bank1
 12793  1245  00CF               	movwf	(___fldiv@b+3)^(0+128)
 12794  1246  0020               	movlb	0	; select bank0
 12795  1247  0822               	movf	?___flmul+2,w
 12796  1248  0021               	movlb	1	; select bank1
 12797  1249  00CE               	movwf	(___fldiv@b+2)^(0+128)
 12798  124A  0020               	movlb	0	; select bank0
 12799  124B  0821               	movf	?___flmul+1,w
 12800  124C  0021               	movlb	1	; select bank1
 12801  124D  00CD               	movwf	(___fldiv@b+1)^(0+128)
 12802  124E  0020               	movlb	0	; select bank0
 12803  124F  0820               	movf	?___flmul,w
 12804  1250  0021               	movlb	1	; select bank1
 12805  1251  00CC               	movwf	___fldiv@b^(0+128)
 12806  1252  3194  244F  3192   	fcall	___fldiv
 12807  1255  084B               	movf	(?___fldiv+3)^(0+128),w
 12808  1256  0020               	movlb	0	; select bank0
 12809  1257  00D1               	movwf	___flsub@a+3
 12810  1258  0021               	movlb	1	; select bank1
 12811  1259  084A               	movf	(?___fldiv+2)^(0+128),w
 12812  125A  0020               	movlb	0	; select bank0
 12813  125B  00D0               	movwf	___flsub@a+2
 12814  125C  0021               	movlb	1	; select bank1
 12815  125D  0849               	movf	(?___fldiv+1)^(0+128),w
 12816  125E  0020               	movlb	0	; select bank0
 12817  125F  00CF               	movwf	___flsub@a+1
 12818  1260  0021               	movlb	1	; select bank1
 12819  1261  0848               	movf	?___fldiv^(0+128),w
 12820  1262  0020               	movlb	0	; select bank0
 12821  1263  00CE               	movwf	___flsub@a
 12822  1264  3041               	movlw	65
 12823  1265  00D5               	movwf	___flsub@b+3
 12824  1266  3020               	movlw	32
 12825  1267  00D4               	movwf	___flsub@b+2
 12826  1268  3000               	movlw	0
 12827  1269  00D3               	movwf	___flsub@b+1
 12828  126A  3000               	movlw	0
 12829  126B  00D2               	movwf	___flsub@b
 12830  126C  319C  247C  3192   	fcall	___flsub
 12831  126F  0851               	movf	?___flsub+3,w
 12832  1270  0021               	movlb	1	; select bank1
 12833  1271  00E0               	movwf	(CalcRequiredDelayForTrigTRIAC@delay+3)^(0+128)
 12834  1272  0020               	movlb	0	; select bank0
 12835  1273  0850               	movf	?___flsub+2,w
 12836  1274  0021               	movlb	1	; select bank1
 12837  1275  00DF               	movwf	(CalcRequiredDelayForTrigTRIAC@delay+2)^(0+128)
 12838  1276  0020               	movlb	0	; select bank0
 12839  1277  084F               	movf	?___flsub+1,w
 12840  1278  0021               	movlb	1	; select bank1
 12841  1279  00DE               	movwf	(CalcRequiredDelayForTrigTRIAC@delay+1)^(0+128)
 12842  127A  0020               	movlb	0	; select bank0
 12843  127B  084E               	movf	?___flsub,w
 12844  127C  0021               	movlb	1	; select bank1
 12845  127D  00DD               	movwf	CalcRequiredDelayForTrigTRIAC@delay^(0+128)
 12846                           
 12847                           ;main.c: 324:     ret = (delay * 1000) / TMR2_Period_const;
 12848  127E  0860               	movf	(CalcRequiredDelayForTrigTRIAC@delay+3)^(0+128),w
 12849  127F  0020               	movlb	0	; select bank0
 12850  1280  00A7               	movwf	___flmul@a+3
 12851  1281  0021               	movlb	1	; select bank1
 12852  1282  085F               	movf	(CalcRequiredDelayForTrigTRIAC@delay+2)^(0+128),w
 12853  1283  0020               	movlb	0	; select bank0
 12854  1284  00A6               	movwf	___flmul@a+2
 12855  1285  0021               	movlb	1	; select bank1
 12856  1286  085E               	movf	(CalcRequiredDelayForTrigTRIAC@delay+1)^(0+128),w
 12857  1287  0020               	movlb	0	; select bank0
 12858  1288  00A5               	movwf	___flmul@a+1
 12859  1289  0021               	movlb	1	; select bank1
 12860  128A  085D               	movf	CalcRequiredDelayForTrigTRIAC@delay^(0+128),w
 12861  128B  0020               	movlb	0	; select bank0
 12862  128C  00A4               	movwf	___flmul@a
 12863  128D  3044               	movlw	68
 12864  128E  00A3               	movwf	___flmul@b+3
 12865  128F  307A               	movlw	122
 12866  1290  00A2               	movwf	___flmul@b+2
 12867  1291  3000               	movlw	0
 12868  1292  00A1               	movwf	___flmul@b+1
 12869  1293  3000               	movlw	0
 12870  1294  00A0               	movwf	___flmul@b
 12871  1295  318A  22F4  3192   	fcall	___flmul
 12872  1298  0823               	movf	?___flmul+3,w
 12873  1299  0021               	movlb	1	; select bank1
 12874  129A  00CF               	movwf	(___fldiv@b+3)^(0+128)
 12875  129B  0020               	movlb	0	; select bank0
 12876  129C  0822               	movf	?___flmul+2,w
 12877  129D  0021               	movlb	1	; select bank1
 12878  129E  00CE               	movwf	(___fldiv@b+2)^(0+128)
 12879  129F  0020               	movlb	0	; select bank0
 12880  12A0  0821               	movf	?___flmul+1,w
 12881  12A1  0021               	movlb	1	; select bank1
 12882  12A2  00CD               	movwf	(___fldiv@b+1)^(0+128)
 12883  12A3  0020               	movlb	0	; select bank0
 12884  12A4  0820               	movf	?___flmul,w
 12885  12A5  0021               	movlb	1	; select bank1
 12886  12A6  00CC               	movwf	___fldiv@b^(0+128)
 12887  12A7  3042               	movlw	66
 12888  12A8  00CB               	movwf	(___fldiv@a+3)^(0+128)
 12889  12A9  30C8               	movlw	200
 12890  12AA  00CA               	movwf	(___fldiv@a+2)^(0+128)
 12891  12AB  3000               	movlw	0
 12892  12AC  00C9               	movwf	(___fldiv@a+1)^(0+128)
 12893  12AD  3000               	movlw	0
 12894  12AE  00C8               	movwf	___fldiv@a^(0+128)
 12895  12AF  3194  244F  3192   	fcall	___fldiv
 12896  12B2  084B               	movf	(?___fldiv+3)^(0+128),w
 12897  12B3  00D3               	movwf	(___fltol@f1+3)^(0+128)
 12898  12B4  084A               	movf	(?___fldiv+2)^(0+128),w
 12899  12B5  00D2               	movwf	(___fltol@f1+2)^(0+128)
 12900  12B6  0849               	movf	(?___fldiv+1)^(0+128),w
 12901  12B7  00D1               	movwf	(___fltol@f1+1)^(0+128)
 12902  12B8  0848               	movf	?___fldiv^(0+128),w
 12903  12B9  00D0               	movwf	___fltol@f1^(0+128)
 12904  12BA  3190  202D         	fcall	___fltol
 12905  12BC  0021               	movlb	1	; select bank1
 12906  12BD  0851               	movf	(?___fltol+1)^(0+128),w
 12907  12BE  00E2               	movwf	(CalcRequiredDelayForTrigTRIAC@ret+1)^(0+128)
 12908  12BF  0850               	movf	?___fltol^(0+128),w
 12909  12C0  00E1               	movwf	CalcRequiredDelayForTrigTRIAC@ret^(0+128)
 12910                           
 12911                           ;main.c: 326:     return ret;
 12912  12C1  0862               	movf	(CalcRequiredDelayForTrigTRIAC@ret+1)^(0+128),w
 12913  12C2  00DA               	movwf	(?_CalcRequiredDelayForTrigTRIAC+1)^(0+128)
 12914  12C3  0861               	movf	CalcRequiredDelayForTrigTRIAC@ret^(0+128),w
 12915  12C4  00D9               	movwf	?_CalcRequiredDelayForTrigTRIAC^(0+128)
 12916  12C5  0008               	return
 12917  12C6                     __end_of_CalcRequiredDelayForTrigTRIAC:
 12918                           
 12919                           	psect	text63
 12920  102D                     __ptext63:	
 12921 ;; *************** function ___fltol *****************
 12922 ;; Defined at:
 12923 ;;		line 43 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/fltol.c"
 12924 ;; Parameters:    Size  Location     Type
 12925 ;;  f1              4   48[BANK1 ] unsigned short 
 12926 ;; Auto vars:     Size  Location     Type
 12927 ;;  exp1            1   77[BANK0 ] unsigned char 
 12928 ;;  sign1           1   76[BANK0 ] unsigned char 
 12929 ;; Return value:  Size  Location     Type
 12930 ;;                  4   48[BANK1 ] long 
 12931 ;; Registers used:
 12932 ;;		wreg, status,2, status,0
 12933 ;; Tracked objects:
 12934 ;;		On entry : 1F/1
 12935 ;;		On exit  : 1E/0
 12936 ;;		Unchanged: 0/0
 12937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12938 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 12939 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12940 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 12941 ;;      Totals:         0       2       9       0       0       0       0       0       0       0       0       0       
      +0       0
 12942 ;;Total ram usage:       11 bytes
 12943 ;; Hardware stack levels used:    1
 12944 ;; Hardware stack levels required when called:    5
 12945 ;; This function calls:
 12946 ;;		Nothing
 12947 ;; This function is called by:
 12948 ;;		_CalcRequiredDelayForTrigTRIAC
 12949 ;;		_efgtoa
 12950 ;; This function uses a non-reentrant model
 12951 ;;
 12952                           
 12953                           
 12954                           ;psect for function ___fltol
 12955  102D                     ___fltol:
 12956                           
 12957                           ;incstack = 0
 12958                           ; Regs used in ___fltol: [wreg+status,2+status,0]
 12959  102D  1003               	clrc
 12960  102E  0D52               	rlf	(___fltol@f1+2)^(0+128),w
 12961  102F  0D53               	rlf	(___fltol@f1+3)^(0+128),w
 12962  1030  00D4               	movwf	??___fltol^(0+128)
 12963  1031  0854               	movf	??___fltol^(0+128),w
 12964  1032  0020               	movlb	0	; select bank0
 12965  1033  00ED               	movwf	___fltol@exp1
 12966  1034  086D               	movf	___fltol@exp1,w
 12967  1035  1D03               	btfss	3,2
 12968  1036  2841               	goto	l4028
 12969  1037                     l4024:
 12970  1037  3000               	movlw	0
 12971  1038  0021               	movlb	1	; select bank1
 12972  1039  00D3               	movwf	(?___fltol+3)^(0+128)
 12973  103A  3000               	movlw	0
 12974  103B  00D2               	movwf	(?___fltol+2)^(0+128)
 12975  103C  3000               	movlw	0
 12976  103D  00D1               	movwf	(?___fltol+1)^(0+128)
 12977  103E  3000               	movlw	0
 12978  103F  00D0               	movwf	?___fltol^(0+128)
 12979  1040  0008               	return
 12980  1041                     l4028:
 12981  1041  0021               	movlb	1	; select bank1
 12982  1042  0850               	movf	___fltol@f1^(0+128),w
 12983  1043  00D4               	movwf	??___fltol^(0+128)
 12984  1044  0851               	movf	(___fltol@f1+1)^(0+128),w
 12985  1045  00D5               	movwf	(??___fltol^(0+128)+1)
 12986  1046  0852               	movf	(___fltol@f1+2)^(0+128),w
 12987  1047  00D6               	movwf	(??___fltol^(0+128)+2)
 12988  1048  0853               	movf	(___fltol@f1+3)^(0+128),w
 12989  1049  00D7               	movwf	(??___fltol^(0+128)+3)
 12990  104A  301F               	movlw	31
 12991  104B                     u4035:
 12992  104B  36D7               	lsrf	(??___fltol^(0+128)+3),f
 12993  104C  0CD6               	rrf	(??___fltol^(0+128)+2),f
 12994  104D  0CD5               	rrf	(??___fltol^(0+128)+1),f
 12995  104E  0CD4               	rrf	??___fltol^(0+128),f
 12996  104F  0B89               	decfsz	9,f
 12997  1050  284B               	goto	u4035
 12998  1051  0854               	movf	??___fltol^(0+128),w
 12999  1052  00D8               	movwf	(??___fltol+4)^(0+128)
 13000  1053  0858               	movf	(??___fltol+4)^(0+128),w
 13001  1054  0020               	movlb	0	; select bank0
 13002  1055  00EC               	movwf	___fltol@sign1
 13003  1056  0021               	movlb	1	; select bank1
 13004  1057  17D2               	bsf	(___fltol@f1^(0+128)+2),7
 13005  1058  30FF               	movlw	255
 13006  1059  05D0               	andwf	___fltol@f1^(0+128),f
 13007  105A  30FF               	movlw	255
 13008  105B  05D1               	andwf	(___fltol@f1+1)^(0+128),f
 13009  105C  30FF               	movlw	255
 13010  105D  05D2               	andwf	(___fltol@f1+2)^(0+128),f
 13011  105E  3000               	movlw	0
 13012  105F  05D3               	andwf	(___fltol@f1+3)^(0+128),f
 13013  1060  3096               	movlw	150
 13014  1061  0020               	movlb	0	; select bank0
 13015  1062  02ED               	subwf	___fltol@exp1,f
 13016  1063  1FED               	btfss	___fltol@exp1,7
 13017  1064  287A               	goto	l4046
 13018  1065  086D               	movf	___fltol@exp1,w
 13019  1066  3A80               	xorlw	128
 13020  1067  3E97               	addlw	151
 13021  1068  1C03               	btfss	3,0
 13022  1069  2837               	goto	l4024
 13023  106A                     l4044:
 13024  106A  3001               	movlw	1
 13025  106B                     u4065:
 13026  106B  0021               	movlb	1	; select bank1
 13027  106C  36D3               	lsrf	(___fltol@f1+3)^(0+128),f
 13028  106D  0CD2               	rrf	(___fltol@f1+2)^(0+128),f
 13029  106E  0CD1               	rrf	(___fltol@f1+1)^(0+128),f
 13030  106F  0CD0               	rrf	___fltol@f1^(0+128),f
 13031  1070  0B89               	decfsz	9,f
 13032  1071  286B               	goto	u4065
 13033  1072  3001               	movlw	1
 13034  1073  00D4               	movwf	??___fltol^(0+128)
 13035  1074  0854               	movf	??___fltol^(0+128),w
 13036  1075  0020               	movlb	0	; select bank0
 13037  1076  07ED               	addwf	___fltol@exp1,f
 13038  1077  1903               	btfsc	3,2
 13039  1078  288D               	goto	l4054
 13040  1079  286A               	goto	l4044
 13041  107A                     l4046:
 13042  107A  3020               	movlw	32
 13043  107B  026D               	subwf	___fltol@exp1,w
 13044  107C  1803               	btfsc	3,0
 13045  107D  2837               	goto	l4024
 13046  107E                     l1303:
 13047  107E  086D               	movf	___fltol@exp1,w
 13048  107F  1903               	btfsc	3,2
 13049  1080  288D               	goto	l4054
 13050  1081  3001               	movlw	1
 13051  1082                     u4095:
 13052  1082  0021               	movlb	1	; select bank1
 13053  1083  35D0               	lslf	___fltol@f1^(0+128),f
 13054  1084  0DD1               	rlf	(___fltol@f1+1)^(0+128),f
 13055  1085  0DD2               	rlf	(___fltol@f1+2)^(0+128),f
 13056  1086  0DD3               	rlf	(___fltol@f1+3)^(0+128),f
 13057  1087  0B89               	decfsz	9,f
 13058  1088  2882               	goto	u4095
 13059  1089  3001               	movlw	1
 13060  108A  0020               	movlb	0	; select bank0
 13061  108B  02ED               	subwf	___fltol@exp1,f
 13062  108C  287E               	goto	l1303
 13063  108D                     l4054:
 13064  108D  086C               	movf	___fltol@sign1,w
 13065  108E  1903               	btfsc	3,2
 13066  108F  0008               	return
 13067  1090  0021               	movlb	1	; select bank1
 13068  1091  09D0               	comf	___fltol@f1^(0+128),f
 13069  1092  09D1               	comf	(___fltol@f1+1)^(0+128),f
 13070  1093  09D2               	comf	(___fltol@f1+2)^(0+128),f
 13071  1094  09D3               	comf	(___fltol@f1+3)^(0+128),f
 13072  1095  0AD0               	incf	___fltol@f1^(0+128),f
 13073  1096  1903               	skipnz
 13074  1097  0AD1               	incf	(___fltol@f1+1)^(0+128),f
 13075  1098  1903               	skipnz
 13076  1099  0AD2               	incf	(___fltol@f1+2)^(0+128),f
 13077  109A  1903               	skipnz
 13078  109B  0AD3               	incf	(___fltol@f1+3)^(0+128),f
 13079  109C  0008               	return
 13080  109D                     __end_of___fltol:
 13081                           
 13082                           	psect	text64
 13083  1C7C                     __ptext64:	
 13084 ;; *************** function ___flsub *****************
 13085 ;; Defined at:
 13086 ;;		line 242 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/sprcadd.c"
 13087 ;; Parameters:    Size  Location     Type
 13088 ;;  a               4   46[BANK0 ] long 
 13089 ;;  b               4   50[BANK0 ] long 
 13090 ;; Auto vars:     Size  Location     Type
 13091 ;;		None
 13092 ;; Return value:  Size  Location     Type
 13093 ;;                  4   46[BANK0 ] long 
 13094 ;; Registers used:
 13095 ;;		wreg, status,2, status,0, pclath, cstack
 13096 ;; Tracked objects:
 13097 ;;		On entry : 1F/0
 13098 ;;		On exit  : 1F/0
 13099 ;;		Unchanged: 0/0
 13100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13101 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13104 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13105 ;;Total ram usage:        8 bytes
 13106 ;; Hardware stack levels used:    1
 13107 ;; Hardware stack levels required when called:    6
 13108 ;; This function calls:
 13109 ;;		___fladd
 13110 ;; This function is called by:
 13111 ;;		_Measure_R_PT100_2Wire
 13112 ;;		_CalcRequiredDelayForTrigTRIAC
 13113 ;;		_efgtoa
 13114 ;; This function uses a non-reentrant model
 13115 ;;
 13116                           
 13117                           
 13118                           ;psect for function ___flsub
 13119  1C7C                     ___flsub:
 13120                           
 13121                           ;incstack = 0
 13122                           ; Regs used in ___flsub: [wreg+status,2+status,0+pclath+cstack]
 13123  1C7C  3080               	movlw	128
 13124  1C7D  06D1               	xorwf	___flsub@a+3,f
 13125  1C7E  0855               	movf	___flsub@b+3,w
 13126  1C7F  00BD               	movwf	___fladd@b+3
 13127  1C80  0854               	movf	___flsub@b+2,w
 13128  1C81  00BC               	movwf	___fladd@b+2
 13129  1C82  0853               	movf	___flsub@b+1,w
 13130  1C83  00BB               	movwf	___fladd@b+1
 13131  1C84  0852               	movf	___flsub@b,w
 13132  1C85  00BA               	movwf	___fladd@b
 13133  1C86  0851               	movf	___flsub@a+3,w
 13134  1C87  00C1               	movwf	___fladd@a+3
 13135  1C88  0850               	movf	___flsub@a+2,w
 13136  1C89  00C0               	movwf	___fladd@a+2
 13137  1C8A  084F               	movf	___flsub@a+1,w
 13138  1C8B  00BF               	movwf	___fladd@a+1
 13139  1C8C  084E               	movf	___flsub@a,w
 13140  1C8D  00BE               	movwf	___fladd@a
 13141  1C8E  3189  2113         	fcall	___fladd
 13142  1C90  083D               	movf	?___fladd+3,w
 13143  1C91  00D1               	movwf	?___flsub+3
 13144  1C92  083C               	movf	?___fladd+2,w
 13145  1C93  00D0               	movwf	?___flsub+2
 13146  1C94  083B               	movf	?___fladd+1,w
 13147  1C95  00CF               	movwf	?___flsub+1
 13148  1C96  083A               	movf	?___fladd,w
 13149  1C97  00CE               	movwf	?___flsub
 13150  1C98  0008               	return
 13151  1C99                     __end_of___flsub:
 13152                           
 13153                           	psect	text65
 13154  0913                     __ptext65:	
 13155 ;; *************** function ___fladd *****************
 13156 ;; Defined at:
 13157 ;;		line 10 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/sprcadd.c"
 13158 ;; Parameters:    Size  Location     Type
 13159 ;;  b               4   26[BANK0 ] long 
 13160 ;;  a               4   30[BANK0 ] long 
 13161 ;; Auto vars:     Size  Location     Type
 13162 ;;  grs             1   45[BANK0 ] unsigned char 
 13163 ;;  bexp            1   44[BANK0 ] unsigned char 
 13164 ;;  aexp            1   43[BANK0 ] unsigned char 
 13165 ;;  signs           1   42[BANK0 ] unsigned char 
 13166 ;; Return value:  Size  Location     Type
 13167 ;;                  4   26[BANK0 ] unsigned char 
 13168 ;; Registers used:
 13169 ;;		wreg, status,2, status,0
 13170 ;; Tracked objects:
 13171 ;;		On entry : 1F/0
 13172 ;;		On exit  : 1F/0
 13173 ;;		Unchanged: 0/0
 13174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13175 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13176 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13177 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13178 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13179 ;;Total ram usage:       20 bytes
 13180 ;; Hardware stack levels used:    1
 13181 ;; Hardware stack levels required when called:    5
 13182 ;; This function calls:
 13183 ;;		Nothing
 13184 ;; This function is called by:
 13185 ;;		_Measure_Temp_PT100_2Wire
 13186 ;;		___flsub
 13187 ;;		_efgtoa
 13188 ;;		_sqrtf
 13189 ;; This function uses a non-reentrant model
 13190 ;;
 13191                           
 13192                           
 13193                           ;psect for function ___fladd
 13194  0913                     ___fladd:
 13195                           
 13196                           ;incstack = 0
 13197                           ; Regs used in ___fladd: [wreg+status,2+status,0]
 13198  0913  083D               	movf	___fladd@b+3,w
 13199  0914  3980               	andlw	128
 13200  0915  00C2               	movwf	??___fladd
 13201  0916  0842               	movf	??___fladd,w
 13202  0917  00CA               	movwf	___fladd@signs
 13203  0918  353D               	lslf	___fladd@b+3,w
 13204  0919  00C2               	movwf	??___fladd
 13205  091A  0842               	movf	??___fladd,w
 13206  091B  00CC               	movwf	___fladd@bexp
 13207  091C  1BBC               	btfsc	___fladd@b+2,7
 13208  091D  144C               	bsf	___fladd@bexp,0
 13209  091E  084C               	movf	___fladd@bexp,w
 13210  091F  1903               	btfsc	3,2
 13211  0920  292F               	goto	l3678
 13212  0921  0A4C               	incf	___fladd@bexp,w
 13213  0922  1D03               	btfss	3,2
 13214  0923  292C               	goto	l3674
 13215  0924  3000               	movlw	0
 13216  0925  00BD               	movwf	___fladd@b+3
 13217  0926  3000               	movlw	0
 13218  0927  00BC               	movwf	___fladd@b+2
 13219  0928  3000               	movlw	0
 13220  0929  00BB               	movwf	___fladd@b+1
 13221  092A  3000               	movlw	0
 13222  092B  00BA               	movwf	___fladd@b
 13223  092C                     l3674:
 13224  092C  17BC               	bsf	___fladd@b+2,7
 13225  092D  01BD               	clrf	___fladd@b+3
 13226  092E  2937               	goto	l3680
 13227  092F                     l3678:
 13228  092F  3000               	movlw	0
 13229  0930  00BD               	movwf	___fladd@b+3
 13230  0931  3000               	movlw	0
 13231  0932  00BC               	movwf	___fladd@b+2
 13232  0933  3000               	movlw	0
 13233  0934  00BB               	movwf	___fladd@b+1
 13234  0935  3000               	movlw	0
 13235  0936  00BA               	movwf	___fladd@b
 13236  0937                     l3680:
 13237  0937  0841               	movf	___fladd@a+3,w
 13238  0938  3980               	andlw	128
 13239  0939  00C2               	movwf	??___fladd
 13240  093A  0842               	movf	??___fladd,w
 13241  093B  00CB               	movwf	___fladd@aexp
 13242  093C  084B               	movf	___fladd@aexp,w
 13243  093D  064A               	xorwf	___fladd@signs,w
 13244  093E  1D03               	btfss	3,2
 13245  093F  174A               	bsf	___fladd@signs,6
 13246  0940  3541               	lslf	___fladd@a+3,w
 13247  0941  00C2               	movwf	??___fladd
 13248  0942  0842               	movf	??___fladd,w
 13249  0943  00CB               	movwf	___fladd@aexp
 13250  0944  1BC0               	btfsc	___fladd@a+2,7
 13251  0945  144B               	bsf	___fladd@aexp,0
 13252  0946  084B               	movf	___fladd@aexp,w
 13253  0947  1903               	btfsc	3,2
 13254  0948  2957               	goto	l3702
 13255  0949  0A4B               	incf	___fladd@aexp,w
 13256  094A  1D03               	btfss	3,2
 13257  094B  2954               	goto	l3698
 13258  094C  3000               	movlw	0
 13259  094D  00C1               	movwf	___fladd@a+3
 13260  094E  3000               	movlw	0
 13261  094F  00C0               	movwf	___fladd@a+2
 13262  0950  3000               	movlw	0
 13263  0951  00BF               	movwf	___fladd@a+1
 13264  0952  3000               	movlw	0
 13265  0953  00BE               	movwf	___fladd@a
 13266  0954                     l3698:
 13267  0954  17C0               	bsf	___fladd@a+2,7
 13268  0955  01C1               	clrf	___fladd@a+3
 13269  0956  295F               	goto	l1403
 13270  0957                     l3702:
 13271  0957  3000               	movlw	0
 13272  0958  00C1               	movwf	___fladd@a+3
 13273  0959  3000               	movlw	0
 13274  095A  00C0               	movwf	___fladd@a+2
 13275  095B  3000               	movlw	0
 13276  095C  00BF               	movwf	___fladd@a+1
 13277  095D  3000               	movlw	0
 13278  095E  00BE               	movwf	___fladd@a
 13279  095F                     l1403:
 13280  095F  084C               	movf	___fladd@bexp,w
 13281  0960  024B               	subwf	___fladd@aexp,w
 13282  0961  1803               	skipnc
 13283  0962  29A5               	goto	l3738
 13284  0963  1F4A               	btfss	___fladd@signs,6
 13285  0964  2969               	goto	l3708
 13286  0965  3080               	movlw	128
 13287  0966  00C2               	movwf	??___fladd
 13288  0967  0842               	movf	??___fladd,w
 13289  0968  06CA               	xorwf	___fladd@signs,f
 13290  0969                     l3708:
 13291  0969  084C               	movf	___fladd@bexp,w
 13292  096A  00C2               	movwf	??___fladd
 13293  096B  0842               	movf	??___fladd,w
 13294  096C  00CD               	movwf	___fladd@grs
 13295  096D  084B               	movf	___fladd@aexp,w
 13296  096E  00C2               	movwf	??___fladd
 13297  096F  0842               	movf	??___fladd,w
 13298  0970  00CC               	movwf	___fladd@bexp
 13299  0971  084D               	movf	___fladd@grs,w
 13300  0972  00C2               	movwf	??___fladd
 13301  0973  0842               	movf	??___fladd,w
 13302  0974  00CB               	movwf	___fladd@aexp
 13303  0975  083A               	movf	___fladd@b,w
 13304  0976  00C2               	movwf	??___fladd
 13305  0977  0842               	movf	??___fladd,w
 13306  0978  00CD               	movwf	___fladd@grs
 13307  0979  083E               	movf	___fladd@a,w
 13308  097A  00C2               	movwf	??___fladd
 13309  097B  0842               	movf	??___fladd,w
 13310  097C  00BA               	movwf	___fladd@b
 13311  097D  084D               	movf	___fladd@grs,w
 13312  097E  00C2               	movwf	??___fladd
 13313  097F  0842               	movf	??___fladd,w
 13314  0980  00BE               	movwf	___fladd@a
 13315  0981  083B               	movf	___fladd@b+1,w
 13316  0982  00C2               	movwf	??___fladd
 13317  0983  0842               	movf	??___fladd,w
 13318  0984  00CD               	movwf	___fladd@grs
 13319  0985  083F               	movf	___fladd@a+1,w
 13320  0986  00C2               	movwf	??___fladd
 13321  0987  0842               	movf	??___fladd,w
 13322  0988  00BB               	movwf	___fladd@b+1
 13323  0989  084D               	movf	___fladd@grs,w
 13324  098A  00C2               	movwf	??___fladd
 13325  098B  0842               	movf	??___fladd,w
 13326  098C  00BF               	movwf	___fladd@a+1
 13327  098D  083C               	movf	___fladd@b+2,w
 13328  098E  00C2               	movwf	??___fladd
 13329  098F  0842               	movf	??___fladd,w
 13330  0990  00CD               	movwf	___fladd@grs
 13331  0991  0840               	movf	___fladd@a+2,w
 13332  0992  00C2               	movwf	??___fladd
 13333  0993  0842               	movf	??___fladd,w
 13334  0994  00BC               	movwf	___fladd@b+2
 13335  0995  084D               	movf	___fladd@grs,w
 13336  0996  00C2               	movwf	??___fladd
 13337  0997  0842               	movf	??___fladd,w
 13338  0998  00C0               	movwf	___fladd@a+2
 13339  0999  083D               	movf	___fladd@b+3,w
 13340  099A  00C2               	movwf	??___fladd
 13341  099B  0842               	movf	??___fladd,w
 13342  099C  00CD               	movwf	___fladd@grs
 13343  099D  0841               	movf	___fladd@a+3,w
 13344  099E  00C2               	movwf	??___fladd
 13345  099F  0842               	movf	??___fladd,w
 13346  09A0  00BD               	movwf	___fladd@b+3
 13347  09A1  084D               	movf	___fladd@grs,w
 13348  09A2  00C2               	movwf	??___fladd
 13349  09A3  0842               	movf	??___fladd,w
 13350  09A4  00C1               	movwf	___fladd@a+3
 13351  09A5                     l3738:
 13352  09A5  01CD               	clrf	___fladd@grs
 13353  09A6  084B               	movf	___fladd@aexp,w
 13354  09A7  00C2               	movwf	??___fladd
 13355  09A8  01C3               	clrf	??___fladd+1
 13356  09A9  0843               	movf	??___fladd+1,w
 13357  09AA  00C5               	movwf	??___fladd+3
 13358  09AB  084C               	movf	___fladd@bexp,w
 13359  09AC  0242               	subwf	??___fladd,w
 13360  09AD  00C4               	movwf	??___fladd+2
 13361  09AE  1C03               	skipc
 13362  09AF  03C5               	decf	??___fladd+3,f
 13363  09B0  0845               	movf	??___fladd+3,w
 13364  09B1  3A80               	xorlw	128
 13365  09B2  00C6               	movwf	??___fladd+4
 13366  09B3  3080               	movlw	128
 13367  09B4  0246               	subwf	??___fladd+4,w
 13368  09B5  1D03               	skipz
 13369  09B6  29B9               	goto	u3295
 13370  09B7  301A               	movlw	26
 13371  09B8  0244               	subwf	??___fladd+2,w
 13372  09B9                     u3295:
 13373  09B9  1C03               	skipc
 13374  09BA  29ED               	goto	l3756
 13375  09BB  0020               	movlb	0	; select bank0
 13376  09BC  083D               	movf	___fladd@b+3,w
 13377  09BD  043C               	iorwf	___fladd@b+2,w
 13378  09BE  043B               	iorwf	___fladd@b+1,w
 13379  09BF  043A               	iorwf	___fladd@b,w
 13380  09C0  1903               	btfsc	3,2
 13381  09C1  29C4               	goto	u3300
 13382  09C2  3001               	movlw	1
 13383  09C3  29C5               	goto	u3310
 13384  09C4                     u3300:
 13385  09C4  3000               	movlw	0
 13386  09C5                     u3310:
 13387  09C5  00C2               	movwf	??___fladd
 13388  09C6  0842               	movf	??___fladd,w
 13389  09C7  00CD               	movwf	___fladd@grs
 13390  09C8  3000               	movlw	0
 13391  09C9  00BD               	movwf	___fladd@b+3
 13392  09CA  3000               	movlw	0
 13393  09CB  00BC               	movwf	___fladd@b+2
 13394  09CC  3000               	movlw	0
 13395  09CD  00BB               	movwf	___fladd@b+1
 13396  09CE  3000               	movlw	0
 13397  09CF  00BA               	movwf	___fladd@b
 13398  09D0  084B               	movf	___fladd@aexp,w
 13399  09D1  00C2               	movwf	??___fladd
 13400  09D2  0842               	movf	??___fladd,w
 13401  09D3  00CC               	movwf	___fladd@bexp
 13402  09D4  29F2               	goto	l1407
 13403  09D5                     l1409:
 13404  09D5  1C4D               	btfss	___fladd@grs,0
 13405  09D6  29DD               	goto	l3746
 13406  09D7  364D               	lsrf	___fladd@grs,w
 13407  09D8  3801               	iorlw	1
 13408  09D9  00C2               	movwf	??___fladd
 13409  09DA  0842               	movf	??___fladd,w
 13410  09DB  00CD               	movwf	___fladd@grs
 13411  09DC  29DF               	goto	l3748
 13412  09DD                     l3746:
 13413  09DD  1003               	clrc
 13414  09DE  0CCD               	rrf	___fladd@grs,f
 13415  09DF                     l3748:
 13416  09DF  183A               	btfsc	___fladd@b,0
 13417  09E0  17CD               	bsf	___fladd@grs,7
 13418  09E1  3001               	movlw	1
 13419  09E2  00C2               	movwf	??___fladd
 13420  09E3                     u3345:
 13421  09E3  37BD               	asrf	___fladd@b+3,f
 13422  09E4  0CBC               	rrf	___fladd@b+2,f
 13423  09E5  0CBB               	rrf	___fladd@b+1,f
 13424  09E6  0CBA               	rrf	___fladd@b,f
 13425  09E7  0BC2               	decfsz	??___fladd& (0+127),f
 13426  09E8  29E3               	goto	u3345
 13427  09E9  3001               	movlw	1
 13428  09EA  00C2               	movwf	??___fladd
 13429  09EB  0842               	movf	??___fladd,w
 13430  09EC  07CC               	addwf	___fladd@bexp,f
 13431  09ED                     l3756:
 13432  09ED  0020               	movlb	0	; select bank0
 13433  09EE  084B               	movf	___fladd@aexp,w
 13434  09EF  024C               	subwf	___fladd@bexp,w
 13435  09F0  1C03               	skipc
 13436  09F1  29D5               	goto	l1409
 13437  09F2                     l1407:
 13438  09F2  1B4A               	btfsc	___fladd@signs,6
 13439  09F3  2A23               	goto	l3782
 13440  09F4  084C               	movf	___fladd@bexp,w
 13441  09F5  1D03               	btfss	3,2
 13442  09F6  2A00               	goto	l3764
 13443  09F7  3000               	movlw	0
 13444  09F8  00BD               	movwf	?___fladd+3
 13445  09F9  3000               	movlw	0
 13446  09FA  00BC               	movwf	?___fladd+2
 13447  09FB  3000               	movlw	0
 13448  09FC  00BB               	movwf	?___fladd+1
 13449  09FD  3000               	movlw	0
 13450  09FE  00BA               	movwf	?___fladd
 13451  09FF  0008               	return
 13452  0A00                     l3764:
 13453  0A00  083E               	movf	___fladd@a,w
 13454  0A01  07BA               	addwf	___fladd@b,f
 13455  0A02  083F               	movf	___fladd@a+1,w
 13456  0A03  3DBB               	addwfc	___fladd@b+1,f
 13457  0A04  0840               	movf	___fladd@a+2,w
 13458  0A05  3DBC               	addwfc	___fladd@b+2,f
 13459  0A06  0841               	movf	___fladd@a+3,w
 13460  0A07  3DBD               	addwfc	___fladd@b+3,f
 13461  0A08  1C3D               	btfss	___fladd@b+3,0
 13462  0A09  2A9D               	goto	l3816
 13463  0A0A  1C4D               	btfss	___fladd@grs,0
 13464  0A0B  2A12               	goto	l3772
 13465  0A0C  364D               	lsrf	___fladd@grs,w
 13466  0A0D  3801               	iorlw	1
 13467  0A0E  00C2               	movwf	??___fladd
 13468  0A0F  0842               	movf	??___fladd,w
 13469  0A10  00CD               	movwf	___fladd@grs
 13470  0A11  2A14               	goto	l3774
 13471  0A12                     l3772:
 13472  0A12  1003               	clrc
 13473  0A13  0CCD               	rrf	___fladd@grs,f
 13474  0A14                     l3774:
 13475  0A14  183A               	btfsc	___fladd@b,0
 13476  0A15  17CD               	bsf	___fladd@grs,7
 13477  0A16  3001               	movlw	1
 13478  0A17  00C2               	movwf	??___fladd
 13479  0A18                     u3415:
 13480  0A18  37BD               	asrf	___fladd@b+3,f
 13481  0A19  0CBC               	rrf	___fladd@b+2,f
 13482  0A1A  0CBB               	rrf	___fladd@b+1,f
 13483  0A1B  0CBA               	rrf	___fladd@b,f
 13484  0A1C  0BC2               	decfsz	??___fladd& (0+127),f
 13485  0A1D  2A18               	goto	u3415
 13486  0A1E  3001               	movlw	1
 13487  0A1F  00C2               	movwf	??___fladd
 13488  0A20  0842               	movf	??___fladd,w
 13489  0A21  07CC               	addwf	___fladd@bexp,f
 13490  0A22  2A9D               	goto	l3816
 13491  0A23                     l3782:
 13492  0A23  083D               	movf	___fladd@b+3,w
 13493  0A24  3A80               	xorlw	128
 13494  0A25  00C2               	movwf	??___fladd
 13495  0A26  0841               	movf	___fladd@a+3,w
 13496  0A27  3A80               	xorlw	128
 13497  0A28  0242               	subwf	??___fladd,w
 13498  0A29  1D03               	skipz
 13499  0A2A  2A35               	goto	u3423
 13500  0A2B  0840               	movf	___fladd@a+2,w
 13501  0A2C  023C               	subwf	___fladd@b+2,w
 13502  0A2D  1D03               	skipz
 13503  0A2E  2A35               	goto	u3423
 13504  0A2F  083F               	movf	___fladd@a+1,w
 13505  0A30  023B               	subwf	___fladd@b+1,w
 13506  0A31  1D03               	skipz
 13507  0A32  2A35               	goto	u3423
 13508  0A33  083E               	movf	___fladd@a,w
 13509  0A34  023A               	subwf	___fladd@b,w
 13510  0A35                     u3423:
 13511  0A35  1803               	skipnc
 13512  0A36  2A6D               	goto	l3792
 13513  0A37  30FF               	movlw	255
 13514  0A38  00C2               	movwf	??___fladd
 13515  0A39  30FF               	movlw	255
 13516  0A3A  00C3               	movwf	??___fladd+1
 13517  0A3B  30FF               	movlw	255
 13518  0A3C  00C4               	movwf	??___fladd+2
 13519  0A3D  30FF               	movlw	255
 13520  0A3E  00C5               	movwf	??___fladd+3
 13521  0A3F  083A               	movf	___fladd@b,w
 13522  0A40  023E               	subwf	___fladd@a,w
 13523  0A41  00C6               	movwf	??___fladd+4
 13524  0A42  083B               	movf	___fladd@b+1,w
 13525  0A43  3B3F               	subwfb	___fladd@a+1,w
 13526  0A44  00C7               	movwf	??___fladd+5
 13527  0A45  083C               	movf	___fladd@b+2,w
 13528  0A46  3B40               	subwfb	___fladd@a+2,w
 13529  0A47  00C8               	movwf	??___fladd+6
 13530  0A48  083D               	movf	___fladd@b+3,w
 13531  0A49  3B41               	subwfb	___fladd@a+3,w
 13532  0A4A  00C9               	movwf	??___fladd+7
 13533  0A4B  0846               	movf	??___fladd+4,w
 13534  0A4C  07C2               	addwf	??___fladd,f
 13535  0A4D  0847               	movf	??___fladd+5,w
 13536  0A4E  3DC3               	addwfc	??___fladd+1,f
 13537  0A4F  0848               	movf	??___fladd+6,w
 13538  0A50  3DC4               	addwfc	??___fladd+2,f
 13539  0A51  0849               	movf	??___fladd+7,w
 13540  0A52  3DC5               	addwfc	??___fladd+3,f
 13541  0A53  0845               	movf	??___fladd+3,w
 13542  0A54  00BD               	movwf	___fladd@b+3
 13543  0A55  0844               	movf	??___fladd+2,w
 13544  0A56  00BC               	movwf	___fladd@b+2
 13545  0A57  0843               	movf	??___fladd+1,w
 13546  0A58  00BB               	movwf	___fladd@b+1
 13547  0A59  0842               	movf	??___fladd,w
 13548  0A5A  00BA               	movwf	___fladd@b
 13549  0A5B  3080               	movlw	128
 13550  0A5C  00C2               	movwf	??___fladd
 13551  0A5D  0842               	movf	??___fladd,w
 13552  0A5E  06CA               	xorwf	___fladd@signs,f
 13553  0A5F  09CD               	comf	___fladd@grs,f
 13554  0A60  0ACD               	incf	___fladd@grs,f
 13555  0A61  084D               	movf	___fladd@grs,w
 13556  0A62  1D03               	btfss	3,2
 13557  0A63  2A75               	goto	l1424
 13558  0A64  3001               	movlw	1
 13559  0A65  07BA               	addwf	___fladd@b,f
 13560  0A66  3000               	movlw	0
 13561  0A67  3DBB               	addwfc	___fladd@b+1,f
 13562  0A68  3000               	movlw	0
 13563  0A69  3DBC               	addwfc	___fladd@b+2,f
 13564  0A6A  3000               	movlw	0
 13565  0A6B  3DBD               	addwfc	___fladd@b+3,f
 13566  0A6C  2A75               	goto	l1424
 13567  0A6D                     l3792:
 13568  0A6D  083E               	movf	___fladd@a,w
 13569  0A6E  02BA               	subwf	___fladd@b,f
 13570  0A6F  083F               	movf	___fladd@a+1,w
 13571  0A70  3BBB               	subwfb	___fladd@b+1,f
 13572  0A71  0840               	movf	___fladd@a+2,w
 13573  0A72  3BBC               	subwfb	___fladd@b+2,f
 13574  0A73  0841               	movf	___fladd@a+3,w
 13575  0A74  3BBD               	subwfb	___fladd@b+3,f
 13576  0A75                     l1424:
 13577  0A75  083D               	movf	___fladd@b+3,w
 13578  0A76  043C               	iorwf	___fladd@b+2,w
 13579  0A77  043B               	iorwf	___fladd@b+1,w
 13580  0A78  043A               	iorwf	___fladd@b,w
 13581  0A79  1D03               	skipz
 13582  0A7A  2A9B               	goto	l3814
 13583  0A7B  084D               	movf	___fladd@grs,w
 13584  0A7C  1D03               	btfss	3,2
 13585  0A7D  2A9B               	goto	l3814
 13586  0A7E  3000               	movlw	0
 13587  0A7F  00BD               	movwf	?___fladd+3
 13588  0A80  3000               	movlw	0
 13589  0A81  00BC               	movwf	?___fladd+2
 13590  0A82  3000               	movlw	0
 13591  0A83  00BB               	movwf	?___fladd+1
 13592  0A84  3000               	movlw	0
 13593  0A85  00BA               	movwf	?___fladd
 13594  0A86  0008               	return
 13595  0A87                     l3800:
 13596  0A87  3001               	movlw	1
 13597  0A88                     u3465:
 13598  0A88  35BA               	lslf	___fladd@b,f
 13599  0A89  0DBB               	rlf	___fladd@b+1,f
 13600  0A8A  0DBC               	rlf	___fladd@b+2,f
 13601  0A8B  0DBD               	rlf	___fladd@b+3,f
 13602  0A8C  0B89               	decfsz	9,f
 13603  0A8D  2A88               	goto	u3465
 13604  0A8E  1BCD               	btfsc	___fladd@grs,7
 13605  0A8F  143A               	bsf	___fladd@b,0
 13606  0A90  1C4D               	btfss	___fladd@grs,0
 13607  0A91  2A94               	goto	l3808
 13608  0A92  1403               	setc
 13609  0A93  2A95               	goto	L13
 13610  0A94                     l3808:
 13611  0A94  1003               	clrc
 13612  0A95                     L13:
 13613  0A95  0DCD               	rlf	___fladd@grs,f
 13614  0A96  084C               	movf	___fladd@bexp,w
 13615  0A97  1903               	btfsc	3,2
 13616  0A98  2A9B               	goto	l3814
 13617  0A99  3001               	movlw	1
 13618  0A9A  02CC               	subwf	___fladd@bexp,f
 13619  0A9B                     l3814:
 13620  0A9B  1FBC               	btfss	___fladd@b+2,7
 13621  0A9C  2A87               	goto	l3800
 13622  0A9D                     l3816:
 13623  0A9D  01CB               	clrf	___fladd@aexp
 13624  0A9E  1FCD               	btfss	___fladd@grs,7
 13625  0A9F  2AA8               	goto	l3826
 13626  0AA0  084D               	movf	___fladd@grs,w
 13627  0AA1  397F               	andlw	127
 13628  0AA2  1903               	btfsc	3,2
 13629  0AA3  183A               	btfsc	___fladd@b,0
 13630  0AA4  2AA6               	goto	l3822
 13631  0AA5  2AA8               	goto	l3826
 13632  0AA6                     l3822:
 13633  0AA6  01CB               	clrf	___fladd@aexp
 13634  0AA7  0ACB               	incf	___fladd@aexp,f
 13635  0AA8                     l3826:
 13636  0AA8  084B               	movf	___fladd@aexp,w
 13637  0AA9  1903               	btfsc	3,2
 13638  0AAA  2AD4               	goto	l1437
 13639  0AAB  3001               	movlw	1
 13640  0AAC  07BA               	addwf	___fladd@b,f
 13641  0AAD  3000               	movlw	0
 13642  0AAE  3DBB               	addwfc	___fladd@b+1,f
 13643  0AAF  3000               	movlw	0
 13644  0AB0  3DBC               	addwfc	___fladd@b+2,f
 13645  0AB1  3000               	movlw	0
 13646  0AB2  3DBD               	addwfc	___fladd@b+3,f
 13647  0AB3  1C3D               	btfss	___fladd@b+3,0
 13648  0AB4  2AD4               	goto	l1437
 13649  0AB5  083A               	movf	___fladd@b,w
 13650  0AB6  00C2               	movwf	??___fladd
 13651  0AB7  083B               	movf	___fladd@b+1,w
 13652  0AB8  00C3               	movwf	??___fladd+1
 13653  0AB9  083C               	movf	___fladd@b+2,w
 13654  0ABA  00C4               	movwf	??___fladd+2
 13655  0ABB  083D               	movf	___fladd@b+3,w
 13656  0ABC  00C5               	movwf	??___fladd+3
 13657  0ABD  3001               	movlw	1
 13658  0ABE  00C6               	movwf	??___fladd+4
 13659  0ABF                     u3565:
 13660  0ABF  37C5               	asrf	??___fladd+3,f
 13661  0AC0  0CC4               	rrf	??___fladd+2,f
 13662  0AC1  0CC3               	rrf	??___fladd+1,f
 13663  0AC2  0CC2               	rrf	??___fladd,f
 13664  0AC3  0BC6               	decfsz	??___fladd+4,f
 13665  0AC4  2ABF               	goto	u3565
 13666  0AC5  0845               	movf	??___fladd+3,w
 13667  0AC6  00BD               	movwf	___fladd@b+3
 13668  0AC7  0844               	movf	??___fladd+2,w
 13669  0AC8  00BC               	movwf	___fladd@b+2
 13670  0AC9  0843               	movf	??___fladd+1,w
 13671  0ACA  00BB               	movwf	___fladd@b+1
 13672  0ACB  0842               	movf	??___fladd,w
 13673  0ACC  00BA               	movwf	___fladd@b
 13674  0ACD  0A4C               	incf	___fladd@bexp,w
 13675  0ACE  1903               	btfsc	3,2
 13676  0ACF  2AD4               	goto	l1437
 13677  0AD0  3001               	movlw	1
 13678  0AD1  00C2               	movwf	??___fladd
 13679  0AD2  0842               	movf	??___fladd,w
 13680  0AD3  07CC               	addwf	___fladd@bexp,f
 13681  0AD4                     l1437:
 13682  0AD4  0A4C               	incf	___fladd@bexp,w
 13683  0AD5  1D03               	btfss	3,2
 13684  0AD6  084C               	movf	___fladd@bexp,w
 13685  0AD7  1D03               	btfss	3,2
 13686  0AD8  2AE4               	goto	l3844
 13687  0AD9  3000               	movlw	0
 13688  0ADA  00BD               	movwf	___fladd@b+3
 13689  0ADB  3000               	movlw	0
 13690  0ADC  00BC               	movwf	___fladd@b+2
 13691  0ADD  3000               	movlw	0
 13692  0ADE  00BB               	movwf	___fladd@b+1
 13693  0ADF  3000               	movlw	0
 13694  0AE0  00BA               	movwf	___fladd@b
 13695  0AE1  084C               	movf	___fladd@bexp,w
 13696  0AE2  1903               	btfsc	3,2
 13697  0AE3  01CA               	clrf	___fladd@signs
 13698  0AE4                     l3844:
 13699  0AE4  1C4C               	btfss	___fladd@bexp,0
 13700  0AE5  2AE8               	goto	l3848
 13701  0AE6  17BC               	bsf	___fladd@b+2,7
 13702  0AE7  2AEC               	goto	l1445
 13703  0AE8                     l3848:
 13704  0AE8  307F               	movlw	127
 13705  0AE9  00C2               	movwf	??___fladd
 13706  0AEA  0842               	movf	??___fladd,w
 13707  0AEB  05BC               	andwf	___fladd@b+2,f
 13708  0AEC                     l1445:
 13709  0AEC  364C               	lsrf	___fladd@bexp,w
 13710  0AED  00C2               	movwf	??___fladd
 13711  0AEE  0842               	movf	??___fladd,w
 13712  0AEF  00BD               	movwf	___fladd@b+3
 13713  0AF0  1FCA               	btfss	___fladd@signs,7
 13714  0AF1  0008               	return
 13715  0AF2  17BD               	bsf	___fladd@b+3,7
 13716  0AF3  0008               	return
 13717  0AF4                     __end_of___fladd:
 13718                           
 13719                           	psect	text66
 13720  0AF4                     __ptext66:	
 13721 ;; *************** function ___flmul *****************
 13722 ;; Defined at:
 13723 ;;		line 8 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/sprcmul.c"
 13724 ;; Parameters:    Size  Location     Type
 13725 ;;  b               4    0[BANK0 ] unsigned char 
 13726 ;;  a               4    4[BANK0 ] unsigned char 
 13727 ;; Auto vars:     Size  Location     Type
 13728 ;;  prod            4   20[BANK0 ] struct .
 13729 ;;  grs             4   15[BANK0 ] unsigned long 
 13730 ;;  temp            2   24[BANK0 ] struct .
 13731 ;;  bexp            1   19[BANK0 ] unsigned char 
 13732 ;;  aexp            1   14[BANK0 ] unsigned char 
 13733 ;;  sign            1   13[BANK0 ] unsigned char 
 13734 ;; Return value:  Size  Location     Type
 13735 ;;                  4    0[BANK0 ] unsigned char 
 13736 ;; Registers used:
 13737 ;;		wreg, status,2, status,0, pclath, cstack
 13738 ;; Tracked objects:
 13739 ;;		On entry : 1F/0
 13740 ;;		On exit  : 1F/0
 13741 ;;		Unchanged: 0/0
 13742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13743 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13744 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13745 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13746 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13747 ;;Total ram usage:       26 bytes
 13748 ;; Hardware stack levels used:    1
 13749 ;; Hardware stack levels required when called:    6
 13750 ;; This function calls:
 13751 ;;		__Umul8_16
 13752 ;; This function is called by:
 13753 ;;		_ChangeADCtoVoltage
 13754 ;;		_Measure_R_PT100_2Wire
 13755 ;;		_Measure_Temp_PT100_2Wire
 13756 ;;		_CalcRequiredDelayForTrigTRIAC
 13757 ;;		_efgtoa
 13758 ;;		_sqrtf
 13759 ;; This function uses a non-reentrant model
 13760 ;;
 13761                           
 13762                           
 13763                           ;psect for function ___flmul
 13764  0AF4                     ___flmul:
 13765                           
 13766                           ;incstack = 0
 13767                           ; Regs used in ___flmul: [wreg+status,2+status,0+pclath+cstack]
 13768  0AF4  0823               	movf	___flmul@b+3,w
 13769  0AF5  3980               	andlw	128
 13770  0AF6  00A8               	movwf	??___flmul
 13771  0AF7  0828               	movf	??___flmul,w
 13772  0AF8  00AD               	movwf	___flmul@sign
 13773  0AF9  3523               	lslf	___flmul@b+3,w
 13774  0AFA  00A8               	movwf	??___flmul
 13775  0AFB  0828               	movf	??___flmul,w
 13776  0AFC  00B3               	movwf	___flmul@bexp
 13777  0AFD  1BA2               	btfsc	___flmul@b+2,7
 13778  0AFE  1433               	bsf	___flmul@bexp,0
 13779  0AFF  0833               	movf	___flmul@bexp,w
 13780  0B00  1903               	btfsc	3,2
 13781  0B01  2B0F               	goto	l4220
 13782  0B02  0A33               	incf	___flmul@bexp,w
 13783  0B03  1D03               	btfss	3,2
 13784  0B04  2B0D               	goto	l4218
 13785  0B05  3000               	movlw	0
 13786  0B06  00A3               	movwf	___flmul@b+3
 13787  0B07  3000               	movlw	0
 13788  0B08  00A2               	movwf	___flmul@b+2
 13789  0B09  3000               	movlw	0
 13790  0B0A  00A1               	movwf	___flmul@b+1
 13791  0B0B  3000               	movlw	0
 13792  0B0C  00A0               	movwf	___flmul@b
 13793  0B0D                     l4218:
 13794  0B0D  17A2               	bsf	___flmul@b+2,7
 13795  0B0E  2B17               	goto	l4222
 13796  0B0F                     l4220:
 13797  0B0F  3000               	movlw	0
 13798  0B10  00A3               	movwf	___flmul@b+3
 13799  0B11  3000               	movlw	0
 13800  0B12  00A2               	movwf	___flmul@b+2
 13801  0B13  3000               	movlw	0
 13802  0B14  00A1               	movwf	___flmul@b+1
 13803  0B15  3000               	movlw	0
 13804  0B16  00A0               	movwf	___flmul@b
 13805  0B17                     l4222:
 13806  0B17  0827               	movf	___flmul@a+3,w
 13807  0B18  3980               	andlw	128
 13808  0B19  00A8               	movwf	??___flmul
 13809  0B1A  0828               	movf	??___flmul,w
 13810  0B1B  06AD               	xorwf	___flmul@sign,f
 13811  0B1C  3527               	lslf	___flmul@a+3,w
 13812  0B1D  00A8               	movwf	??___flmul
 13813  0B1E  0828               	movf	??___flmul,w
 13814  0B1F  00AE               	movwf	___flmul@aexp
 13815  0B20  1BA6               	btfsc	___flmul@a+2,7
 13816  0B21  142E               	bsf	___flmul@aexp,0
 13817  0B22  082E               	movf	___flmul@aexp,w
 13818  0B23  1903               	btfsc	3,2
 13819  0B24  2B32               	goto	l4238
 13820  0B25  0A2E               	incf	___flmul@aexp,w
 13821  0B26  1D03               	btfss	3,2
 13822  0B27  2B30               	goto	l4236
 13823  0B28  3000               	movlw	0
 13824  0B29  00A7               	movwf	___flmul@a+3
 13825  0B2A  3000               	movlw	0
 13826  0B2B  00A6               	movwf	___flmul@a+2
 13827  0B2C  3000               	movlw	0
 13828  0B2D  00A5               	movwf	___flmul@a+1
 13829  0B2E  3000               	movlw	0
 13830  0B2F  00A4               	movwf	___flmul@a
 13831  0B30                     l4236:
 13832  0B30  17A6               	bsf	___flmul@a+2,7
 13833  0B31  2B3A               	goto	l4240
 13834  0B32                     l4238:
 13835  0B32  3000               	movlw	0
 13836  0B33  00A7               	movwf	___flmul@a+3
 13837  0B34  3000               	movlw	0
 13838  0B35  00A6               	movwf	___flmul@a+2
 13839  0B36  3000               	movlw	0
 13840  0B37  00A5               	movwf	___flmul@a+1
 13841  0B38  3000               	movlw	0
 13842  0B39  00A4               	movwf	___flmul@a
 13843  0B3A                     l4240:
 13844  0B3A  082E               	movf	___flmul@aexp,w
 13845  0B3B  1D03               	btfss	3,2
 13846  0B3C  0833               	movf	___flmul@bexp,w
 13847  0B3D  1D03               	btfss	3,2
 13848  0B3E  2B48               	goto	l4248
 13849  0B3F  3000               	movlw	0
 13850  0B40  00A3               	movwf	?___flmul+3
 13851  0B41  3000               	movlw	0
 13852  0B42  00A2               	movwf	?___flmul+2
 13853  0B43  3000               	movlw	0
 13854  0B44  00A1               	movwf	?___flmul+1
 13855  0B45  3000               	movlw	0
 13856  0B46  00A0               	movwf	?___flmul
 13857  0B47  0008               	return
 13858  0B48                     l4248:
 13859  0B48  0820               	movf	___flmul@b,w
 13860  0B49  00A8               	movwf	??___flmul
 13861  0B4A  0828               	movf	??___flmul,w
 13862  0B4B  00F0               	movwf	__Umul8_16@multiplicand
 13863  0B4C  0826               	movf	___flmul@a+2,w
 13864  0B4D  319C  2499  318A   	fcall	__Umul8_16
 13865  0B50  0871               	movf	?__Umul8_16+1,w
 13866  0B51  00B9               	movwf	___flmul@temp+1
 13867  0B52  0870               	movf	?__Umul8_16,w
 13868  0B53  00B8               	movwf	___flmul@temp
 13869  0B54  0838               	movf	___flmul@temp,w
 13870  0B55  00A8               	movwf	??___flmul
 13871  0B56  01A9               	clrf	??___flmul+1
 13872  0B57  01AA               	clrf	??___flmul+2
 13873  0B58  01AB               	clrf	??___flmul+3
 13874  0B59  082B               	movf	??___flmul+3,w
 13875  0B5A  00B2               	movwf	___flmul@grs+3
 13876  0B5B  082A               	movf	??___flmul+2,w
 13877  0B5C  00B1               	movwf	___flmul@grs+2
 13878  0B5D  0829               	movf	??___flmul+1,w
 13879  0B5E  00B0               	movwf	___flmul@grs+1
 13880  0B5F  0828               	movf	??___flmul,w
 13881  0B60  00AF               	movwf	___flmul@grs
 13882  0B61  0839               	movf	___flmul@temp+1,w
 13883  0B62  00A8               	movwf	??___flmul
 13884  0B63  01A9               	clrf	??___flmul+1
 13885  0B64  01AA               	clrf	??___flmul+2
 13886  0B65  01AB               	clrf	??___flmul+3
 13887  0B66  082B               	movf	??___flmul+3,w
 13888  0B67  00B7               	movwf	___flmul@prod+3
 13889  0B68  082A               	movf	??___flmul+2,w
 13890  0B69  00B6               	movwf	___flmul@prod+2
 13891  0B6A  0829               	movf	??___flmul+1,w
 13892  0B6B  00B5               	movwf	___flmul@prod+1
 13893  0B6C  0828               	movf	??___flmul,w
 13894  0B6D  00B4               	movwf	___flmul@prod
 13895  0B6E  0821               	movf	___flmul@b+1,w
 13896  0B6F  00A8               	movwf	??___flmul
 13897  0B70  0828               	movf	??___flmul,w
 13898  0B71  00F0               	movwf	__Umul8_16@multiplicand
 13899  0B72  0825               	movf	___flmul@a+1,w
 13900  0B73  319C  2499  318A   	fcall	__Umul8_16
 13901  0B76  0871               	movf	?__Umul8_16+1,w
 13902  0B77  00B9               	movwf	___flmul@temp+1
 13903  0B78  0870               	movf	?__Umul8_16,w
 13904  0B79  00B8               	movwf	___flmul@temp
 13905  0B7A  0838               	movf	___flmul@temp,w
 13906  0B7B  00A8               	movwf	??___flmul
 13907  0B7C  01A9               	clrf	??___flmul+1
 13908  0B7D  01AA               	clrf	??___flmul+2
 13909  0B7E  01AB               	clrf	??___flmul+3
 13910  0B7F  0828               	movf	??___flmul,w
 13911  0B80  07AF               	addwf	___flmul@grs,f
 13912  0B81  0829               	movf	??___flmul+1,w
 13913  0B82  3DB0               	addwfc	___flmul@grs+1,f
 13914  0B83  082A               	movf	??___flmul+2,w
 13915  0B84  3DB1               	addwfc	___flmul@grs+2,f
 13916  0B85  082B               	movf	??___flmul+3,w
 13917  0B86  3DB2               	addwfc	___flmul@grs+3,f
 13918  0B87  0839               	movf	___flmul@temp+1,w
 13919  0B88  00A8               	movwf	??___flmul
 13920  0B89  01A9               	clrf	??___flmul+1
 13921  0B8A  01AA               	clrf	??___flmul+2
 13922  0B8B  01AB               	clrf	??___flmul+3
 13923  0B8C  0828               	movf	??___flmul,w
 13924  0B8D  07B4               	addwf	___flmul@prod,f
 13925  0B8E  0829               	movf	??___flmul+1,w
 13926  0B8F  3DB5               	addwfc	___flmul@prod+1,f
 13927  0B90  082A               	movf	??___flmul+2,w
 13928  0B91  3DB6               	addwfc	___flmul@prod+2,f
 13929  0B92  082B               	movf	??___flmul+3,w
 13930  0B93  3DB7               	addwfc	___flmul@prod+3,f
 13931  0B94  0822               	movf	___flmul@b+2,w
 13932  0B95  00A8               	movwf	??___flmul
 13933  0B96  0828               	movf	??___flmul,w
 13934  0B97  00F0               	movwf	__Umul8_16@multiplicand
 13935  0B98  0824               	movf	___flmul@a,w
 13936  0B99  319C  2499  318A   	fcall	__Umul8_16
 13937  0B9C  0871               	movf	?__Umul8_16+1,w
 13938  0B9D  00B9               	movwf	___flmul@temp+1
 13939  0B9E  0870               	movf	?__Umul8_16,w
 13940  0B9F  00B8               	movwf	___flmul@temp
 13941  0BA0  0838               	movf	___flmul@temp,w
 13942  0BA1  00A8               	movwf	??___flmul
 13943  0BA2  01A9               	clrf	??___flmul+1
 13944  0BA3  01AA               	clrf	??___flmul+2
 13945  0BA4  01AB               	clrf	??___flmul+3
 13946  0BA5  0828               	movf	??___flmul,w
 13947  0BA6  07AF               	addwf	___flmul@grs,f
 13948  0BA7  0829               	movf	??___flmul+1,w
 13949  0BA8  3DB0               	addwfc	___flmul@grs+1,f
 13950  0BA9  082A               	movf	??___flmul+2,w
 13951  0BAA  3DB1               	addwfc	___flmul@grs+2,f
 13952  0BAB  082B               	movf	??___flmul+3,w
 13953  0BAC  3DB2               	addwfc	___flmul@grs+3,f
 13954  0BAD  0839               	movf	___flmul@temp+1,w
 13955  0BAE  00A8               	movwf	??___flmul
 13956  0BAF  01A9               	clrf	??___flmul+1
 13957  0BB0  01AA               	clrf	??___flmul+2
 13958  0BB1  01AB               	clrf	??___flmul+3
 13959  0BB2  0828               	movf	??___flmul,w
 13960  0BB3  07B4               	addwf	___flmul@prod,f
 13961  0BB4  0829               	movf	??___flmul+1,w
 13962  0BB5  3DB5               	addwfc	___flmul@prod+1,f
 13963  0BB6  082A               	movf	??___flmul+2,w
 13964  0BB7  3DB6               	addwfc	___flmul@prod+2,f
 13965  0BB8  082B               	movf	??___flmul+3,w
 13966  0BB9  3DB7               	addwfc	___flmul@prod+3,f
 13967  0BBA  3008               	movlw	8
 13968  0BBB                     u4495:
 13969  0BBB  35AF               	lslf	___flmul@grs,f
 13970  0BBC  0DB0               	rlf	___flmul@grs+1,f
 13971  0BBD  0DB1               	rlf	___flmul@grs+2,f
 13972  0BBE  0DB2               	rlf	___flmul@grs+3,f
 13973  0BBF  0B89               	decfsz	9,f
 13974  0BC0  2BBB               	goto	u4495
 13975  0BC1  0821               	movf	___flmul@b+1,w
 13976  0BC2  00A8               	movwf	??___flmul
 13977  0BC3  0828               	movf	??___flmul,w
 13978  0BC4  00F0               	movwf	__Umul8_16@multiplicand
 13979  0BC5  0824               	movf	___flmul@a,w
 13980  0BC6  319C  2499  318A   	fcall	__Umul8_16
 13981  0BC9  0871               	movf	?__Umul8_16+1,w
 13982  0BCA  00B9               	movwf	___flmul@temp+1
 13983  0BCB  0870               	movf	?__Umul8_16,w
 13984  0BCC  00B8               	movwf	___flmul@temp
 13985  0BCD  0838               	movf	___flmul@temp,w
 13986  0BCE  07AF               	addwf	___flmul@grs,f
 13987  0BCF  0839               	movf	___flmul@temp+1,w
 13988  0BD0  3DB0               	addwfc	___flmul@grs+1,f
 13989  0BD1  3000               	movlw	0
 13990  0BD2  3DB1               	addwfc	___flmul@grs+2,f
 13991  0BD3  3DB2               	addwfc	___flmul@grs+3,f
 13992  0BD4  0820               	movf	___flmul@b,w
 13993  0BD5  00A8               	movwf	??___flmul
 13994  0BD6  0828               	movf	??___flmul,w
 13995  0BD7  00F0               	movwf	__Umul8_16@multiplicand
 13996  0BD8  0825               	movf	___flmul@a+1,w
 13997  0BD9  319C  2499  318A   	fcall	__Umul8_16
 13998  0BDC  0871               	movf	?__Umul8_16+1,w
 13999  0BDD  00B9               	movwf	___flmul@temp+1
 14000  0BDE  0870               	movf	?__Umul8_16,w
 14001  0BDF  00B8               	movwf	___flmul@temp
 14002  0BE0  0838               	movf	___flmul@temp,w
 14003  0BE1  07AF               	addwf	___flmul@grs,f
 14004  0BE2  0839               	movf	___flmul@temp+1,w
 14005  0BE3  3DB0               	addwfc	___flmul@grs+1,f
 14006  0BE4  3000               	movlw	0
 14007  0BE5  3DB1               	addwfc	___flmul@grs+2,f
 14008  0BE6  3DB2               	addwfc	___flmul@grs+3,f
 14009  0BE7  3008               	movlw	8
 14010  0BE8                     u4505:
 14011  0BE8  35AF               	lslf	___flmul@grs,f
 14012  0BE9  0DB0               	rlf	___flmul@grs+1,f
 14013  0BEA  0DB1               	rlf	___flmul@grs+2,f
 14014  0BEB  0DB2               	rlf	___flmul@grs+3,f
 14015  0BEC  0B89               	decfsz	9,f
 14016  0BED  2BE8               	goto	u4505
 14017  0BEE  0820               	movf	___flmul@b,w
 14018  0BEF  00A8               	movwf	??___flmul
 14019  0BF0  0828               	movf	??___flmul,w
 14020  0BF1  00F0               	movwf	__Umul8_16@multiplicand
 14021  0BF2  0824               	movf	___flmul@a,w
 14022  0BF3  319C  2499  318A   	fcall	__Umul8_16
 14023  0BF6  0871               	movf	?__Umul8_16+1,w
 14024  0BF7  00B9               	movwf	___flmul@temp+1
 14025  0BF8  0870               	movf	?__Umul8_16,w
 14026  0BF9  00B8               	movwf	___flmul@temp
 14027  0BFA  0838               	movf	___flmul@temp,w
 14028  0BFB  07AF               	addwf	___flmul@grs,f
 14029  0BFC  0839               	movf	___flmul@temp+1,w
 14030  0BFD  3DB0               	addwfc	___flmul@grs+1,f
 14031  0BFE  3000               	movlw	0
 14032  0BFF  3DB1               	addwfc	___flmul@grs+2,f
 14033  0C00  3DB2               	addwfc	___flmul@grs+3,f
 14034  0C01  0821               	movf	___flmul@b+1,w
 14035  0C02  00A8               	movwf	??___flmul
 14036  0C03  0828               	movf	??___flmul,w
 14037  0C04  00F0               	movwf	__Umul8_16@multiplicand
 14038  0C05  0826               	movf	___flmul@a+2,w
 14039  0C06  319C  2499  318A   	fcall	__Umul8_16
 14040  0C09  0871               	movf	?__Umul8_16+1,w
 14041  0C0A  00B9               	movwf	___flmul@temp+1
 14042  0C0B  0870               	movf	?__Umul8_16,w
 14043  0C0C  00B8               	movwf	___flmul@temp
 14044  0C0D  0838               	movf	___flmul@temp,w
 14045  0C0E  07B4               	addwf	___flmul@prod,f
 14046  0C0F  0839               	movf	___flmul@temp+1,w
 14047  0C10  3DB5               	addwfc	___flmul@prod+1,f
 14048  0C11  3000               	movlw	0
 14049  0C12  3DB6               	addwfc	___flmul@prod+2,f
 14050  0C13  3DB7               	addwfc	___flmul@prod+3,f
 14051  0C14  0822               	movf	___flmul@b+2,w
 14052  0C15  00A8               	movwf	??___flmul
 14053  0C16  0828               	movf	??___flmul,w
 14054  0C17  00F0               	movwf	__Umul8_16@multiplicand
 14055  0C18  0825               	movf	___flmul@a+1,w
 14056  0C19  319C  2499  318A   	fcall	__Umul8_16
 14057  0C1C  0871               	movf	?__Umul8_16+1,w
 14058  0C1D  00B9               	movwf	___flmul@temp+1
 14059  0C1E  0870               	movf	?__Umul8_16,w
 14060  0C1F  00B8               	movwf	___flmul@temp
 14061  0C20  0838               	movf	___flmul@temp,w
 14062  0C21  07B4               	addwf	___flmul@prod,f
 14063  0C22  0839               	movf	___flmul@temp+1,w
 14064  0C23  3DB5               	addwfc	___flmul@prod+1,f
 14065  0C24  3000               	movlw	0
 14066  0C25  3DB6               	addwfc	___flmul@prod+2,f
 14067  0C26  3DB7               	addwfc	___flmul@prod+3,f
 14068  0C27  0822               	movf	___flmul@b+2,w
 14069  0C28  00A8               	movwf	??___flmul
 14070  0C29  0828               	movf	??___flmul,w
 14071  0C2A  00F0               	movwf	__Umul8_16@multiplicand
 14072  0C2B  0826               	movf	___flmul@a+2,w
 14073  0C2C  319C  2499  318A   	fcall	__Umul8_16
 14074  0C2F  0871               	movf	?__Umul8_16+1,w
 14075  0C30  00B9               	movwf	___flmul@temp+1
 14076  0C31  0870               	movf	?__Umul8_16,w
 14077  0C32  00B8               	movwf	___flmul@temp
 14078  0C33  0838               	movf	___flmul@temp,w
 14079  0C34  00A8               	movwf	??___flmul
 14080  0C35  0839               	movf	___flmul@temp+1,w
 14081  0C36  00A9               	movwf	??___flmul+1
 14082  0C37  01AA               	clrf	??___flmul+2
 14083  0C38  01AB               	clrf	??___flmul+3
 14084  0C39  3008               	movlw	8
 14085  0C3A                     u4515:
 14086  0C3A  35A8               	lslf	??___flmul,f
 14087  0C3B  0DA9               	rlf	??___flmul+1,f
 14088  0C3C  0DAA               	rlf	??___flmul+2,f
 14089  0C3D  0DAB               	rlf	??___flmul+3,f
 14090  0C3E  0B89               	decfsz	9,f
 14091  0C3F  2C3A               	goto	u4515
 14092  0C40  0828               	movf	??___flmul,w
 14093  0C41  07B4               	addwf	___flmul@prod,f
 14094  0C42  0829               	movf	??___flmul+1,w
 14095  0C43  3DB5               	addwfc	___flmul@prod+1,f
 14096  0C44  082A               	movf	??___flmul+2,w
 14097  0C45  3DB6               	addwfc	___flmul@prod+2,f
 14098  0C46  082B               	movf	??___flmul+3,w
 14099  0C47  3DB7               	addwfc	___flmul@prod+3,f
 14100  0C48  0832               	movf	___flmul@grs+3,w
 14101  0C49  00A8               	movwf	??___flmul
 14102  0C4A  01A9               	clrf	??___flmul+1
 14103  0C4B  01AA               	clrf	??___flmul+2
 14104  0C4C  01AB               	clrf	??___flmul+3
 14105  0C4D  0828               	movf	??___flmul,w
 14106  0C4E  07B4               	addwf	___flmul@prod,f
 14107  0C4F  0829               	movf	??___flmul+1,w
 14108  0C50  3DB5               	addwfc	___flmul@prod+1,f
 14109  0C51  082A               	movf	??___flmul+2,w
 14110  0C52  3DB6               	addwfc	___flmul@prod+2,f
 14111  0C53  082B               	movf	??___flmul+3,w
 14112  0C54  3DB7               	addwfc	___flmul@prod+3,f
 14113  0C55  3008               	movlw	8
 14114  0C56                     u4525:
 14115  0C56  35AF               	lslf	___flmul@grs,f
 14116  0C57  0DB0               	rlf	___flmul@grs+1,f
 14117  0C58  0DB1               	rlf	___flmul@grs+2,f
 14118  0C59  0DB2               	rlf	___flmul@grs+3,f
 14119  0C5A  0B89               	decfsz	9,f
 14120  0C5B  2C56               	goto	u4525
 14121  0C5C  0833               	movf	___flmul@bexp,w
 14122  0C5D  072E               	addwf	___flmul@aexp,w
 14123  0C5E  00A8               	movwf	??___flmul
 14124  0C5F  01A9               	clrf	??___flmul+1
 14125  0C60  0DA9               	rlf	??___flmul+1,f
 14126  0C61  0828               	movf	??___flmul,w
 14127  0C62  3E82               	addlw	130
 14128  0C63  00B8               	movwf	___flmul@temp
 14129  0C64  30FF               	movlw	255
 14130  0C65  3D29               	addwfc	??___flmul+1,w
 14131  0C66  00B9               	movwf	___flmul@temp+1
 14132  0C67                     l4300:
 14133  0C67  1BB6               	btfsc	___flmul@prod+2,7
 14134  0C68  2C7E               	goto	l4302
 14135  0C69  3001               	movlw	1
 14136  0C6A                     u4535:
 14137  0C6A  35B4               	lslf	___flmul@prod,f
 14138  0C6B  0DB5               	rlf	___flmul@prod+1,f
 14139  0C6C  0DB6               	rlf	___flmul@prod+2,f
 14140  0C6D  0DB7               	rlf	___flmul@prod+3,f
 14141  0C6E  0B89               	decfsz	9,f
 14142  0C6F  2C6A               	goto	u4535
 14143  0C70  1BB2               	btfsc	___flmul@grs+3,7
 14144  0C71  1434               	bsf	___flmul@prod,0
 14145  0C72  3001               	movlw	1
 14146  0C73                     u4555:
 14147  0C73  35AF               	lslf	___flmul@grs,f
 14148  0C74  0DB0               	rlf	___flmul@grs+1,f
 14149  0C75  0DB1               	rlf	___flmul@grs+2,f
 14150  0C76  0DB2               	rlf	___flmul@grs+3,f
 14151  0C77  0B89               	decfsz	9,f
 14152  0C78  2C73               	goto	u4555
 14153  0C79  30FF               	movlw	255
 14154  0C7A  07B8               	addwf	___flmul@temp,f
 14155  0C7B  30FF               	movlw	255
 14156  0C7C  3DB9               	addwfc	___flmul@temp+1,f
 14157  0C7D  2C67               	goto	l4300
 14158  0C7E                     l4302:
 14159  0C7E  01AE               	clrf	___flmul@aexp
 14160  0C7F  1FB2               	btfss	___flmul@grs+3,7
 14161  0C80  2C97               	goto	l4312
 14162  0C81  30FF               	movlw	255
 14163  0C82  052F               	andwf	___flmul@grs,w
 14164  0C83  00A8               	movwf	??___flmul
 14165  0C84  30FF               	movlw	255
 14166  0C85  0530               	andwf	___flmul@grs+1,w
 14167  0C86  00A9               	movwf	??___flmul+1
 14168  0C87  30FF               	movlw	255
 14169  0C88  0531               	andwf	___flmul@grs+2,w
 14170  0C89  00AA               	movwf	??___flmul+2
 14171  0C8A  307F               	movlw	127
 14172  0C8B  0532               	andwf	___flmul@grs+3,w
 14173  0C8C  00AB               	movwf	??___flmul+3
 14174  0C8D  082B               	movf	??___flmul+3,w
 14175  0C8E  042A               	iorwf	??___flmul+2,w
 14176  0C8F  0429               	iorwf	??___flmul+1,w
 14177  0C90  0428               	iorwf	??___flmul,w
 14178  0C91  1903               	skipnz
 14179  0C92  1834               	btfsc	___flmul@prod,0
 14180  0C93  2C95               	goto	l4308
 14181  0C94  2C97               	goto	l4312
 14182  0C95                     l4308:
 14183  0C95  01AE               	clrf	___flmul@aexp
 14184  0C96  0AAE               	incf	___flmul@aexp,f
 14185  0C97                     l4312:
 14186  0C97  082E               	movf	___flmul@aexp,w
 14187  0C98  1903               	btfsc	3,2
 14188  0C99  2CC0               	goto	l4322
 14189  0C9A  3001               	movlw	1
 14190  0C9B  07B4               	addwf	___flmul@prod,f
 14191  0C9C  3000               	movlw	0
 14192  0C9D  3DB5               	addwfc	___flmul@prod+1,f
 14193  0C9E  3000               	movlw	0
 14194  0C9F  3DB6               	addwfc	___flmul@prod+2,f
 14195  0CA0  3000               	movlw	0
 14196  0CA1  3DB7               	addwfc	___flmul@prod+3,f
 14197  0CA2  1C37               	btfss	___flmul@prod+3,0
 14198  0CA3  2CC0               	goto	l4322
 14199  0CA4  0834               	movf	___flmul@prod,w
 14200  0CA5  00A8               	movwf	??___flmul
 14201  0CA6  0835               	movf	___flmul@prod+1,w
 14202  0CA7  00A9               	movwf	??___flmul+1
 14203  0CA8  0836               	movf	___flmul@prod+2,w
 14204  0CA9  00AA               	movwf	??___flmul+2
 14205  0CAA  0837               	movf	___flmul@prod+3,w
 14206  0CAB  00AB               	movwf	??___flmul+3
 14207  0CAC  3001               	movlw	1
 14208  0CAD  00AC               	movwf	??___flmul+4
 14209  0CAE                     u4625:
 14210  0CAE  37AB               	asrf	??___flmul+3,f
 14211  0CAF  0CAA               	rrf	??___flmul+2,f
 14212  0CB0  0CA9               	rrf	??___flmul+1,f
 14213  0CB1  0CA8               	rrf	??___flmul,f
 14214  0CB2  0BAC               	decfsz	??___flmul+4,f
 14215  0CB3  2CAE               	goto	u4625
 14216  0CB4  082B               	movf	??___flmul+3,w
 14217  0CB5  00B7               	movwf	___flmul@prod+3
 14218  0CB6  082A               	movf	??___flmul+2,w
 14219  0CB7  00B6               	movwf	___flmul@prod+2
 14220  0CB8  0829               	movf	??___flmul+1,w
 14221  0CB9  00B5               	movwf	___flmul@prod+1
 14222  0CBA  0828               	movf	??___flmul,w
 14223  0CBB  00B4               	movwf	___flmul@prod
 14224  0CBC  3001               	movlw	1
 14225  0CBD  07B8               	addwf	___flmul@temp,f
 14226  0CBE  3000               	movlw	0
 14227  0CBF  3DB9               	addwfc	___flmul@temp+1,f
 14228  0CC0                     l4322:
 14229  0CC0  0839               	movf	___flmul@temp+1,w
 14230  0CC1  3A80               	xorlw	128
 14231  0CC2  00A8               	movwf	??___flmul
 14232  0CC3  3080               	movlw	128
 14233  0CC4  0228               	subwf	??___flmul,w
 14234  0CC5  1D03               	skipz
 14235  0CC6  2CC9               	goto	u4635
 14236  0CC7  30FF               	movlw	255
 14237  0CC8  0238               	subwf	___flmul@temp,w
 14238  0CC9                     u4635:
 14239  0CC9  1C03               	skipc
 14240  0CCA  2CD5               	goto	l4326
 14241  0CCB  307F               	movlw	127
 14242  0CCC  0020               	movlb	0	; select bank0
 14243  0CCD  00B7               	movwf	___flmul@prod+3
 14244  0CCE  3080               	movlw	128
 14245  0CCF  00B6               	movwf	___flmul@prod+2
 14246  0CD0  3000               	movlw	0
 14247  0CD1  00B5               	movwf	___flmul@prod+1
 14248  0CD2  3000               	movlw	0
 14249  0CD3  00B4               	movwf	___flmul@prod
 14250  0CD4  2CFF               	goto	l1511
 14251  0CD5                     l4326:
 14252  0CD5  0020               	movlb	0	; select bank0
 14253  0CD6  0839               	movf	___flmul@temp+1,w
 14254  0CD7  3A80               	xorlw	128
 14255  0CD8  00A8               	movwf	??___flmul
 14256  0CD9  3080               	movlw	128
 14257  0CDA  0228               	subwf	??___flmul,w
 14258  0CDB  1D03               	skipz
 14259  0CDC  2CDF               	goto	u4645
 14260  0CDD  3001               	movlw	1
 14261  0CDE  0238               	subwf	___flmul@temp,w
 14262  0CDF                     u4645:
 14263  0CDF  1803               	skipnc
 14264  0CE0  2CEC               	goto	l4332
 14265  0CE1  3000               	movlw	0
 14266  0CE2  0020               	movlb	0	; select bank0
 14267  0CE3  00B7               	movwf	___flmul@prod+3
 14268  0CE4  3000               	movlw	0
 14269  0CE5  00B6               	movwf	___flmul@prod+2
 14270  0CE6  3000               	movlw	0
 14271  0CE7  00B5               	movwf	___flmul@prod+1
 14272  0CE8  3000               	movlw	0
 14273  0CE9  00B4               	movwf	___flmul@prod
 14274  0CEA  01AD               	clrf	___flmul@sign
 14275  0CEB  2CFF               	goto	l1511
 14276  0CEC                     l4332:
 14277  0CEC  0020               	movlb	0	; select bank0
 14278  0CED  0838               	movf	___flmul@temp,w
 14279  0CEE  00A8               	movwf	??___flmul
 14280  0CEF  0828               	movf	??___flmul,w
 14281  0CF0  00B3               	movwf	___flmul@bexp
 14282  0CF1  30FF               	movlw	255
 14283  0CF2  05B4               	andwf	___flmul@prod,f
 14284  0CF3  30FF               	movlw	255
 14285  0CF4  05B5               	andwf	___flmul@prod+1,f
 14286  0CF5  307F               	movlw	127
 14287  0CF6  05B6               	andwf	___flmul@prod+2,f
 14288  0CF7  3000               	movlw	0
 14289  0CF8  05B7               	andwf	___flmul@prod+3,f
 14290  0CF9  1833               	btfsc	___flmul@bexp,0
 14291  0CFA  17B6               	bsf	___flmul@prod+2,7
 14292  0CFB  3633               	lsrf	___flmul@bexp,w
 14293  0CFC  00A8               	movwf	??___flmul
 14294  0CFD  0828               	movf	??___flmul,w
 14295  0CFE  00B7               	movwf	___flmul@prod+3
 14296  0CFF                     l1511:
 14297  0CFF  082D               	movf	___flmul@sign,w
 14298  0D00  00A8               	movwf	??___flmul
 14299  0D01  0828               	movf	??___flmul,w
 14300  0D02  04B7               	iorwf	___flmul@prod+3,f
 14301  0D03  0837               	movf	___flmul@prod+3,w
 14302  0D04  00A3               	movwf	?___flmul+3
 14303  0D05  0836               	movf	___flmul@prod+2,w
 14304  0D06  00A2               	movwf	?___flmul+2
 14305  0D07  0835               	movf	___flmul@prod+1,w
 14306  0D08  00A1               	movwf	?___flmul+1
 14307  0D09  0834               	movf	___flmul@prod,w
 14308  0D0A  00A0               	movwf	?___flmul
 14309  0D0B  0008               	return
 14310  0D0C                     __end_of___flmul:
 14311                           
 14312                           	psect	text67
 14313  1C99                     __ptext67:	
 14314 ;; *************** function __Umul8_16 *****************
 14315 ;; Defined at:
 14316 ;;		line 4 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/Umul8_16.c"
 14317 ;; Parameters:    Size  Location     Type
 14318 ;;  multiplier      1    wreg     unsigned char 
 14319 ;;  multiplicand    1    0[COMMON] unsigned char 
 14320 ;; Auto vars:     Size  Location     Type
 14321 ;;  multiplier      1    8[COMMON] unsigned char 
 14322 ;;  word_mpld       2    6[COMMON] unsigned int 
 14323 ;;  product         2    4[COMMON] unsigned int 
 14324 ;; Return value:  Size  Location     Type
 14325 ;;                  2    0[COMMON] unsigned int 
 14326 ;; Registers used:
 14327 ;;		wreg, status,2, status,0
 14328 ;; Tracked objects:
 14329 ;;		On entry : 1F/0
 14330 ;;		On exit  : 1F/0
 14331 ;;		Unchanged: 1F/0
 14332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14333 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14334 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14335 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14336 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14337 ;;Total ram usage:        9 bytes
 14338 ;; Hardware stack levels used:    1
 14339 ;; Hardware stack levels required when called:    5
 14340 ;; This function calls:
 14341 ;;		Nothing
 14342 ;; This function is called by:
 14343 ;;		___flmul
 14344 ;; This function uses a non-reentrant model
 14345 ;;
 14346                           
 14347                           
 14348                           ;psect for function __Umul8_16
 14349  1C99                     __Umul8_16:
 14350                           
 14351                           ;incstack = 0
 14352                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
 14353                           ;__Umul8_16@multiplier stored from wreg
 14354  1C99  00F8               	movwf	__Umul8_16@multiplier
 14355  1C9A  01F4               	clrf	__Umul8_16@product
 14356  1C9B  01F5               	clrf	__Umul8_16@product+1
 14357  1C9C  0870               	movf	__Umul8_16@multiplicand,w
 14358  1C9D  00F2               	movwf	??__Umul8_16
 14359  1C9E  01F3               	clrf	??__Umul8_16+1
 14360  1C9F  0872               	movf	??__Umul8_16,w
 14361  1CA0  00F6               	movwf	__Umul8_16@word_mpld
 14362  1CA1  0873               	movf	??__Umul8_16+1,w
 14363  1CA2  00F7               	movwf	__Umul8_16@word_mpld+1
 14364  1CA3                     l3858:
 14365  1CA3  1C78               	btfss	__Umul8_16@multiplier,0
 14366  1CA4  2CA9               	goto	l1518
 14367  1CA5  0876               	movf	__Umul8_16@word_mpld,w
 14368  1CA6  07F4               	addwf	__Umul8_16@product,f
 14369  1CA7  0877               	movf	__Umul8_16@word_mpld+1,w
 14370  1CA8  3DF5               	addwfc	__Umul8_16@product+1,f
 14371  1CA9                     l1518:
 14372  1CA9  3001               	movlw	1
 14373  1CAA                     u3645:
 14374  1CAA  35F6               	lslf	__Umul8_16@word_mpld,f
 14375  1CAB  0DF7               	rlf	__Umul8_16@word_mpld+1,f
 14376  1CAC  0B89               	decfsz	9,f
 14377  1CAD  2CAA               	goto	u3645
 14378  1CAE  1003               	clrc
 14379  1CAF  0CF8               	rrf	__Umul8_16@multiplier,f
 14380  1CB0  0878               	movf	__Umul8_16@multiplier,w
 14381  1CB1  1D03               	btfss	3,2
 14382  1CB2  2CA3               	goto	l3858
 14383  1CB3  0875               	movf	__Umul8_16@product+1,w
 14384  1CB4  00F1               	movwf	?__Umul8_16+1
 14385  1CB5  0874               	movf	__Umul8_16@product,w
 14386  1CB6  00F0               	movwf	?__Umul8_16
 14387  1CB7  0008               	return
 14388  1CB8                     __end_of__Umul8_16:
 14389                           
 14390                           	psect	text68
 14391  144F                     __ptext68:	
 14392 ;; *************** function ___fldiv *****************
 14393 ;; Defined at:
 14394 ;;		line 8 in file "/opt/microchip/xc8/v2.31/pic/sources/c99/common/sprcdiv.c"
 14395 ;; Parameters:    Size  Location     Type
 14396 ;;  a               4   40[BANK1 ] unsigned int 
 14397 ;;  b               4   44[BANK1 ] unsigned int 
 14398 ;; Auto vars:     Size  Location     Type
 14399 ;;  grs             4   70[BANK0 ] unsigned long 
 14400 ;;  rem             4   63[BANK0 ] unsigned long 
 14401 ;;  new_exp         2   68[BANK0 ] int 
 14402 ;;  aexp            1   75[BANK0 ] unsigned char 
 14403 ;;  bexp            1   74[BANK0 ] unsigned char 
 14404 ;;  sign            1   67[BANK0 ] unsigned char 
 14405 ;; Return value:  Size  Location     Type
 14406 ;;                  4   40[BANK1 ] unsigned char 
 14407 ;; Registers used:
 14408 ;;		wreg, status,2, status,0
 14409 ;; Tracked objects:
 14410 ;;		On entry : 1F/1
 14411 ;;		On exit  : 1F/1
 14412 ;;		Unchanged: 0/0
 14413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14414 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
 14415 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14416 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14417 ;;      Totals:         0      18       8       0       0       0       0       0       0       0       0       0       
      +0       0
 14418 ;;Total ram usage:       26 bytes
 14419 ;; Hardware stack levels used:    1
 14420 ;; Hardware stack levels required when called:    5
 14421 ;; This function calls:
 14422 ;;		Nothing
 14423 ;; This function is called by:
 14424 ;;		_ChangeADCtoVoltage
 14425 ;;		_Measure_R_PT100_2Wire
 14426 ;;		_Measure_Temp_PT100_2Wire
 14427 ;;		_CalcRequiredDelayForTrigTRIAC
 14428 ;;		_efgtoa
 14429 ;; This function uses a non-reentrant model
 14430 ;;
 14431                           
 14432                           
 14433                           ;psect for function ___fldiv
 14434  144F                     ___fldiv:
 14435                           
 14436                           ;incstack = 0
 14437                           ; Regs used in ___fldiv: [wreg+status,2+status,0]
 14438  144F  084F               	movf	(___fldiv@b^(0+128)+3),w
 14439  1450  3980               	andlw	128
 14440  1451  0020               	movlb	0	; select bank0
 14441  1452  00DA               	movwf	??___fldiv
 14442  1453  085A               	movf	??___fldiv,w
 14443  1454  00E3               	movwf	___fldiv@sign
 14444  1455  0021               	movlb	1	; select bank1
 14445  1456  354F               	lslf	(___fldiv@b^(0+128)+3),w
 14446  1457  0020               	movlb	0	; select bank0
 14447  1458  00DA               	movwf	??___fldiv
 14448  1459  085A               	movf	??___fldiv,w
 14449  145A  00EA               	movwf	___fldiv@bexp
 14450  145B  0021               	movlb	1	; select bank1
 14451  145C  1FCE               	btfss	(___fldiv@b^(0+128)+2),7
 14452  145D  2C60               	goto	l4072
 14453  145E  0020               	movlb	0	; select bank0
 14454  145F  146A               	bsf	___fldiv@bexp,0
 14455  1460                     l4072:
 14456  1460  0020               	movlb	0	; select bank0
 14457  1461  086A               	movf	___fldiv@bexp,w
 14458  1462  1903               	btfsc	3,2
 14459  1463  2C74               	goto	l4082
 14460  1464  0A6A               	incf	___fldiv@bexp,w
 14461  1465  1D03               	btfss	3,2
 14462  1466  2C70               	goto	l4078
 14463  1467  3000               	movlw	0
 14464  1468  0021               	movlb	1	; select bank1
 14465  1469  00CF               	movwf	(___fldiv@b+3)^(0+128)
 14466  146A  3000               	movlw	0
 14467  146B  00CE               	movwf	(___fldiv@b+2)^(0+128)
 14468  146C  3000               	movlw	0
 14469  146D  00CD               	movwf	(___fldiv@b+1)^(0+128)
 14470  146E  3000               	movlw	0
 14471  146F  00CC               	movwf	___fldiv@b^(0+128)
 14472  1470                     l4078:
 14473  1470  0021               	movlb	1	; select bank1
 14474  1471  17CE               	bsf	(___fldiv@b^(0+128)+2),7
 14475  1472  01CF               	clrf	(___fldiv@b^(0+128)+3)
 14476  1473  2C7D               	goto	l4084
 14477  1474                     l4082:
 14478  1474  3000               	movlw	0
 14479  1475  0021               	movlb	1	; select bank1
 14480  1476  00CF               	movwf	(___fldiv@b+3)^(0+128)
 14481  1477  3000               	movlw	0
 14482  1478  00CE               	movwf	(___fldiv@b+2)^(0+128)
 14483  1479  3000               	movlw	0
 14484  147A  00CD               	movwf	(___fldiv@b+1)^(0+128)
 14485  147B  3000               	movlw	0
 14486  147C  00CC               	movwf	___fldiv@b^(0+128)
 14487  147D                     l4084:
 14488  147D  084B               	movf	(___fldiv@a^(0+128)+3),w
 14489  147E  3980               	andlw	128
 14490  147F  0020               	movlb	0	; select bank0
 14491  1480  00DA               	movwf	??___fldiv
 14492  1481  085A               	movf	??___fldiv,w
 14493  1482  06E3               	xorwf	___fldiv@sign,f
 14494  1483  0021               	movlb	1	; select bank1
 14495  1484  354B               	lslf	(___fldiv@a^(0+128)+3),w
 14496  1485  0020               	movlb	0	; select bank0
 14497  1486  00DA               	movwf	??___fldiv
 14498  1487  085A               	movf	??___fldiv,w
 14499  1488  00EB               	movwf	___fldiv@aexp
 14500  1489  0021               	movlb	1	; select bank1
 14501  148A  1FCA               	btfss	(___fldiv@a^(0+128)+2),7
 14502  148B  2C8E               	goto	l4092
 14503  148C  0020               	movlb	0	; select bank0
 14504  148D  146B               	bsf	___fldiv@aexp,0
 14505  148E                     l4092:
 14506  148E  0020               	movlb	0	; select bank0
 14507  148F  086B               	movf	___fldiv@aexp,w
 14508  1490  1903               	btfsc	3,2
 14509  1491  2CA2               	goto	l4102
 14510  1492  0A6B               	incf	___fldiv@aexp,w
 14511  1493  1D03               	btfss	3,2
 14512  1494  2C9E               	goto	l4098
 14513  1495  3000               	movlw	0
 14514  1496  0021               	movlb	1	; select bank1
 14515  1497  00CB               	movwf	(___fldiv@a+3)^(0+128)
 14516  1498  3000               	movlw	0
 14517  1499  00CA               	movwf	(___fldiv@a+2)^(0+128)
 14518  149A  3000               	movlw	0
 14519  149B  00C9               	movwf	(___fldiv@a+1)^(0+128)
 14520  149C  3000               	movlw	0
 14521  149D  00C8               	movwf	___fldiv@a^(0+128)
 14522  149E                     l4098:
 14523  149E  0021               	movlb	1	; select bank1
 14524  149F  17CA               	bsf	(___fldiv@a^(0+128)+2),7
 14525  14A0  01CB               	clrf	(___fldiv@a^(0+128)+3)
 14526  14A1  2CAB               	goto	l1459
 14527  14A2                     l4102:
 14528  14A2  3000               	movlw	0
 14529  14A3  0021               	movlb	1	; select bank1
 14530  14A4  00CB               	movwf	(___fldiv@a+3)^(0+128)
 14531  14A5  3000               	movlw	0
 14532  14A6  00CA               	movwf	(___fldiv@a+2)^(0+128)
 14533  14A7  3000               	movlw	0
 14534  14A8  00C9               	movwf	(___fldiv@a+1)^(0+128)
 14535  14A9  3000               	movlw	0
 14536  14AA  00C8               	movwf	___fldiv@a^(0+128)
 14537  14AB                     l1459:
 14538  14AB  084B               	movf	(___fldiv@a+3)^(0+128),w
 14539  14AC  044A               	iorwf	(___fldiv@a+2)^(0+128),w
 14540  14AD  0449               	iorwf	(___fldiv@a+1)^(0+128),w
 14541  14AE  0448               	iorwf	___fldiv@a^(0+128),w
 14542  14AF  1D03               	skipz
 14543  14B0  2CCC               	goto	l4112
 14544  14B1  3000               	movlw	0
 14545  14B2  00CF               	movwf	(___fldiv@b+3)^(0+128)
 14546  14B3  3000               	movlw	0
 14547  14B4  00CE               	movwf	(___fldiv@b+2)^(0+128)
 14548  14B5  3000               	movlw	0
 14549  14B6  00CD               	movwf	(___fldiv@b+1)^(0+128)
 14550  14B7  3000               	movlw	0
 14551  14B8  00CC               	movwf	___fldiv@b^(0+128)
 14552  14B9  3080               	movlw	128
 14553  14BA  04CE               	iorwf	(___fldiv@b^(0+128)+2),f
 14554  14BB  307F               	movlw	127
 14555  14BC  04CF               	iorwf	((___fldiv@b+1)^(0+128)+2),f
 14556  14BD                     L14:
 14557  14BD  0020               	movlb	0	; select bank0
 14558  14BE  0863               	movf	___fldiv@sign,w
 14559  14BF  00DA               	movwf	??___fldiv
 14560  14C0  085A               	movf	??___fldiv,w
 14561  14C1  0021               	movlb	1	; select bank1
 14562  14C2  04CF               	iorwf	(___fldiv@b^(0+128)+3),f
 14563  14C3  084F               	movf	(___fldiv@b+3)^(0+128),w
 14564  14C4  00CB               	movwf	(?___fldiv+3)^(0+128)
 14565  14C5  084E               	movf	(___fldiv@b+2)^(0+128),w
 14566  14C6  00CA               	movwf	(?___fldiv+2)^(0+128)
 14567  14C7  084D               	movf	(___fldiv@b+1)^(0+128),w
 14568  14C8  00C9               	movwf	(?___fldiv+1)^(0+128)
 14569  14C9  084C               	movf	___fldiv@b^(0+128),w
 14570  14CA  00C8               	movwf	?___fldiv^(0+128)
 14571  14CB  0008               	return
 14572  14CC                     l4112:
 14573  14CC  0020               	movlb	0	; select bank0
 14574  14CD  086A               	movf	___fldiv@bexp,w
 14575  14CE  1D03               	btfss	3,2
 14576  14CF  2CDA               	goto	l4118
 14577  14D0  3000               	movlw	0
 14578  14D1  0021               	movlb	1	; select bank1
 14579  14D2  00CB               	movwf	(?___fldiv+3)^(0+128)
 14580  14D3  3000               	movlw	0
 14581  14D4  00CA               	movwf	(?___fldiv+2)^(0+128)
 14582  14D5  3000               	movlw	0
 14583  14D6  00C9               	movwf	(?___fldiv+1)^(0+128)
 14584  14D7  3000               	movlw	0
 14585  14D8  00C8               	movwf	?___fldiv^(0+128)
 14586  14D9  0008               	return
 14587  14DA                     l4118:
 14588  14DA  086A               	movf	___fldiv@bexp,w
 14589  14DB  00DA               	movwf	??___fldiv
 14590  14DC  01DB               	clrf	??___fldiv+1
 14591  14DD  085B               	movf	??___fldiv+1,w
 14592  14DE  00DD               	movwf	??___fldiv+3
 14593  14DF  086B               	movf	___fldiv@aexp,w
 14594  14E0  025A               	subwf	??___fldiv,w
 14595  14E1  00DC               	movwf	??___fldiv+2
 14596  14E2  1C03               	skipc
 14597  14E3  03DD               	decf	??___fldiv+3,f
 14598  14E4  085C               	movf	??___fldiv+2,w
 14599  14E5  3E7F               	addlw	127
 14600  14E6  00E4               	movwf	___fldiv@new_exp
 14601  14E7  3000               	movlw	0
 14602  14E8  3D5D               	addwfc	??___fldiv+3,w
 14603  14E9  00E5               	movwf	___fldiv@new_exp+1
 14604  14EA  0021               	movlb	1	; select bank1
 14605  14EB  084F               	movf	(___fldiv@b+3)^(0+128),w
 14606  14EC  0020               	movlb	0	; select bank0
 14607  14ED  00E2               	movwf	___fldiv@rem+3
 14608  14EE  0021               	movlb	1	; select bank1
 14609  14EF  084E               	movf	(___fldiv@b+2)^(0+128),w
 14610  14F0  0020               	movlb	0	; select bank0
 14611  14F1  00E1               	movwf	___fldiv@rem+2
 14612  14F2  0021               	movlb	1	; select bank1
 14613  14F3  084D               	movf	(___fldiv@b+1)^(0+128),w
 14614  14F4  0020               	movlb	0	; select bank0
 14615  14F5  00E0               	movwf	___fldiv@rem+1
 14616  14F6  0021               	movlb	1	; select bank1
 14617  14F7  084C               	movf	___fldiv@b^(0+128),w
 14618  14F8  0020               	movlb	0	; select bank0
 14619  14F9  00DF               	movwf	___fldiv@rem
 14620  14FA  3000               	movlw	0
 14621  14FB  0021               	movlb	1	; select bank1
 14622  14FC  00CF               	movwf	(___fldiv@b+3)^(0+128)
 14623  14FD  3000               	movlw	0
 14624  14FE  00CE               	movwf	(___fldiv@b+2)^(0+128)
 14625  14FF  3000               	movlw	0
 14626  1500  00CD               	movwf	(___fldiv@b+1)^(0+128)
 14627  1501  3000               	movlw	0
 14628  1502  00CC               	movwf	___fldiv@b^(0+128)
 14629  1503  3000               	movlw	0
 14630  1504  0020               	movlb	0	; select bank0
 14631  1505  00E9               	movwf	___fldiv@grs+3
 14632  1506  3000               	movlw	0
 14633  1507  00E8               	movwf	___fldiv@grs+2
 14634  1508  3000               	movlw	0
 14635  1509  00E7               	movwf	___fldiv@grs+1
 14636  150A  3000               	movlw	0
 14637  150B  00E6               	movwf	___fldiv@grs
 14638  150C  01EB               	clrf	___fldiv@aexp
 14639  150D                     l4146:
 14640  150D  301A               	movlw	26
 14641  150E  026B               	subwf	___fldiv@aexp,w
 14642  150F  1803               	btfsc	3,0
 14643  1510  2D5E               	goto	l4148
 14644  1511  086B               	movf	___fldiv@aexp,w
 14645  1512  1903               	btfsc	3,2
 14646  1513  2D30               	goto	l4138
 14647  1514  3001               	movlw	1
 14648  1515                     u4215:
 14649  1515  35DF               	lslf	___fldiv@rem,f
 14650  1516  0DE0               	rlf	___fldiv@rem+1,f
 14651  1517  0DE1               	rlf	___fldiv@rem+2,f
 14652  1518  0DE2               	rlf	___fldiv@rem+3,f
 14653  1519  0B89               	decfsz	9,f
 14654  151A  2D15               	goto	u4215
 14655  151B  3001               	movlw	1
 14656  151C                     u4225:
 14657  151C  0021               	movlb	1	; select bank1
 14658  151D  35CC               	lslf	___fldiv@b^(0+128),f
 14659  151E  0DCD               	rlf	(___fldiv@b+1)^(0+128),f
 14660  151F  0DCE               	rlf	(___fldiv@b+2)^(0+128),f
 14661  1520  0DCF               	rlf	(___fldiv@b+3)^(0+128),f
 14662  1521  0B89               	decfsz	9,f
 14663  1522  2D1C               	goto	u4225
 14664  1523  0020               	movlb	0	; select bank0
 14665  1524  1FE9               	btfss	___fldiv@grs+3,7
 14666  1525  2D28               	goto	l4136
 14667  1526  0021               	movlb	1	; select bank1
 14668  1527  144C               	bsf	___fldiv@b^(0+128),0
 14669  1528                     l4136:
 14670  1528  3001               	movlw	1
 14671  1529                     u4245:
 14672  1529  0020               	movlb	0	; select bank0
 14673  152A  35E6               	lslf	___fldiv@grs,f
 14674  152B  0DE7               	rlf	___fldiv@grs+1,f
 14675  152C  0DE8               	rlf	___fldiv@grs+2,f
 14676  152D  0DE9               	rlf	___fldiv@grs+3,f
 14677  152E  0B89               	decfsz	9,f
 14678  152F  2D29               	goto	u4245
 14679  1530                     l4138:
 14680  1530  0021               	movlb	1	; select bank1
 14681  1531  084B               	movf	(___fldiv@a+3)^(0+128),w
 14682  1532  0020               	movlb	0	; select bank0
 14683  1533  0262               	subwf	___fldiv@rem+3,w
 14684  1534  1D03               	skipz
 14685  1535  2D46               	goto	u4255
 14686  1536  0021               	movlb	1	; select bank1
 14687  1537  084A               	movf	(___fldiv@a+2)^(0+128),w
 14688  1538  0020               	movlb	0	; select bank0
 14689  1539  0261               	subwf	___fldiv@rem+2,w
 14690  153A  1D03               	skipz
 14691  153B  2D46               	goto	u4255
 14692  153C  0021               	movlb	1	; select bank1
 14693  153D  0849               	movf	(___fldiv@a+1)^(0+128),w
 14694  153E  0020               	movlb	0	; select bank0
 14695  153F  0260               	subwf	___fldiv@rem+1,w
 14696  1540  1D03               	skipz
 14697  1541  2D46               	goto	u4255
 14698  1542  0021               	movlb	1	; select bank1
 14699  1543  0848               	movf	___fldiv@a^(0+128),w
 14700  1544  0020               	movlb	0	; select bank0
 14701  1545  025F               	subwf	___fldiv@rem,w
 14702  1546                     u4255:
 14703  1546  1C03               	skipc
 14704  1547  2D59               	goto	l4144
 14705  1548  1769               	bsf	___fldiv@grs+3,6
 14706  1549  0021               	movlb	1	; select bank1
 14707  154A  0848               	movf	___fldiv@a^(0+128),w
 14708  154B  0020               	movlb	0	; select bank0
 14709  154C  02DF               	subwf	___fldiv@rem,f
 14710  154D  0021               	movlb	1	; select bank1
 14711  154E  0849               	movf	(___fldiv@a+1)^(0+128),w
 14712  154F  0020               	movlb	0	; select bank0
 14713  1550  3BE0               	subwfb	___fldiv@rem+1,f
 14714  1551  0021               	movlb	1	; select bank1
 14715  1552  084A               	movf	(___fldiv@a+2)^(0+128),w
 14716  1553  0020               	movlb	0	; select bank0
 14717  1554  3BE1               	subwfb	___fldiv@rem+2,f
 14718  1555  0021               	movlb	1	; select bank1
 14719  1556  084B               	movf	(___fldiv@a+3)^(0+128),w
 14720  1557  0020               	movlb	0	; select bank0
 14721  1558  3BE2               	subwfb	___fldiv@rem+3,f
 14722  1559                     l4144:
 14723  1559  3001               	movlw	1
 14724  155A  00DA               	movwf	??___fldiv
 14725  155B  085A               	movf	??___fldiv,w
 14726  155C  07EB               	addwf	___fldiv@aexp,f
 14727  155D  2D0D               	goto	l4146
 14728  155E                     l4148:
 14729  155E  0862               	movf	___fldiv@rem+3,w
 14730  155F  0461               	iorwf	___fldiv@rem+2,w
 14731  1560  0460               	iorwf	___fldiv@rem+1,w
 14732  1561  045F               	iorwf	___fldiv@rem,w
 14733  1562  1D03               	btfss	3,2
 14734  1563  1466               	bsf	___fldiv@grs,0
 14735  1564                     l4162:
 14736  1564  0021               	movlb	1	; select bank1
 14737  1565  1BCE               	btfsc	(___fldiv@b+2)^(0+128),7
 14738  1566  2D80               	goto	l4164
 14739  1567  3001               	movlw	1
 14740  1568                     u4285:
 14741  1568  35CC               	lslf	___fldiv@b^(0+128),f
 14742  1569  0DCD               	rlf	(___fldiv@b+1)^(0+128),f
 14743  156A  0DCE               	rlf	(___fldiv@b+2)^(0+128),f
 14744  156B  0DCF               	rlf	(___fldiv@b+3)^(0+128),f
 14745  156C  0B89               	decfsz	9,f
 14746  156D  2D68               	goto	u4285
 14747  156E  0020               	movlb	0	; select bank0
 14748  156F  1FE9               	btfss	___fldiv@grs+3,7
 14749  1570  2D73               	goto	l4158
 14750  1571  0021               	movlb	1	; select bank1
 14751  1572  144C               	bsf	___fldiv@b^(0+128),0
 14752  1573                     l4158:
 14753  1573  3001               	movlw	1
 14754  1574                     u4305:
 14755  1574  0020               	movlb	0	; select bank0
 14756  1575  35E6               	lslf	___fldiv@grs,f
 14757  1576  0DE7               	rlf	___fldiv@grs+1,f
 14758  1577  0DE8               	rlf	___fldiv@grs+2,f
 14759  1578  0DE9               	rlf	___fldiv@grs+3,f
 14760  1579  0B89               	decfsz	9,f
 14761  157A  2D74               	goto	u4305
 14762  157B  30FF               	movlw	255
 14763  157C  07E4               	addwf	___fldiv@new_exp,f
 14764  157D  30FF               	movlw	255
 14765  157E  3DE5               	addwfc	___fldiv@new_exp+1,f
 14766  157F  2D64               	goto	l4162
 14767  1580                     l4164:
 14768  1580  0020               	movlb	0	; select bank0
 14769  1581  01EB               	clrf	___fldiv@aexp
 14770  1582  1FE9               	btfss	___fldiv@grs+3,7
 14771  1583  2D9C               	goto	l4174
 14772  1584  30FF               	movlw	255
 14773  1585  0566               	andwf	___fldiv@grs,w
 14774  1586  00DA               	movwf	??___fldiv
 14775  1587  30FF               	movlw	255
 14776  1588  0567               	andwf	___fldiv@grs+1,w
 14777  1589  00DB               	movwf	??___fldiv+1
 14778  158A  30FF               	movlw	255
 14779  158B  0568               	andwf	___fldiv@grs+2,w
 14780  158C  00DC               	movwf	??___fldiv+2
 14781  158D  307F               	movlw	127
 14782  158E  0569               	andwf	___fldiv@grs+3,w
 14783  158F  00DD               	movwf	??___fldiv+3
 14784  1590  085D               	movf	??___fldiv+3,w
 14785  1591  045C               	iorwf	??___fldiv+2,w
 14786  1592  045B               	iorwf	??___fldiv+1,w
 14787  1593  045A               	iorwf	??___fldiv,w
 14788  1594  1D03               	btfss	3,2
 14789  1595  2D99               	goto	l4170
 14790  1596  0021               	movlb	1	; select bank1
 14791  1597  1C4C               	btfss	___fldiv@b^(0+128),0
 14792  1598  2D9C               	goto	l4174
 14793  1599                     l4170:
 14794  1599  0020               	movlb	0	; select bank0
 14795  159A  01EB               	clrf	___fldiv@aexp
 14796  159B  0AEB               	incf	___fldiv@aexp,f
 14797  159C                     l4174:
 14798  159C  0020               	movlb	0	; select bank0
 14799  159D  086B               	movf	___fldiv@aexp,w
 14800  159E  1903               	btfsc	3,2
 14801  159F  2DD6               	goto	l4184
 14802  15A0  3001               	movlw	1
 14803  15A1  0021               	movlb	1	; select bank1
 14804  15A2  07CC               	addwf	___fldiv@b^(0+128),f
 14805  15A3  3000               	movlw	0
 14806  15A4  3DCD               	addwfc	(___fldiv@b+1)^(0+128),f
 14807  15A5  3000               	movlw	0
 14808  15A6  3DCE               	addwfc	(___fldiv@b+2)^(0+128),f
 14809  15A7  3000               	movlw	0
 14810  15A8  3DCF               	addwfc	(___fldiv@b+3)^(0+128),f
 14811  15A9  1C4F               	btfss	(___fldiv@b+3)^(0+128),0
 14812  15AA  2DD6               	goto	l4184
 14813  15AB  084C               	movf	___fldiv@b^(0+128),w
 14814  15AC  0020               	movlb	0	; select bank0
 14815  15AD  00DA               	movwf	??___fldiv
 14816  15AE  0021               	movlb	1	; select bank1
 14817  15AF  084D               	movf	(___fldiv@b+1)^(0+128),w
 14818  15B0  0020               	movlb	0	; select bank0
 14819  15B1  00DB               	movwf	??___fldiv+1
 14820  15B2  0021               	movlb	1	; select bank1
 14821  15B3  084E               	movf	(___fldiv@b+2)^(0+128),w
 14822  15B4  0020               	movlb	0	; select bank0
 14823  15B5  00DC               	movwf	??___fldiv+2
 14824  15B6  0021               	movlb	1	; select bank1
 14825  15B7  084F               	movf	(___fldiv@b+3)^(0+128),w
 14826  15B8  0020               	movlb	0	; select bank0
 14827  15B9  00DD               	movwf	??___fldiv+3
 14828  15BA  3001               	movlw	1
 14829  15BB  00DE               	movwf	??___fldiv+4
 14830  15BC                     u4375:
 14831  15BC  37DD               	asrf	??___fldiv+3,f
 14832  15BD  0CDC               	rrf	??___fldiv+2,f
 14833  15BE  0CDB               	rrf	??___fldiv+1,f
 14834  15BF  0CDA               	rrf	??___fldiv,f
 14835  15C0  0BDE               	decfsz	??___fldiv+4,f
 14836  15C1  2DBC               	goto	u4375
 14837  15C2  085D               	movf	??___fldiv+3,w
 14838  15C3  0021               	movlb	1	; select bank1
 14839  15C4  00CF               	movwf	(___fldiv@b+3)^(0+128)
 14840  15C5  0020               	movlb	0	; select bank0
 14841  15C6  085C               	movf	??___fldiv+2,w
 14842  15C7  0021               	movlb	1	; select bank1
 14843  15C8  00CE               	movwf	(___fldiv@b+2)^(0+128)
 14844  15C9  0020               	movlb	0	; select bank0
 14845  15CA  085B               	movf	??___fldiv+1,w
 14846  15CB  0021               	movlb	1	; select bank1
 14847  15CC  00CD               	movwf	(___fldiv@b+1)^(0+128)
 14848  15CD  0020               	movlb	0	; select bank0
 14849  15CE  085A               	movf	??___fldiv,w
 14850  15CF  0021               	movlb	1	; select bank1
 14851  15D0  00CC               	movwf	___fldiv@b^(0+128)
 14852  15D1  3001               	movlw	1
 14853  15D2  0020               	movlb	0	; select bank0
 14854  15D3  07E4               	addwf	___fldiv@new_exp,f
 14855  15D4  3000               	movlw	0
 14856  15D5  3DE5               	addwfc	___fldiv@new_exp+1,f
 14857  15D6                     l4184:
 14858  15D6  0020               	movlb	0	; select bank0
 14859  15D7  0865               	movf	___fldiv@new_exp+1,w
 14860  15D8  3A80               	xorlw	128
 14861  15D9  00DA               	movwf	??___fldiv
 14862  15DA  3080               	movlw	128
 14863  15DB  025A               	subwf	??___fldiv,w
 14864  15DC  1D03               	skipz
 14865  15DD  2DE0               	goto	u4385
 14866  15DE  30FF               	movlw	255
 14867  15DF  0264               	subwf	___fldiv@new_exp,w
 14868  15E0                     u4385:
 14869  15E0  1C03               	skipc
 14870  15E1  2DF0               	goto	l1480
 14871  15E2  30FF               	movlw	255
 14872  15E3  0020               	movlb	0	; select bank0
 14873  15E4  00E4               	movwf	___fldiv@new_exp
 14874  15E5  3000               	movlw	0
 14875  15E6  00E5               	movwf	___fldiv@new_exp+1
 14876  15E7  3000               	movlw	0
 14877  15E8  0021               	movlb	1	; select bank1
 14878  15E9  00CF               	movwf	(___fldiv@b+3)^(0+128)
 14879  15EA  3000               	movlw	0
 14880  15EB  00CE               	movwf	(___fldiv@b+2)^(0+128)
 14881  15EC  3000               	movlw	0
 14882  15ED  00CD               	movwf	(___fldiv@b+1)^(0+128)
 14883  15EE  3000               	movlw	0
 14884  15EF  00CC               	movwf	___fldiv@b^(0+128)
 14885  15F0                     l1480:
 14886  15F0  0020               	movlb	0	; select bank0
 14887  15F1  0865               	movf	___fldiv@new_exp+1,w
 14888  15F2  3A80               	xorlw	128
 14889  15F3  00DA               	movwf	??___fldiv
 14890  15F4  3080               	movlw	128
 14891  15F5  025A               	subwf	??___fldiv,w
 14892  15F6  1D03               	skipz
 14893  15F7  2DFA               	goto	u4395
 14894  15F8  3001               	movlw	1
 14895  15F9  0264               	subwf	___fldiv@new_exp,w
 14896  15FA                     u4395:
 14897  15FA  1803               	skipnc
 14898  15FB  2E0A               	goto	l1481
 14899  15FC  0020               	movlb	0	; select bank0
 14900  15FD  01E4               	clrf	___fldiv@new_exp
 14901  15FE  01E5               	clrf	___fldiv@new_exp+1
 14902  15FF  3000               	movlw	0
 14903  1600  0021               	movlb	1	; select bank1
 14904  1601  00CF               	movwf	(___fldiv@b+3)^(0+128)
 14905  1602  3000               	movlw	0
 14906  1603  00CE               	movwf	(___fldiv@b+2)^(0+128)
 14907  1604  3000               	movlw	0
 14908  1605  00CD               	movwf	(___fldiv@b+1)^(0+128)
 14909  1606  3000               	movlw	0
 14910  1607  00CC               	movwf	___fldiv@b^(0+128)
 14911  1608  0020               	movlb	0	; select bank0
 14912  1609  01E3               	clrf	___fldiv@sign
 14913  160A                     l1481:
 14914  160A  0020               	movlb	0	; select bank0
 14915  160B  0864               	movf	___fldiv@new_exp,w
 14916  160C  00DA               	movwf	??___fldiv
 14917  160D  085A               	movf	??___fldiv,w
 14918  160E  00EA               	movwf	___fldiv@bexp
 14919  160F  1C6A               	btfss	___fldiv@bexp,0
 14920  1610  2E14               	goto	l4198
 14921  1611  0021               	movlb	1	; select bank1
 14922  1612  17CE               	bsf	(___fldiv@b^(0+128)+2),7
 14923  1613  2E19               	goto	l1483
 14924  1614                     l4198:
 14925  1614  307F               	movlw	127
 14926  1615  00DA               	movwf	??___fldiv
 14927  1616  085A               	movf	??___fldiv,w
 14928  1617  0021               	movlb	1	; select bank1
 14929  1618  05CE               	andwf	(___fldiv@b^(0+128)+2),f
 14930  1619                     l1483:
 14931  1619  0020               	movlb	0	; select bank0
 14932  161A  366A               	lsrf	___fldiv@bexp,w
 14933  161B  00DA               	movwf	??___fldiv
 14934  161C  085A               	movf	??___fldiv,w
 14935  161D  0021               	movlb	1	; select bank1
 14936  161E  00CF               	movwf	(___fldiv@b^(0+128)+3)
 14937  161F  2CBD               	goto	L14
 14938  1620                     __end_of___fldiv:
 14939                           
 14940                           	psect	text69
 14941  1AAB                     __ptext69:	
 14942 ;; *************** function _ADC_StartConversion *****************
 14943 ;; Defined at:
 14944 ;;		line 93 in file "mcc_generated_files/adc.c"
 14945 ;; Parameters:    Size  Location     Type
 14946 ;;		None
 14947 ;; Auto vars:     Size  Location     Type
 14948 ;;		None
 14949 ;; Return value:  Size  Location     Type
 14950 ;;                  1    wreg      void 
 14951 ;; Registers used:
 14952 ;;		None
 14953 ;; Tracked objects:
 14954 ;;		On entry : 0/1
 14955 ;;		On exit  : 1F/1
 14956 ;;		Unchanged: 0/0
 14957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14961 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14962 ;;Total ram usage:        0 bytes
 14963 ;; Hardware stack levels used:    1
 14964 ;; Hardware stack levels required when called:    5
 14965 ;; This function calls:
 14966 ;;		Nothing
 14967 ;; This function is called by:
 14968 ;;		_main
 14969 ;; This function uses a non-reentrant model
 14970 ;;
 14971                           
 14972                           
 14973                           ;psect for function _ADC_StartConversion
 14974  1AAB                     _ADC_StartConversion:
 14975                           
 14976                           ;mcc_generated_files/adc.c: 96:     ADCON0bits.GO_nDONE = 1;
 14977                           
 14978                           ;incstack = 0
 14979                           ; Regs used in _ADC_StartConversion: []
 14980  1AAB  0021               	movlb	1	; select bank1
 14981  1AAC  149D               	bsf	29,1	;volatile
 14982  1AAD  0008               	return
 14983  1AAE                     __end_of_ADC_StartConversion:
 14984                           
 14985                           	psect	text70
 14986  1B6C                     __ptext70:	
 14987 ;; *************** function _ADC_SelectChannel *****************
 14988 ;; Defined at:
 14989 ;;		line 85 in file "mcc_generated_files/adc.c"
 14990 ;; Parameters:    Size  Location     Type
 14991 ;;  channel         1    wreg     enum E2603
 14992 ;; Auto vars:     Size  Location     Type
 14993 ;;  channel         1    1[COMMON] enum E2603
 14994 ;; Return value:  Size  Location     Type
 14995 ;;                  1    wreg      void 
 14996 ;; Registers used:
 14997 ;;		wreg, status,2, status,0
 14998 ;; Tracked objects:
 14999 ;;		On entry : 1F/3
 15000 ;;		On exit  : 1F/1
 15001 ;;		Unchanged: 0/0
 15002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15004 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15005 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15006 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15007 ;;Total ram usage:        2 bytes
 15008 ;; Hardware stack levels used:    1
 15009 ;; Hardware stack levels required when called:    5
 15010 ;; This function calls:
 15011 ;;		Nothing
 15012 ;; This function is called by:
 15013 ;;		_main
 15014 ;; This function uses a non-reentrant model
 15015 ;;
 15016                           
 15017                           
 15018                           ;psect for function _ADC_SelectChannel
 15019  1B6C                     _ADC_SelectChannel:
 15020                           
 15021                           ;incstack = 0
 15022                           ; Regs used in _ADC_SelectChannel: [wreg+status,2+status,0]
 15023                           ;ADC_SelectChannel@channel stored from wreg
 15024  1B6C  00F1               	movwf	ADC_SelectChannel@channel
 15025                           
 15026                           ;mcc_generated_files/adc.c: 85: void ADC_SelectChannel(adc_channel_t channel);mcc_genera
      +                          ted_files/adc.c: 86: {;mcc_generated_files/adc.c: 88:     ADCON0bits.CHS = channel;
 15027  1B6D  0871               	movf	ADC_SelectChannel@channel,w
 15028  1B6E  00F0               	movwf	??_ADC_SelectChannel
 15029  1B6F  0DF0               	rlf	??_ADC_SelectChannel,f
 15030  1B70  0DF0               	rlf	??_ADC_SelectChannel,f
 15031  1B71  0021               	movlb	1	; select bank1
 15032  1B72  081D               	movf	29,w	;volatile
 15033  1B73  0670               	xorwf	??_ADC_SelectChannel,w
 15034  1B74  3983               	andlw	-125
 15035  1B75  0670               	xorwf	??_ADC_SelectChannel,w
 15036  1B76  009D               	movwf	29	;volatile
 15037                           
 15038                           ;mcc_generated_files/adc.c: 90:     ADCON0bits.ADON = 1;
 15039  1B77  141D               	bsf	29,0	;volatile
 15040  1B78  0008               	return
 15041  1B79                     __end_of_ADC_SelectChannel:
 15042                           
 15043                           	psect	intentry
 15044  0004                     __pintentry:	
 15045 ;; *************** function _INTERRUPT_InterruptManager *****************
 15046 ;; Defined at:
 15047 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 15048 ;; Parameters:    Size  Location     Type
 15049 ;;		None
 15050 ;; Auto vars:     Size  Location     Type
 15051 ;;		None
 15052 ;; Return value:  Size  Location     Type
 15053 ;;                  1    wreg      void 
 15054 ;; Registers used:
 15055 ;;		wreg, status,2, status,0, pclath, cstack
 15056 ;; Tracked objects:
 15057 ;;		On entry : 0/0
 15058 ;;		On exit  : 0/0
 15059 ;;		Unchanged: 0/0
 15060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15064 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15065 ;;Total ram usage:        0 bytes
 15066 ;; Hardware stack levels used:    1
 15067 ;; Hardware stack levels required when called:    4
 15068 ;; This function calls:
 15069 ;;		_PIN_MANAGER_IOC
 15070 ;;		_TMR2_ISR
 15071 ;; This function is called by:
 15072 ;;		Interrupt level 1
 15073 ;; This function uses a non-reentrant model
 15074 ;;
 15075                           
 15076  0004                     _INTERRUPT_InterruptManager:
 15077                           
 15078                           ;incstack = 0
 15079  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 15080                           
 15081                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
 15082  0005  3180               	pagesel	$
 15083                           
 15084                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.IOCIE == 1 && INTCONbits
      +                          .IOCIF == 1)
 15085  0006  198B               	btfsc	11,3	;volatile
 15086  0007  1C0B               	btfss	11,0	;volatile
 15087  0008  280D               	goto	i1l730
 15088                           
 15089                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         PIN_MANAGER_IOC();
 15090  0009  319A  22C6  3180   	fcall	_PIN_MANAGER_IOC
 15091                           
 15092                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 15093  000C  2817               	goto	i1l736
 15094  000D                     i1l730:	
 15095                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
 15096                           
 15097  000D  1F0B               	btfss	11,6	;volatile
 15098  000E  2817               	goto	i1l736
 15099                           
 15100                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
 15101  000F  0021               	movlb	1	; select bank1
 15102  0010  1C91               	btfss	17,1	;volatile
 15103  0011  2817               	goto	i1l736
 15104  0012  0020               	movlb	0	; select bank0
 15105  0013  1C91               	btfss	17,1	;volatile
 15106  0014  2817               	goto	i1l736
 15107                           
 15108                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             TMR2_ISR();
 15109  0015  319B  2347         	fcall	_TMR2_ISR
 15110  0017                     i1l736:	
 15111                           ;mcc_generated_files/interrupt_manager.c: 71:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 73:     }
 15112                           
 15113                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 15114                           
 15115  0017  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 15116  0018  0009               	retfie
 15117  0019                     __end_of_INTERRUPT_InterruptManager:
 15118                           
 15119                           	psect	text72
 15120  1B47                     __ptext72:	
 15121 ;; *************** function _TMR2_ISR *****************
 15122 ;; Defined at:
 15123 ;;		line 119 in file "mcc_generated_files/tmr2.c"
 15124 ;; Parameters:    Size  Location     Type
 15125 ;;		None
 15126 ;; Auto vars:     Size  Location     Type
 15127 ;;		None
 15128 ;; Return value:  Size  Location     Type
 15129 ;;                  1    wreg      void 
 15130 ;; Registers used:
 15131 ;;		wreg, status,2, status,0, pclath, cstack
 15132 ;; Tracked objects:
 15133 ;;		On entry : 1F/0
 15134 ;;		On exit  : 0/0
 15135 ;;		Unchanged: 0/0
 15136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15140 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15141 ;;Total ram usage:        0 bytes
 15142 ;; Hardware stack levels used:    1
 15143 ;; Hardware stack levels required when called:    2
 15144 ;; This function calls:
 15145 ;;		Absolute function
 15146 ;;		_TMR2_DefaultInterruptHandler
 15147 ;;		_TMR2_Int_isr
 15148 ;; This function is called by:
 15149 ;;		_INTERRUPT_InterruptManager
 15150 ;; This function uses a non-reentrant model
 15151 ;;
 15152                           
 15153                           
 15154                           ;psect for function _TMR2_ISR
 15155  1B47                     _TMR2_ISR:
 15156                           
 15157                           ;mcc_generated_files/tmr2.c: 123:     PIR1bits.TMR2IF = 0;
 15158                           
 15159                           ;incstack = 0
 15160                           ; Regs used in _TMR2_ISR: [wreg+status,2+status,0+pclath+cstack]
 15161  1B47  1091               	bcf	17,1	;volatile
 15162                           
 15163                           ;mcc_generated_files/tmr2.c: 125:     if(TMR2_InterruptHandler)
 15164  1B48  0023               	movlb	3	; select bank3
 15165  1B49  086C               	movf	_TMR2_InterruptHandler^(0+384),w
 15166  1B4A  046D               	iorwf	(_TMR2_InterruptHandler+1)^(0+384),w
 15167  1B4B  1903               	btfsc	3,2
 15168  1B4C  0008               	return
 15169                           
 15170                           ;mcc_generated_files/tmr2.c: 126:     {;mcc_generated_files/tmr2.c: 127:         TMR2_In
      +                          terruptHandler();
 15171  1B4D  086D               	movf	(_TMR2_InterruptHandler+1)^(0+384),w
 15172  1B4E  008A               	movwf	10
 15173  1B4F  086C               	movf	_TMR2_InterruptHandler^(0+384),w
 15174  1B50  000A               	callw
 15175  1B51  319B               	pagesel	$
 15176  1B52  0008               	return
 15177  1B53                     __end_of_TMR2_ISR:
 15178                           
 15179                           	psect	text73
 15180  1000                     __ptext73:	
 15181 ;; *************** function _TMR2_DefaultInterruptHandler *****************
 15182 ;; Defined at:
 15183 ;;		line 136 in file "mcc_generated_files/tmr2.c"
 15184 ;; Parameters:    Size  Location     Type
 15185 ;;		None
 15186 ;; Auto vars:     Size  Location     Type
 15187 ;;		None
 15188 ;; Return value:  Size  Location     Type
 15189 ;;                  1    wreg      void 
 15190 ;; Registers used:
 15191 ;;		None
 15192 ;; Tracked objects:
 15193 ;;		On entry : 1F/3
 15194 ;;		On exit  : 1F/3
 15195 ;;		Unchanged: 1E/0
 15196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15200 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15201 ;;Total ram usage:        0 bytes
 15202 ;; Hardware stack levels used:    1
 15203 ;; This function calls:
 15204 ;;		Nothing
 15205 ;; This function is called by:
 15206 ;;		_TMR2_Initialize
 15207 ;;		_TMR2_ISR
 15208 ;; This function uses a non-reentrant model
 15209 ;;
 15210                           
 15211                           
 15212                           ;psect for function _TMR2_DefaultInterruptHandler
 15213  1000                     _TMR2_DefaultInterruptHandler:
 15214                           
 15215                           ;incstack = 0
 15216                           ; Regs used in _TMR2_DefaultInterruptHandler: []
 15217  1000  0008               	return
 15218  1001                     __end_of_TMR2_DefaultInterruptHandler:
 15219                           
 15220                           	psect	text74
 15221  1C60                     __ptext74:	
 15222 ;; *************** function _TMR2_Int_isr *****************
 15223 ;; Defined at:
 15224 ;;		line 238 in file "main.c"
 15225 ;; Parameters:    Size  Location     Type
 15226 ;;		None
 15227 ;; Auto vars:     Size  Location     Type
 15228 ;;		None
 15229 ;; Return value:  Size  Location     Type
 15230 ;;                  1    wreg      void 
 15231 ;; Registers used:
 15232 ;;		wreg, status,2, status,0, pclath, cstack
 15233 ;; Tracked objects:
 15234 ;;		On entry : 1F/3
 15235 ;;		On exit  : 1D/0
 15236 ;;		Unchanged: 0/0
 15237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15241 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15242 ;;Total ram usage:        0 bytes
 15243 ;; Hardware stack levels used:    1
 15244 ;; Hardware stack levels required when called:    1
 15245 ;; This function calls:
 15246 ;;		_TMR2_StopTimer
 15247 ;; This function is called by:
 15248 ;;		_main
 15249 ;;		_TMR2_ISR
 15250 ;; This function uses a non-reentrant model
 15251 ;;
 15252                           
 15253                           
 15254                           ;psect for function _TMR2_Int_isr
 15255  1C60                     _TMR2_Int_isr:
 15256                           
 15257                           ;main.c: 240:     static uint16_t counter = 0;;main.c: 241:     counter ++;
 15258                           
 15259                           ;incstack = 0
 15260                           ; Regs used in _TMR2_Int_isr: [wreg+status,2+status,0+pclath+cstack]
 15261  1C60  3001               	movlw	1
 15262  1C61  07B2               	addwf	TMR2_Int_isr@counter^(0+384),f
 15263  1C62  3000               	movlw	0
 15264  1C63  3DB3               	addwfc	(TMR2_Int_isr@counter+1)^(0+384),f
 15265                           
 15266                           ;main.c: 243:     if(counter >= required_delay_for_dim_ms_g){
 15267  1C64  0835               	movf	(_required_delay_for_dim_ms_g+1)^(0+384),w
 15268  1C65  0233               	subwf	(TMR2_Int_isr@counter+1)^(0+384),w
 15269  1C66  1D03               	skipz
 15270  1C67  2C6A               	goto	u602_25
 15271  1C68  0834               	movf	_required_delay_for_dim_ms_g^(0+384),w
 15272  1C69  0232               	subwf	TMR2_Int_isr@counter^(0+384),w
 15273  1C6A                     u602_25:
 15274  1C6A  1C03               	skipc
 15275  1C6B  2C71               	goto	i1l863
 15276                           
 15277                           ;main.c: 245:         counter = 0;
 15278  1C6C  01B2               	clrf	TMR2_Int_isr@counter^(0+384)
 15279  1C6D  01B3               	clrf	(TMR2_Int_isr@counter+1)^(0+384)
 15280  1C6E  0022               	movlb	2	; select bank2
 15281  1C6F  168E               	bsf	14,5	;volatile
 15282  1C70  0008               	return
 15283  1C71                     i1l863:	
 15284                           ;main.c: 249:     else if (1 == PORTCbits.RC5){
 15285                           
 15286  1C71  0020               	movlb	0	; select bank0
 15287  1C72  1E8E               	btfss	14,5	;volatile
 15288  1C73  0008               	return
 15289                           
 15290                           ;main.c: 251:         counter = 0;
 15291  1C74  0023               	movlb	3	; select bank3
 15292  1C75  01B2               	clrf	TMR2_Int_isr@counter^(0+384)
 15293  1C76  01B3               	clrf	(TMR2_Int_isr@counter+1)^(0+384)
 15294                           
 15295                           ;main.c: 252:         TMR2_StopTimer();
 15296  1C77  319A  22A8         	fcall	_TMR2_StopTimer
 15297  1C79  0022               	movlb	2	; select bank2
 15298  1C7A  128E               	bcf	14,5	;volatile
 15299  1C7B  0008               	return
 15300  1C7C                     __end_of_TMR2_Int_isr:
 15301                           
 15302                           	psect	text75
 15303  1AA8                     __ptext75:	
 15304 ;; *************** function _TMR2_StopTimer *****************
 15305 ;; Defined at:
 15306 ;;		line 93 in file "mcc_generated_files/tmr2.c"
 15307 ;; Parameters:    Size  Location     Type
 15308 ;;		None
 15309 ;; Auto vars:     Size  Location     Type
 15310 ;;		None
 15311 ;; Return value:  Size  Location     Type
 15312 ;;                  1    wreg      void 
 15313 ;; Registers used:
 15314 ;;		None
 15315 ;; Tracked objects:
 15316 ;;		On entry : 1F/3
 15317 ;;		On exit  : 1F/0
 15318 ;;		Unchanged: 0/0
 15319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15323 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15324 ;;Total ram usage:        0 bytes
 15325 ;; Hardware stack levels used:    1
 15326 ;; This function calls:
 15327 ;;		Nothing
 15328 ;; This function is called by:
 15329 ;;		_TMR2_Int_isr
 15330 ;; This function uses a non-reentrant model
 15331 ;;
 15332                           
 15333                           
 15334                           ;psect for function _TMR2_StopTimer
 15335  1AA8                     _TMR2_StopTimer:
 15336                           
 15337                           ;mcc_generated_files/tmr2.c: 96:     T2CONbits.TMR2ON = 0;
 15338                           
 15339                           ;incstack = 0
 15340                           ; Regs used in _TMR2_StopTimer: []
 15341  1AA8  0020               	movlb	0	; select bank0
 15342  1AA9  111C               	bcf	28,2	;volatile
 15343  1AAA  0008               	return
 15344  1AAB                     __end_of_TMR2_StopTimer:
 15345                           
 15346                           	psect	text76
 15347  1AC6                     __ptext76:	
 15348 ;; *************** function _PIN_MANAGER_IOC *****************
 15349 ;; Defined at:
 15350 ;;		line 115 in file "mcc_generated_files/pin_manager.c"
 15351 ;; Parameters:    Size  Location     Type
 15352 ;;		None
 15353 ;; Auto vars:     Size  Location     Type
 15354 ;;		None
 15355 ;; Return value:  Size  Location     Type
 15356 ;;                  1    wreg      void 
 15357 ;; Registers used:
 15358 ;;		wreg, status,2, status,0, pclath, cstack
 15359 ;; Tracked objects:
 15360 ;;		On entry : 0/0
 15361 ;;		On exit  : 1F/7
 15362 ;;		Unchanged: 0/0
 15363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15367 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15368 ;;Total ram usage:        0 bytes
 15369 ;; Hardware stack levels used:    1
 15370 ;; Hardware stack levels required when called:    3
 15371 ;; This function calls:
 15372 ;;		_IOCAF2_ISR
 15373 ;; This function is called by:
 15374 ;;		_INTERRUPT_InterruptManager
 15375 ;; This function uses a non-reentrant model
 15376 ;;
 15377                           
 15378                           
 15379                           ;psect for function _PIN_MANAGER_IOC
 15380  1AC6                     _PIN_MANAGER_IOC:
 15381                           
 15382                           ;mcc_generated_files/pin_manager.c: 118:     if(IOCAFbits.IOCAF2 == 1)
 15383                           
 15384                           ;incstack = 0
 15385                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
 15386  1AC6  0027               	movlb	7	; select bank7
 15387  1AC7  1D13               	btfss	19,2	;volatile
 15388  1AC8  0008               	return
 15389                           
 15390                           ;mcc_generated_files/pin_manager.c: 119:     {;mcc_generated_files/pin_manager.c: 120:  
      +                                 IOCAF2_ISR();
 15391  1AC9  319B  235F         	fcall	_IOCAF2_ISR
 15392  1ACB  0008               	return
 15393  1ACC                     __end_of_PIN_MANAGER_IOC:
 15394                           
 15395                           	psect	text77
 15396  1B5F                     __ptext77:	
 15397 ;; *************** function _IOCAF2_ISR *****************
 15398 ;; Defined at:
 15399 ;;		line 127 in file "mcc_generated_files/pin_manager.c"
 15400 ;; Parameters:    Size  Location     Type
 15401 ;;		None
 15402 ;; Auto vars:     Size  Location     Type
 15403 ;;		None
 15404 ;; Return value:  Size  Location     Type
 15405 ;;                  1    wreg      void 
 15406 ;; Registers used:
 15407 ;;		wreg, status,2, status,0, pclath, cstack
 15408 ;; Tracked objects:
 15409 ;;		On entry : 1F/7
 15410 ;;		On exit  : 1F/7
 15411 ;;		Unchanged: 0/0
 15412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15416 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15417 ;;Total ram usage:        0 bytes
 15418 ;; Hardware stack levels used:    1
 15419 ;; Hardware stack levels required when called:    2
 15420 ;; This function calls:
 15421 ;;		Absolute function
 15422 ;;		_IOCAF2_DefaultInterruptHandler
 15423 ;;		_Zero_Detection_isr
 15424 ;; This function is called by:
 15425 ;;		_PIN_MANAGER_IOC
 15426 ;; This function uses a non-reentrant model
 15427 ;;
 15428                           
 15429                           
 15430                           ;psect for function _IOCAF2_ISR
 15431  1B5F                     _IOCAF2_ISR:
 15432                           
 15433                           ;mcc_generated_files/pin_manager.c: 132:     if(IOCAF2_InterruptHandler)
 15434                           
 15435                           ;incstack = 0
 15436                           ; Regs used in _IOCAF2_ISR: [wreg+status,2+status,0+pclath+cstack]
 15437  1B5F  0023               	movlb	3	; select bank3
 15438  1B60  086E               	movf	_IOCAF2_InterruptHandler^(0+384),w
 15439  1B61  046F               	iorwf	(_IOCAF2_InterruptHandler+1)^(0+384),w
 15440  1B62  1903               	btfsc	3,2
 15441  1B63  2B69               	goto	i1l5062
 15442                           
 15443                           ;mcc_generated_files/pin_manager.c: 133:     {;mcc_generated_files/pin_manager.c: 134:  
      +                                 IOCAF2_InterruptHandler();
 15444  1B64  086F               	movf	(_IOCAF2_InterruptHandler+1)^(0+384),w
 15445  1B65  008A               	movwf	10
 15446  1B66  086E               	movf	_IOCAF2_InterruptHandler^(0+384),w
 15447  1B67  000A               	callw
 15448  1B68  319B               	pagesel	$
 15449  1B69                     i1l5062:
 15450                           
 15451                           ;mcc_generated_files/pin_manager.c: 136:     IOCAFbits.IOCAF2 = 0;
 15452  1B69  0027               	movlb	7	; select bank7
 15453  1B6A  1113               	bcf	19,2	;volatile
 15454  1B6B  0008               	return
 15455  1B6C                     __end_of_IOCAF2_ISR:
 15456                           
 15457                           	psect	text78
 15458  1AA1                     __ptext78:	
 15459 ;; *************** function _IOCAF2_DefaultInterruptHandler *****************
 15460 ;; Defined at:
 15461 ;;		line 149 in file "mcc_generated_files/pin_manager.c"
 15462 ;; Parameters:    Size  Location     Type
 15463 ;;		None
 15464 ;; Auto vars:     Size  Location     Type
 15465 ;;		None
 15466 ;; Return value:  Size  Location     Type
 15467 ;;                  1    wreg      void 
 15468 ;; Registers used:
 15469 ;;		None
 15470 ;; Tracked objects:
 15471 ;;		On entry : 1F/3
 15472 ;;		On exit  : 1F/3
 15473 ;;		Unchanged: 1E/0
 15474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15478 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15479 ;;Total ram usage:        0 bytes
 15480 ;; Hardware stack levels used:    1
 15481 ;; This function calls:
 15482 ;;		Nothing
 15483 ;; This function is called by:
 15484 ;;		_PIN_MANAGER_Initialize
 15485 ;;		_IOCAF2_ISR
 15486 ;; This function uses a non-reentrant model
 15487 ;;
 15488                           
 15489                           
 15490                           ;psect for function _IOCAF2_DefaultInterruptHandler
 15491  1AA1                     _IOCAF2_DefaultInterruptHandler:
 15492                           
 15493                           ;incstack = 0
 15494                           ; Regs used in _IOCAF2_DefaultInterruptHandler: []
 15495  1AA1  0008               	return
 15496  1AA2                     __end_of_IOCAF2_DefaultInterruptHandler:
 15497                           
 15498                           	psect	text79
 15499  1AA5                     __ptext79:	
 15500 ;; *************** function _Zero_Detection_isr *****************
 15501 ;; Defined at:
 15502 ;;		line 230 in file "main.c"
 15503 ;; Parameters:    Size  Location     Type
 15504 ;;		None
 15505 ;; Auto vars:     Size  Location     Type
 15506 ;;		None
 15507 ;; Return value:  Size  Location     Type
 15508 ;;                  1    wreg      void 
 15509 ;; Registers used:
 15510 ;;		status,2, status,0, pclath, cstack
 15511 ;; Tracked objects:
 15512 ;;		On entry : 1F/3
 15513 ;;		On exit  : 1F/0
 15514 ;;		Unchanged: 0/0
 15515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15519 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15520 ;;Total ram usage:        0 bytes
 15521 ;; Hardware stack levels used:    1
 15522 ;; Hardware stack levels required when called:    1
 15523 ;; This function calls:
 15524 ;;		_TMR2_StartTimer
 15525 ;; This function is called by:
 15526 ;;		_main
 15527 ;;		_IOCAF2_ISR
 15528 ;; This function uses a non-reentrant model
 15529 ;;
 15530                           
 15531                           
 15532                           ;psect for function _Zero_Detection_isr
 15533  1AA5                     _Zero_Detection_isr:
 15534                           
 15535                           ;main.c: 233:     TMR2_StartTimer();
 15536                           
 15537                           ;incstack = 0
 15538                           ; Regs used in _Zero_Detection_isr: [status,2+status,0+pclath+cstack]
 15539  1AA5  319A  22A2         	fcall	_TMR2_StartTimer
 15540  1AA7  0008               	return
 15541  1AA8                     __end_of_Zero_Detection_isr:
 15542                           
 15543                           	psect	text80
 15544  1AA2                     __ptext80:	
 15545 ;; *************** function _TMR2_StartTimer *****************
 15546 ;; Defined at:
 15547 ;;		line 87 in file "mcc_generated_files/tmr2.c"
 15548 ;; Parameters:    Size  Location     Type
 15549 ;;		None
 15550 ;; Auto vars:     Size  Location     Type
 15551 ;;		None
 15552 ;; Return value:  Size  Location     Type
 15553 ;;                  1    wreg      void 
 15554 ;; Registers used:
 15555 ;;		None
 15556 ;; Tracked objects:
 15557 ;;		On entry : 1F/3
 15558 ;;		On exit  : 1F/0
 15559 ;;		Unchanged: 0/0
 15560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15564 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15565 ;;Total ram usage:        0 bytes
 15566 ;; Hardware stack levels used:    1
 15567 ;; This function calls:
 15568 ;;		Nothing
 15569 ;; This function is called by:
 15570 ;;		_Zero_Detection_isr
 15571 ;; This function uses a non-reentrant model
 15572 ;;
 15573                           
 15574                           
 15575                           ;psect for function _TMR2_StartTimer
 15576  1AA2                     _TMR2_StartTimer:
 15577                           
 15578                           ;mcc_generated_files/tmr2.c: 90:     T2CONbits.TMR2ON = 1;
 15579                           
 15580                           ;incstack = 0
 15581                           ; Regs used in _TMR2_StartTimer: []
 15582  1AA2  0020               	movlb	0	; select bank0
 15583  1AA3  151C               	bsf	28,2	;volatile
 15584  1AA4  0008               	return
 15585  1AA5                     __end_of_TMR2_StartTimer:
 15586  007E                     btemp	set	126	;btemp
 15587  007E                     int$flags	set	126
 15588  007E                     wtemp0	set	126
 15589                           
 15590                           	psect	idloc
 15591                           
 15592                           ;Config register IDLOC0 @ 0x8000
 15593                           ;	unspecified, using default values
 15594  8000                     	org	32768
 15595  8000  3FFF               	dw	16383
 15596                           
 15597                           ;Config register IDLOC1 @ 0x8001
 15598                           ;	unspecified, using default values
 15599  8001                     	org	32769
 15600  8001  3FFF               	dw	16383
 15601                           
 15602                           ;Config register IDLOC2 @ 0x8002
 15603                           ;	unspecified, using default values
 15604  8002                     	org	32770
 15605  8002  3FFF               	dw	16383
 15606                           
 15607                           ;Config register IDLOC3 @ 0x8003
 15608                           ;	unspecified, using default values
 15609  8003                     	org	32771
 15610  8003  3FFF               	dw	16383
 15611                           
 15612                           	psect	config
 15613                           
 15614                           ;Config register CONFIG1 @ 0x8007
 15615                           ;	Oscillator Selection
 15616                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
 15617                           ;	Watchdog Timer Enable
 15618                           ;	WDTE = OFF, WDT disabled
 15619                           ;	Power-up Timer Enable
 15620                           ;	PWRTE = OFF, PWRT disabled
 15621                           ;	MCLR Pin Function Select
 15622                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
 15623                           ;	Flash Program Memory Code Protection
 15624                           ;	CP = OFF, Program memory code protection is disabled
 15625                           ;	Data Memory Code Protection
 15626                           ;	CPD = OFF, Data memory code protection is disabled
 15627                           ;	Brown-out Reset Enable
 15628                           ;	BOREN = NSLEEP, Brown-out Reset enabled while running and disabled in Sleep
 15629                           ;	Clock Out Enable
 15630                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
 15631                           ;	Internal/External Switchover
 15632                           ;	IESO = ON, Internal/External Switchover mode is enabled
 15633                           ;	Fail-Safe Clock Monitor Enable
 15634                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
 15635  8007                     	org	32775
 15636  8007  3DE4               	dw	15844
 15637                           
 15638                           ;Config register CONFIG2 @ 0x8008
 15639                           ;	Flash Memory Self-Write Protection
 15640                           ;	WRT = OFF, Write protection off
 15641                           ;	PLL Enable
 15642                           ;	PLLEN = OFF, 4x PLL disabled
 15643                           ;	Stack Overflow/Underflow Reset Enable
 15644                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
 15645                           ;	Brown-out Reset Voltage Selection
 15646                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
 15647                           ;	Low-Voltage Programming Enable
 15648                           ;	LVP = ON, Low-voltage programming enabled
 15649  8008                     	org	32776
 15650  8008  3EFF               	dw	16127

Data Sizes:
    Strings     31
    Constant    40
    Data        25
    BSS         151
    Persistent  42
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     80      80
    BANK1            80     80      80
    BANK2            80     80      80
    BANK3            80     31      80
    BANK4            80      0      57
    BANK5            80      0      80
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Button_Service$2712$0	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK4[16]), 

    nanf@s	PTR const unsigned char  size(2) Largest target is 1
		 -> STR_15(CODE[1]), 

    Button_StateMachine$0	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK4[16]), 

    ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    strncmp@_r	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_12(CODE[3]), 

    strncmp@r	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_12(CODE[3]), 

    strncmp@_l	PTR const unsigned char  size(1) Largest target is 3
		 -> vfpfcnvrt@ct(BANK2[3]), 

    strncmp@l	PTR const unsigned char  size(1) Largest target is 3
		 -> vfpfcnvrt@ct(BANK2[3]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 80
		 -> dbuf(BANK5[80]), Buff_g(BANK4[20]), 

    strlen@a	PTR const unsigned char  size(1) Largest target is 80
		 -> dbuf(BANK5[80]), Buff_g(BANK4[20]), 

    strcpy@dest	PTR unsigned char  size(1) Largest target is 80
		 -> dbuf(BANK5[80]), 

    strcpy@d	PTR unsigned char  size(1) Largest target is 80
		 -> dbuf(BANK5[80]), 

    strcpy@src	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_7(CODE[4]), STR_6(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), 
		 -> dbuf(BANK5[80]), 

    strcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_7(CODE[4]), STR_6(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), 
		 -> dbuf(BANK5[80]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 80
		 -> dbuf(BANK5[80]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK3[5]), 

    fputc@fp.buffer	PTR unsigned char  size(1) Largest target is 20
		 -> Buff_g(BANK4[20]), 

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK3[5]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK3[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK3[5]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_1(CODE[12]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 12
		 -> STR_1(CODE[12]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK3[5]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK3[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK2[2]), 

    efgtoa@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK3[5]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 80
		 -> dbuf(BANK5[80]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK3[5]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 80
		 -> dbuf(BANK5[80]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_1(CODE[12]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 20
		 -> Buff_g(BANK4[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK3[2]), 

    S2094_IO_FILE$buffer	PTR unsigned char  size(1) Largest target is 20
		 -> Buff_g(BANK4[20]), 

    f.buffer	PTR unsigned char  size(1) Largest target is 20
		 -> Buff_g(BANK4[20]), 

    memcpy@d1	PTR void  size(1) Largest target is 16
		 -> mtouch_button(BANK4[16]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 16
		 -> mtouch_button(BANK4[16]), 

    memcpy@s1	PTR const void  size(2) Largest target is 16
		 -> mtouch_button_init(CODE[16]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 16
		 -> mtouch_button_init(CODE[16]), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_DefaultInterruptHandler(), TMR2_Int_isr(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_DefaultInterruptHandler(), TMR2_Int_isr(), Absolute function(), 

    TX_Whole_String@input_string	PTR unsigned char  size(1) Largest target is 20
		 -> Buff_g(BANK4[20]), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), Absolute function(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), Absolute function(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), Absolute function(), 

    IOCAF2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Zero_Detection_isr(), IOCAF2_DefaultInterruptHandler(), 

    IOCAF2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Zero_Detection_isr(), Absolute function(), IOCAF2_DefaultInterruptHandler(), 

    sp__memcpy	PTR void  size(1) Largest target is 16
		 -> mtouch_button(BANK4[16]), 

    MTOUCH_Button_Initialize@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK4[16]), 

    Button_StateMachine	PTR FTN(PTR struct .,)void [3] size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    callback_notPressed	PTR FTN(enum E2818,)void  size(2) Largest target is 1
		 -> Button_DefaultCallback(), 

    callback_pressed	PTR FTN(enum E2818,)void  size(2) Largest target is 1
		 -> Button_DefaultCallback(), 

    Sensor_setSampled@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_setSampled@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_Sampled_Reset@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_Sampled_Reset@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_Sampled_Reset@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK4[9]), 

    MTOUCH_Sensor_Sampled_ResetAll@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK4[9]), 

    Sensor_setInactive@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_setInactive@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_setActive@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_setActive@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_isEnabled@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_isEnabled@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_setScanFunction@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_setScanFunction@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_RawSample_Update@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_RawSample_Update@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_Acq_ExecutePacket@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_Acq_ExecutePacket@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_Acquisition@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_Acquisition@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    S49$scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    mtouch_sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    S49$scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    mtouch_sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_scanB	PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_scanA	PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    callback_sampled	PTR FTN(enum E2660,)void  size(2) Largest target is 1
		 -> Sensor_DefaultCallback(), 


Critical Paths under _main in COMMON

    _vfpfcnvrt->_tolower
    _efgtoa->_tolower
    _tolower->_isupper
    _pad->_fputs
    _fputs->_fputc
    _TX_Whole_String->_strlen
    _TX_Command->_EUSART_Write
    _TX_Command->_EUSART_is_tx_ready
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF2_SetInterruptHandler
    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Sensor_Sampled_ResetAll->_Sensor_Sampled_Reset
    _MTOUCH_Sensor_InitializeAll->_MTOUCH_Sensor_Initialize
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Enable
    _MTOUCH_Sensor_Enable->___bmul
    _MTOUCH_Button_InitializeAll->_memcpy
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _Read_ADC_Num->_ADC_GetConversionResult
    _Init_Function->_StartStop_AlarmLED
    _Init_Function->_StartStop_Buzzer
    _Init_Function->_StartStop_Fan
    _ChangeADCtoVoltage->___xxtofl
    ___flmul->___xxtofl
    ___fldiv->___xxtofl

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Measure_R_PT100_2Wire
    _vfprintf->_vfpfcnvrt
    _efgtoa->___fltol
    _pad->_fputs
    _floorf->___fldiv
    _Measure_Temp_PT100_2Wire->___fldiv
    _sqrtf->___fladd
    ___flge->___flmul
    _Measure_R_PT100_2Wire->___fldiv
    _ChangeADCtoVoltage->___fldiv
    _CalcRequiredDelayForTrigTRIAC->___fltol
    ___fltol->___fldiv
    ___flsub->___fladd
    ___fladd->___flmul
    ___fldiv->_sqrtf

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _sprintf->_vfprintf
    _vfpfcnvrt->_efgtoa
    _efgtoa->_floorf
    _floorf->___fldiv
    _Measure_Temp_PT100_2Wire->___fldiv
    _Measure_R_PT100_2Wire->___fldiv
    _ChangeADCtoVoltage->___fldiv
    _CalcRequiredDelayForTrigTRIAC->___fltol
    ___fltol->___fldiv
    ___fldiv->_sqrtf

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_efgtoa

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_sprintf

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                16    16      0   84036
                                             15 BANK3     16    16      0
                  _ADC_SelectChannel
                _ADC_StartConversion
      _CalcRequiredDelayForTrigTRIAC
                 _ChangeADCtoVoltage
         _IOCAF2_SetInterruptHandler
                      _Init_Function
              _Measure_R_PT100_2Wire
           _Measure_Temp_PT100_2Wire
                       _Read_ADC_Num
                  _SYSTEM_Initialize
                 _StartStop_AlarmLED
           _TMR2_SetInterruptHandler
                    _TX_Whole_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6   30255
                                             79 BANK2      1     1      0
                                              0 BANK3     15     9      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     5      3   29943
                                             77 BANK1      3     0      3
                                             74 BANK2      5     5      0
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           43    41      2   29625
                                             78 BANK0      2     0      2
                                             57 BANK2     17    17      0
                             _efgtoa
                              _fputc
                            _isupper
                            _strncmp
                            _tolower
 ---------------------------------------------------------------------------------
 (4) _strncmp                                              9     5      4     410
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (4) _efgtoa                                              66    61      5   26023
                                             68 BANK1      9     4      5
                                              0 BANK2     57    57      0
                            ___awdiv
                            ___awmod
                            ___fladd
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                      ___fpclassifyf
                             _floorf
                            _isupper
                                _pad
                             _strcpy
                            _tolower
 ---------------------------------------------------------------------------------
 (4) _tolower                                              8     6      2     944
                                              6 COMMON     8     6      2
                            _isupper
 ---------------------------------------------------------------------------------
 (5) _isupper                                              6     4      2     465
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (5) _strcpy                                               8     6      2     641
                                              0 COMMON     8     6      2
 ---------------------------------------------------------------------------------
 (5) _pad                                                  9     6      3    2940
                                             12 COMMON     1     1      0
                                              4 BANK0      8     5      3
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _fputs                                                8     7      1    1149
                                              8 COMMON     4     3      1
                                              0 BANK0      4     4      0
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     834
                                              0 COMMON     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _floorf                                              20    16      4     490
                                             48 BANK1     20    16      4
                            ___fldiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fpclassifyf                                       16    12      4     287
                                              0 COMMON    10     6      4
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (5) ___flneg                                              4     0      4     121
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (5) ___fleq                                              12     4      8     394
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              7     3      4     448
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              9     5      4     452
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (1) _TX_Whole_String                                      6     6      0     370
                                              5 COMMON     6     6      0
                         _TX_Command
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               5     3      2     156
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (2) _TX_Command                                           1     1      0      68
                                              1 COMMON     1     1      0
                       _EUSART_Write
                 _EUSART_is_tx_ready
 ---------------------------------------------------------------------------------
 (3) _EUSART_is_tx_ready                                   1     1      0      24
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _EUSART_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    2121
                     _ADC_Initialize
                  _EUSART_Initialize
                  _MTOUCH_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     174
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR2_SetInterruptHandler                             2     0      2     174
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     174
         _IOCAF2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCAF2_SetInterruptHandler                           2     0      2     174
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Initialize                                    0     0      0    1479
        _MTOUCH_Button_InitializeAll
        _MTOUCH_Sensor_InitializeAll
     _MTOUCH_Sensor_Sampled_ResetAll
      _MTOUCH_Sensor_Scan_Initialize
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Scan_Initialize                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Sampled_ResetAll                       2     2      0     156
                                              1 COMMON     2     2      0
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_InitializeAll                          2     2      0     794
                                              8 COMMON     2     2      0
           _MTOUCH_Sensor_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_Initialize                             2     2      0     726
                                              6 COMMON     2     2      0
               _MTOUCH_Sensor_Enable
               _Sensor_Sampled_Reset
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Sensor_Sampled_Reset                                 1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Enable                                 2     2      0     319
                                              4 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     275
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_InitializeAll                          2     2      0     529
                                             10 COMMON     2     2      0
           _MTOUCH_Button_Initialize
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              10     6      4     328
                                              0 COMMON    10     6      4
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_Initialize                             4     4      0     133
                                              0 COMMON     4     4      0
            _MTOUCH_Sensor_Calibrate
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Calibrate                              1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     294
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Read_ADC_Num                                         4     2      2      23
                                              2 COMMON     4     2      2
            _ADC_GetConversionResult
               _ADC_IsConversionDone
 ---------------------------------------------------------------------------------
 (2) _ADC_IsConversionDone                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversionResult                              2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Measure_Temp_PT100_2Wire                            20    16      4   20339
                                             48 BANK1     20    16      4
                            ___fladd
                            ___fldiv
                            ___flmul
                              _sqrtf
 ---------------------------------------------------------------------------------
 (2) _sqrtf                                               52    48      4    9866
                                             46 BANK0     12     8      4
                                              0 BANK1     40    40      0
                            ___fladd
                             ___flge
                            ___flmul
                               _nanf
 ---------------------------------------------------------------------------------
 (3) _nanf                                                 8     4      4      99
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (5) ___flge                                              12     4      8    1246
                                             26 BANK0     12     4      8
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Measure_R_PT100_2Wire                                8     4      4   11080
                                             76 BANK0      4     4      0
                                             48 BANK1      4     0      4
                            ___fldiv
                            ___flmul
                            ___flsub
 ---------------------------------------------------------------------------------
 (1) _Init_Function                                        0     0      0      66
                 _StartStop_AlarmLED
                   _StartStop_Buzzer
                      _StartStop_Fan
 ---------------------------------------------------------------------------------
 (2) _StartStop_Fan                                        1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _StartStop_Buzzer                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _StartStop_AlarmLED                                   1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ChangeADCtoVoltage                                   4     0      4    7694
                                             48 BANK1      4     0      4
                            ___fldiv
                            ___flmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4     461
                                              0 COMMON    14    10      4
 ---------------------------------------------------------------------------------
 (1) _CalcRequiredDelayForTrigTRIAC                       10     6      4   11600
                                             57 BANK1     10     6      4
                            ___fldiv
                            ___flmul
                            ___flsub
                            ___fltol
 ---------------------------------------------------------------------------------
 (5) ___fltol                                             11     7      4     520
                                             76 BANK0      2     2      0
                                             48 BANK1      9     5      4
                            ___fldiv (ARG)
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flsub                                              8     0      8    3801
                                             46 BANK0      8     0      8
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___fladd                                             20    12      8    3148
                                             26 BANK0     20    12      8
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flmul                                             26    18      8    4368
                                              0 BANK0     26    18      8
                          __Umul8_16
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (6) __Umul8_16                                            9     7      2     799
                                              0 COMMON     9     7      2
 ---------------------------------------------------------------------------------
 (5) ___fldiv                                             26    18      8    2767
                                             58 BANK0     18    18      0
                                             40 BANK1      8     0      8
                            ___fladd (ARG)
                            ___flmul (ARG)
                            ___flsub (ARG)
                           ___xxtofl (ARG)
                              _sqrtf (ARG)
 ---------------------------------------------------------------------------------
 (1) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_SelectChannel                                    2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                           0     0      0       0
                    _PIN_MANAGER_IOC
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR2_ISR                                            0     0      0       0
                   Absolute function *
       _TMR2_DefaultInterruptHandler *
                       _TMR2_Int_isr *
 ---------------------------------------------------------------------------------
 (11) _TMR2_Int_isr                                        0     0      0       0
                     _TMR2_StopTimer
 ---------------------------------------------------------------------------------
 (12) _TMR2_StopTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _TMR2_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PIN_MANAGER_IOC                                     0     0      0       0
                         _IOCAF2_ISR
 ---------------------------------------------------------------------------------
 (11) _IOCAF2_ISR                                          0     0      0       0
                   Absolute function *
     _IOCAF2_DefaultInterruptHandler *
                 _Zero_Detection_isr *
 ---------------------------------------------------------------------------------
 (12) _Zero_Detection_isr                                  0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (13) _TMR2_StartTimer                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _IOCAF2_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_SelectChannel
   _ADC_StartConversion
   _CalcRequiredDelayForTrigTRIAC
     ___fldiv
       ___fladd (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
       ___flsub (ARG)
         ___fladd
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
       ___xxtofl (ARG)
       _sqrtf (ARG)
         ___fladd
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         ___flge
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
         _nanf
     ___flmul
       __Umul8_16
       ___xxtofl (ARG)
     ___flsub
       ___fladd
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
     ___fltol
       ___fldiv (ARG)
         ___fladd (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
         ___flsub (ARG)
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         ___xxtofl (ARG)
         _sqrtf (ARG)
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
           ___flge
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
           ___flmul
             __Umul8_16
             ___xxtofl (ARG)
           _nanf
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
   _ChangeADCtoVoltage
     ___fldiv
       ___fladd (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
       ___flsub (ARG)
         ___fladd
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
       ___xxtofl (ARG)
       _sqrtf (ARG)
         ___fladd
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         ___flge
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
         _nanf
     ___flmul
       __Umul8_16
       ___xxtofl (ARG)
     ___xxtofl
   _IOCAF2_SetInterruptHandler
   _Init_Function
     _StartStop_AlarmLED
     _StartStop_Buzzer
     _StartStop_Fan
   _Measure_R_PT100_2Wire
     ___fldiv
       ___fladd (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
       ___flsub (ARG)
         ___fladd
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
       ___xxtofl (ARG)
       _sqrtf (ARG)
         ___fladd
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         ___flge
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
         _nanf
     ___flmul
       __Umul8_16
       ___xxtofl (ARG)
     ___flsub
       ___fladd
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
   _Measure_Temp_PT100_2Wire
     ___fladd
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
     ___fldiv
       ___fladd (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
       ___flsub (ARG)
         ___fladd
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
       ___xxtofl (ARG)
       _sqrtf (ARG)
         ___fladd
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         ___flge
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
         _nanf
     ___flmul
       __Umul8_16
       ___xxtofl (ARG)
     _sqrtf
       ___fladd
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
       ___flge
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
       ___flmul
         __Umul8_16
         ___xxtofl (ARG)
       _nanf
   _Read_ADC_Num
     _ADC_GetConversionResult
     _ADC_IsConversionDone
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
           _MTOUCH_Sensor_Calibrate
         _memcpy
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Enable
             ___bmul
           _Sensor_Sampled_Reset
           ___bmul
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCAF2_SetInterruptHandler
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
     _WDT_Initialize
   _StartStop_AlarmLED
   _TMR2_SetInterruptHandler
   _TX_Whole_String
     _TX_Command
       _EUSART_Write
       _EUSART_is_tx_ready
     _strlen
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _efgtoa
           ___awdiv
           ___awmod
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
           ___fldiv
             ___fladd (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___xxtofl (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___xxtofl (ARG)
             ___xxtofl (ARG)
             _sqrtf (ARG)
               ___fladd
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___flge
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___flmul
                 __Umul8_16
                 ___xxtofl (ARG)
               _nanf
           ___fleq
           ___flge
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
           ___flmul
             __Umul8_16
             ___xxtofl (ARG)
           ___flneg
           ___flsub
             ___fladd
               ___flmul (ARG)
                 __Umul8_16
                 ___xxtofl (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
           ___fltol
             ___fldiv (ARG)
               ___fladd (ARG)
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___xxtofl (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___xxtofl (ARG)
               _sqrtf (ARG)
                 ___fladd
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                 ___flge
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                 ___flmul
                   __Umul8_16
                   ___xxtofl (ARG)
                 _nanf
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
           ___fpclassifyf
           _floorf
             ___fldiv (ARG)
               ___fladd (ARG)
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___xxtofl (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___xxtofl (ARG)
               _sqrtf (ARG)
                 ___fladd
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                 ___flge
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                 ___flmul
                   __Umul8_16
                   ___xxtofl (ARG)
                 _nanf
           _isupper
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
           _strcpy
           _tolower
             _isupper
         _fputc
           _putch
         _isupper
         _strncmp
         _tolower
           _isupper

 _INTERRUPT_InterruptManager (ROOT)
   _PIN_MANAGER_IOC
     _IOCAF2_ISR
       Absolute function(Fake) *
       _IOCAF2_DefaultInterruptHandler *
       _Zero_Detection_isr *
         _TMR2_StartTimer
   _TMR2_ISR
     Absolute function(Fake) *
     _TMR2_DefaultInterruptHandler *
     _TMR2_Int_isr *
       _TMR2_StopTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     50      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50     1F      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      39      13       71.2%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      50      15      100.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     1D7      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     1D7      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Wed Jul 19 20:07:24 2023

                  _required_delay_for_dim_ms_g 01B4               __end_of_TMR2_SetInterruptHandler 1AE4  
                                 ___fldiv@aexp 006B                                   ___fldiv@bexp 006A  
                                 ___fldiv@sign 0063                                 ___bmul@product 0072  
                                 ___awdiv@sign 0076                            __Umul8_16@word_mpld 0076  
                        _Measure_R_PT100_2Wire 109D                                            l656 1B17  
                                          l877 1B2E                                            l886 1B0C  
                                          l895 1B04                                            _GIE 005F  
                                          _PR2 001B                                            _pad 1F0E  
               ?_EUSART_SetFramingErrorHandler 0070                                   ___awmod@sign 0076  
                              _TMR2_Initialize 1BA2                                            wreg 0009  
           __end_of_IOCAF2_SetInterruptHandler 1ADE                     _IOCAF2_SetInterruptHandler 1AD8  
             ??_MTOUCH_Sensor_Sampled_ResetAll 0071                ?_MTOUCH_Sensor_Sampled_ResetAll 0070  
                                 ___flmul@aexp 002E                                   ___flmul@bexp 0033  
                                 ___flmul@sign 002D                                   ___flmul@temp 0038  
                                 ___flmul@prod 0034              __size_of_MTOUCH_Sensor_Initialize 0011  
                    ?_MTOUCH_Sensor_Initialize 0070                             _MTOUCH_CVD_ScanA_0 0000  
                           _MTOUCH_CVD_ScanB_0 0000                                   ___fltol@exp1 006D  
                                ?_Read_ADC_Num 0072                                           l1303 107E  
                                         l1403 095F                                           l1511 0CFF  
                                         l1407 09F2                                           l1271 1E94  
                                         l1424 0A75                                           l4000 07A2  
                                         l1280 0788                                           l1272 1EAE  
                                         l1409 09D5                                           l1283 07D6  
                                         l4004 07BC                                           l1445 0AEC  
                                         l1437 0AD4                                           l4102 14A2  
                                         l1518 1CA9                                           l1543 11A7  
                                         l1615 1F26                                           l1480 15F0  
                                         l4112 14CC                                           l4024 1037  
                                         l1481 160A                                           l1810 0F03  
                                         l1618 1F46                                           l1483 1619  
                                         l1459 14AB                                           l1803 0E1F  
                                         l4300 0C67                                           l4220 0B0F  
                                         l4044 106A                                           l4028 1041  
                                         l1556 11F1                                           l1557 11FB  
                                         l1549 11DD                                           l1653 0287  
                                         l4118 14DA                                           l4302 0C7E  
                                         l4222 0B17                                           l4054 108D  
                                         l4046 107A                                           l5102 0DB0  
                                         l1654 0274                                           l1807 0E65  
                                         l4144 1559                                           l4136 1528  
                                         l4072 1460                                           l4312 0C97  
                                         l4240 0B3A                                           l5200 1216  
                                         l5112 0DE5                                           l1664 02C5  
                                         l4170 1599                                           l4162 1564  
                                         l4138 1530                                           l4146 150D  
                                         l4082 1474                                           l4322 0CC0  
                                         l4218 0B0D                                           l5114 0DF7  
                                         l3602 1ECB                                           l5210 0817  
                                         l1755 090A                                           l4164 1580  
                                         l4148 155E                                           l4092 148E  
                                         l4084 147D                                           l4332 0CEC  
                                         l4308 0C95                                           l4236 0B30  
                                         l5140 0F6D                                           l1684 0509  
                                         l5212 0838                                           l4174 159C  
                                         l4158 1573                                           l4078 1470  
                                         l4326 0CD5                                           l4238 0B32  
                                         l3702 0957                                           l5142 0F90  
                                         l5126 0E91                                           l4422 08C6  
                                         l3606 1EF1                                           l1679 04F5  
                                         l4184 15D6                                           l4248 0B48  
                                         l3800 0A87                                           l5128 0F13  
                                         l3640 1C34                                           l4424 08D7  
                                         l4352 1F24                                           l4098 149E  
                                         l5090 0D6E                                           l3642 1C40  
                                         l4362 1F52                                           l4610 0292  
                                         l4602 0281                                           l3708 0969  
                                         l5172 11B6                                           l5092 0D7E  
                                         l4460 1D6F                                           l3652 1BDC  
                                         l4380 1162                                           l4428 08ED  
                                         l4348 1F1C                                           l4604 028A  
                                         l4524 00A7                                           l4516 0095  
                                         l4198 1614                                           l3822 0AA6  
                                         l3814 0A9B                                           l5166 119F  
                                         l4358 1F28                                           ?_pad 0024  
                                         l3808 0A94                                           l3816 0A9D  
                                         l3680 0937                                           l5176 11BA  
                                         l5248 1BC3                                           l3648 1BD6  
                                         l4376 115D                                           l4392 1CC1  
                                         l4712 0599                                           l4720 05CD  
                                         l4640 02EE                                           l4528 00AE  
                                         l4536 00C1                                           l5336 12F7  
                                         l3826 0AA8                                           l3746 09DD  
                                         l3738 09A5                                           l3674 092C  
                                         l5186 11EF                                           l5178 11CA  
                                         l3914 1F73                                           l4386 1185  
                                         l4802 0754                                           l4714 05B7  
                                         l4650 0300                                           l4626 02D2  
                                         l4618 02BF                                           l4546 00F4  
                                         l4554 011B                                           l3844 0AE4  
                                         l3772 0A12                                           l3764 0A00  
                                         l3748 09DF                                           l3756 09ED  
                                         l5188 11E2                                           l3940 1FAA  
                                         l3932 1F99                                           l3924 1F7B  
                                         l3908 1F68                                           l4740 0683  
                                         l4732 066A                                           l4652 03E4  
                                         l4636 02E6                                           l4628 02D6  
                                         l4580 0196                                           l4564 014E  
                                         l4572 0175                                           l4820 1FEA  
                                         l3774 0A14                                           l3782 0A23  
                                         l3678 092F                                           l3926 1F87  
                                         l4662 0455                                           l4590 022B  
                                         l4822 1FC5                                           l3848 0AE8  
                                         l3792 0A6D                                           l5296 1D9B  
                                         l3936 1FA2                                           l3952 1E3F  
                                         l4680 0510                                           l4728 064C  
                                         l4656 0436                                           l4584 01C4  
                                         l4592 0250                                           l4920 16A9  
                                         l3858 1CA3                                           l3698 0954  
                                         l3970 1E64                                           l3874 1D1C  
                                         l4770 06E3                                           l4586 01FC  
                                         l3964 1E4C                                           l3956 1E46  
                                         l4756 06A5                                           l4692 057A  
                                         l4828 1FF1                                           l4932 16FD  
                                         l4838 1B87                                           l3966 1E58  
                                         l3974 1E6D                                           l3990 1EC0  
                                         l4758 06AD                                           l4678 0507  
                                         l4942 175F                                           l4950 179F  
                                         l4768 06A9                                           l4960 17CC  
                                         l4866 1C54                                           l3978 1E75  
                                         l4794 0735                                           l4778 06FB  
                                         l4956 17C6                                           l4966 17D9  
                                         l4888 1B3A                                           STR_1 1810  
                                         STR_2 1834                                           STR_3 183C  
                                         STR_6 1838                                           STR_7 1840  
                                         _LATA 010C                                           _LATB 010D  
                                         _LATC 010E                                           u3300 09C4  
                                         u3310 09C5                                           u4035 104B  
                                         u3155 1EEF                                           u5100 00E3  
                                         u4215 1515                                           u3423 0A35  
                                         u3415 0A18                                           u4305 1574  
                                         u4225 151C                                           u3345 09E3  
                                         u4065 106B                                           u5130 013C  
                                         u5140 013D                                           u4245 1529  
                                         u6005 0FA2                                           u4255 1546  
                                         u3295 09B9                                           u4095 1082  
                                         u6015 0FCB                                           u5215 027F  
                                         u4505 0BE8                                           u3465 0A88  
                                         u5090 00E2                                           u4515 0C3A  
                                         u6115 11E9                                           u4285 1568  
                                         u3645 1CAA                                           u4525 0C56  
                                         u3565 0ABF                                           u3805 1F92  
                                         u5325 030E                                           u5245 02A1  
                                         u3670 07F8                                           u4375 15BC  
                                         u4535 0C6A                                           u3815 1F9A  
                                         u5255 02BB                                           u3680 07F9  
                                         u4800 1D08                                           u4385 15E0  
                                         u4625 0CAE                                           u6225 1DA4  
                                         u3905 1E65                                           u4705 1133  
                                         u4395 15FA                                           u4635 0CC9  
                                         u4555 0C73                                           u6155 1203  
                                         u6075 11C3                                           u4645 0CDF  
                                         u4725 114C                                           u5550 0725  
                                         u4495 0BBB                                           u6095 11D7  
                                         u3775 1F7E                                           u5535 06EE  
                                         u4760 117D                                           u5560 0726  
                                         u4825 0862                                           u5465 065A  
                                         u4770 117E                                           u4850 0890  
                                         u3795 1F88                                           u3875 1E4F  
                                         u3955 1EBC                                           u4755 116F  
                                         u4915 08F6                                           u4835 087D  
                                         u5475 0668                                           u4685 1F32  
                                         u4790 1D07                                           u5750 1740  
                                         u4935 1DC1                                           u3895 1E5E  
                                         u4855 088C                                           u6287 1377  
                                         u5760 1741                                           u5905 0DE8  
                                         u6297 1DB4                                           u4875 08B5  
                                         u5943 0ECF                                           u5935 0E68  
                                         u4895 08E0                                           u5955 0F0C  
                                         u5885 0DC2                                           _TMR2 001A  
                                         _WPUA 020C                                           _WPUB 020D  
                                         _WPUC 020E                                           _dbuf 02A0  
                                         _main 12C6                                           _nanf 1BB2  
         __size_of_MTOUCH_Button_InitializeAll 0019                                           _prec 01AE  
                                         _nout 01AA                                           pad@i 0027  
                                         pad@p 0025                                           fsr0h 0005  
                                         _tiny 181C                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           fsr1l 0006  
                                         pad@w 0029                  TX_Whole_String@size_of_string 0077  
         __size_of_MTOUCH_Sensor_InitializeAll 000D                                           btemp 007E  
                                ___fpclassifyf 1112                                           start 0019  
                              ___fldiv@new_exp 0064                                   _tolower$2366 007C  
                            ___bmul@multiplier 0073                                __end_of_R_const 1834  
                                        ??_pad 007C                                     _TX_Command 1B3C  
                                _Init_Function 1B79                                _TX_Whole_String 1D91  
                                ?_EUSART_Write 0070                 __size_of_OSCILLATOR_Initialize 0007  
                          __size_of_IOCAF2_ISR 000D                  __end_of_OSCILLATOR_Initialize 1AFE  
                                ___fltol@sign1 006C                                __end_of___fladd 0AF4  
                                        ?_main 0070                                          ?_nanf 0070  
                              __end_of___fldiv 1620                                __end_of___awdiv 1FAF  
                              __end_of___flneg 1B27                                          STR_10 1844  
                                        STR_12 1844                                          STR_15 181B  
                              __end_of___awmod 1E7A                                __end_of___flmul 0D0C  
                              __end_of___flsub 1C99                                __end_of___fltol 109D  
                              ___awdiv@divisor 0070                                          _T2CON 001C  
                                        i1l730 000D                                          i1l736 0017  
                                        i1l863 1C71                                ___awdiv@counter 0075  
                   ??_Measure_Temp_PT100_2Wire 007E                                          _RCSTA 019D  
                                 vfpfcnvrt@fmt 006E                                          _TRISA 008C  
                                        _TRISB 008D                                          _TRISC 008E  
                                        _TXREG 019A                                          _TXSTA 019E  
              ??_CalcRequiredDelayForTrigTRIAC 007E               __size_of_ADC_GetConversionResult 0005  
                             __end_of_TMR2_ISR 1B53                        __end_of_PIN_MANAGER_IOC 1ACC  
                                        _flags 01B0                                 ??_Read_ADC_Num 0074  
        __end_of_MTOUCH_Sensor_Scan_Initialize 1AC6         __size_of_MTOUCH_Sensor_Scan_Initialize 0005  
                _MTOUCH_Sensor_Scan_Initialize 1AC1                                 _WDT_Initialize 1AAE  
                                        _errno 01A8                                          _fputc 1EC2  
                                        _fputs 1D19                                          pad@fp 002B  
                              ??_StartStop_Fan 0070                                          _width 01AC  
                                        _putch 0003                                          _sqrtf 0D0C  
                                        nanf@s 0070                                          nanf@u 0074  
                              __end_of_isupper 0800                                          pclath 000A  
                         _Sensor_Sampled_Reset 1B0E                                          status 0003  
                                        wtemp0 007E                                __end_of_sprintf 102D  
                               ?___fpclassifyf 0070                                __end_of_tolower 1D19  
                              _TMR2_StartTimer 1AA2                                __end_of_strncmp 2000  
                              __initialization 001B                    TX_Whole_String@input_string 0079  
                                 __end_of_main 137F                                   __end_of_nanf 1BC3  
                                 __end_of_tiny 1820                                 ?_Init_Function 0070  
                      _EUSART_is_tx_ready$1151 0070                                 ??_EUSART_Write 0070  
                      __end_of_TMR2_Initialize 1BB2                    ?_INTERRUPT_InterruptManager 0070  
                       ?_Measure_R_PT100_2Wire 00D0             CalcRequiredDelayForTrigTRIAC@delay 00DD  
                               main@Temp_PT100 01DC               __end_of_MTOUCH_Button_Initialize 1DF3  
                     _TMR2_SetInterruptHandler 1ADE                                         ??_main 01D2  
                                       ??_nanf 0074                     __end_of_StartStop_AlarmLED 1B31  
                      _MTOUCH_Sensor_Calibrate 0002                                     _V_cc_const 1824  
         MTOUCH_Sensor_Sampled_ResetAll@sensor 0072                         __end_of_WDT_Initialize 1AB2  
                __size_of_ADC_IsConversionDone 0006                      __size_of_StartStop_Buzzer 0008  
            _EUSART_DefaultFramingErrorHandler 0000                                         _ADCON0 009D  
                                       _ADCON1 009E                     _EUSART_OverrunErrorHandler 0255  
                                       ?_fputc 0070                                         ?_fputs 0078  
                                       _ADRESH 009C                                         _ADRESL 009B  
                             ___awdiv@dividend 0072                                         _ANSELA 018C  
                                       ?_putch 0070                                         _ANSELB 018D  
                                       _ANSELC 018E                                         ?_sqrtf 004E  
                                       _BORCON 0116                                         i1l5062 1B69  
                        ?_Sensor_Sampled_Reset 0070                     __end_of_EUSART_is_tx_ready 1B3C  
                                       u602_25 1C6A                                         _OSCCON 0099  
                                       _SPBRGH 019C                                         _SPBRGL 019B  
                                       _WDTCON 0097              MTOUCH_Button_InitializeAll@button 007B  
                             __end_of___xxtofl 121F                                         _Buff_g 0220  
                       _Button_DefaultCallback 0000                        __end_of_TX_Whole_String 1DBD  
                   __end_of_ChangeADCtoVoltage 1E35                         _Sensor_DefaultCallback 0000  
                                 vfprintf@cfmt 016D                                  _packet_sample 01B8  
                                       ___flge 076E                                         ___bmul 1BD4  
                                       ___fleq 1E7A                                      ??___fladd 0042  
                             TX_Command@txData 0071                                      ??___fldiv 005A  
                                    ??___awdiv 0074                                      ??___flneg 0074  
                                    ??___awmod 0074                                      ??___flmul 0028  
                                    ??___flsub 007E                                      ??___fltol 00D4  
                                       _efgtoa 004E                                    ?_TX_Command 0070  
                                       _floorf 0841                                         _memcpy 1D66  
                             ___awdiv@quotient 0077                                ___awmod@divisor 0070  
                              ___awmod@counter 0075                                         pad@buf 0024  
                                       _strcpy 1CB8                                         _strlen 1C2F  
                   __end_of_Zero_Detection_isr 1AA8                                         fputc@c 0070  
                                       fputs@c 0020                                         fputs@i 0021  
                                       fputs@s 0023                             __size_of__Umul8_16 001F  
                              ___fpclassifyf@e 0020                                ___fpclassifyf@u 0022  
                              ___fpclassifyf@x 0070                                ?_WDT_Initialize 0070  
                   Read_ADC_Num@convertedValue 0074                                      ??_isupper 0072  
                                       putch@c 0070                               __end_of_vfprintf 0841  
                            _TMR2_Period_const 1820                        __end_of_TMR2_StartTimer 1AA5  
                                       sqrtf@i 00A8                                         sqrtf@m 00BC  
     TMR2_SetInterruptHandler@InterruptHandler 0070     IOCAF2_SetInterruptHandler@InterruptHandler 0070  
                                       sqrtf@q 00B0                                         sqrtf@r 00C0  
                                       sqrtf@s 00A4                                         sqrtf@t 00B4  
                                       sqrtf@x 004E                                         sqrtf@z 00B8  
                             ?_PIN_MANAGER_IOC 0070                                      ??_sprintf 016F  
                                    ??_tolower 0078                                      ??_strncmp 0074  
                                 ??_IOCAF2_ISR 0070          __end_of_CalcRequiredDelayForTrigTRIAC 12C6  
       __size_of_CalcRequiredDelayForTrigTRIAC 00A7                  _CalcRequiredDelayForTrigTRIAC 121F  
             CalcRequiredDelayForTrigTRIAC@ret 00E1                                     ___flge@ff1 003A  
                                   ___flge@ff2 003E                                ??___fpclassifyf 0074  
                                 ___xxtofl@arg 007A                                   ___xxtofl@exp 0079  
                            _SYSTEM_Initialize 1C1A                                   ___xxtofl@val 0070  
                                   ___fleq@ff1 0070                                     ___fleq@ff2 0074  
                 __end_of_Tolerance_Temp_const 1830                        __end_of__initialization 004A  
                                   ___flneg@f1 0070                 ?_MTOUCH_Sensor_Scan_Initialize 0070  
                           ?_SYSTEM_Initialize 0070                            _Button_StateMachine 0244  
                                   ___fltol@f1 00D0                  MTOUCH_Sensor_Calibrate@sensor 0070  
                          ___bmul@multiplicand 0070                                ??_Init_Function 0071  
                 __size_of_ADC_StartConversion 0003                                 __pcstackCOMMON 0070  
                                 __pidataBANK3 0800                                   __pidataBANK4 1B93  
                          ??_SYSTEM_Initialize 007C                                      ?_TMR2_ISR 0070  
                         __end_of_Read_ADC_Num 1BD4                                  __end_of_fputc 1F0E  
                                __end_of_fputs 1D3E               __end_of_MTOUCH_Sensor_Initialize 1C07  
                                __end_of_putch 0004                      ??_MTOUCH_Sensor_Calibrate 0070  
                                __end_of_sqrtf 1000                               ?_TMR2_Initialize 0070  
                           __end_of_IOCAF2_ISR 1B6C                        _ADC_GetConversionResult 1AB2  
                               _OPTION_REGbits 0095                      __end_of_TMR2_Period_const 1824  
                      StartStop_AlarmLED@OnOff 0070                    ?_IOCAF2_SetInterruptHandler 0070  
                     _MTOUCH_Button_Initialize 1DBD               ??_IOCAF2_DefaultInterruptHandler 0070  
              ?_IOCAF2_DefaultInterruptHandler 0070                ??_EUSART_SetOverrunErrorHandler 0072  
                      _Button_State_NotPressed 0000                  __size_of_MTOUCH_Sensor_Enable 0011  
                                      ??_fputc 0073                      __end_of_SYSTEM_Initialize 1C2F  
                            _lowpowerActivated 01BD                                        ??_fputs 0079  
                       ??_Sensor_Sampled_Reset 0070                                        ??_putch 0070  
                                      ??_sqrtf 0052                                     __pbssBANK3 01A0  
                                   __pbssBANK4 0220                                     __pbssBANK5 02A0  
                         __end_of_EUSART_Write 1B1E                            __size_of_TX_Command 000B  
                   __end_of_mtouch_button_init 1810                            TMR2_Int_isr@counter 01B2  
                            __end_of__Umul8_16 1CB8                               ?_TX_Whole_String 0070  
                                   __pmaintext 12C6                                        ?___flge 003A  
                                      ?___bmul 0070                                        ?___fleq 0070  
                                   ??_TMR2_ISR 0070                                     __pintentry 0004  
                                      ?_efgtoa 00E4                                        ?_floorf 00D0  
                                      ?_memcpy 0070                                        _BAUDCON 019F  
          __end_of_MTOUCH_Button_InitializeAll 1C60                    _MTOUCH_Button_InitializeAll 1C47  
                                      _APFCON0 011D                                        _APFCON1 011E  
          __end_of_MTOUCH_Sensor_InitializeAll 1B93                    _MTOUCH_Sensor_InitializeAll 1B86  
                      __size_of_ADC_Initialize 0007                                        ?_strcpy 0070  
                                      ?_strlen 0070                                      ?___xxtofl 0070  
                           __size_of_vfpfcnvrt 01E0                                        _OSCTUNE 0098  
                             _StartStop_Buzzer 1AFE                        __size_of_TMR2_StopTimer 0003  
                     ??_EUSART_SetErrorHandler 0072                               ?_TMR2_StartTimer 0070  
               ?_CalcRequiredDelayForTrigTRIAC 00D9                                        _R_const 1830  
                         _ADC_InterruptHandler 01B6                                 _packet_counter 01BF  
                   ??_TMR2_SetInterruptHandler 0072                        ??_Measure_R_PT100_2Wire 007E  
                              __size_of___flge 007B                                __size_of___bmul 0011  
                              __size_of___fleq 0048                                        ___fladd 0913  
                                      ___fldiv 144F                                        ___awdiv 1F5E  
                                      ___flneg 1B1E                                        ___awmod 1E35  
                                      ___flmul 0AF4                                        ___flsub 1C7C  
                                      ___fltol 102D                 MTOUCH_Button_Initialize@button 0073  
                                    ?_vfprintf 00ED                                  ?_TMR2_Int_isr 0070  
                              __size_of_efgtoa 0720                      ??_ADC_GetConversionResult 0072  
                              __size_of_floorf 00D2                                __size_of_memcpy 002B  
                                      __ptext1 1001                                        __ptext2 080A  
                                      __ptext3 1620                                        __ptext4 1FAF  
                                      __ptext5 004E                                        __ptext6 1CF8  
                                      __ptext7 07E9                                        __ptext8 1CB8  
                                      __ptext9 1F0E                           _Tolerance_Temp_const 182C  
                              __size_of_strcpy 001F                                __size_of_strlen 0018  
                     _MTOUCH_Sensor_Initialize 1BF6                          _OSCILLATOR_Initialize 1AF7  
                                    _T2CONbits 001C                                   __size_of_pad 0050  
  CalcRequiredDelayForTrigTRIAC@dim_percentage 00D9                                     ??___xxtofl 0074  
                             ___awmod@dividend 0072                       ??_PIN_MANAGER_Initialize 0072  
                                    _IOCAFbits 0393                                        _isupper 07E9  
                                      efgtoa@c 00E8                                        efgtoa@d 0138  
                                      efgtoa@e 0151                                        efgtoa@f 00E4  
                                    _IOCANbits 0392                                        efgtoa@g 014D  
                                      efgtoa@h 0143                                        efgtoa@i 014B  
                                      efgtoa@l 0147                                        efgtoa@m 0132  
                                      efgtoa@n 0153                                        efgtoa@p 013D  
                                      efgtoa@t 012C                                        efgtoa@u 0155  
                                      efgtoa@w 013F                                      _IOCAPbits 0391  
            MTOUCH_Sensor_InitializeAll@sensor 0079                               _callback_sampled 01EA  
                   __size_of_SYSTEM_Initialize 0015                                        _sprintf 1001  
                                      _tolower 1CF8                                        clrloop0 1AE5  
                                      _strncmp 1FAF                               _callback_pressed 01E4  
               MTOUCH_Sensor_Initialize@sensor 0077                           end_of_initialization 004A  
                                      floorf@e 00DE                                        floorf@m 00DA  
                                      floorf@u 00E0                                        floorf@x 00D0  
        __end_of_EUSART_SetOverrunErrorHandler 1AC1         __size_of_EUSART_SetOverrunErrorHandler 0005  
                _EUSART_SetOverrunErrorHandler 1ABC                             _StartStop_AlarmLED 1B27  
                                      memcpy@d 0079                          __end_of_StartStop_Fan 1B0E  
                                      memcpy@n 0072                                        memcpy@s 0075  
                                      fputc@fp 0072                                        init_ram 1AEA  
                                      fputs@fp 0078                                        initloop 1AEB  
            __size_of_Measure_Temp_PT100_2Wire 00D0                      ?_Measure_Temp_PT100_2Wire 00D0  
                            _EUSART_Initialize 1CD7                          __size_of_Read_ADC_Num 0011  
                 __end_of_ADC_IsConversionDone 1AD2                            ?_StartStop_AlarmLED 0070  
                           ?_EUSART_Initialize 0070                              __end_of_vfpfcnvrt 1800  
                                   efgtoa@mode 0142                                     efgtoa@sign 013A  
                               ??_TMR2_Int_isr 0070                             _EUSART_is_tx_ready 1B31  
                          _mtouch_request_init 01BB                Measure_Temp_PT100_2Wire@R_PT100 00D0  
                                   ??_vfprintf 016A                                   ??_TX_Command 0071  
                                      sqrtf@ix 00C4                               TX_Whole_String@i 007A  
                                      strcpy@d 0076                                        strlen@a 0073  
                                      strcpy@s 0074                                        strlen@s 0074  
                          ??_EUSART_Initialize 0072                               ??_WDT_Initialize 0070  
                                    _PORTCbits 000E                            ?_EUSART_is_tx_ready 0070  
                                  ___fladd@grs 004D                             _ChangeADCtoVoltage 1DF3  
                         ??_StartStop_AlarmLED 0070                                  ___xxtofl@sign 0078  
                        __size_of_EUSART_Write 0008                     MTOUCH_Sensor_Enable@sensor 0075  
                          _ADC_StartConversion 1AAB                                    ___fldiv@grs 0066  
                                  ___fldiv@rem 005F                            _callback_notPressed 01E2  
              __size_of_EUSART_SetErrorHandler 0005                            ?_ChangeADCtoVoltage 00D0  
            __end_of_HalfCycleACDuration_const 182C                                   _Read_ADC_Num 1BC3  
                           _sensor_globalFlags 01C1                             _Zero_Detection_isr 1AA5  
                                  ___flmul@grs 002F                      __end_of_EUSART_Initialize 1CF8  
                           __end_of_TX_Command 1B47                           ??_EUSART_is_tx_ready 0070  
                                    _TXSTAbits 019E                             StartStop_Fan@OnOff 0070  
                          ?_Zero_Detection_isr 0070                           ?_ADC_StartConversion 0070  
                         ??_ChangeADCtoVoltage 007E           __end_of_TMR2_DefaultInterruptHandler 1001  
        __size_of_TMR2_DefaultInterruptHandler 0001                   _TMR2_DefaultInterruptHandler 1000  
                         _Button_State_Pressed 0000                                 __end_of___flge 07E9  
                               __end_of___bmul 1BE5                                 __end_of___fleq 1EC2  
                   _EUSART_DefaultErrorHandler 0000                                    vfpfcnvrt@ap 006F  
                                  vfpfcnvrt@ct 0165                                    vfpfcnvrt@fp 0169  
                   ??_MTOUCH_Button_Initialize 0070                ??_MTOUCH_Sensor_Scan_Initialize 0070  
                               __end_of_efgtoa 076E                                   _EUSART_Write 1B16  
                            __size_of_TMR2_ISR 000C                                 _ADC_Initialize 1AF0  
                               __end_of_floorf 0913                                 __end_of_memcpy 1D91  
                       ?_OSCILLATOR_Initialize 0070                                     floorf@F527 01A0  
                               __end_of_strcpy 1CD7                                 __end_of_strlen 1C47  
                          start_initialization 001B                           ??_Zero_Detection_isr 0070  
              __size_of_PIN_MANAGER_Initialize 0028                                    __end_of_pad 1F5E  
                               _TMR2_StopTimer 1AA8                          __end_of___fpclassifyf 118A  
                     __size_of_PIN_MANAGER_IOC 0006         __end_of_IOCAF2_DefaultInterruptHandler 1AA2  
      __size_of_IOCAF2_DefaultInterruptHandler 0001                 _IOCAF2_DefaultInterruptHandler 1AA1  
                _Measure_Temp_PT100_2Wire$2710 00DC                  _Measure_Temp_PT100_2Wire$2711 00E0  
                _Measure_Temp_PT100_2Wire$2709 00D8                 ?_EUSART_SetOverrunErrorHandler 0070  
                        ??_ADC_StartConversion 0070                             __end_of_V_cc_const 1828  
                 __end_of_MTOUCH_Sensor_Enable 1BF6                                    vfprintf@fmt 00ED  
                   _EUSART_FramingErrorHandler 0257                                       ??___flge 0042  
                                     ??___bmul 0071                                       ??___fleq 0078  
                     __end_of_StartStop_Buzzer 1B06                         _EUSART_SetErrorHandler 1AB7  
                        __end_of_Init_Function 1B86                                       ??_efgtoa 00E9  
                       __end_of_ADC_Initialize 1AF7                                      __Umul8_16 1C99  
                                  __pdataBANK3 01E2                                    __pdataBANK4 0244  
                                     ??_floorf 00D4                                       ??_memcpy 0074  
                ?_TMR2_DefaultInterruptHandler 0070                             _mtouch_button_init 1800  
                   Sensor_Sampled_Reset@sensor 0070                                       ??_strcpy 0072  
                                     ??_strlen 0072                                      ___fladd@a 003E  
                                    ___fladd@b 003A                                      ___fldiv@a 00C8  
                                    ___fldiv@b 00CC                         __end_of_TMR2_StopTimer 1AAB  
                                    ___flmul@a 0024                                      ___flmul@b 0020  
                                    ___flsub@a 004E                                      ___flsub@b 0052  
                                    ___latbits 0002                                  __pcstackBANK0 0020  
                                __pcstackBANK1 00A0                                  __pcstackBANK2 0120  
                                __pcstackBANK3 01C3                           _ADC_IsConversionDone 1ACC  
                     __size_of_TMR2_Initialize 0010                              __size_of___xxtofl 0095  
                         __end_of_TMR2_Int_isr 1C7C                  __size_of_Sensor_Sampled_Reset 0008  
                   __size_of_EUSART_Initialize 0021                      _Button_State_Initializing 0000  
                                    __pnvBANK3 01EC                                      __pnvBANK4 0253  
                                  _efgtoa$2211 0124                                    _efgtoa$2205 0120  
                                  _efgtoa$2206 0122                                    _efgtoa$2215 0126  
                                  _efgtoa$2216 0128                                    _efgtoa$2217 012A  
                       _PIN_MANAGER_Initialize 1D3E                       ?_MTOUCH_Sensor_Calibrate 0070  
                            _ADC_SelectChannel 1B6C                     ??_MTOUCH_Sensor_Initialize 0076  
                                     ?___fladd 003A                                       ?___fldiv 00C8  
                                     ?___awdiv 0070                                       ?___flneg 0070  
                                     ?___awmod 0070                                       ?___flmul 0020  
                                     ?___flsub 004E                                       ?___fltol 00D0  
                                   ?__Umul8_16 0070                                ?_ADC_Initialize 0070  
               __size_of_Measure_R_PT100_2Wire 0075                             ?_ADC_SelectChannel 0070  
                __end_of_Measure_R_PT100_2Wire 1112                   ??_INTERRUPT_InterruptManager 0070  
                     __size_of_TX_Whole_String 002C                              __size_of_vfprintf 0037  
                          ??_ADC_SelectChannel 0070                                ?_TMR2_StopTimer 0070  
                        ?_ADC_IsConversionDone 0070               __end_of_Measure_Temp_PT100_2Wire 144F  
                                     ?_isupper 0070                                       ?_sprintf 01C3  
                                     ?_tolower 0076                                 __size_of_fputc 004C  
                               __size_of_fputs 0025                                       ?_strncmp 0070  
                               __size_of_putch 0001                                 __size_of_sqrtf 02F4  
       EUSART_SetErrorHandler@interruptHandler 0070                                       _LATCbits 010E  
                           _currentScannSensor 01C0                                      clear_ram0 1AE4  
                                     _PIE1bits 0091                              _eusartRxLastError 01BA  
                     __size_of_TMR2_StartTimer 0003                      __end_of_ADC_SelectChannel 1B79  
          __size_of_INTERRUPT_InterruptManager 0015                                       _PIR1bits 0011  
              ??_EUSART_SetFramingErrorHandler 0072         __end_of_MTOUCH_Sensor_Sampled_ResetAll 1C1A  
      __size_of_MTOUCH_Sensor_Sampled_ResetAll 0013                 _MTOUCH_Sensor_Sampled_ResetAll 1C07  
            _EUSART_DefaultOverrunErrorHandler 0000                                       _TMR2_ISR 1B47  
                            ??_PIN_MANAGER_IOC 0070                             _mtouch_time_toScan 01BC  
                                    _vfpfcnvrt 1620                                     _ADCON0bits 009D  
                     ADC_SelectChannel@channel 0071                 ??_TMR2_DefaultInterruptHandler 0070  
            __size_of_TMR2_SetInterruptHandler 0006                      ?_TMR2_SetInterruptHandler 0070  
                         _MTOUCH_Sensor_Enable 1BE5                                     vfpfcnvrt@c 0168  
                                   vfpfcnvrt@f 0161                              ??_TMR2_Initialize 0072  
                        StartStop_Buzzer@OnOff 0070                              _MTOUCH_Initialize 1B53  
              __end_of_MTOUCH_Sensor_Calibrate 0003                   ChangeADCtoVoltage@ADC_number 00D0  
                           ?_MTOUCH_Initialize 0070                                      memcpy@tmp 0077  
                                   vfprintf@ap 00EF                                     vfprintf@fp 016C  
                     ?_ADC_GetConversionResult 0070                                   _sample_delay 01BE  
                    _HalfCycleACDuration_const 1828                        ??_OSCILLATOR_Initialize 0070  
                                  ??__Umul8_16 0072                            _EUSART_ErrorHandler 0253  
                             __size_of___fladd 01E1                            ??_MTOUCH_Initialize 007C  
                             __size_of___fldiv 01D1                               __size_of___awdiv 0051  
                             __size_of___flneg 0009                               __size_of___awmod 0045  
                             __size_of___flmul 0218                               __size_of___flsub 001D  
                             __size_of___fltol 0070                                     ?_vfpfcnvrt 006E  
                       __size_of_StartStop_Fan 0008                             ___fpclassifyf@F465 01A4  
                       ??_ADC_IsConversionDone 0070                                     sprintf@fmt 01C3  
                      _IOCAF2_InterruptHandler 01EE                                       ___xxtofl 118A  
                        __size_of_TMR2_Int_isr 001C                  Measure_R_PT100_2Wire@ADC_volt 00D0  
                                 _Sensor_scanA 01E8                                   _Sensor_scanB 01E6  
                  __size_of_StartStop_AlarmLED 000A                          ?_MTOUCH_Sensor_Enable 0070  
                            ??_TX_Whole_String 0075                   ??_IOCAF2_SetInterruptHandler 0072  
                                     __ptext10 1D19                                       __ptext11 1EC2  
                                     __ptext20 1C2F                                       __ptext12 0003  
                                     __ptext21 1B3C                                       __ptext13 0841  
                                     __ptext30 1AF7                                       __ptext22 1B31  
                                     __ptext14 1112                                       __ptext31 1B53  
                                     __ptext23 1B16                                       __ptext15 1B1E  
                                     __ptext40 1D66                                       __ptext32 1AC1  
                                     __ptext24 1C1A                                       __ptext16 1E7A  
                                     __ptext41 1DBD                                       __ptext33 1C07  
                                     __ptext25 1AAE                                       __ptext17 1E35  
                                     __ptext50 1AB2                                       __ptext42 0002  
                                     __ptext34 1B86                                       __ptext26 1BA2  
                                     __ptext18 1F5E                                       __ptext51 137F  
                                     __ptext43 1CD7                                       __ptext35 1BF6  
                                     __ptext27 1ADE                                       __ptext19 1D91  
                                     __ptext60 1DF3                                       __ptext52 0D0C  
                                     __ptext44 1ABC                                       __ptext36 1B0E  
                                     __ptext28 1D3E                                       __ptext61 118A  
                                     __ptext53 1BB2                                       __ptext45 1AD2  
                                     __ptext37 1BE5                                       __ptext29 1AD8  
                                     __ptext70 1B6C                                       __ptext62 121F  
                                     __ptext54 076E                                       __ptext46 1AB7  
                                     __ptext38 1BD4                                       __ptext63 102D  
                                     __ptext55 109D                                       __ptext47 1AF0  
                                     __ptext39 1C47                                       __ptext80 1AA2  
                                     __ptext72 1B47                                       __ptext64 1C7C  
                                     __ptext56 1B79                                       __ptext48 1BC3  
                                     __ptext73 1000                                       __ptext65 0913  
                                     __ptext57 1B06                                       __ptext49 1ACC  
                                     __ptext74 1C60                                       __ptext66 0AF4  
                                     __ptext58 1AFE                                       __ptext75 1AA8  
                                     __ptext67 1C99                                       __ptext59 1B27  
                                     __ptext76 1AC6                                       __ptext68 144F  
                                     __ptext77 1B5F                                       __ptext69 1AAB  
                                     __ptext78 1AA1                                       __ptext79 1AA5  
                             __size_of_isupper 0017                                     _IOCAF2_ISR 1B5F  
                             __size_of_sprintf 002C                               __size_of_tolower 0021  
                     _Measure_Temp_PT100_2Wire 137F                      __end_of_MTOUCH_Initialize 1B5F  
                                   strcpy@dest 0077                               __size_of_strncmp 0051  
                                __size_of_main 00B9                                  __size_of_nanf 0011  
                  __size_of_EUSART_is_tx_ready 000B                        ?_EUSART_SetErrorHandler 0070  
                   __size_of_ADC_SelectChannel 000D                                       efgtoa@fp 013C  
                                     efgtoa@ne 0130                                       efgtoa@pp 012E  
                                     efgtoa@ou 0134  EUSART_SetOverrunErrorHandler@interruptHandler 0070  
                                     int$flags 007E                              ?_StartStop_Buzzer 0070  
                  __size_of_ChangeADCtoVoltage 0042                                       _vfprintf 080A  
                            ??_TMR2_StartTimer 0070             __end_of_INTERRUPT_InterruptManager 0019  
                   _INTERRUPT_InterruptManager 0004                                   _TMR2_Int_isr 1C60  
        __end_of_EUSART_SetFramingErrorHandler 1AD8         __size_of_EUSART_SetFramingErrorHandler 0006  
                _EUSART_SetFramingErrorHandler 1AD2                             ??_StartStop_Buzzer 0070  
          __size_of_IOCAF2_SetInterruptHandler 0006                   ?_MTOUCH_Button_InitializeAll 0070  
                 ?_MTOUCH_Sensor_InitializeAll 0070                                 _vfpfcnvrt$2234 015F  
                                _mtouch_button 0234                                     _INTCONbits 000B  
                                _mtouch_sensor 024A                                       memcpy@d1 0078  
                                     memcpy@s1 0070                    __size_of_Zero_Detection_isr 0003  
                               __pstringtext10 1838                                 __pstringtext11 183C  
                               __pstringtext12 1840                                 __pstringtext13 1844  
                               __pstringtext14 0000                        __size_of_WDT_Initialize 0004  
                 MTOUCH_Button_Initialize@name 0072              __size_of_MTOUCH_Button_Initialize 0036  
                                     intlevel1 0000                      ?_MTOUCH_Button_Initialize 0070  
                                    sprintf@ap 01CC                    __end_of_ADC_StartConversion 1AAE  
                      ?_PIN_MANAGER_Initialize 0070                                  _StartStop_Fan 1B06  
              __end_of_ADC_GetConversionResult 1AB7                 __end_of_EUSART_SetErrorHandler 1ABC  
                                    strcpy@src 0070                              MTOUCH_Random@seed 01C2  
                                     isupper@c 0070                                      strncmp@_l 0075  
                                    strncmp@_r 0070                               ??_ADC_Initialize 0070  
                                  efgtoa@nmode 0141  EUSART_SetFramingErrorHandler@interruptHandler 0070  
                 Measure_R_PT100_2Wire@R_PT100 006C                                   main@ADC_volt 01D4  
                 __end_of_Sensor_Sampled_Reset 1B16                                    ??_vfpfcnvrt 0159  
                             ??_TMR2_StopTimer 0070                                  __pstringtext1 181C  
                                __pstringtext2 1820                                  __pstringtext3 1824  
                                __pstringtext4 1800                                  __pstringtext5 1828  
                                __pstringtext6 182C                                  __pstringtext7 1830  
                                __pstringtext8 1810                                  __pstringtext9 1834  
                       __Umul8_16@multiplicand 0070                                       sprintf@f 01CD  
                                     tolower@c 0076                                       sprintf@s 01CB  
                       __size_of___fpclassifyf 0078                  ??_MTOUCH_Button_InitializeAll 007A  
                ??_MTOUCH_Sensor_InitializeAll 0078               __size_of_MTOUCH_Sensor_Calibrate 0001  
                       ??_MTOUCH_Sensor_Enable 0074                                       strncmp@l 0078  
                                     strncmp@n 0072                                       strncmp@r 0076  
                                  main@ADC_num 01E0                                  ___fladd@signs 004A  
                                  ?_IOCAF2_ISR 0070                             EUSART_Write@txData 0070  
                   __size_of_MTOUCH_Initialize 000C             Measure_Temp_PT100_2Wire@Temp_PT100 00D4  
                       __size_of_Init_Function 000D                 __end_of_PIN_MANAGER_Initialize 1D66  
                        sqrtf@__xc8_float_word 00AC                                 ?_StartStop_Fan 0070  
                                 ___fladd@aexp 004B                                   ___fladd@bexp 004C  
                              _PIN_MANAGER_IOC 1AC6                           __Umul8_16@multiplier 0078  
                        _TMR2_InterruptHandler 01EC                                    main@R_PT100 01D8  
                            __Umul8_16@product 0074  
